package androidx.work.impl.model;

import android.arch.lifecycle.LiveData;
import android.arch.persistence.db.SupportSQLiteStatement;
import android.arch.persistence.room.EntityInsertionAdapter;
import android.arch.persistence.room.RoomDatabase;
import android.arch.persistence.room.RoomSQLiteQuery;
import android.arch.persistence.room.SharedSQLiteStatement;
import android.arch.persistence.room.util.StringUtil;
import android.database.Cursor;
import android.support.v4.util.ArrayMap;
import androidx.work.Constraints;
import androidx.work.Data;
import androidx.work.WorkInfo;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public class WorkSpecDao_Impl implements WorkSpecDao {
  private final RoomDatabase __db;
  
  private final EntityInsertionAdapter __insertionAdapterOfWorkSpec;
  
  private final SharedSQLiteStatement __preparedStmtOfDelete;
  
  private final SharedSQLiteStatement __preparedStmtOfIncrementWorkSpecRunAttemptCount;
  
  private final SharedSQLiteStatement __preparedStmtOfMarkWorkSpecScheduled;
  
  private final SharedSQLiteStatement __preparedStmtOfPruneFinishedWorkWithZeroDependentsIgnoringKeepForAtLeast;
  
  private final SharedSQLiteStatement __preparedStmtOfResetScheduledState;
  
  private final SharedSQLiteStatement __preparedStmtOfResetWorkSpecRunAttemptCount;
  
  private final SharedSQLiteStatement __preparedStmtOfSetOutput;
  
  private final SharedSQLiteStatement __preparedStmtOfSetPeriodStartTime;
  
  public WorkSpecDao_Impl(RoomDatabase paramRoomDatabase) {
    this.__db = paramRoomDatabase;
    this.__insertionAdapterOfWorkSpec = new Object(this, paramRoomDatabase);
    this.__preparedStmtOfDelete = new Object(this, paramRoomDatabase);
    this.__preparedStmtOfSetOutput = new Object(this, paramRoomDatabase);
    this.__preparedStmtOfSetPeriodStartTime = new Object(this, paramRoomDatabase);
    this.__preparedStmtOfIncrementWorkSpecRunAttemptCount = new Object(this, paramRoomDatabase);
    this.__preparedStmtOfResetWorkSpecRunAttemptCount = new Object(this, paramRoomDatabase);
    this.__preparedStmtOfMarkWorkSpecScheduled = new Object(this, paramRoomDatabase);
    this.__preparedStmtOfResetScheduledState = new Object(this, paramRoomDatabase);
    this.__preparedStmtOfPruneFinishedWorkWithZeroDependentsIgnoringKeepForAtLeast = new Object(this, paramRoomDatabase);
  }
  
  private void __fetchRelationshipWorkTagAsjavaLangString(ArrayMap<String, ArrayList<String>> paramArrayMap) {
    Set set = paramArrayMap.keySet();
    if (set.isEmpty())
      return; 
    if (paramArrayMap.size() > 999) {
      byte b2;
      ArrayMap arrayMap = new ArrayMap(999);
      int j = paramArrayMap.size();
      byte b1 = 0;
      while (true) {
        b2 = 0;
        while (b1 < j) {
          arrayMap.put(paramArrayMap.keyAt(b1), paramArrayMap.valueAt(b1));
          byte b3 = b1 + 1;
          byte b4 = b2 + true;
          b1 = b3;
          b2 = b4;
          if (b4 == 'Ï§') {
            __fetchRelationshipWorkTagAsjavaLangString(arrayMap);
            arrayMap = new ArrayMap(999);
            b1 = b3;
          } 
        } 
        break;
      } 
      if (b2 > 0)
        __fetchRelationshipWorkTagAsjavaLangString(arrayMap); 
      return;
    } 
    StringBuilder stringBuilder = StringUtil.newStringBuilder();
    stringBuilder.append("SELECT `tag`,`work_spec_id` FROM `WorkTag` WHERE `work_spec_id` IN (");
    int i = set.size();
    StringUtil.appendPlaceholders(stringBuilder, i);
    stringBuilder.append(")");
    RoomSQLiteQuery roomSQLiteQuery = RoomSQLiteQuery.acquire(stringBuilder.toString(), i + 0);
    Iterator iterator = set.iterator();
    for (i = 1; iterator.hasNext(); i++) {
      String str = (String)iterator.next();
      if (str == null) {
        roomSQLiteQuery.bindNull(i);
      } else {
        roomSQLiteQuery.bindString(i, str);
      } 
    } 
    cursor = this.__db.query(roomSQLiteQuery);
    try {
      i = cursor.getColumnIndex("work_spec_id");
      if (i == -1)
        return; 
      while (cursor.moveToNext()) {
        if (!cursor.isNull(i)) {
          ArrayList arrayList = (ArrayList)paramArrayMap.get(cursor.getString(i));
          if (arrayList != null)
            arrayList.add(cursor.getString(0)); 
        } 
      } 
      return;
    } finally {
      cursor.close();
    } 
  }
  
  public void delete(String paramString) {
    supportSQLiteStatement = this.__preparedStmtOfDelete.acquire();
    this.__db.beginTransaction();
    if (paramString == null)
      try {
        supportSQLiteStatement.bindNull(1);
        supportSQLiteStatement.executeUpdateDelete();
        this.__db.setTransactionSuccessful();
        return;
      } finally {
        this.__db.endTransaction();
        this.__preparedStmtOfDelete.release(supportSQLiteStatement);
      }  
    supportSQLiteStatement.bindString(1, paramString);
    supportSQLiteStatement.executeUpdateDelete();
    this.__db.setTransactionSuccessful();
    this.__db.endTransaction();
    this.__preparedStmtOfDelete.release(supportSQLiteStatement);
  }
  
  public List<String> getAllUnfinishedWork() {
    roomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT id FROM workspec WHERE state NOT IN (2, 3, 5)", 0);
    cursor = this.__db.query(roomSQLiteQuery);
    try {
      arrayList = new ArrayList(cursor.getCount());
      while (cursor.moveToNext())
        arrayList.add(cursor.getString(0)); 
      return arrayList;
    } finally {
      cursor.close();
      roomSQLiteQuery.release();
    } 
  }
  
  public List<String> getAllWorkSpecIds() {
    roomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT id FROM workspec", 0);
    cursor = this.__db.query(roomSQLiteQuery);
    try {
      arrayList = new ArrayList(cursor.getCount());
      while (cursor.moveToNext())
        arrayList.add(cursor.getString(0)); 
      return arrayList;
    } finally {
      cursor.close();
      roomSQLiteQuery.release();
    } 
  }
  
  public List<WorkSpec> getEligibleWorkForScheduling(int paramInt) {
    String str;
    RoomSQLiteQuery roomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT * FROM workspec WHERE state=0 AND schedule_requested_at=-1 LIMIT (SELECT MAX(?-COUNT(*), 0) FROM workspec WHERE schedule_requested_at<>-1 AND state NOT IN (2, 3, 5))", 1);
    roomSQLiteQuery.bindLong(1, paramInt);
    Cursor cursor = this.__db.query(roomSQLiteQuery);
    try {
      int m = cursor.getColumnIndexOrThrow("id");
      int i7 = cursor.getColumnIndexOrThrow("state");
      int k = cursor.getColumnIndexOrThrow("worker_class_name");
      int i8 = cursor.getColumnIndexOrThrow("input_merger_class_name");
      int i9 = cursor.getColumnIndexOrThrow("input");
      int i6 = cursor.getColumnIndexOrThrow("output");
      int i5 = cursor.getColumnIndexOrThrow("initial_delay");
      int i4 = cursor.getColumnIndexOrThrow("interval_duration");
      int n = cursor.getColumnIndexOrThrow("flex_duration");
      int i3 = cursor.getColumnIndexOrThrow("run_attempt_count");
      int i2 = cursor.getColumnIndexOrThrow("backoff_policy");
      int i = cursor.getColumnIndexOrThrow("backoff_delay_duration");
      int i1 = cursor.getColumnIndexOrThrow("period_start_time");
      int j = cursor.getColumnIndexOrThrow("minimum_retention_duration");
      try {
        paramInt = cursor.getColumnIndexOrThrow("schedule_requested_at");
        int i10 = cursor.getColumnIndexOrThrow("required_network_type");
        int i12 = cursor.getColumnIndexOrThrow("requires_charging");
        int i11 = cursor.getColumnIndexOrThrow("requires_device_idle");
        int i14 = cursor.getColumnIndexOrThrow("requires_battery_not_low");
        int i15 = cursor.getColumnIndexOrThrow("requires_storage_not_low");
        int i16 = cursor.getColumnIndexOrThrow("trigger_content_update_delay");
        int i17 = cursor.getColumnIndexOrThrow("trigger_max_content_delay");
        int i18 = cursor.getColumnIndexOrThrow("content_uri_triggers");
        str = new ArrayList(cursor.getCount());
        int i13 = j;
        j = i7;
        while (true) {
          if (cursor.moveToNext()) {
            boolean bool;
            String str1 = cursor.getString(m);
            String str2 = cursor.getString(k);
            Constraints constraints = new Constraints();
            constraints.setRequiredNetworkType(WorkTypeConverters.intToNetworkType(cursor.getInt(i10)));
            if (cursor.getInt(i12) != 0) {
              bool = true;
            } else {
              bool = false;
            } 
            constraints.setRequiresCharging(bool);
            if (cursor.getInt(i11) != 0) {
              bool = true;
            } else {
              bool = false;
            } 
            constraints.setRequiresDeviceIdle(bool);
            if (cursor.getInt(i14) != 0) {
              bool = true;
            } else {
              bool = false;
            } 
            constraints.setRequiresBatteryNotLow(bool);
            if (cursor.getInt(i15) != 0) {
              bool = true;
            } else {
              bool = false;
            } 
            constraints.setRequiresStorageNotLow(bool);
            constraints.setTriggerContentUpdateDelay(cursor.getLong(i16));
            constraints.setTriggerMaxContentDelay(cursor.getLong(i17));
            constraints.setContentUriTriggers(WorkTypeConverters.byteArrayToContentUriTriggers(cursor.getBlob(i18)));
            WorkSpec workSpec = new WorkSpec(str1, str2);
            workSpec.state = WorkTypeConverters.intToState(cursor.getInt(j));
            workSpec.inputMergerClassName = cursor.getString(i8);
            workSpec.output = (workSpec.input = Data.fromByteArray(cursor.getBlob(i9))).fromByteArray(cursor.getBlob(i6));
            workSpec.initialDelay = cursor.getLong(i5);
            workSpec.intervalDuration = cursor.getLong(i4);
            workSpec.flexDuration = cursor.getLong(n);
            workSpec.runAttemptCount = cursor.getInt(i3);
            i7 = cursor.getInt(i2);
            workSpec.backoffPolicy = WorkTypeConverters.intToBackoffPolicy(i7);
            workSpec.backoffDelayDuration = cursor.getLong(i);
            workSpec.periodStartTime = cursor.getLong(i1);
            workSpec.minimumRetentionDuration = cursor.getLong(i13);
            workSpec.scheduleRequestedAt = cursor.getLong(paramInt);
            workSpec.constraints = constraints;
            str.add(workSpec);
            continue;
          } 
          cursor.close();
          roomSQLiteQuery.release();
          return str;
        } 
      } finally {}
    } finally {}
    cursor.close();
    roomSQLiteQuery.release();
    throw str;
  }
  
  public List<WorkSpec> getEnqueuedWork() {
    String str;
    RoomSQLiteQuery roomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT * FROM workspec WHERE state=0", 0);
    Cursor cursor = this.__db.query(roomSQLiteQuery);
    try {
      int m = cursor.getColumnIndexOrThrow("id");
      int i7 = cursor.getColumnIndexOrThrow("state");
      int k = cursor.getColumnIndexOrThrow("worker_class_name");
      int i8 = cursor.getColumnIndexOrThrow("input_merger_class_name");
      int i9 = cursor.getColumnIndexOrThrow("input");
      int i6 = cursor.getColumnIndexOrThrow("output");
      int i5 = cursor.getColumnIndexOrThrow("initial_delay");
      int i4 = cursor.getColumnIndexOrThrow("interval_duration");
      int n = cursor.getColumnIndexOrThrow("flex_duration");
      int i3 = cursor.getColumnIndexOrThrow("run_attempt_count");
      int i2 = cursor.getColumnIndexOrThrow("backoff_policy");
      int i = cursor.getColumnIndexOrThrow("backoff_delay_duration");
      int i1 = cursor.getColumnIndexOrThrow("period_start_time");
      int j = cursor.getColumnIndexOrThrow("minimum_retention_duration");
      try {
        int i13 = cursor.getColumnIndexOrThrow("schedule_requested_at");
        int i10 = cursor.getColumnIndexOrThrow("required_network_type");
        int i12 = cursor.getColumnIndexOrThrow("requires_charging");
        int i11 = cursor.getColumnIndexOrThrow("requires_device_idle");
        int i15 = cursor.getColumnIndexOrThrow("requires_battery_not_low");
        int i16 = cursor.getColumnIndexOrThrow("requires_storage_not_low");
        int i17 = cursor.getColumnIndexOrThrow("trigger_content_update_delay");
        int i18 = cursor.getColumnIndexOrThrow("trigger_max_content_delay");
        int i19 = cursor.getColumnIndexOrThrow("content_uri_triggers");
        str = new ArrayList(cursor.getCount());
        int i14 = j;
        j = i7;
        while (true) {
          if (cursor.moveToNext()) {
            boolean bool;
            String str1 = cursor.getString(m);
            String str2 = cursor.getString(k);
            Constraints constraints = new Constraints();
            constraints.setRequiredNetworkType(WorkTypeConverters.intToNetworkType(cursor.getInt(i10)));
            if (cursor.getInt(i12) != 0) {
              bool = true;
            } else {
              bool = false;
            } 
            constraints.setRequiresCharging(bool);
            if (cursor.getInt(i11) != 0) {
              bool = true;
            } else {
              bool = false;
            } 
            constraints.setRequiresDeviceIdle(bool);
            if (cursor.getInt(i15) != 0) {
              bool = true;
            } else {
              bool = false;
            } 
            constraints.setRequiresBatteryNotLow(bool);
            if (cursor.getInt(i16) != 0) {
              bool = true;
            } else {
              bool = false;
            } 
            constraints.setRequiresStorageNotLow(bool);
            constraints.setTriggerContentUpdateDelay(cursor.getLong(i17));
            constraints.setTriggerMaxContentDelay(cursor.getLong(i18));
            constraints.setContentUriTriggers(WorkTypeConverters.byteArrayToContentUriTriggers(cursor.getBlob(i19)));
            WorkSpec workSpec = new WorkSpec(str1, str2);
            workSpec.state = WorkTypeConverters.intToState(cursor.getInt(j));
            workSpec.inputMergerClassName = cursor.getString(i8);
            workSpec.output = (workSpec.input = Data.fromByteArray(cursor.getBlob(i9))).fromByteArray(cursor.getBlob(i6));
            workSpec.initialDelay = cursor.getLong(i5);
            workSpec.intervalDuration = cursor.getLong(i4);
            workSpec.flexDuration = cursor.getLong(n);
            workSpec.runAttemptCount = cursor.getInt(i3);
            i7 = cursor.getInt(i2);
            workSpec.backoffPolicy = WorkTypeConverters.intToBackoffPolicy(i7);
            workSpec.backoffDelayDuration = cursor.getLong(i);
            workSpec.periodStartTime = cursor.getLong(i1);
            workSpec.minimumRetentionDuration = cursor.getLong(i14);
            workSpec.scheduleRequestedAt = cursor.getLong(i13);
            workSpec.constraints = constraints;
            str.add(workSpec);
            continue;
          } 
          cursor.close();
          roomSQLiteQuery.release();
          return str;
        } 
      } finally {}
    } finally {}
    cursor.close();
    roomSQLiteQuery.release();
    throw str;
  }
  
  public List<Data> getInputsFromPrerequisites(String paramString) {
    roomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT output FROM workspec WHERE id IN (SELECT prerequisite_id FROM dependency WHERE work_spec_id=?)", 1);
    if (paramString == null) {
      roomSQLiteQuery.bindNull(1);
    } else {
      roomSQLiteQuery.bindString(1, paramString);
    } 
    cursor = this.__db.query(roomSQLiteQuery);
    try {
      arrayList = new ArrayList(cursor.getCount());
      while (cursor.moveToNext())
        arrayList.add(Data.fromByteArray(cursor.getBlob(0))); 
      return arrayList;
    } finally {
      cursor.close();
      roomSQLiteQuery.release();
    } 
  }
  
  public List<WorkSpec> getScheduledWork() {
    String str;
    RoomSQLiteQuery roomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT * FROM workspec WHERE state=0 AND schedule_requested_at<>-1", 0);
    Cursor cursor = this.__db.query(roomSQLiteQuery);
    try {
      int m = cursor.getColumnIndexOrThrow("id");
      int i7 = cursor.getColumnIndexOrThrow("state");
      int k = cursor.getColumnIndexOrThrow("worker_class_name");
      int i8 = cursor.getColumnIndexOrThrow("input_merger_class_name");
      int i9 = cursor.getColumnIndexOrThrow("input");
      int i6 = cursor.getColumnIndexOrThrow("output");
      int i5 = cursor.getColumnIndexOrThrow("initial_delay");
      int i4 = cursor.getColumnIndexOrThrow("interval_duration");
      int n = cursor.getColumnIndexOrThrow("flex_duration");
      int i3 = cursor.getColumnIndexOrThrow("run_attempt_count");
      int i2 = cursor.getColumnIndexOrThrow("backoff_policy");
      int i = cursor.getColumnIndexOrThrow("backoff_delay_duration");
      int i1 = cursor.getColumnIndexOrThrow("period_start_time");
      int j = cursor.getColumnIndexOrThrow("minimum_retention_duration");
      try {
        int i13 = cursor.getColumnIndexOrThrow("schedule_requested_at");
        int i10 = cursor.getColumnIndexOrThrow("required_network_type");
        int i12 = cursor.getColumnIndexOrThrow("requires_charging");
        int i11 = cursor.getColumnIndexOrThrow("requires_device_idle");
        int i15 = cursor.getColumnIndexOrThrow("requires_battery_not_low");
        int i16 = cursor.getColumnIndexOrThrow("requires_storage_not_low");
        int i17 = cursor.getColumnIndexOrThrow("trigger_content_update_delay");
        int i18 = cursor.getColumnIndexOrThrow("trigger_max_content_delay");
        int i19 = cursor.getColumnIndexOrThrow("content_uri_triggers");
        str = new ArrayList(cursor.getCount());
        int i14 = j;
        j = i7;
        while (true) {
          if (cursor.moveToNext()) {
            boolean bool;
            String str1 = cursor.getString(m);
            String str2 = cursor.getString(k);
            Constraints constraints = new Constraints();
            constraints.setRequiredNetworkType(WorkTypeConverters.intToNetworkType(cursor.getInt(i10)));
            if (cursor.getInt(i12) != 0) {
              bool = true;
            } else {
              bool = false;
            } 
            constraints.setRequiresCharging(bool);
            if (cursor.getInt(i11) != 0) {
              bool = true;
            } else {
              bool = false;
            } 
            constraints.setRequiresDeviceIdle(bool);
            if (cursor.getInt(i15) != 0) {
              bool = true;
            } else {
              bool = false;
            } 
            constraints.setRequiresBatteryNotLow(bool);
            if (cursor.getInt(i16) != 0) {
              bool = true;
            } else {
              bool = false;
            } 
            constraints.setRequiresStorageNotLow(bool);
            constraints.setTriggerContentUpdateDelay(cursor.getLong(i17));
            constraints.setTriggerMaxContentDelay(cursor.getLong(i18));
            constraints.setContentUriTriggers(WorkTypeConverters.byteArrayToContentUriTriggers(cursor.getBlob(i19)));
            WorkSpec workSpec = new WorkSpec(str1, str2);
            workSpec.state = WorkTypeConverters.intToState(cursor.getInt(j));
            workSpec.inputMergerClassName = cursor.getString(i8);
            workSpec.output = (workSpec.input = Data.fromByteArray(cursor.getBlob(i9))).fromByteArray(cursor.getBlob(i6));
            workSpec.initialDelay = cursor.getLong(i5);
            workSpec.intervalDuration = cursor.getLong(i4);
            workSpec.flexDuration = cursor.getLong(n);
            workSpec.runAttemptCount = cursor.getInt(i3);
            i7 = cursor.getInt(i2);
            workSpec.backoffPolicy = WorkTypeConverters.intToBackoffPolicy(i7);
            workSpec.backoffDelayDuration = cursor.getLong(i);
            workSpec.periodStartTime = cursor.getLong(i1);
            workSpec.minimumRetentionDuration = cursor.getLong(i14);
            workSpec.scheduleRequestedAt = cursor.getLong(i13);
            workSpec.constraints = constraints;
            str.add(workSpec);
            continue;
          } 
          cursor.close();
          roomSQLiteQuery.release();
          return str;
        } 
      } finally {}
    } finally {}
    cursor.close();
    roomSQLiteQuery.release();
    throw str;
  }
  
  public WorkInfo.State getState(String paramString) {
    roomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT state FROM workspec WHERE id=?", 1);
    if (paramString == null) {
      roomSQLiteQuery.bindNull(1);
    } else {
      roomSQLiteQuery.bindString(1, paramString);
    } 
    cursor = this.__db.query(roomSQLiteQuery);
    try {
      if (cursor.moveToFirst()) {
        WorkInfo.State state = WorkTypeConverters.intToState(cursor.getInt(0));
      } else {
        paramString = null;
      } 
      return paramString;
    } finally {
      cursor.close();
      roomSQLiteQuery.release();
    } 
  }
  
  public List<String> getUnfinishedWorkWithName(String paramString) {
    roomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT id FROM workspec WHERE state NOT IN (2, 3, 5) AND id IN (SELECT work_spec_id FROM workname WHERE name=?)", 1);
    if (paramString == null) {
      roomSQLiteQuery.bindNull(1);
    } else {
      roomSQLiteQuery.bindString(1, paramString);
    } 
    cursor = this.__db.query(roomSQLiteQuery);
    try {
      arrayList = new ArrayList(cursor.getCount());
      while (cursor.moveToNext())
        arrayList.add(cursor.getString(0)); 
      return arrayList;
    } finally {
      cursor.close();
      roomSQLiteQuery.release();
    } 
  }
  
  public List<String> getUnfinishedWorkWithTag(String paramString) {
    roomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT id FROM workspec WHERE state NOT IN (2, 3, 5) AND id IN (SELECT work_spec_id FROM worktag WHERE tag=?)", 1);
    if (paramString == null) {
      roomSQLiteQuery.bindNull(1);
    } else {
      roomSQLiteQuery.bindString(1, paramString);
    } 
    cursor = this.__db.query(roomSQLiteQuery);
    try {
      arrayList = new ArrayList(cursor.getCount());
      while (cursor.moveToNext())
        arrayList.add(cursor.getString(0)); 
      return arrayList;
    } finally {
      cursor.close();
      roomSQLiteQuery.release();
    } 
  }
  
  public WorkSpec getWorkSpec(String paramString) {
    RoomSQLiteQuery roomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT * FROM workspec WHERE id=?", 1);
    if (paramString == null) {
      roomSQLiteQuery.bindNull(1);
    } else {
      roomSQLiteQuery.bindString(1, paramString);
    } 
    Cursor cursor = this.__db.query(roomSQLiteQuery);
    try {
      int i8 = cursor.getColumnIndexOrThrow("id");
      int i = cursor.getColumnIndexOrThrow("state");
      int i9 = cursor.getColumnIndexOrThrow("worker_class_name");
      int j = cursor.getColumnIndexOrThrow("input_merger_class_name");
      int k = cursor.getColumnIndexOrThrow("input");
      int m = cursor.getColumnIndexOrThrow("output");
      int n = cursor.getColumnIndexOrThrow("initial_delay");
      int i1 = cursor.getColumnIndexOrThrow("interval_duration");
      int i2 = cursor.getColumnIndexOrThrow("flex_duration");
      int i3 = cursor.getColumnIndexOrThrow("run_attempt_count");
      int i4 = cursor.getColumnIndexOrThrow("backoff_policy");
      int i5 = cursor.getColumnIndexOrThrow("backoff_delay_duration");
      int i6 = cursor.getColumnIndexOrThrow("period_start_time");
      int i7 = cursor.getColumnIndexOrThrow("minimum_retention_duration");
      try {
        int i10 = cursor.getColumnIndexOrThrow("schedule_requested_at");
        int i17 = cursor.getColumnIndexOrThrow("required_network_type");
        int i18 = cursor.getColumnIndexOrThrow("requires_charging");
        int i11 = cursor.getColumnIndexOrThrow("requires_device_idle");
        int i12 = cursor.getColumnIndexOrThrow("requires_battery_not_low");
        int i13 = cursor.getColumnIndexOrThrow("requires_storage_not_low");
        int i14 = cursor.getColumnIndexOrThrow("trigger_content_update_delay");
        int i15 = cursor.getColumnIndexOrThrow("trigger_max_content_delay");
        int i16 = cursor.getColumnIndexOrThrow("content_uri_triggers");
        if (cursor.moveToFirst()) {
          paramString = cursor.getString(i8);
          String str = cursor.getString(i9);
          Constraints constraints = new Constraints();
          constraints.setRequiredNetworkType(WorkTypeConverters.intToNetworkType(cursor.getInt(i17)));
          i8 = cursor.getInt(i18);
          boolean bool1 = false;
          if (i8 != 0) {
            bool = true;
          } else {
            bool = false;
          } 
          constraints.setRequiresCharging(bool);
          if (cursor.getInt(i11) != 0) {
            bool = true;
          } else {
            bool = false;
          } 
          constraints.setRequiresDeviceIdle(bool);
          if (cursor.getInt(i12) != 0) {
            bool = true;
          } else {
            bool = false;
          } 
          constraints.setRequiresBatteryNotLow(bool);
          boolean bool = bool1;
          if (cursor.getInt(i13) != 0)
            bool = true; 
          constraints.setRequiresStorageNotLow(bool);
          constraints.setTriggerContentUpdateDelay(cursor.getLong(i14));
          constraints.setTriggerMaxContentDelay(cursor.getLong(i15));
          constraints.setContentUriTriggers(WorkTypeConverters.byteArrayToContentUriTriggers(cursor.getBlob(i16)));
          WorkSpec workSpec = new WorkSpec(paramString, str);
          workSpec.state = WorkTypeConverters.intToState(cursor.getInt(i));
          workSpec.inputMergerClassName = cursor.getString(j);
          workSpec.output = (workSpec.input = Data.fromByteArray(cursor.getBlob(k))).fromByteArray(cursor.getBlob(m));
          workSpec.initialDelay = cursor.getLong(n);
          workSpec.intervalDuration = cursor.getLong(i1);
          workSpec.flexDuration = cursor.getLong(i2);
          workSpec.runAttemptCount = cursor.getInt(i3);
          workSpec.backoffPolicy = WorkTypeConverters.intToBackoffPolicy(cursor.getInt(i4));
          workSpec.backoffDelayDuration = cursor.getLong(i5);
          workSpec.periodStartTime = cursor.getLong(i6);
          workSpec.minimumRetentionDuration = cursor.getLong(i7);
          workSpec.scheduleRequestedAt = cursor.getLong(i10);
          workSpec.constraints = constraints;
        } else {
          paramString = null;
        } 
        cursor.close();
        roomSQLiteQuery.release();
        return paramString;
      } finally {}
    } finally {}
    cursor.close();
    roomSQLiteQuery.release();
    throw paramString;
  }
  
  public List<WorkSpec.IdAndState> getWorkSpecIdAndStatesForName(String paramString) {
    roomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT id, state FROM workspec WHERE id IN (SELECT work_spec_id FROM workname WHERE name=?)", 1);
    if (paramString == null) {
      roomSQLiteQuery.bindNull(1);
    } else {
      roomSQLiteQuery.bindString(1, paramString);
    } 
    cursor = this.__db.query(roomSQLiteQuery);
    try {
      int i = cursor.getColumnIndexOrThrow("id");
      int j = cursor.getColumnIndexOrThrow("state");
      arrayList = new ArrayList(cursor.getCount());
      while (cursor.moveToNext()) {
        WorkSpec.IdAndState idAndState = new WorkSpec.IdAndState();
        idAndState.id = cursor.getString(i);
        idAndState.state = WorkTypeConverters.intToState(cursor.getInt(j));
        arrayList.add(idAndState);
      } 
      return arrayList;
    } finally {
      cursor.close();
      roomSQLiteQuery.release();
    } 
  }
  
  public WorkSpec[] getWorkSpecs(List<String> paramList) {
    StringBuilder stringBuilder = StringUtil.newStringBuilder();
    stringBuilder.append("SELECT * FROM workspec WHERE id IN (");
    int i = paramList.size();
    StringUtil.appendPlaceholders(stringBuilder, i);
    stringBuilder.append(")");
    RoomSQLiteQuery roomSQLiteQuery = RoomSQLiteQuery.acquire(stringBuilder.toString(), i + 0);
    Iterator iterator = paramList.iterator();
    for (i = 1; iterator.hasNext(); i++) {
      String str = (String)iterator.next();
      if (str == null) {
        roomSQLiteQuery.bindNull(i);
      } else {
        roomSQLiteQuery.bindString(i, str);
      } 
    } 
    Cursor cursor = this.__db.query(roomSQLiteQuery);
    try {
      int i4 = cursor.getColumnIndexOrThrow("id");
      int i8 = cursor.getColumnIndexOrThrow("state");
      int i2 = cursor.getColumnIndexOrThrow("worker_class_name");
      int i3 = cursor.getColumnIndexOrThrow("input_merger_class_name");
      int i1 = cursor.getColumnIndexOrThrow("input");
      int i9 = cursor.getColumnIndexOrThrow("output");
      int i7 = cursor.getColumnIndexOrThrow("initial_delay");
      i = cursor.getColumnIndexOrThrow("interval_duration");
      int k = cursor.getColumnIndexOrThrow("flex_duration");
      int i6 = cursor.getColumnIndexOrThrow("run_attempt_count");
      int m = cursor.getColumnIndexOrThrow("backoff_policy");
      int j = cursor.getColumnIndexOrThrow("backoff_delay_duration");
      int n = cursor.getColumnIndexOrThrow("period_start_time");
      int i5 = cursor.getColumnIndexOrThrow("minimum_retention_duration");
      try {
        int i14 = cursor.getColumnIndexOrThrow("schedule_requested_at");
        int i11 = cursor.getColumnIndexOrThrow("required_network_type");
        int i10 = cursor.getColumnIndexOrThrow("requires_charging");
        int i13 = cursor.getColumnIndexOrThrow("requires_device_idle");
        int i12 = cursor.getColumnIndexOrThrow("requires_battery_not_low");
        int i15 = cursor.getColumnIndexOrThrow("requires_storage_not_low");
        int i16 = cursor.getColumnIndexOrThrow("trigger_content_update_delay");
        int i17 = cursor.getColumnIndexOrThrow("trigger_max_content_delay");
        int i18 = cursor.getColumnIndexOrThrow("content_uri_triggers");
        WorkSpec[] arrayOfWorkSpec = new WorkSpec[cursor.getCount()];
        byte b = 0;
        while (true) {
          if (cursor.moveToNext()) {
            boolean bool;
            String str1 = cursor.getString(i4);
            String str2 = cursor.getString(i2);
            Constraints constraints = new Constraints();
            constraints.setRequiredNetworkType(WorkTypeConverters.intToNetworkType(cursor.getInt(i11)));
            if (cursor.getInt(i10) != 0) {
              bool = true;
            } else {
              bool = false;
            } 
            constraints.setRequiresCharging(bool);
            if (cursor.getInt(i13) != 0) {
              bool = true;
            } else {
              bool = false;
            } 
            constraints.setRequiresDeviceIdle(bool);
            if (cursor.getInt(i12) != 0) {
              bool = true;
            } else {
              bool = false;
            } 
            constraints.setRequiresBatteryNotLow(bool);
            if (cursor.getInt(i15) != 0) {
              bool = true;
            } else {
              bool = false;
            } 
            constraints.setRequiresStorageNotLow(bool);
            constraints.setTriggerContentUpdateDelay(cursor.getLong(i16));
            constraints.setTriggerMaxContentDelay(cursor.getLong(i17));
            constraints.setContentUriTriggers(WorkTypeConverters.byteArrayToContentUriTriggers(cursor.getBlob(i18)));
            WorkSpec workSpec = new WorkSpec(str1, str2);
            workSpec.state = WorkTypeConverters.intToState(cursor.getInt(i8));
            workSpec.inputMergerClassName = cursor.getString(i3);
            workSpec.output = (workSpec.input = Data.fromByteArray(cursor.getBlob(i1))).fromByteArray(cursor.getBlob(i9));
            workSpec.initialDelay = cursor.getLong(i7);
            workSpec.intervalDuration = cursor.getLong(i);
            workSpec.flexDuration = cursor.getLong(k);
            workSpec.runAttemptCount = cursor.getInt(i6);
            int i19 = cursor.getInt(m);
            workSpec.backoffPolicy = WorkTypeConverters.intToBackoffPolicy(i19);
            workSpec.backoffDelayDuration = cursor.getLong(j);
            workSpec.periodStartTime = cursor.getLong(n);
            workSpec.minimumRetentionDuration = cursor.getLong(i5);
            workSpec.scheduleRequestedAt = cursor.getLong(i14);
            workSpec.constraints = constraints;
            arrayOfWorkSpec[b] = workSpec;
            b++;
            continue;
          } 
          cursor.close();
          roomSQLiteQuery.release();
          return arrayOfWorkSpec;
        } 
      } finally {}
    } finally {}
    cursor.close();
    roomSQLiteQuery.release();
    throw iterator;
  }
  
  public WorkSpec.WorkInfoPojo getWorkStatusPojoForId(String paramString) {
    roomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT id, state, output FROM workspec WHERE id=?", 1);
    if (paramString == null) {
      roomSQLiteQuery.bindNull(1);
    } else {
      roomSQLiteQuery.bindString(1, paramString);
    } 
    this.__db.beginTransaction();
    try {
      cursor = this.__db.query(roomSQLiteQuery);
    } finally {
      this.__db.endTransaction();
    } 
  }
  
  public List<WorkSpec.WorkInfoPojo> getWorkStatusPojoForIds(List<String> paramList) {
    StringBuilder stringBuilder = StringUtil.newStringBuilder();
    stringBuilder.append("SELECT id, state, output FROM workspec WHERE id IN (");
    i = paramList.size();
    StringUtil.appendPlaceholders(stringBuilder, i);
    stringBuilder.append(")");
    roomSQLiteQuery = RoomSQLiteQuery.acquire(stringBuilder.toString(), i + 0);
    null = paramList.iterator();
    for (i = 1; null.hasNext(); i++) {
      String str = (String)null.next();
      if (str == null) {
        roomSQLiteQuery.bindNull(i);
      } else {
        roomSQLiteQuery.bindString(i, str);
      } 
    } 
    this.__db.beginTransaction();
    try {
      cursor = this.__db.query(roomSQLiteQuery);
    } finally {
      this.__db.endTransaction();
    } 
  }
  
  public List<WorkSpec.WorkInfoPojo> getWorkStatusPojoForName(String paramString) {
    roomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT id, state, output FROM workspec WHERE id IN (SELECT work_spec_id FROM workname WHERE name=?)", 1);
    if (paramString == null) {
      roomSQLiteQuery.bindNull(1);
    } else {
      roomSQLiteQuery.bindString(1, paramString);
    } 
    this.__db.beginTransaction();
    try {
      cursor = this.__db.query(roomSQLiteQuery);
    } finally {
      this.__db.endTransaction();
    } 
  }
  
  public List<WorkSpec.WorkInfoPojo> getWorkStatusPojoForTag(String paramString) {
    roomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT id, state, output FROM workspec WHERE id IN (SELECT work_spec_id FROM worktag WHERE tag=?)", 1);
    if (paramString == null) {
      roomSQLiteQuery.bindNull(1);
    } else {
      roomSQLiteQuery.bindString(1, paramString);
    } 
    this.__db.beginTransaction();
    try {
      cursor = this.__db.query(roomSQLiteQuery);
    } finally {
      this.__db.endTransaction();
    } 
  }
  
  public LiveData<List<WorkSpec.WorkInfoPojo>> getWorkStatusPojoLiveDataForIds(List<String> paramList) {
    StringBuilder stringBuilder = StringUtil.newStringBuilder();
    stringBuilder.append("SELECT id, state, output FROM workspec WHERE id IN (");
    int i = paramList.size();
    StringUtil.appendPlaceholders(stringBuilder, i);
    stringBuilder.append(")");
    RoomSQLiteQuery roomSQLiteQuery = RoomSQLiteQuery.acquire(stringBuilder.toString(), i + 0);
    Iterator iterator = paramList.iterator();
    for (i = 1; iterator.hasNext(); i++) {
      String str = (String)iterator.next();
      if (str == null) {
        roomSQLiteQuery.bindNull(i);
      } else {
        roomSQLiteQuery.bindString(i, str);
      } 
    } 
    return (new Object(this, roomSQLiteQuery)).getLiveData();
  }
  
  public LiveData<List<WorkSpec.WorkInfoPojo>> getWorkStatusPojoLiveDataForName(String paramString) {
    RoomSQLiteQuery roomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT id, state, output FROM workspec WHERE id IN (SELECT work_spec_id FROM workname WHERE name=?)", 1);
    if (paramString == null) {
      roomSQLiteQuery.bindNull(1);
    } else {
      roomSQLiteQuery.bindString(1, paramString);
    } 
    return (new Object(this, roomSQLiteQuery)).getLiveData();
  }
  
  public LiveData<List<WorkSpec.WorkInfoPojo>> getWorkStatusPojoLiveDataForTag(String paramString) {
    RoomSQLiteQuery roomSQLiteQuery = RoomSQLiteQuery.acquire("SELECT id, state, output FROM workspec WHERE id IN (SELECT work_spec_id FROM worktag WHERE tag=?)", 1);
    if (paramString == null) {
      roomSQLiteQuery.bindNull(1);
    } else {
      roomSQLiteQuery.bindString(1, paramString);
    } 
    return (new Object(this, roomSQLiteQuery)).getLiveData();
  }
  
  public int incrementWorkSpecRunAttemptCount(String paramString) {
    supportSQLiteStatement = this.__preparedStmtOfIncrementWorkSpecRunAttemptCount.acquire();
    this.__db.beginTransaction();
    if (paramString == null)
      try {
        supportSQLiteStatement.bindNull(1);
        j = supportSQLiteStatement.executeUpdateDelete();
        this.__db.setTransactionSuccessful();
        return j;
      } finally {
        this.__db.endTransaction();
        this.__preparedStmtOfIncrementWorkSpecRunAttemptCount.release(supportSQLiteStatement);
      }  
    supportSQLiteStatement.bindString(1, paramString);
    int i = supportSQLiteStatement.executeUpdateDelete();
    this.__db.setTransactionSuccessful();
    this.__db.endTransaction();
    this.__preparedStmtOfIncrementWorkSpecRunAttemptCount.release(supportSQLiteStatement);
    return i;
  }
  
  public void insertWorkSpec(WorkSpec paramWorkSpec) {
    this.__db.beginTransaction();
    try {
      this.__insertionAdapterOfWorkSpec.insert(paramWorkSpec);
      this.__db.setTransactionSuccessful();
      return;
    } finally {
      this.__db.endTransaction();
    } 
  }
  
  public int markWorkSpecScheduled(String paramString, long paramLong) {
    supportSQLiteStatement = this.__preparedStmtOfMarkWorkSpecScheduled.acquire();
    this.__db.beginTransaction();
    try {
      supportSQLiteStatement.bindLong(1, paramLong);
      if (paramString == null) {
        supportSQLiteStatement.bindNull(2);
      } else {
        supportSQLiteStatement.bindString(2, paramString);
      } 
      i = supportSQLiteStatement.executeUpdateDelete();
      this.__db.setTransactionSuccessful();
      return i;
    } finally {
      this.__db.endTransaction();
      this.__preparedStmtOfMarkWorkSpecScheduled.release(supportSQLiteStatement);
    } 
  }
  
  public void pruneFinishedWorkWithZeroDependentsIgnoringKeepForAtLeast() {
    supportSQLiteStatement = this.__preparedStmtOfPruneFinishedWorkWithZeroDependentsIgnoringKeepForAtLeast.acquire();
    this.__db.beginTransaction();
    try {
      supportSQLiteStatement.executeUpdateDelete();
      this.__db.setTransactionSuccessful();
      return;
    } finally {
      this.__db.endTransaction();
      this.__preparedStmtOfPruneFinishedWorkWithZeroDependentsIgnoringKeepForAtLeast.release(supportSQLiteStatement);
    } 
  }
  
  public int resetScheduledState() {
    supportSQLiteStatement = this.__preparedStmtOfResetScheduledState.acquire();
    this.__db.beginTransaction();
    try {
      i = supportSQLiteStatement.executeUpdateDelete();
      this.__db.setTransactionSuccessful();
      return i;
    } finally {
      this.__db.endTransaction();
      this.__preparedStmtOfResetScheduledState.release(supportSQLiteStatement);
    } 
  }
  
  public int resetWorkSpecRunAttemptCount(String paramString) {
    supportSQLiteStatement = this.__preparedStmtOfResetWorkSpecRunAttemptCount.acquire();
    this.__db.beginTransaction();
    if (paramString == null)
      try {
        supportSQLiteStatement.bindNull(1);
        j = supportSQLiteStatement.executeUpdateDelete();
        this.__db.setTransactionSuccessful();
        return j;
      } finally {
        this.__db.endTransaction();
        this.__preparedStmtOfResetWorkSpecRunAttemptCount.release(supportSQLiteStatement);
      }  
    supportSQLiteStatement.bindString(1, paramString);
    int i = supportSQLiteStatement.executeUpdateDelete();
    this.__db.setTransactionSuccessful();
    this.__db.endTransaction();
    this.__preparedStmtOfResetWorkSpecRunAttemptCount.release(supportSQLiteStatement);
    return i;
  }
  
  public void setOutput(String paramString, Data paramData) {
    supportSQLiteStatement = this.__preparedStmtOfSetOutput.acquire();
    this.__db.beginTransaction();
    try {
      byte[] arrayOfByte = Data.toByteArray(paramData);
      if (arrayOfByte == null) {
        supportSQLiteStatement.bindNull(1);
      } else {
        supportSQLiteStatement.bindBlob(1, arrayOfByte);
      } 
      if (paramString == null) {
        supportSQLiteStatement.bindNull(2);
      } else {
        supportSQLiteStatement.bindString(2, paramString);
      } 
      supportSQLiteStatement.executeUpdateDelete();
      this.__db.setTransactionSuccessful();
      return;
    } finally {
      this.__db.endTransaction();
      this.__preparedStmtOfSetOutput.release(supportSQLiteStatement);
    } 
  }
  
  public void setPeriodStartTime(String paramString, long paramLong) {
    supportSQLiteStatement = this.__preparedStmtOfSetPeriodStartTime.acquire();
    this.__db.beginTransaction();
    try {
      supportSQLiteStatement.bindLong(1, paramLong);
      if (paramString == null) {
        supportSQLiteStatement.bindNull(2);
      } else {
        supportSQLiteStatement.bindString(2, paramString);
      } 
      supportSQLiteStatement.executeUpdateDelete();
      this.__db.setTransactionSuccessful();
      return;
    } finally {
      this.__db.endTransaction();
      this.__preparedStmtOfSetPeriodStartTime.release(supportSQLiteStatement);
    } 
  }
  
  public int setState(WorkInfo.State paramState, String... paramVarArgs) {
    StringBuilder stringBuilder = StringUtil.newStringBuilder();
    stringBuilder.append("UPDATE workspec SET state=");
    stringBuilder.append("?");
    stringBuilder.append(" WHERE id IN (");
    StringUtil.appendPlaceholders(stringBuilder, paramVarArgs.length);
    stringBuilder.append(")");
    String str = stringBuilder.toString();
    SupportSQLiteStatement supportSQLiteStatement = this.__db.compileStatement(str);
    supportSQLiteStatement.bindLong(1, WorkTypeConverters.stateToInt(paramState));
    int j = paramVarArgs.length;
    byte b = 2;
    for (i = 0; i < j; i++) {
      String str1 = paramVarArgs[i];
      if (str1 == null) {
        supportSQLiteStatement.bindNull(b);
      } else {
        supportSQLiteStatement.bindString(b, str1);
      } 
      b++;
    } 
    this.__db.beginTransaction();
    try {
      i = supportSQLiteStatement.executeUpdateDelete();
      this.__db.setTransactionSuccessful();
      return i;
    } finally {
      this.__db.endTransaction();
    } 
  }
}
