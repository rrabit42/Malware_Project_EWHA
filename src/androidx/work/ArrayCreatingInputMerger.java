package androidx.work;

import android.support.annotation.NonNull;
import java.lang.reflect.Array;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public final class ArrayCreatingInputMerger extends InputMerger {
  private Object concatenateArrayAndNonArray(Object paramObject1, Object paramObject2) {
    int i = Array.getLength(paramObject1);
    Object object = Array.newInstance(paramObject2.getClass(), i + 1);
    System.arraycopy(paramObject1, 0, object, 0, i);
    Array.set(object, i, paramObject2);
    return object;
  }
  
  private Object concatenateArrays(Object paramObject1, Object paramObject2) {
    int i = Array.getLength(paramObject1);
    int j = Array.getLength(paramObject2);
    Object object = Array.newInstance(paramObject1.getClass().getComponentType(), i + j);
    System.arraycopy(paramObject1, 0, object, 0, i);
    System.arraycopy(paramObject2, 0, object, i, j);
    return object;
  }
  
  private Object concatenateNonArrays(Object paramObject1, Object paramObject2) {
    Object object = Array.newInstance(paramObject1.getClass(), 2);
    Array.set(object, 0, paramObject1);
    Array.set(object, 1, paramObject2);
    return object;
  }
  
  private Object createArrayFor(Object paramObject) {
    Object object = Array.newInstance(paramObject.getClass(), 1);
    Array.set(object, 0, paramObject);
    return object;
  }
  
  @NonNull
  public Data merge(@NonNull List<Data> paramList) {
    Data.Builder builder = new Data.Builder();
    HashMap hashMap = new HashMap();
    Iterator iterator = paramList.iterator();
    while (iterator.hasNext()) {
      for (Map.Entry entry : ((Data)iterator.next()).getKeyValueMap().entrySet()) {
        String str = (String)entry.getKey();
        Object object1 = entry.getValue();
        Class clazz = object1.getClass();
        Object object2 = hashMap.get(str);
        if (object2 == null) {
          if (!clazz.isArray())
            object1 = createArrayFor(object1); 
        } else {
          Class clazz1 = object2.getClass();
          if (clazz1.equals(clazz)) {
            if (clazz1.isArray()) {
              object1 = concatenateArrays(object2, object1);
            } else {
              object1 = concatenateNonArrays(object2, object1);
            } 
          } else if (clazz1.isArray() && clazz1.getComponentType().equals(clazz)) {
            object1 = concatenateArrayAndNonArray(object2, object1);
          } else if (clazz.isArray() && clazz.getComponentType().equals(clazz1)) {
            object1 = concatenateArrayAndNonArray(object1, object2);
          } else {
            throw new IllegalArgumentException();
          } 
        } 
        hashMap.put(str, object1);
      } 
    } 
    builder.putAll(hashMap);
    return builder.build();
  }
}
