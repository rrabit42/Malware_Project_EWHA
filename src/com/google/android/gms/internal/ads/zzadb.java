package com.google.android.gms.internal.ads;

import android.content.Context;
import android.net.Uri;
import android.os.Build;
import android.os.Looper;
import android.text.TextUtils;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.common.wrappers.Wrappers;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.annotation.ParametersAreNonnullByDefault;

@zzadh
@ParametersAreNonnullByDefault
public final class zzadb implements zzadf {
  private static final Object sLock = new Object();
  
  @VisibleForTesting
  private static zzadf zzcbw = null;
  
  @VisibleForTesting
  private static zzadf zzcbx = null;
  
  private final Context zzatx;
  
  private final Object zzcby = new Object();
  
  private final WeakHashMap<Thread, Boolean> zzcbz = new WeakHashMap();
  
  private final ExecutorService zzru = Executors.newCachedThreadPool();
  
  private final zzang zzzw;
  
  private zzadb(Context paramContext) { this(paramContext, zzang.zzsl()); }
  
  private zzadb(Context paramContext, zzang paramzzang) {
    Context context = paramContext;
    if (paramContext.getApplicationContext() != null)
      context = paramContext.getApplicationContext(); 
    this.zzatx = context;
    this.zzzw = paramzzang;
  }
  
  @VisibleForTesting
  private final Uri.Builder zza(String paramString1, String paramString2, String paramString3, int paramInt) {
    String str1;
    boolean bool;
    try {
      bool = Wrappers.packageManager(this.zzatx).isCallerInstantApp();
    } catch (Throwable null) {
      zzane.zzb("Error fetching instant app info", str1);
      bool = false;
    } 
    try {
      str1 = this.zzatx.getPackageName();
    } catch (Throwable throwable) {
      zzane.zzdk("Cannot obtain package name, proceeding.");
      str1 = "unknown";
    } 
    Uri.Builder builder2 = (new Uri.Builder()).scheme("https").path("//pagead2.googlesyndication.com/pagead/gen_204").appendQueryParameter("is_aia", Boolean.toString(bool)).appendQueryParameter("id", "gmob-apps-report-exception").appendQueryParameter("os", Build.VERSION.RELEASE).appendQueryParameter("api", String.valueOf(Build.VERSION.SDK_INT));
    String str3 = Build.MANUFACTURER;
    String str2 = Build.MODEL;
    if (!str2.startsWith(str3)) {
      StringBuilder stringBuilder = new StringBuilder(String.valueOf(str3).length() + 1 + String.valueOf(str2).length());
      stringBuilder.append(str3);
      stringBuilder.append(" ");
      stringBuilder.append(str2);
      str2 = stringBuilder.toString();
    } 
    Uri.Builder builder1 = builder2.appendQueryParameter("device", str2).appendQueryParameter("js", this.zzzw.zzcw).appendQueryParameter("appid", str1).appendQueryParameter("exceptiontype", paramString1).appendQueryParameter("stacktrace", paramString2).appendQueryParameter("eids", TextUtils.join(",", zznk.zzjb())).appendQueryParameter("exceptionkey", paramString3).appendQueryParameter("cl", "193400285").appendQueryParameter("rc", "dev").appendQueryParameter("session_id", zzkb.zzih()).appendQueryParameter("sampling_rate", Integer.toString(paramInt));
    zzna zzna = zznk.zzbfo;
    return builder1.appendQueryParameter("pb_tm", String.valueOf(zzkb.zzik().zzd(zzna)));
  }
  
  public static zzadf zzc(Context paramContext, zzang paramzzang) {
    synchronized (sLock) {
      if (zzcbx == null) {
        zzna zzna = zznk.zzauh;
        if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue()) {
          zzadb zzadb1 = new zzadb(paramContext, paramzzang);
          Thread thread = Looper.getMainLooper().getThread();
          if (thread != null)
            synchronized (zzadb1.zzcby) {
              zzadb1.zzcbz.put(thread, Boolean.valueOf(true));
              thread.setUncaughtExceptionHandler(new zzadd(zzadb1, thread.getUncaughtExceptionHandler()));
            }  
          Thread.setDefaultUncaughtExceptionHandler(new zzadc(zzadb1, Thread.getDefaultUncaughtExceptionHandler()));
          zzcbx = zzadb1;
        } else {
          zzcbx = new zzadg();
        } 
      } 
      return zzcbx;
    } 
  }
  
  public static zzadf zzl(Context paramContext) {
    synchronized (sLock) {
      if (zzcbw == null) {
        zzna zzna = zznk.zzauh;
        if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue()) {
          zzcbw = new zzadb(paramContext);
        } else {
          zzcbw = new zzadg();
        } 
      } 
      return zzcbw;
    } 
  }
  
  protected final void zza(Thread paramThread, Throwable paramThrowable) { // Byte code:
    //   0: iconst_1
    //   1: istore #6
    //   3: aload_2
    //   4: ifnull -> 136
    //   7: aload_2
    //   8: astore_1
    //   9: iconst_0
    //   10: istore_3
    //   11: iconst_0
    //   12: istore #4
    //   14: aload_1
    //   15: ifnull -> 121
    //   18: aload_1
    //   19: invokevirtual getStackTrace : ()[Ljava/lang/StackTraceElement;
    //   22: astore #9
    //   24: aload #9
    //   26: arraylength
    //   27: istore #8
    //   29: iload_3
    //   30: istore #5
    //   32: iconst_0
    //   33: istore #7
    //   35: iload #4
    //   37: istore_3
    //   38: iload #5
    //   40: istore #4
    //   42: iload #7
    //   44: istore #5
    //   46: iload #5
    //   48: iload #8
    //   50: if_icmpge -> 103
    //   53: aload #9
    //   55: iload #5
    //   57: aaload
    //   58: astore #10
    //   60: aload #10
    //   62: invokevirtual getClassName : ()Ljava/lang/String;
    //   65: invokestatic zzdf : (Ljava/lang/String;)Z
    //   68: ifeq -> 74
    //   71: iconst_1
    //   72: istore #4
    //   74: aload_0
    //   75: invokevirtual getClass : ()Ljava/lang/Class;
    //   78: invokevirtual getName : ()Ljava/lang/String;
    //   81: aload #10
    //   83: invokevirtual getClassName : ()Ljava/lang/String;
    //   86: invokevirtual equals : (Ljava/lang/Object;)Z
    //   89: ifeq -> 94
    //   92: iconst_1
    //   93: istore_3
    //   94: iload #5
    //   96: iconst_1
    //   97: iadd
    //   98: istore #5
    //   100: goto -> 46
    //   103: aload_1
    //   104: invokevirtual getCause : ()Ljava/lang/Throwable;
    //   107: astore_1
    //   108: iload_3
    //   109: istore #5
    //   111: iload #4
    //   113: istore_3
    //   114: iload #5
    //   116: istore #4
    //   118: goto -> 14
    //   121: iload_3
    //   122: ifeq -> 136
    //   125: iload #4
    //   127: ifne -> 136
    //   130: iload #6
    //   132: istore_3
    //   133: goto -> 138
    //   136: iconst_0
    //   137: istore_3
    //   138: iload_3
    //   139: ifeq -> 151
    //   142: aload_0
    //   143: aload_2
    //   144: ldc_w ''
    //   147: fconst_1
    //   148: invokevirtual zza : (Ljava/lang/Throwable;Ljava/lang/String;F)V
    //   151: return }
  
  public final void zza(Throwable paramThrowable, String paramString) { zza(paramThrowable, paramString, 1.0F); }
  
  public final void zza(Throwable paramThrowable, String paramString, float paramFloat) {
    byte b1;
    if (zzamu.zzc(paramThrowable) == null)
      return; 
    String str2 = paramThrowable.getClass().getName();
    StringWriter stringWriter = new StringWriter();
    zzazr.zza(paramThrowable, new PrintWriter(stringWriter));
    String str1 = stringWriter.toString();
    double d1 = Math.random();
    double d2 = paramFloat;
    byte b2 = 0;
    int i = 1;
    if (d1 < d2) {
      b1 = 1;
    } else {
      b1 = 0;
    } 
    if (paramFloat > 0.0F)
      i = (int)(1.0F / paramFloat); 
    if (b1) {
      ArrayList arrayList2 = new ArrayList();
      arrayList2.add(zza(str2, str1, paramString, i).toString());
      ArrayList arrayList1 = (ArrayList)arrayList2;
      i = arrayList1.size();
      b1 = b2;
      while (b1 < i) {
        Object object = arrayList1.get(b1);
        b1++;
        object = (String)object;
        zzanf zzanf = new zzanf();
        this.zzru.submit(new zzade(this, zzanf, object));
      } 
    } 
  }
}
