package android.support.design.widget;

import android.content.Context;
import android.content.res.TypedArray;
import android.os.Build;
import android.support.annotation.VisibleForTesting;
import android.support.design.R;
import android.support.design.internal.ThemeEnforcement;
import android.support.v4.util.ObjectsCompat;
import android.support.v4.view.ViewCompat;
import android.support.v4.view.WindowInsetsCompat;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import java.util.ArrayList;
import java.util.List;

@DefaultBehavior(AppBarLayout.Behavior.class)
public class AppBarLayout extends LinearLayout {
  private static final int INVALID_SCROLL_RANGE = -1;
  
  static final int PENDING_ACTION_ANIMATE_ENABLED = 4;
  
  static final int PENDING_ACTION_COLLAPSED = 2;
  
  static final int PENDING_ACTION_EXPANDED = 1;
  
  static final int PENDING_ACTION_FORCE = 8;
  
  static final int PENDING_ACTION_NONE = 0;
  
  private int downPreScrollRange = -1;
  
  private int downScrollRange = -1;
  
  private boolean haveChildWithInterpolator;
  
  private WindowInsetsCompat lastInsets;
  
  private boolean liftOnScroll;
  
  private boolean liftable;
  
  private boolean liftableOverride;
  
  private boolean lifted;
  
  private List<BaseOnOffsetChangedListener> listeners;
  
  private int pendingAction = 0;
  
  private int[] tmpStatesArray;
  
  private int totalScrollRange = -1;
  
  public AppBarLayout(Context paramContext) { this(paramContext, null); }
  
  public AppBarLayout(Context paramContext, AttributeSet paramAttributeSet) {
    super(paramContext, paramAttributeSet);
    setOrientation(1);
    if (Build.VERSION.SDK_INT >= 21) {
      ViewUtilsLollipop.setBoundsViewOutlineProvider(this);
      ViewUtilsLollipop.setStateListAnimatorFromAttrs(this, paramAttributeSet, 0, R.style.Widget_Design_AppBarLayout);
    } 
    TypedArray typedArray = ThemeEnforcement.obtainStyledAttributes(paramContext, paramAttributeSet, R.styleable.AppBarLayout, 0, R.style.Widget_Design_AppBarLayout, new int[0]);
    ViewCompat.setBackground(this, typedArray.getDrawable(R.styleable.AppBarLayout_android_background));
    if (typedArray.hasValue(R.styleable.AppBarLayout_expanded))
      setExpanded(typedArray.getBoolean(R.styleable.AppBarLayout_expanded, false), false, false); 
    if (Build.VERSION.SDK_INT >= 21 && typedArray.hasValue(R.styleable.AppBarLayout_elevation))
      ViewUtilsLollipop.setDefaultAppBarLayoutStateListAnimator(this, typedArray.getDimensionPixelSize(R.styleable.AppBarLayout_elevation, 0)); 
    if (Build.VERSION.SDK_INT >= 26) {
      if (typedArray.hasValue(R.styleable.AppBarLayout_android_keyboardNavigationCluster))
        setKeyboardNavigationCluster(typedArray.getBoolean(R.styleable.AppBarLayout_android_keyboardNavigationCluster, false)); 
      if (typedArray.hasValue(R.styleable.AppBarLayout_android_touchscreenBlocksFocus))
        setTouchscreenBlocksFocus(typedArray.getBoolean(R.styleable.AppBarLayout_android_touchscreenBlocksFocus, false)); 
    } 
    this.liftOnScroll = typedArray.getBoolean(R.styleable.AppBarLayout_liftOnScroll, false);
    typedArray.recycle();
    ViewCompat.setOnApplyWindowInsetsListener(this, new Object(this));
  }
  
  private boolean hasCollapsibleChild() {
    int i = getChildCount();
    for (byte b = 0; b < i; b++) {
      if (((LayoutParams)getChildAt(b).getLayoutParams()).isCollapsible())
        return true; 
    } 
    return false;
  }
  
  private void invalidateScrollRanges() {
    this.totalScrollRange = -1;
    this.downPreScrollRange = -1;
    this.downScrollRange = -1;
  }
  
  private void setExpanded(boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3) {
    byte b2;
    byte b1;
    if (paramBoolean1) {
      b1 = 1;
    } else {
      b1 = 2;
    } 
    byte b3 = 0;
    if (paramBoolean2) {
      b2 = 4;
    } else {
      b2 = 0;
    } 
    if (paramBoolean3)
      b3 = 8; 
    this.pendingAction = b1 | b2 | b3;
    requestLayout();
  }
  
  private boolean setLiftableState(boolean paramBoolean) {
    if (this.liftable != paramBoolean) {
      this.liftable = paramBoolean;
      refreshDrawableState();
      return true;
    } 
    return false;
  }
  
  public void addOnOffsetChangedListener(BaseOnOffsetChangedListener paramBaseOnOffsetChangedListener) {
    if (this.listeners == null)
      this.listeners = new ArrayList(); 
    if (paramBaseOnOffsetChangedListener != null && !this.listeners.contains(paramBaseOnOffsetChangedListener))
      this.listeners.add(paramBaseOnOffsetChangedListener); 
  }
  
  public void addOnOffsetChangedListener(OnOffsetChangedListener paramOnOffsetChangedListener) { addOnOffsetChangedListener(paramOnOffsetChangedListener); }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams) { return paramLayoutParams instanceof LayoutParams; }
  
  void dispatchOffsetUpdates(int paramInt) {
    List list = this.listeners;
    if (list != null) {
      byte b = 0;
      int i = list.size();
      while (b < i) {
        BaseOnOffsetChangedListener baseOnOffsetChangedListener = (BaseOnOffsetChangedListener)this.listeners.get(b);
        if (baseOnOffsetChangedListener != null)
          baseOnOffsetChangedListener.onOffsetChanged(this, paramInt); 
        b++;
      } 
    } 
  }
  
  protected LayoutParams generateDefaultLayoutParams() { return new LayoutParams(-1, -2); }
  
  public LayoutParams generateLayoutParams(AttributeSet paramAttributeSet) { return new LayoutParams(getContext(), paramAttributeSet); }
  
  protected LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams) { return (Build.VERSION.SDK_INT >= 19 && paramLayoutParams instanceof LinearLayout.LayoutParams) ? new LayoutParams((LinearLayout.LayoutParams)paramLayoutParams) : ((paramLayoutParams instanceof ViewGroup.MarginLayoutParams) ? new LayoutParams((ViewGroup.MarginLayoutParams)paramLayoutParams) : new LayoutParams(paramLayoutParams)); }
  
  int getDownNestedPreScrollRange() {
    int i = this.downPreScrollRange;
    if (i != -1)
      return i; 
    int j = getChildCount() - 1;
    int k;
    for (k = 0; j >= 0; k = i) {
      View view = getChildAt(j);
      LayoutParams layoutParams = (LayoutParams)view.getLayoutParams();
      int m = view.getMeasuredHeight();
      i = layoutParams.scrollFlags;
      if ((i & 0x5) == 5) {
        k += layoutParams.topMargin + layoutParams.bottomMargin;
        if ((i & 0x8) != 0) {
          i = k + ViewCompat.getMinimumHeight(view);
        } else {
          if ((i & 0x2) != 0) {
            i = ViewCompat.getMinimumHeight(view);
          } else {
            i = getTopInset();
          } 
          i = k + m - i;
        } 
      } else {
        i = k;
        if (k > 0)
          break; 
      } 
      j--;
    } 
    i = Math.max(0, k);
    this.downPreScrollRange = i;
    return i;
  }
  
  int getDownNestedScrollRange() {
    int j;
    int i = this.downScrollRange;
    if (i != -1)
      return i; 
    int k = getChildCount();
    byte b = 0;
    i = 0;
    while (true) {
      j = i;
      if (b < k) {
        View view = getChildAt(b);
        LayoutParams layoutParams = (LayoutParams)view.getLayoutParams();
        int n = view.getMeasuredHeight();
        int i1 = layoutParams.topMargin;
        int i2 = layoutParams.bottomMargin;
        int m = layoutParams.scrollFlags;
        j = i;
        if ((m & true) != 0) {
          i += n + i1 + i2;
          if ((m & 0x2) != 0) {
            j = i - ViewCompat.getMinimumHeight(view) + getTopInset();
            break;
          } 
          b++;
          continue;
        } 
      } 
      break;
    } 
    i = Math.max(0, j);
    this.downScrollRange = i;
    return i;
  }
  
  public final int getMinimumHeightForVisibleOverlappingContent() {
    int j = getTopInset();
    int i = ViewCompat.getMinimumHeight(this);
    if (i == 0) {
      i = getChildCount();
      if (i >= 1) {
        i = ViewCompat.getMinimumHeight(getChildAt(i - 1));
      } else {
        i = 0;
      } 
      if (i == 0)
        return getHeight() / 3; 
    } 
    return i * 2 + j;
  }
  
  int getPendingAction() { return this.pendingAction; }
  
  @Deprecated
  public float getTargetElevation() { return 0.0F; }
  
  @VisibleForTesting
  final int getTopInset() {
    WindowInsetsCompat windowInsetsCompat = this.lastInsets;
    return (windowInsetsCompat != null) ? windowInsetsCompat.getSystemWindowInsetTop() : 0;
  }
  
  public final int getTotalScrollRange() {
    int j;
    int i = this.totalScrollRange;
    if (i != -1)
      return i; 
    int k = getChildCount();
    byte b = 0;
    i = 0;
    while (true) {
      j = i;
      if (b < k) {
        View view = getChildAt(b);
        LayoutParams layoutParams = (LayoutParams)view.getLayoutParams();
        int n = view.getMeasuredHeight();
        int m = layoutParams.scrollFlags;
        j = i;
        if ((m & true) != 0) {
          i += n + layoutParams.topMargin + layoutParams.bottomMargin;
          if ((m & 0x2) != 0) {
            j = i - ViewCompat.getMinimumHeight(view);
            break;
          } 
          b++;
          continue;
        } 
      } 
      break;
    } 
    i = Math.max(0, j - getTopInset());
    this.totalScrollRange = i;
    return i;
  }
  
  int getUpNestedPreScrollRange() { return getTotalScrollRange(); }
  
  boolean hasChildWithInterpolator() { return this.haveChildWithInterpolator; }
  
  boolean hasScrollableChildren() { return (getTotalScrollRange() != 0); }
  
  public boolean isLiftOnScroll() { return this.liftOnScroll; }
  
  protected int[] onCreateDrawableState(int paramInt) {
    if (this.tmpStatesArray == null)
      this.tmpStatesArray = new int[4]; 
    int[] arrayOfInt1 = this.tmpStatesArray;
    int[] arrayOfInt2 = super.onCreateDrawableState(paramInt + arrayOfInt1.length);
    if (this.liftable) {
      paramInt = R.attr.state_liftable;
    } else {
      paramInt = -R.attr.state_liftable;
    } 
    arrayOfInt1[0] = paramInt;
    if (this.liftable && this.lifted) {
      paramInt = R.attr.state_lifted;
    } else {
      paramInt = -R.attr.state_lifted;
    } 
    arrayOfInt1[1] = paramInt;
    if (this.liftable) {
      paramInt = R.attr.state_collapsible;
    } else {
      paramInt = -R.attr.state_collapsible;
    } 
    arrayOfInt1[2] = paramInt;
    if (this.liftable && this.lifted) {
      paramInt = R.attr.state_collapsed;
    } else {
      paramInt = -R.attr.state_collapsed;
    } 
    arrayOfInt1[3] = paramInt;
    return mergeDrawableStates(arrayOfInt2, arrayOfInt1);
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    invalidateScrollRanges();
    paramBoolean = false;
    this.haveChildWithInterpolator = false;
    paramInt2 = getChildCount();
    for (paramInt1 = 0; paramInt1 < paramInt2; paramInt1++) {
      if (((LayoutParams)getChildAt(paramInt1).getLayoutParams()).getScrollInterpolator() != null) {
        this.haveChildWithInterpolator = true;
        break;
      } 
    } 
    if (!this.liftableOverride) {
      if (this.liftOnScroll || hasCollapsibleChild())
        paramBoolean = true; 
      setLiftableState(paramBoolean);
    } 
  }
  
  protected void onMeasure(int paramInt1, int paramInt2) {
    super.onMeasure(paramInt1, paramInt2);
    invalidateScrollRanges();
  }
  
  WindowInsetsCompat onWindowInsetChanged(WindowInsetsCompat paramWindowInsetsCompat) {
    Object object;
    if (ViewCompat.getFitsSystemWindows(this)) {
      object = paramWindowInsetsCompat;
    } else {
      object = null;
    } 
    if (!ObjectsCompat.equals(this.lastInsets, object)) {
      this.lastInsets = object;
      invalidateScrollRanges();
    } 
    return paramWindowInsetsCompat;
  }
  
  public void removeOnOffsetChangedListener(BaseOnOffsetChangedListener paramBaseOnOffsetChangedListener) {
    List list = this.listeners;
    if (list != null && paramBaseOnOffsetChangedListener != null)
      list.remove(paramBaseOnOffsetChangedListener); 
  }
  
  public void removeOnOffsetChangedListener(OnOffsetChangedListener paramOnOffsetChangedListener) { removeOnOffsetChangedListener(paramOnOffsetChangedListener); }
  
  void resetPendingAction() { this.pendingAction = 0; }
  
  public void setExpanded(boolean paramBoolean) { setExpanded(paramBoolean, ViewCompat.isLaidOut(this)); }
  
  public void setExpanded(boolean paramBoolean1, boolean paramBoolean2) { setExpanded(paramBoolean1, paramBoolean2, true); }
  
  public void setLiftOnScroll(boolean paramBoolean) { this.liftOnScroll = paramBoolean; }
  
  public boolean setLiftable(boolean paramBoolean) {
    this.liftableOverride = true;
    return setLiftableState(paramBoolean);
  }
  
  public boolean setLifted(boolean paramBoolean) { return setLiftedState(paramBoolean); }
  
  boolean setLiftedState(boolean paramBoolean) {
    if (this.lifted != paramBoolean) {
      this.lifted = paramBoolean;
      refreshDrawableState();
      return true;
    } 
    return false;
  }
  
  public void setOrientation(int paramInt) {
    if (paramInt == 1) {
      super.setOrientation(paramInt);
      return;
    } 
    throw new IllegalArgumentException("AppBarLayout is always vertical and does not support horizontal orientation");
  }
  
  @Deprecated
  public void setTargetElevation(float paramFloat) {
    if (Build.VERSION.SDK_INT >= 21)
      ViewUtilsLollipop.setDefaultAppBarLayoutStateListAnimator(this, paramFloat); 
  }
}
