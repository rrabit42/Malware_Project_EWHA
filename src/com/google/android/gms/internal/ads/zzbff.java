package com.google.android.gms.internal.ads;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

final class zzbff implements Cloneable {
  private Object value;
  
  private zzbfd<?, ?> zzebq;
  
  private List<zzbfk> zzebr = new ArrayList();
  
  private final byte[] toByteArray() throws IOException {
    byte[] arrayOfByte = new byte[zzr()];
    zza(zzbfa.zzu(arrayOfByte));
    return arrayOfByte;
  }
  
  private final zzbff zzagp() {
    zzbff zzbff1 = new zzbff();
    try {
      zzbff1.zzebq = this.zzebq;
      if (this.zzebr == null) {
        zzbff1.zzebr = null;
      } else {
        zzbff1.zzebr.addAll(this.zzebr);
      } 
      if (this.value != null) {
        if (this.value instanceof zzbfi) {
          zzbfi zzbfi = (zzbfi)((zzbfi)this.value).clone();
          zzbff1.value = zzbfi;
          return zzbff1;
        } 
        if (this.value instanceof byte[]) {
          Object object = ((byte[])this.value).clone();
          zzbff1.value = object;
          return zzbff1;
        } 
        boolean bool = this.value instanceof byte[][];
        byte b2 = 0;
        byte b1 = 0;
        if (bool) {
          byte[][] arrayOfByte1 = (byte[][])this.value;
          byte[][] arrayOfByte2 = new byte[arrayOfByte1.length][];
          zzbff1.value = arrayOfByte2;
          while (b1 < arrayOfByte1.length) {
            arrayOfByte2[b1] = (byte[])arrayOfByte1[b1].clone();
            b1++;
          } 
        } else {
          if (this.value instanceof boolean[]) {
            Object object = ((boolean[])this.value).clone();
            zzbff1.value = object;
            return zzbff1;
          } 
          if (this.value instanceof int[]) {
            Object object = ((int[])this.value).clone();
            zzbff1.value = object;
            return zzbff1;
          } 
          if (this.value instanceof long[]) {
            Object object = ((long[])this.value).clone();
            zzbff1.value = object;
            return zzbff1;
          } 
          if (this.value instanceof float[]) {
            Object object = ((float[])this.value).clone();
            zzbff1.value = object;
            return zzbff1;
          } 
          if (this.value instanceof double[]) {
            Object object = ((double[])this.value).clone();
            zzbff1.value = object;
            return zzbff1;
          } 
          if (this.value instanceof zzbfi[]) {
            zzbfi[] arrayOfzzbfi1 = (zzbfi[])this.value;
            zzbfi[] arrayOfzzbfi2 = new zzbfi[arrayOfzzbfi1.length];
            zzbff1.value = arrayOfzzbfi2;
            for (b1 = b2; b1 < arrayOfzzbfi1.length; b1++)
              arrayOfzzbfi2[b1] = (zzbfi)arrayOfzzbfi1[b1].clone(); 
          } 
        } 
      } 
      return zzbff1;
    } catch (CloneNotSupportedException cloneNotSupportedException) {
      AssertionError assertionError = new AssertionError(cloneNotSupportedException);
      throw assertionError;
    } 
  }
  
  public final boolean equals(Object paramObject) {
    if (paramObject == this)
      return true; 
    if (!(paramObject instanceof zzbff))
      return false; 
    paramObject = (zzbff)paramObject;
    if (this.value != null && paramObject.value != null) {
      zzbfd zzbfd1 = this.zzebq;
      if (zzbfd1 != paramObject.zzebq)
        return false; 
      if (!zzbfd1.zzebl.isArray())
        return this.value.equals(paramObject.value); 
      Object object = this.value;
      return (object instanceof byte[]) ? Arrays.equals((byte[])object, (byte[])paramObject.value) : ((object instanceof int[]) ? Arrays.equals((int[])object, (int[])paramObject.value) : ((object instanceof long[]) ? Arrays.equals((long[])object, (long[])paramObject.value) : ((object instanceof float[]) ? Arrays.equals((float[])object, (float[])paramObject.value) : ((object instanceof double[]) ? Arrays.equals((double[])object, (double[])paramObject.value) : ((object instanceof boolean[]) ? Arrays.equals((boolean[])object, (boolean[])paramObject.value) : Arrays.deepEquals((Object[])object, (Object[])paramObject.value))))));
    } 
    List list = this.zzebr;
    if (list != null) {
      List list1 = paramObject.zzebr;
      if (list1 != null)
        return list.equals(list1); 
    } 
    try {
      return Arrays.equals(toByteArray(), paramObject.toByteArray());
    } catch (IOException paramObject) {
      throw new IllegalStateException(paramObject);
    } 
  }
  
  public final int hashCode() {
    try {
      int i = Arrays.hashCode(toByteArray());
      return i + 527;
    } catch (IOException iOException) {
      throw new IllegalStateException(iOException);
    } 
  }
  
  final void zza(zzbfa paramzzbfa) throws IOException {
    if (this.value == null) {
      for (zzbfk zzbfk : this.zzebr) {
        paramzzbfa.zzde(zzbfk.tag);
        paramzzbfa.zzw(zzbfk.zzdpw);
      } 
      return;
    } 
    NoSuchMethodError noSuchMethodError = new NoSuchMethodError();
    throw noSuchMethodError;
  }
  
  final void zza(zzbfk paramzzbfk) throws IOException {
    zzbfi zzbfi;
    List list = this.zzebr;
    if (list != null) {
      list.add(paramzzbfk);
      return;
    } 
    Object object = this.value;
    if (object instanceof zzbfi) {
      zzbfi = paramzzbfk.zzdpw;
      object = zzbez.zzi(zzbfi, 0, zzbfi.length);
      int i = object.zzacc();
      if (i == zzbfi.length - zzbfa.zzce(i)) {
        zzbfi = ((zzbfi)this.value).zza(object);
        this.zzebq = this.zzebq;
        this.value = zzbfi;
        this.zzebr = null;
        return;
      } 
      throw zzbfh.zzagq();
    } 
    if (object instanceof zzbfi[]) {
      Collections.singletonList(zzbfi);
      throw new NoSuchMethodError();
    } 
    Collections.singletonList(zzbfi);
    throw new NoSuchMethodError();
  }
  
  final int zzr() {
    if (this.value == null) {
      Iterator iterator = this.zzebr.iterator();
      int i;
      for (i = 0; iterator.hasNext(); i += zzbfa.zzcl(zzbfk.tag) + 0 + zzbfk.zzdpw.length)
        zzbfk zzbfk = (zzbfk)iterator.next(); 
      return i;
    } 
    NoSuchMethodError noSuchMethodError = new NoSuchMethodError();
    throw noSuchMethodError;
  }
}
