package android.support.v7.graphics.drawable;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresApi;
import android.support.annotation.RestrictTo;
import android.support.v4.content.res.TypedArrayUtils;
import android.support.v7.appcompat.R;
import android.support.v7.content.res.AppCompatResources;
import android.util.AttributeSet;
import android.util.StateSet;
import java.io.IOException;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
class StateListDrawable extends DrawableContainer {
  private static final boolean DEBUG = false;
  
  private static final String TAG = "StateListDrawable";
  
  private boolean mMutated;
  
  private StateListState mStateListState;
  
  StateListDrawable() { this(null, null); }
  
  StateListDrawable(@Nullable StateListState paramStateListState) {
    if (paramStateListState != null)
      setConstantState(paramStateListState); 
  }
  
  StateListDrawable(StateListState paramStateListState, Resources paramResources) {
    setConstantState(new StateListState(paramStateListState, this, paramResources));
    onStateChange(getState());
  }
  
  private void inflateChildElements(Context paramContext, Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme) throws XmlPullParserException, IOException {
    StateListState stateListState = this.mStateListState;
    int i = paramXmlPullParser.getDepth() + 1;
    while (true) {
      int j = paramXmlPullParser.next();
      if (j != 1) {
        int k = paramXmlPullParser.getDepth();
        if (k >= i || j != 3) {
          if (j != 2 || k > i || !paramXmlPullParser.getName().equals("item"))
            continue; 
          TypedArray typedArray = TypedArrayUtils.obtainAttributes(paramResources, paramTheme, paramAttributeSet, R.styleable.StateListDrawableItem);
          Drawable drawable1 = null;
          j = typedArray.getResourceId(R.styleable.StateListDrawableItem_android_drawable, -1);
          if (j > 0)
            drawable1 = AppCompatResources.getDrawable(paramContext, j); 
          typedArray.recycle();
          int[] arrayOfInt = extractStateSet(paramAttributeSet);
          Drawable drawable2 = drawable1;
          if (drawable1 == null) {
            while (true) {
              j = paramXmlPullParser.next();
              if (j == 4)
                continue; 
              break;
            } 
            if (j == 2) {
              if (Build.VERSION.SDK_INT >= 21) {
                drawable2 = Drawable.createFromXmlInner(paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
              } else {
                drawable2 = Drawable.createFromXmlInner(paramResources, paramXmlPullParser, paramAttributeSet);
              } 
            } else {
              StringBuilder stringBuilder = new StringBuilder();
              stringBuilder.append(paramXmlPullParser.getPositionDescription());
              stringBuilder.append(": <item> tag requires a 'drawable' attribute or ");
              stringBuilder.append("child tag defining a drawable");
              throw new XmlPullParserException(stringBuilder.toString());
            } 
          } 
          stateListState.addStateSet(arrayOfInt, drawable2);
          continue;
        } 
      } 
      break;
    } 
  }
  
  private void updateStateFromTypedArray(TypedArray paramTypedArray) {
    StateListState stateListState = this.mStateListState;
    if (Build.VERSION.SDK_INT >= 21)
      stateListState.mChangingConfigurations |= paramTypedArray.getChangingConfigurations(); 
    stateListState.mVariablePadding = paramTypedArray.getBoolean(R.styleable.StateListDrawable_android_variablePadding, stateListState.mVariablePadding);
    stateListState.mConstantSize = paramTypedArray.getBoolean(R.styleable.StateListDrawable_android_constantSize, stateListState.mConstantSize);
    stateListState.mEnterFadeDuration = paramTypedArray.getInt(R.styleable.StateListDrawable_android_enterFadeDuration, stateListState.mEnterFadeDuration);
    stateListState.mExitFadeDuration = paramTypedArray.getInt(R.styleable.StateListDrawable_android_exitFadeDuration, stateListState.mExitFadeDuration);
    stateListState.mDither = paramTypedArray.getBoolean(R.styleable.StateListDrawable_android_dither, stateListState.mDither);
  }
  
  public void addState(int[] paramArrayOfInt, Drawable paramDrawable) {
    if (paramDrawable != null) {
      this.mStateListState.addStateSet(paramArrayOfInt, paramDrawable);
      onStateChange(getState());
    } 
  }
  
  @RequiresApi(21)
  public void applyTheme(@NonNull Resources.Theme paramTheme) {
    super.applyTheme(paramTheme);
    onStateChange(getState());
  }
  
  void clearMutated() {
    super.clearMutated();
    this.mMutated = false;
  }
  
  StateListState cloneConstantState() { return new StateListState(this.mStateListState, this, null); }
  
  int[] extractStateSet(AttributeSet paramAttributeSet) {
    int j = paramAttributeSet.getAttributeCount();
    int[] arrayOfInt = new int[j];
    byte b = 0;
    int i;
    for (i = 0; b < j; i = k) {
      int m = paramAttributeSet.getAttributeNameResource(b);
      int k = i;
      if (m != 0) {
        k = i;
        if (m != 16842960) {
          k = i;
          if (m != 16843161) {
            if (paramAttributeSet.getAttributeBooleanValue(b, false)) {
              k = m;
            } else {
              k = -m;
            } 
            arrayOfInt[i] = k;
            k = i + 1;
          } 
        } 
      } 
      b++;
    } 
    return StateSet.trimStateSet(arrayOfInt, i);
  }
  
  int getStateCount() { return this.mStateListState.getChildCount(); }
  
  Drawable getStateDrawable(int paramInt) { return this.mStateListState.getChild(paramInt); }
  
  int getStateDrawableIndex(int[] paramArrayOfInt) { return this.mStateListState.indexOfStateSet(paramArrayOfInt); }
  
  StateListState getStateListState() { return this.mStateListState; }
  
  int[] getStateSet(int paramInt) { return this.mStateListState.mStateSets[paramInt]; }
  
  public void inflate(@NonNull Context paramContext, @NonNull Resources paramResources, @NonNull XmlPullParser paramXmlPullParser, @NonNull AttributeSet paramAttributeSet, @Nullable Resources.Theme paramTheme) throws XmlPullParserException, IOException {
    TypedArray typedArray = TypedArrayUtils.obtainAttributes(paramResources, paramTheme, paramAttributeSet, R.styleable.StateListDrawable);
    setVisible(typedArray.getBoolean(R.styleable.StateListDrawable_android_visible, true), true);
    updateStateFromTypedArray(typedArray);
    updateDensity(paramResources);
    typedArray.recycle();
    inflateChildElements(paramContext, paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
    onStateChange(getState());
  }
  
  public boolean isStateful() { return true; }
  
  @NonNull
  public Drawable mutate() {
    if (!this.mMutated && super.mutate() == this) {
      this.mStateListState.mutate();
      this.mMutated = true;
    } 
    return this;
  }
  
  protected boolean onStateChange(int[] paramArrayOfInt) {
    boolean bool = super.onStateChange(paramArrayOfInt);
    int j = this.mStateListState.indexOfStateSet(paramArrayOfInt);
    int i = j;
    if (j < 0)
      i = this.mStateListState.indexOfStateSet(StateSet.WILD_CARD); 
    return (selectDrawable(i) || bool);
  }
  
  protected void setConstantState(@NonNull DrawableContainer.DrawableContainerState paramDrawableContainerState) {
    super.setConstantState(paramDrawableContainerState);
    if (paramDrawableContainerState instanceof StateListState)
      this.mStateListState = (StateListState)paramDrawableContainerState; 
  }
}
