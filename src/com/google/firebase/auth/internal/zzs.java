package com.google.firebase.auth.internal;

import android.os.Handler;
import android.os.HandlerThread;
import android.support.annotation.NonNull;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.logging.Logger;
import com.google.android.gms.common.util.DefaultClock;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.firebase_auth.zzf;
import com.google.firebase.FirebaseApp;

public final class zzs {
  private static Logger zzgg = new Logger("TokenRefresher", new String[] { "FirebaseAuth:" });
  
  @VisibleForTesting
  private Handler handler;
  
  private final FirebaseApp zzgm;
  
  @VisibleForTesting
  private long zzre;
  
  @VisibleForTesting
  private HandlerThread zzrf;
  
  @VisibleForTesting
  private Runnable zzrg;
  
  public zzs(@NonNull FirebaseApp paramFirebaseApp) {
    zzgg.v("Initializing TokenRefresher", new Object[0]);
    this.zzgm = (FirebaseApp)Preconditions.checkNotNull(paramFirebaseApp);
    this.zzrf = new HandlerThread("TokenRefresher", 10);
    this.zzrf.start();
    this.handler = new zzf(this.zzrf.getLooper());
    this.zzrg = new zzt(this, this.zzgm.getName());
    this.zzre = 300000L;
  }
  
  public final void cancel() { this.handler.removeCallbacks(this.zzrg); }
  
  public final void zzeh() {
    Logger logger = zzgg;
    long l1 = this.zzrc;
    long l2 = this.zzre;
    StringBuilder stringBuilder = new StringBuilder(43);
    stringBuilder.append("Scheduling refresh for ");
    stringBuilder.append(l1 - l2);
    logger.v(stringBuilder.toString(), new Object[0]);
    cancel();
    l1 = DefaultClock.getInstance().currentTimeMillis();
    this.zzrd = Math.max(this.zzrc - l1 - this.zzre, 0L) / 1000L;
    this.handler.postDelayed(this.zzrg, this.zzrd * 1000L);
  }
  
  final void zzei() {
    int i = (int)this.zzrd;
    if (i != 30 && i != 60 && i != 120 && i != 240 && i != 480) {
      if (i != 960) {
        l = 30L;
      } else {
        l = 960L;
      } 
    } else {
      l = 2L * this.zzrd;
    } 
    this.zzrd = l;
    this.zzrc = DefaultClock.getInstance().currentTimeMillis() + this.zzrd * 1000L;
    Logger logger = zzgg;
    long l = this.zzrc;
    StringBuilder stringBuilder = new StringBuilder(43);
    stringBuilder.append("Scheduling refresh for ");
    stringBuilder.append(l);
    logger.v(stringBuilder.toString(), new Object[0]);
    this.handler.postDelayed(this.zzrg, this.zzrd * 1000L);
  }
}
