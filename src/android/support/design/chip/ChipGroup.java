package android.support.design.chip;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.drawable.Drawable;
import android.support.annotation.BoolRes;
import android.support.annotation.DimenRes;
import android.support.annotation.Dimension;
import android.support.annotation.IdRes;
import android.support.annotation.Nullable;
import android.support.design.R;
import android.support.design.internal.FlowLayout;
import android.support.design.internal.ThemeEnforcement;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;

public class ChipGroup extends FlowLayout {
  @IdRes
  private int checkedId = -1;
  
  private final CheckedStateTracker checkedStateTracker = new CheckedStateTracker(this, null);
  
  @Dimension
  private int chipSpacingHorizontal;
  
  @Dimension
  private int chipSpacingVertical;
  
  @Nullable
  private OnCheckedChangeListener onCheckedChangeListener;
  
  private PassThroughHierarchyChangeListener passThroughListener = new PassThroughHierarchyChangeListener(this, null);
  
  private boolean protectFromCheckedChange = false;
  
  private boolean singleSelection;
  
  public ChipGroup(Context paramContext) { this(paramContext, null); }
  
  public ChipGroup(Context paramContext, AttributeSet paramAttributeSet) { this(paramContext, paramAttributeSet, R.attr.chipGroupStyle); }
  
  public ChipGroup(Context paramContext, AttributeSet paramAttributeSet, int paramInt) {
    super(paramContext, paramAttributeSet, paramInt);
    TypedArray typedArray = ThemeEnforcement.obtainStyledAttributes(paramContext, paramAttributeSet, R.styleable.ChipGroup, paramInt, R.style.Widget_MaterialComponents_ChipGroup, new int[0]);
    paramInt = typedArray.getDimensionPixelOffset(R.styleable.ChipGroup_chipSpacing, 0);
    setChipSpacingHorizontal(typedArray.getDimensionPixelOffset(R.styleable.ChipGroup_chipSpacingHorizontal, paramInt));
    setChipSpacingVertical(typedArray.getDimensionPixelOffset(R.styleable.ChipGroup_chipSpacingVertical, paramInt));
    setSingleLine(typedArray.getBoolean(R.styleable.ChipGroup_singleLine, false));
    setSingleSelection(typedArray.getBoolean(R.styleable.ChipGroup_singleSelection, false));
    paramInt = typedArray.getResourceId(R.styleable.ChipGroup_checkedChip, -1);
    if (paramInt != -1)
      this.checkedId = paramInt; 
    typedArray.recycle();
    super.setOnHierarchyChangeListener(this.passThroughListener);
  }
  
  private void setCheckedId(int paramInt) {
    this.checkedId = paramInt;
    OnCheckedChangeListener onCheckedChangeListener1 = this.onCheckedChangeListener;
    if (onCheckedChangeListener1 != null && this.singleSelection)
      onCheckedChangeListener1.onCheckedChanged(this, paramInt); 
  }
  
  private void setCheckedStateForView(@IdRes int paramInt, boolean paramBoolean) {
    View view = findViewById(paramInt);
    if (view instanceof Chip) {
      this.protectFromCheckedChange = true;
      ((Chip)view).setChecked(paramBoolean);
      this.protectFromCheckedChange = false;
    } 
  }
  
  public void addView(View paramView, int paramInt, ViewGroup.LayoutParams paramLayoutParams) {
    if (paramView instanceof Chip) {
      Chip chip = (Chip)paramView;
      if (chip.isChecked()) {
        int i = this.checkedId;
        if (i != -1 && this.singleSelection)
          setCheckedStateForView(i, false); 
        setCheckedId(chip.getId());
      } 
    } 
    super.addView(paramView, paramInt, paramLayoutParams);
  }
  
  public void check(@IdRes int paramInt) {
    int i = this.checkedId;
    if (paramInt == i)
      return; 
    if (i != -1 && this.singleSelection)
      setCheckedStateForView(i, false); 
    if (paramInt != -1)
      setCheckedStateForView(paramInt, true); 
    setCheckedId(paramInt);
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams) { return (super.checkLayoutParams(paramLayoutParams) && paramLayoutParams instanceof LayoutParams); }
  
  public void clearCheck() {
    this.protectFromCheckedChange = true;
    for (byte b = 0; b < getChildCount(); b++) {
      View view = getChildAt(b);
      if (view instanceof Chip)
        ((Chip)view).setChecked(false); 
    } 
    this.protectFromCheckedChange = false;
    setCheckedId(-1);
  }
  
  protected ViewGroup.LayoutParams generateDefaultLayoutParams() { return new LayoutParams(-2, -2); }
  
  public ViewGroup.LayoutParams generateLayoutParams(AttributeSet paramAttributeSet) { return new LayoutParams(getContext(), paramAttributeSet); }
  
  protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams) { return new LayoutParams(paramLayoutParams); }
  
  @IdRes
  public int getCheckedChipId() { return this.singleSelection ? this.checkedId : -1; }
  
  @Dimension
  public int getChipSpacingHorizontal() { return this.chipSpacingHorizontal; }
  
  @Dimension
  public int getChipSpacingVertical() { return this.chipSpacingVertical; }
  
  public boolean isSingleSelection() { return this.singleSelection; }
  
  protected void onFinishInflate() {
    super.onFinishInflate();
    int i = this.checkedId;
    if (i != -1) {
      setCheckedStateForView(i, true);
      setCheckedId(this.checkedId);
    } 
  }
  
  public void setChipSpacing(@Dimension int paramInt) {
    setChipSpacingHorizontal(paramInt);
    setChipSpacingVertical(paramInt);
  }
  
  public void setChipSpacingHorizontal(@Dimension int paramInt) {
    if (this.chipSpacingHorizontal != paramInt) {
      this.chipSpacingHorizontal = paramInt;
      setItemSpacing(paramInt);
      requestLayout();
    } 
  }
  
  public void setChipSpacingHorizontalResource(@DimenRes int paramInt) { setChipSpacingHorizontal(getResources().getDimensionPixelOffset(paramInt)); }
  
  public void setChipSpacingResource(@DimenRes int paramInt) { setChipSpacing(getResources().getDimensionPixelOffset(paramInt)); }
  
  public void setChipSpacingVertical(@Dimension int paramInt) {
    if (this.chipSpacingVertical != paramInt) {
      this.chipSpacingVertical = paramInt;
      setLineSpacing(paramInt);
      requestLayout();
    } 
  }
  
  public void setChipSpacingVerticalResource(@DimenRes int paramInt) { setChipSpacingVertical(getResources().getDimensionPixelOffset(paramInt)); }
  
  @Deprecated
  public void setDividerDrawableHorizontal(Drawable paramDrawable) { throw new UnsupportedOperationException("Changing divider drawables have no effect. ChipGroup do not use divider drawables as spacing."); }
  
  @Deprecated
  public void setDividerDrawableVertical(@Nullable Drawable paramDrawable) { throw new UnsupportedOperationException("Changing divider drawables have no effect. ChipGroup do not use divider drawables as spacing."); }
  
  @Deprecated
  public void setFlexWrap(int paramInt) { throw new UnsupportedOperationException("Changing flex wrap not allowed. ChipGroup exposes a singleLine attribute instead."); }
  
  public void setOnCheckedChangeListener(OnCheckedChangeListener paramOnCheckedChangeListener) { this.onCheckedChangeListener = paramOnCheckedChangeListener; }
  
  public void setOnHierarchyChangeListener(ViewGroup.OnHierarchyChangeListener paramOnHierarchyChangeListener) { PassThroughHierarchyChangeListener.access$202(this.passThroughListener, paramOnHierarchyChangeListener); }
  
  @Deprecated
  public void setShowDividerHorizontal(int paramInt) { throw new UnsupportedOperationException("Changing divider modes has no effect. ChipGroup do not use divider drawables as spacing."); }
  
  @Deprecated
  public void setShowDividerVertical(int paramInt) { throw new UnsupportedOperationException("Changing divider modes has no effect. ChipGroup do not use divider drawables as spacing."); }
  
  public void setSingleLine(@BoolRes int paramInt) { setSingleLine(getResources().getBoolean(paramInt)); }
  
  public void setSingleSelection(@BoolRes int paramInt) { setSingleSelection(getResources().getBoolean(paramInt)); }
  
  public void setSingleSelection(boolean paramBoolean) {
    if (this.singleSelection != paramBoolean) {
      this.singleSelection = paramBoolean;
      clearCheck();
    } 
  }
}
