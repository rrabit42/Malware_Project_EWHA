package com.google.android.gms.internal.ads;

import android.content.Context;
import android.os.Binder;
import android.os.Bundle;
import android.os.Looper;
import android.support.annotation.NonNull;
import com.google.android.gms.ads.internal.zzbv;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.internal.BaseGmsClient;
import com.google.android.gms.common.util.VisibleForTesting;

@zzadh
public final class zzaed extends zzadz implements BaseGmsClient.BaseConnectionCallbacks, BaseGmsClient.BaseOnConnectionFailedListener {
  private Context mContext;
  
  private final Object mLock = new Object();
  
  private zzaol<zzaef> zzccp;
  
  private final zzadx zzccq;
  
  @VisibleForTesting
  private zzaee zzcct;
  
  private zzang zzyf;
  
  public zzaed(Context paramContext, zzang paramzzang, zzaol<zzaef> paramzzaol, zzadx paramzzadx) {
    super(paramzzaol, paramzzadx);
    this.mContext = paramContext;
    this.zzyf = paramzzang;
    this.zzccp = paramzzaol;
    this.zzccq = paramzzadx;
    Looper looper = zznk.zzavz;
    if (((Boolean)zzkb.zzik().zzd(looper)).booleanValue()) {
      Looper looper1 = zzbv.zzez().zzsa();
    } else {
      looper = paramContext.getMainLooper();
    } 
    this.zzcct = new zzaee(paramContext, looper, this, this);
    this.zzcct.checkAvailabilityAndConnect();
  }
  
  public final void onConnected(Bundle paramBundle) { zznt(); }
  
  public final void onConnectionFailed(@NonNull ConnectionResult paramConnectionResult) {
    zzakb.zzck("Cannot connect to remote service, fallback to local instance.");
    (new zzaec(this.mContext, this.zzccp, this.zzccq)).zznt();
    Bundle bundle = new Bundle();
    bundle.putString("action", "gms_connection_failed_fallback_to_local");
    zzbv.zzek().zzb(this.mContext, this.zzyf.zzcw, "gmob-apps", bundle, true);
  }
  
  public final void onConnectionSuspended(int paramInt) { zzakb.zzck("Disconnected from remote ad request service."); }
  
  public final void zznz() {
    synchronized (this.mLock) {
      if (this.zzcct.isConnected() || this.zzcct.isConnecting())
        this.zzcct.disconnect(); 
      Binder.flushPendingCommands();
      return;
    } 
  }
  
  public final zzaen zzoa() {
    synchronized (this.mLock) {
      return this.zzcct.zzob();
    } 
  }
}
