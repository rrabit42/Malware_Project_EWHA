package com.google.android.gms.internal.ads;

import java.security.GeneralSecurityException;
import java.util.Arrays;

final class zzavj implements zzayn {
  private final String zzdic;
  
  private final int zzdid;
  
  private zzawe zzdie;
  
  private zzavo zzdif;
  
  private int zzdig;
  
  zzavj(zzaxn paramzzaxn) throws GeneralSecurityException {
    this.zzdic = paramzzaxn.zzyw();
    if (this.zzdic.equals("type.googleapis.com/google.crypto.tink.AesGcmKey"))
      try {
        zzawg zzawg = zzawg.zzt(paramzzaxn.zzyx());
        this.zzdie = (zzawe)zzauo.zzb(paramzzaxn);
        this.zzdid = zzawg.getKeySize();
        return;
      } catch (zzbbu paramzzaxn) {
        throw new GeneralSecurityException("invalid KeyFormat protobuf, expected AesGcmKeyFormat", paramzzaxn);
      }  
    if (this.zzdic.equals("type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey"))
      try {
        zzavq zzavq = zzavq.zzj(paramzzaxn.zzyx());
        this.zzdif = (zzavo)zzauo.zzb(paramzzaxn);
        this.zzdig = zzavq.zzwr().getKeySize();
        int i = zzavq.zzws().getKeySize();
        this.zzdid = this.zzdig + i;
        return;
      } catch (zzbbu paramzzaxn) {
        throw new GeneralSecurityException("invalid KeyFormat protobuf, expected AesGcmKeyFormat", paramzzaxn);
      }  
    String str = String.valueOf(this.zzdic);
    if (str.length() != 0) {
      str = "unsupported AEAD DEM key type: ".concat(str);
    } else {
      str = new String("unsupported AEAD DEM key type: ");
    } 
    throw new GeneralSecurityException(str);
  }
  
  public final zzatz zzi(byte[] paramArrayOfByte) throws GeneralSecurityException {
    if (paramArrayOfByte.length == this.zzdid) {
      zzawe zzawe1;
      if (this.zzdic.equals("type.googleapis.com/google.crypto.tink.AesGcmKey")) {
        zzawe1 = (zzawe)((zzawe.zza)zzawe.zzxk().zza(this.zzdie)).zzs(zzbah.zzc(paramArrayOfByte, 0, this.zzdid)).zzadi();
        return (zzatz)zzauo.zzb(this.zzdic, zzawe1);
      } 
      if (this.zzdic.equals("type.googleapis.com/google.crypto.tink.AesCtrHmacAeadKey")) {
        byte[] arrayOfByte2 = Arrays.copyOfRange(zzawe1, 0, this.zzdig);
        byte[] arrayOfByte1 = Arrays.copyOfRange(zzawe1, this.zzdig, this.zzdid);
        zzavs zzavs = (zzavs)((zzavs.zza)zzavs.zzww().zza(this.zzdif.zzwn())).zzm(zzbah.zzo(arrayOfByte2)).zzadi();
        zzaxc zzaxc = (zzaxc)((zzaxc.zza)zzaxc.zzyn().zza(this.zzdif.zzwo())).zzaf(zzbah.zzo(arrayOfByte1)).zzadi();
        zzavo zzavo1 = (zzavo)zzavo.zzwp().zzal(this.zzdif.getVersion()).zzb(zzavs).zzb(zzaxc).zzadi();
        return (zzatz)zzauo.zzb(this.zzdic, zzavo1);
      } 
      throw new GeneralSecurityException("unknown DEM key type");
    } 
    GeneralSecurityException generalSecurityException = new GeneralSecurityException("Symmetric key has incorrect length");
    throw generalSecurityException;
  }
  
  public final int zzwm() { return this.zzdid; }
}
