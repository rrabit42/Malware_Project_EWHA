package com.google.android.gms.internal.ads;

import java.math.BigInteger;
import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.security.spec.ECField;
import java.security.spec.ECFieldFp;
import java.security.spec.ECParameterSpec;
import java.security.spec.ECPoint;
import java.security.spec.ECPublicKeySpec;
import java.security.spec.EllipticCurve;

public final class zzayt {
  private static BigInteger zza(EllipticCurve paramEllipticCurve) throws GeneralSecurityException {
    ECField eCField = paramEllipticCurve.getField();
    if (eCField instanceof ECFieldFp)
      return ((ECFieldFp)eCField).getP(); 
    throw new GeneralSecurityException("Only curves over prime order fields are supported");
  }
  
  public static KeyPair zza(ECParameterSpec paramECParameterSpec) throws GeneralSecurityException {
    KeyPairGenerator keyPairGenerator = (KeyPairGenerator)zzayy.zzdoe.zzek("EC");
    keyPairGenerator.initialize(paramECParameterSpec);
    return keyPairGenerator.generateKeyPair();
  }
  
  public static ECPublicKey zza(zzayv paramzzayv, byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) throws GeneralSecurityException {
    ECParameterSpec eCParameterSpec = zza(paramzzayv);
    ECPoint eCPoint = new ECPoint(new BigInteger(1, paramArrayOfByte1), new BigInteger(1, paramArrayOfByte2));
    zza(eCPoint, eCParameterSpec.getCurve());
    ECPublicKeySpec eCPublicKeySpec = new ECPublicKeySpec(eCPoint, eCParameterSpec);
    return (ECPublicKey)((KeyFactory)zzayy.zzdof.zzek("EC")).generatePublic(eCPublicKeySpec);
  }
  
  public static ECParameterSpec zza(zzayv paramzzayv) throws NoSuchAlgorithmException {
    int i = zzayu.zzdnn[paramzzayv.ordinal()];
    if (i != 1) {
      if (i != 2) {
        if (i == 3) {
          String str14 = "6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151";
          str = "6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449";
          String str11 = "051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00";
          String str12 = "c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66";
          String str13 = "11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650";
          return zza(str14, str, str11, str12, str13);
        } 
        String str;
        StringBuilder stringBuilder = new StringBuilder((str = String.valueOf(str)).valueOf(str).length() + 22);
        stringBuilder.append("curve not implemented:");
        stringBuilder.append(str);
        throw new NoSuchAlgorithmException(stringBuilder.toString());
      } 
      String str10 = "39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319";
      String str6 = "39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643";
      String str7 = "b3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef";
      String str8 = "aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7";
      String str9 = "3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f";
      return zza(str10, str6, str7, str8, str9);
    } 
    String str5 = "115792089210356248762697446949407573530086143415290314195533631308867097853951";
    String str1 = "115792089210356248762697446949407573529996955224135760342422259061068512044369";
    String str2 = "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b";
    String str3 = "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
    String str4 = "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5";
    return zza(str5, str1, str2, str3, str4);
  }
  
  private static ECParameterSpec zza(String paramString1, String paramString2, String paramString3, String paramString4, String paramString5) {
    BigInteger bigInteger1 = new BigInteger(paramString1);
    BigInteger bigInteger2 = new BigInteger(paramString2);
    BigInteger bigInteger6 = bigInteger1.subtract(new BigInteger("3"));
    BigInteger bigInteger3 = new BigInteger(paramString3, 16);
    BigInteger bigInteger4 = new BigInteger(paramString4, 16);
    BigInteger bigInteger5 = new BigInteger(paramString5, 16);
    return new ECParameterSpec(new EllipticCurve(new ECFieldFp(bigInteger1), bigInteger6, bigInteger3), new ECPoint(bigInteger4, bigInteger5), bigInteger2, 1);
  }
  
  static void zza(ECPoint paramECPoint, EllipticCurve paramEllipticCurve) throws GeneralSecurityException {
    BigInteger bigInteger2 = zza(paramEllipticCurve);
    BigInteger bigInteger3 = paramECPoint.getAffineX();
    BigInteger bigInteger1 = paramECPoint.getAffineY();
    if (bigInteger3 != null && bigInteger1 != null) {
      if (bigInteger3.signum() != -1 && bigInteger3.compareTo(bigInteger2) == -1) {
        if (bigInteger1.signum() != -1 && bigInteger1.compareTo(bigInteger2) == -1) {
          if (bigInteger1.multiply(bigInteger1).mod(bigInteger2).equals(bigInteger3.multiply(bigInteger3).add(paramEllipticCurve.getA()).multiply(bigInteger3).add(paramEllipticCurve.getB()).mod(bigInteger2)))
            return; 
          throw new GeneralSecurityException("Point is not on curve");
        } 
        throw new GeneralSecurityException("y is out of range");
      } 
      throw new GeneralSecurityException("x is out of range");
    } 
    throw new GeneralSecurityException("point is at infinity");
  }
  
  public static byte[] zza(ECPrivateKey paramECPrivateKey, ECPoint paramECPoint) throws GeneralSecurityException { // Byte code:
    //   0: aload_1
    //   1: aload_0
    //   2: invokeinterface getParams : ()Ljava/security/spec/ECParameterSpec;
    //   7: invokevirtual getCurve : ()Ljava/security/spec/EllipticCurve;
    //   10: invokestatic zza : (Ljava/security/spec/ECPoint;Ljava/security/spec/EllipticCurve;)V
    //   13: aload_0
    //   14: invokeinterface getParams : ()Ljava/security/spec/ECParameterSpec;
    //   19: astore #4
    //   21: aload #4
    //   23: invokevirtual getCurve : ()Ljava/security/spec/EllipticCurve;
    //   26: pop
    //   27: new java/security/spec/ECPublicKeySpec
    //   30: dup
    //   31: aload_1
    //   32: aload #4
    //   34: invokespecial <init> : (Ljava/security/spec/ECPoint;Ljava/security/spec/ECParameterSpec;)V
    //   37: astore_1
    //   38: ldc 'EC'
    //   40: invokestatic getInstance : (Ljava/lang/String;)Ljava/security/KeyFactory;
    //   43: aload_1
    //   44: invokevirtual generatePublic : (Ljava/security/spec/KeySpec;)Ljava/security/PublicKey;
    //   47: astore_1
    //   48: getstatic com/google/android/gms/internal/ads/zzayy.zzdod : Lcom/google/android/gms/internal/ads/zzayy;
    //   51: ldc 'ECDH'
    //   53: invokevirtual zzek : (Ljava/lang/String;)Ljava/lang/Object;
    //   56: checkcast javax/crypto/KeyAgreement
    //   59: astore #4
    //   61: aload #4
    //   63: aload_0
    //   64: invokevirtual init : (Ljava/security/Key;)V
    //   67: aload #4
    //   69: aload_1
    //   70: iconst_1
    //   71: invokevirtual doPhase : (Ljava/security/Key;Z)Ljava/security/Key;
    //   74: pop
    //   75: aload #4
    //   77: invokevirtual generateSecret : ()[B
    //   80: astore #7
    //   82: aload_0
    //   83: invokeinterface getParams : ()Ljava/security/spec/ECParameterSpec;
    //   88: invokevirtual getCurve : ()Ljava/security/spec/EllipticCurve;
    //   91: astore #4
    //   93: new java/math/BigInteger
    //   96: dup
    //   97: iconst_1
    //   98: aload #7
    //   100: invokespecial <init> : (I[B)V
    //   103: astore_0
    //   104: aload_0
    //   105: invokevirtual signum : ()I
    //   108: iconst_m1
    //   109: if_icmpeq -> 647
    //   112: aload_0
    //   113: aload #4
    //   115: invokestatic zza : (Ljava/security/spec/EllipticCurve;)Ljava/math/BigInteger;
    //   118: invokevirtual compareTo : (Ljava/math/BigInteger;)I
    //   121: iconst_m1
    //   122: if_icmpne -> 647
    //   125: aload #4
    //   127: invokestatic zza : (Ljava/security/spec/EllipticCurve;)Ljava/math/BigInteger;
    //   130: astore #8
    //   132: aload #4
    //   134: invokevirtual getA : ()Ljava/math/BigInteger;
    //   137: astore_1
    //   138: aload #4
    //   140: invokevirtual getB : ()Ljava/math/BigInteger;
    //   143: astore #4
    //   145: aload_0
    //   146: aload_0
    //   147: invokevirtual multiply : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   150: aload_1
    //   151: invokevirtual add : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   154: aload_0
    //   155: invokevirtual multiply : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   158: aload #4
    //   160: invokevirtual add : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   163: aload #8
    //   165: invokevirtual mod : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   168: astore_0
    //   169: aload #8
    //   171: invokevirtual signum : ()I
    //   174: iconst_1
    //   175: if_icmpne -> 636
    //   178: aload_0
    //   179: aload #8
    //   181: invokevirtual mod : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   184: astore #9
    //   186: aconst_null
    //   187: astore_1
    //   188: aload #9
    //   190: getstatic java/math/BigInteger.ZERO : Ljava/math/BigInteger;
    //   193: invokevirtual equals : (Ljava/lang/Object;)Z
    //   196: ifeq -> 206
    //   199: getstatic java/math/BigInteger.ZERO : Ljava/math/BigInteger;
    //   202: astore_1
    //   203: goto -> 612
    //   206: aload #8
    //   208: iconst_0
    //   209: invokevirtual testBit : (I)Z
    //   212: ifeq -> 247
    //   215: aload #8
    //   217: iconst_1
    //   218: invokevirtual testBit : (I)Z
    //   221: ifeq -> 247
    //   224: aload #9
    //   226: aload #8
    //   228: getstatic java/math/BigInteger.ONE : Ljava/math/BigInteger;
    //   231: invokevirtual add : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   234: iconst_2
    //   235: invokevirtual shiftRight : (I)Ljava/math/BigInteger;
    //   238: aload #8
    //   240: invokevirtual modPow : (Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   243: astore_0
    //   244: goto -> 572
    //   247: aload_1
    //   248: astore_0
    //   249: aload #8
    //   251: iconst_0
    //   252: invokevirtual testBit : (I)Z
    //   255: ifeq -> 572
    //   258: aload_1
    //   259: astore_0
    //   260: aload #8
    //   262: iconst_1
    //   263: invokevirtual testBit : (I)Z
    //   266: ifne -> 572
    //   269: getstatic java/math/BigInteger.ONE : Ljava/math/BigInteger;
    //   272: astore_0
    //   273: aload #8
    //   275: getstatic java/math/BigInteger.ONE : Ljava/math/BigInteger;
    //   278: invokevirtual subtract : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   281: iconst_1
    //   282: invokevirtual shiftRight : (I)Ljava/math/BigInteger;
    //   285: astore #4
    //   287: iconst_0
    //   288: istore_2
    //   289: aload_0
    //   290: aload_0
    //   291: invokevirtual multiply : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   294: aload #9
    //   296: invokevirtual subtract : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   299: aload #8
    //   301: invokevirtual mod : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   304: astore #10
    //   306: aload #10
    //   308: getstatic java/math/BigInteger.ZERO : Ljava/math/BigInteger;
    //   311: invokevirtual equals : (Ljava/lang/Object;)Z
    //   314: ifeq -> 322
    //   317: aload_0
    //   318: astore_1
    //   319: goto -> 612
    //   322: aload #10
    //   324: aload #4
    //   326: aload #8
    //   328: invokevirtual modPow : (Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   331: astore_1
    //   332: aload_1
    //   333: getstatic java/math/BigInteger.ONE : Ljava/math/BigInteger;
    //   336: invokevirtual add : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   339: aload #8
    //   341: invokevirtual equals : (Ljava/lang/Object;)Z
    //   344: ifne -> 419
    //   347: aload_1
    //   348: getstatic java/math/BigInteger.ONE : Ljava/math/BigInteger;
    //   351: invokevirtual equals : (Ljava/lang/Object;)Z
    //   354: ifeq -> 408
    //   357: aload_0
    //   358: getstatic java/math/BigInteger.ONE : Ljava/math/BigInteger;
    //   361: invokevirtual add : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   364: astore_1
    //   365: iload_2
    //   366: iconst_1
    //   367: iadd
    //   368: istore_3
    //   369: aload_1
    //   370: astore_0
    //   371: iload_3
    //   372: istore_2
    //   373: iload_3
    //   374: sipush #128
    //   377: if_icmpne -> 289
    //   380: aload #8
    //   382: bipush #80
    //   384: invokevirtual isProbablePrime : (I)Z
    //   387: ifeq -> 397
    //   390: aload_1
    //   391: astore_0
    //   392: iload_3
    //   393: istore_2
    //   394: goto -> 289
    //   397: new java/security/InvalidAlgorithmParameterException
    //   400: dup
    //   401: ldc_w 'p is not prime'
    //   404: invokespecial <init> : (Ljava/lang/String;)V
    //   407: athrow
    //   408: new java/security/InvalidAlgorithmParameterException
    //   411: dup
    //   412: ldc_w 'p is not prime'
    //   415: invokespecial <init> : (Ljava/lang/String;)V
    //   418: athrow
    //   419: aload #8
    //   421: getstatic java/math/BigInteger.ONE : Ljava/math/BigInteger;
    //   424: invokevirtual add : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   427: iconst_1
    //   428: invokevirtual shiftRight : (I)Ljava/math/BigInteger;
    //   431: astore #11
    //   433: getstatic java/math/BigInteger.ONE : Ljava/math/BigInteger;
    //   436: astore_1
    //   437: aload #11
    //   439: invokevirtual bitLength : ()I
    //   442: iconst_2
    //   443: isub
    //   444: istore_2
    //   445: aload_0
    //   446: astore #4
    //   448: iload_2
    //   449: iflt -> 569
    //   452: aload #4
    //   454: aload_1
    //   455: invokevirtual multiply : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   458: astore #6
    //   460: aload #4
    //   462: aload #4
    //   464: invokevirtual multiply : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   467: aload_1
    //   468: aload_1
    //   469: invokevirtual multiply : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   472: aload #8
    //   474: invokevirtual mod : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   477: aload #10
    //   479: invokevirtual multiply : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   482: invokevirtual add : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   485: aload #8
    //   487: invokevirtual mod : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   490: astore #5
    //   492: aload #6
    //   494: aload #6
    //   496: invokevirtual add : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   499: aload #8
    //   501: invokevirtual mod : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   504: astore #6
    //   506: aload #5
    //   508: astore #4
    //   510: aload #6
    //   512: astore_1
    //   513: aload #11
    //   515: iload_2
    //   516: invokevirtual testBit : (I)Z
    //   519: ifeq -> 562
    //   522: aload #5
    //   524: aload_0
    //   525: invokevirtual multiply : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   528: aload #6
    //   530: aload #10
    //   532: invokevirtual multiply : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   535: invokevirtual add : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   538: aload #8
    //   540: invokevirtual mod : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   543: astore #4
    //   545: aload_0
    //   546: aload #6
    //   548: invokevirtual multiply : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   551: aload #5
    //   553: invokevirtual add : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   556: aload #8
    //   558: invokevirtual mod : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   561: astore_1
    //   562: iload_2
    //   563: iconst_1
    //   564: isub
    //   565: istore_2
    //   566: goto -> 448
    //   569: aload #4
    //   571: astore_0
    //   572: aload_0
    //   573: astore_1
    //   574: aload_0
    //   575: ifnull -> 612
    //   578: aload_0
    //   579: aload_0
    //   580: invokevirtual multiply : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   583: aload #8
    //   585: invokevirtual mod : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   588: aload #9
    //   590: invokevirtual compareTo : (Ljava/math/BigInteger;)I
    //   593: ifne -> 601
    //   596: aload_0
    //   597: astore_1
    //   598: goto -> 612
    //   601: new java/security/GeneralSecurityException
    //   604: dup
    //   605: ldc_w 'Could not find a modular square root'
    //   608: invokespecial <init> : (Ljava/lang/String;)V
    //   611: athrow
    //   612: iconst_1
    //   613: aload_1
    //   614: iconst_0
    //   615: invokevirtual testBit : (I)Z
    //   618: if_icmpeq -> 633
    //   621: aload #8
    //   623: aload_1
    //   624: invokevirtual subtract : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   627: aload #8
    //   629: invokevirtual mod : (Ljava/math/BigInteger;)Ljava/math/BigInteger;
    //   632: pop
    //   633: aload #7
    //   635: areturn
    //   636: new java/security/InvalidAlgorithmParameterException
    //   639: dup
    //   640: ldc_w 'p must be positive'
    //   643: invokespecial <init> : (Ljava/lang/String;)V
    //   646: athrow
    //   647: new java/security/GeneralSecurityException
    //   650: dup
    //   651: ldc_w 'shared secret is out of range'
    //   654: invokespecial <init> : (Ljava/lang/String;)V
    //   657: astore_0
    //   658: goto -> 663
    //   661: aload_0
    //   662: athrow
    //   663: goto -> 661 }
  
  public static int zzb(EllipticCurve paramEllipticCurve) throws GeneralSecurityException { return (zza(paramEllipticCurve).subtract(BigInteger.ONE).bitLength() + 7) / 8; }
}
