package com.google.firebase.analytics.connector.internal;

import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import com.google.android.gms.common.util.ArrayUtils;
import com.google.android.gms.measurement.AppMeasurement;
import com.google.android.gms.measurement.internal.zzdw;
import com.google.firebase.analytics.connector.AnalyticsConnector;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public final class zzc {
  private static final Set<String> zzbsw = new HashSet(Arrays.asList(new String[] { 
          "_in", "_xa", "_xu", "_aq", "_aa", "_ai", "_ac", "campaign_details", "_ug", "_iapx", 
          "_exp_set", "_exp_clear", "_exp_activate", "_exp_timeout", "_exp_expire" }));
  
  private static final List<String> zzbsx = Arrays.asList(new String[] { "_e", "_f", "_iap", "_s", "_au", "_ui", "_cd", "app_open" });
  
  private static final List<String> zzbsy = Arrays.asList(new String[] { "auto", "app", "am" });
  
  private static final List<String> zzbsz = Arrays.asList(new String[] { "_r", "_dbg" });
  
  private static final List<String> zzbta = Arrays.asList((String[])ArrayUtils.concat(new String[][] { AppMeasurement.UserProperty.zzaqu, AppMeasurement.UserProperty.zzaqv }));
  
  private static final List<String> zzbtb = Arrays.asList(new String[] { "^_ltv_[A-Z]{3}$", "^_cc[1-5]{1}$" });
  
  public static boolean zza(AnalyticsConnector.ConditionalUserProperty paramConditionalUserProperty) {
    if (paramConditionalUserProperty == null)
      return false; 
    String str = paramConditionalUserProperty.origin;
    if (str != null) {
      if (str.isEmpty())
        return false; 
      if (paramConditionalUserProperty.value != null && zzdw.zze(paramConditionalUserProperty.value) == null)
        return false; 
      if (!zzft(str))
        return false; 
      if (!zzz(str, paramConditionalUserProperty.name))
        return false; 
      if (paramConditionalUserProperty.expiredEventName != null) {
        if (!zza(paramConditionalUserProperty.expiredEventName, paramConditionalUserProperty.expiredEventParams))
          return false; 
        if (!zzb(str, paramConditionalUserProperty.expiredEventName, paramConditionalUserProperty.expiredEventParams))
          return false; 
      } 
      if (paramConditionalUserProperty.triggeredEventName != null) {
        if (!zza(paramConditionalUserProperty.triggeredEventName, paramConditionalUserProperty.triggeredEventParams))
          return false; 
        if (!zzb(str, paramConditionalUserProperty.triggeredEventName, paramConditionalUserProperty.triggeredEventParams))
          return false; 
      } 
      if (paramConditionalUserProperty.timedOutEventName != null) {
        if (!zza(paramConditionalUserProperty.timedOutEventName, paramConditionalUserProperty.timedOutEventParams))
          return false; 
        if (!zzb(str, paramConditionalUserProperty.timedOutEventName, paramConditionalUserProperty.timedOutEventParams))
          return false; 
      } 
      return true;
    } 
    return false;
  }
  
  public static boolean zza(@NonNull String paramString, @Nullable Bundle paramBundle) {
    if (zzbsx.contains(paramString))
      return false; 
    if (paramBundle != null) {
      Iterator iterator = zzbsz.iterator();
      while (iterator.hasNext()) {
        if (paramBundle.containsKey((String)iterator.next()))
          return false; 
      } 
    } 
    return true;
  }
  
  public static AppMeasurement.ConditionalUserProperty zzb(AnalyticsConnector.ConditionalUserProperty paramConditionalUserProperty) {
    AppMeasurement.ConditionalUserProperty conditionalUserProperty = new AppMeasurement.ConditionalUserProperty();
    conditionalUserProperty.mOrigin = paramConditionalUserProperty.origin;
    conditionalUserProperty.mActive = paramConditionalUserProperty.active;
    conditionalUserProperty.mCreationTimestamp = paramConditionalUserProperty.creationTimestamp;
    conditionalUserProperty.mExpiredEventName = paramConditionalUserProperty.expiredEventName;
    if (paramConditionalUserProperty.expiredEventParams != null)
      conditionalUserProperty.mExpiredEventParams = new Bundle(paramConditionalUserProperty.expiredEventParams); 
    conditionalUserProperty.mName = paramConditionalUserProperty.name;
    conditionalUserProperty.mTimedOutEventName = paramConditionalUserProperty.timedOutEventName;
    if (paramConditionalUserProperty.timedOutEventParams != null)
      conditionalUserProperty.mTimedOutEventParams = new Bundle(paramConditionalUserProperty.timedOutEventParams); 
    conditionalUserProperty.mTimeToLive = paramConditionalUserProperty.timeToLive;
    conditionalUserProperty.mTriggeredEventName = paramConditionalUserProperty.triggeredEventName;
    if (paramConditionalUserProperty.triggeredEventParams != null)
      conditionalUserProperty.mTriggeredEventParams = new Bundle(paramConditionalUserProperty.triggeredEventParams); 
    conditionalUserProperty.mTriggeredTimestamp = paramConditionalUserProperty.triggeredTimestamp;
    conditionalUserProperty.mTriggerEventName = paramConditionalUserProperty.triggerEventName;
    conditionalUserProperty.mTriggerTimeout = paramConditionalUserProperty.triggerTimeout;
    if (paramConditionalUserProperty.value != null)
      conditionalUserProperty.mValue = zzdw.zze(paramConditionalUserProperty.value); 
    return conditionalUserProperty;
  }
  
  public static boolean zzb(@NonNull String paramString1, @NonNull String paramString2, @Nullable Bundle paramBundle) {
    if (!"_cmp".equals(paramString2))
      return true; 
    if (!zzft(paramString1))
      return false; 
    if (paramBundle == null)
      return false; 
    Iterator iterator = zzbsz.iterator();
    while (iterator.hasNext()) {
      if (paramBundle.containsKey((String)iterator.next()))
        return false; 
    } 
    byte b = -1;
    int i = paramString1.hashCode();
    if (i != 101200) {
      if (i != 101230) {
        if (i == 3142703 && paramString1.equals("fiam"))
          b = 2; 
      } else if (paramString1.equals("fdl")) {
        b = 1;
      } 
    } else if (paramString1.equals("fcm")) {
      b = 0;
    } 
    if (b != 0) {
      if (b != 1) {
        if (b != 2)
          return false; 
        paramBundle.putString("_cis", "fiam_integration");
        return true;
      } 
      paramBundle.putString("_cis", "fdl_integration");
      return true;
    } 
    paramBundle.putString("_cis", "fcm_integration");
    return true;
  }
  
  public static AnalyticsConnector.ConditionalUserProperty zzd(AppMeasurement.ConditionalUserProperty paramConditionalUserProperty) {
    AnalyticsConnector.ConditionalUserProperty conditionalUserProperty = new AnalyticsConnector.ConditionalUserProperty();
    conditionalUserProperty.origin = paramConditionalUserProperty.mOrigin;
    conditionalUserProperty.active = paramConditionalUserProperty.mActive;
    conditionalUserProperty.creationTimestamp = paramConditionalUserProperty.mCreationTimestamp;
    conditionalUserProperty.expiredEventName = paramConditionalUserProperty.mExpiredEventName;
    if (paramConditionalUserProperty.mExpiredEventParams != null)
      conditionalUserProperty.expiredEventParams = new Bundle(paramConditionalUserProperty.mExpiredEventParams); 
    conditionalUserProperty.name = paramConditionalUserProperty.mName;
    conditionalUserProperty.timedOutEventName = paramConditionalUserProperty.mTimedOutEventName;
    if (paramConditionalUserProperty.mTimedOutEventParams != null)
      conditionalUserProperty.timedOutEventParams = new Bundle(paramConditionalUserProperty.mTimedOutEventParams); 
    conditionalUserProperty.timeToLive = paramConditionalUserProperty.mTimeToLive;
    conditionalUserProperty.triggeredEventName = paramConditionalUserProperty.mTriggeredEventName;
    if (paramConditionalUserProperty.mTriggeredEventParams != null)
      conditionalUserProperty.triggeredEventParams = new Bundle(paramConditionalUserProperty.mTriggeredEventParams); 
    conditionalUserProperty.triggeredTimestamp = paramConditionalUserProperty.mTriggeredTimestamp;
    conditionalUserProperty.triggerEventName = paramConditionalUserProperty.mTriggerEventName;
    conditionalUserProperty.triggerTimeout = paramConditionalUserProperty.mTriggerTimeout;
    if (paramConditionalUserProperty.mValue != null)
      conditionalUserProperty.value = zzdw.zze(paramConditionalUserProperty.mValue); 
    return conditionalUserProperty;
  }
  
  public static boolean zzft(@NonNull String paramString) { return !zzbsy.contains(paramString); }
  
  public static boolean zzfu(@NonNull String paramString) { return !zzbsw.contains(paramString); }
  
  public static boolean zzfv(String paramString) {
    if (paramString == null)
      return false; 
    if (paramString.length() == 0)
      return false; 
    int i = paramString.codePointAt(0);
    if (!Character.isLetter(i))
      return false; 
    int j = paramString.length();
    for (i = Character.charCount(i); i < j; i += Character.charCount(k)) {
      int k = paramString.codePointAt(i);
      if (k != 95 && !Character.isLetterOrDigit(k))
        return false; 
    } 
    return true;
  }
  
  public static boolean zzfw(String paramString) {
    if (paramString == null)
      return false; 
    if (paramString.length() == 0)
      return false; 
    int i = paramString.codePointAt(0);
    if (!Character.isLetter(i) && i != 95)
      return false; 
    int j = paramString.length();
    for (i = Character.charCount(i); i < j; i += Character.charCount(k)) {
      int k = paramString.codePointAt(i);
      if (k != 95 && !Character.isLetterOrDigit(k))
        return false; 
    } 
    return true;
  }
  
  public static String zzfx(String paramString) {
    String str = AppMeasurement.Event.zzcn(paramString);
    return (str != null) ? str : paramString;
  }
  
  public static String zzfy(String paramString) {
    String str = AppMeasurement.Event.zzco(paramString);
    return (str != null) ? str : paramString;
  }
  
  public static boolean zzz(@NonNull String paramString1, @NonNull String paramString2) {
    if ("_ce1".equals(paramString2) || "_ce2".equals(paramString2))
      return !paramString1.equals("fcm") ? (paramString1.equals("frc")) : true; 
    if ("_ln".equals(paramString2))
      return !paramString1.equals("fcm") ? (paramString1.equals("fiam")) : true; 
    if (zzbta.contains(paramString2))
      return false; 
    Iterator iterator = zzbtb.iterator();
    while (iterator.hasNext()) {
      if (paramString2.matches((String)iterator.next()))
        return false; 
    } 
    return true;
  }
}
