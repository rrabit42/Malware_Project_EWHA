package com.google.android.gms.common.internal;

import android.support.annotation.NonNull;
import com.google.android.gms.common.annotation.KeepForSdk;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;

@KeepForSdk
public class LibraryVersion {
  private static final GmsLogger zzel = new GmsLogger("LibraryVersion", "");
  
  private static LibraryVersion zzem = new LibraryVersion();
  
  private ConcurrentHashMap<String, String> zzen = new ConcurrentHashMap();
  
  @KeepForSdk
  public static LibraryVersion getInstance() { return zzem; }
  
  @KeepForSdk
  public String getVersion(@NonNull String paramString) {
    Preconditions.checkNotEmpty(paramString, "Please provide a valid libraryName");
    if (this.zzen.containsKey(paramString))
      return (String)this.zzen.get(paramString); 
    Properties properties = new Properties();
    StringBuilder stringBuilder2 = null;
    gmsLogger = null;
    StringBuilder stringBuilder1 = gmsLogger;
    try {
      InputStream inputStream = LibraryVersion.class.getResourceAsStream(String.format("/%s.properties", new Object[] { paramString }));
      if (inputStream != null) {
        stringBuilder1 = gmsLogger;
        properties.load(inputStream);
        stringBuilder1 = gmsLogger;
        String str1 = properties.getProperty("version", null);
        stringBuilder1 = str1;
        gmsLogger = zzel;
        stringBuilder2 = new StringBuilder((stringBuilder1 = str1).valueOf(paramString).length() + 12 + String.valueOf(str1).length());
        stringBuilder1 = str1;
        stringBuilder2.append(paramString);
        stringBuilder1 = str1;
        stringBuilder2.append(" version is ");
        stringBuilder1 = str1;
        stringBuilder2.append(str1);
        stringBuilder1 = str1;
        gmsLogger.v("LibraryVersion", stringBuilder2.toString());
        stringBuilder1 = str1;
      } else {
        GmsLogger gmsLogger1 = gmsLogger;
        GmsLogger gmsLogger2 = zzel;
        gmsLogger1 = gmsLogger;
        String str1 = String.valueOf(paramString);
        gmsLogger1 = gmsLogger;
        if (str1.length() != 0) {
          gmsLogger1 = gmsLogger;
          str1 = "Failed to get app version for libraryName: ".concat(str1);
        } else {
          gmsLogger1 = gmsLogger;
          str1 = new String("Failed to get app version for libraryName: ");
        } 
        gmsLogger1 = gmsLogger;
        gmsLogger2.e("LibraryVersion", str1);
        stringBuilder1 = stringBuilder2;
      } 
    } catch (IOException gmsLogger) {
      GmsLogger gmsLogger1 = zzel;
      String str1 = String.valueOf(paramString);
      if (str1.length() != 0) {
        str1 = "Failed to get app version for libraryName: ".concat(str1);
      } else {
        str1 = new String("Failed to get app version for libraryName: ");
      } 
      gmsLogger1.e("LibraryVersion", str1, gmsLogger);
    } 
    String str = stringBuilder1;
    if (stringBuilder1 == null) {
      zzel.d("LibraryVersion", ".properties file is dropped during release process. Failure to read app version isexpected druing Google internal testing where locally-built libraries are used");
      str = "UNKNOWN";
    } 
    this.zzen.put(paramString, str);
    return str;
  }
}
