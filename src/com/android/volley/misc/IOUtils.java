package com.android.volley.misc;

import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class IOUtils {
  public static int read(InputStream paramInputStream) throws IOException {
    int i = paramInputStream.read();
    if (i != -1)
      return i; 
    throw new EOFException();
  }
  
  public static int readInt(InputStream paramInputStream) throws IOException {
    int i = read(paramInputStream);
    int j = read(paramInputStream);
    int k = read(paramInputStream);
    return read(paramInputStream) << 24 | i << 0 | false | j << 8 | k << 16;
  }
  
  public static long readLong(InputStream paramInputStream) throws IOException { return (read(paramInputStream) & 0xFFL) << false | 0x0L | (read(paramInputStream) & 0xFFL) << 8 | (read(paramInputStream) & 0xFFL) << 16 | (read(paramInputStream) & 0xFFL) << 24 | (read(paramInputStream) & 0xFFL) << 32 | (read(paramInputStream) & 0xFFL) << 40 | (read(paramInputStream) & 0xFFL) << 48 | (0xFFL & read(paramInputStream)) << 56; }
  
  public static String readString(InputStream paramInputStream) throws IOException { return new String(streamToBytes(paramInputStream, (int)readLong(paramInputStream)), "UTF-8"); }
  
  public static Map<String, String> readStringStringMap(InputStream paramInputStream) throws IOException {
    HashMap hashMap;
    int i = readInt(paramInputStream);
    if (i == 0) {
      hashMap = Collections.emptyMap();
    } else {
      hashMap = new HashMap(i);
    } 
    for (byte b = 0; b < i; b++)
      hashMap.put(readString(paramInputStream).intern(), readString(paramInputStream).intern()); 
    return hashMap;
  }
  
  public static byte[] streamToBytes(InputStream paramInputStream, int paramInt) throws IOException {
    byte[] arrayOfByte = new byte[paramInt];
    int i = 0;
    while (i < paramInt) {
      int j = paramInputStream.read(arrayOfByte, i, paramInt - i);
      if (j != -1)
        i += j; 
    } 
    if (i == paramInt)
      return arrayOfByte; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Expected ");
    stringBuilder.append(paramInt);
    stringBuilder.append(" bytes, read ");
    stringBuilder.append(i);
    stringBuilder.append(" bytes");
    IOException iOException = new IOException(stringBuilder.toString());
    throw iOException;
  }
  
  public static void writeInt(OutputStream paramOutputStream, int paramInt) throws IOException {
    paramOutputStream.write(paramInt >> 0 & 0xFF);
    paramOutputStream.write(paramInt >> 8 & 0xFF);
    paramOutputStream.write(paramInt >> 16 & 0xFF);
    paramOutputStream.write(paramInt >> 24 & 0xFF);
  }
  
  public static void writeLong(OutputStream paramOutputStream, long paramLong) throws IOException {
    paramOutputStream.write((byte)(int)(paramLong >>> false));
    paramOutputStream.write((byte)(int)(paramLong >>> 8));
    paramOutputStream.write((byte)(int)(paramLong >>> 16));
    paramOutputStream.write((byte)(int)(paramLong >>> 24));
    paramOutputStream.write((byte)(int)(paramLong >>> 32));
    paramOutputStream.write((byte)(int)(paramLong >>> 40));
    paramOutputStream.write((byte)(int)(paramLong >>> 48));
    paramOutputStream.write((byte)(int)(paramLong >>> 56));
  }
  
  public static void writeString(OutputStream paramOutputStream, String paramString) throws IOException {
    byte[] arrayOfByte = paramString.getBytes("UTF-8");
    writeLong(paramOutputStream, arrayOfByte.length);
    paramOutputStream.write(arrayOfByte, 0, arrayOfByte.length);
  }
  
  public static void writeStringStringMap(Map<String, String> paramMap, OutputStream paramOutputStream) throws IOException {
    if (paramMap != null) {
      writeInt(paramOutputStream, paramMap.size());
      for (Map.Entry entry : paramMap.entrySet()) {
        writeString(paramOutputStream, (String)entry.getKey());
        writeString(paramOutputStream, (String)entry.getValue());
      } 
    } else {
      writeInt(paramOutputStream, 0);
    } 
  }
}
