package com.google.android.gms.internal.ads;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.os.Message;
import android.view.View;
import android.view.WindowManager;
import android.webkit.ConsoleMessage;
import android.webkit.GeolocationPermissions;
import android.webkit.JsPromptResult;
import android.webkit.JsResult;
import android.webkit.PermissionRequest;
import android.webkit.WebChromeClient;
import android.webkit.WebStorage;
import android.webkit.WebView;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.google.android.gms.ads.internal.overlay.zzd;
import com.google.android.gms.ads.internal.zzx;
import com.google.android.gms.common.util.PlatformVersion;

@zzadh
@TargetApi(11)
public final class zzaqo extends WebChromeClient {
  private final zzaqw zzbnd;
  
  public zzaqo(zzaqw paramzzaqw) { this.zzbnd = paramzzaqw; }
  
  private static Context zza(WebView paramWebView) {
    if (!(paramWebView instanceof zzaqw))
      return paramWebView.getContext(); 
    zzaqw zzaqw1 = (zzaqw)paramWebView;
    Activity activity = zzaqw1.zzto();
    return (activity != null) ? activity : zzaqw1.getContext();
  }
  
  private final boolean zza(Context paramContext, String paramString1, String paramString2, String paramString3, String paramString4, JsResult paramJsResult, JsPromptResult paramJsPromptResult, boolean paramBoolean) {
    try {
      TextView textView;
      StringBuilder stringBuilder;
      if (this.zzbnd != null && this.zzbnd.zzuf() != null && this.zzbnd.zzuf().zzut() != null) {
        zzx zzx = this.zzbnd.zzuf().zzut();
        if (zzx != null && !zzx.zzcy()) {
          stringBuilder = new StringBuilder(String.valueOf(paramString1).length() + 11 + String.valueOf(paramString3).length());
          stringBuilder.append("window.");
          stringBuilder.append(paramString1);
          stringBuilder.append("('");
          stringBuilder.append(paramString3);
          stringBuilder.append("')");
          zzx.zzs(stringBuilder.toString());
          return false;
        } 
      } 
      AlertDialog.Builder builder = new AlertDialog.Builder(stringBuilder);
      builder.setTitle(paramString2);
      if (paramBoolean) {
        LinearLayout linearLayout = new LinearLayout(stringBuilder);
        linearLayout.setOrientation(1);
        textView = new TextView(stringBuilder);
        textView.setText(paramString3);
        EditText editText = new EditText(stringBuilder);
        editText.setText(paramString4);
        linearLayout.addView(textView);
        linearLayout.addView(editText);
        AlertDialog alertDialog1 = builder.setView(linearLayout).setPositiveButton(17039370, new zzaqu(paramJsPromptResult, editText)).setNegativeButton(17039360, new zzaqt(paramJsPromptResult)).setOnCancelListener(new zzaqs(paramJsPromptResult)).create();
        alertDialog1.show();
        return true;
      } 
      AlertDialog alertDialog = builder.setMessage(paramString3).setPositiveButton(17039370, new zzaqr(textView)).setNegativeButton(17039360, new zzaqq(textView)).setOnCancelListener(new zzaqp(textView)).create();
      alertDialog.show();
      return true;
    } catch (android.view.WindowManager.BadTokenException paramContext) {
      zzakb.zzc("Fail to display Dialog.", paramContext);
      return true;
    } 
  }
  
  public final void onCloseWindow(WebView paramWebView) {
    String str;
    if (!(paramWebView instanceof zzaqw)) {
      str = "Tried to close a WebView that wasn't an AdWebView.";
    } else {
      str = ((zzaqw)str).zzub();
      if (str == null) {
        str = "Tried to close an AdWebView not associated with an overlay.";
      } else {
        str.close();
        return;
      } 
    } 
    zzakb.zzdk(str);
  }
  
  public final boolean onConsoleMessage(ConsoleMessage paramConsoleMessage) {
    String str1 = paramConsoleMessage.message();
    String str2 = paramConsoleMessage.sourceId();
    int i = paramConsoleMessage.lineNumber();
    StringBuilder stringBuilder = new StringBuilder(String.valueOf(str1).length() + 19 + String.valueOf(str2).length());
    stringBuilder.append("JS: ");
    stringBuilder.append(str1);
    stringBuilder.append(" (");
    stringBuilder.append(str2);
    stringBuilder.append(":");
    stringBuilder.append(i);
    stringBuilder.append(")");
    str1 = stringBuilder.toString();
    if (str1.contains("Application Cache"))
      return super.onConsoleMessage(paramConsoleMessage); 
    i = zzaqv.zzdbn[paramConsoleMessage.messageLevel().ordinal()];
    if (i != 1) {
      if (i != 2) {
        if (i == 3 || i == 4 || i != 5) {
          zzakb.zzdj(str1);
        } else {
          zzakb.zzck(str1);
        } 
      } else {
        zzakb.zzdk(str1);
      } 
    } else {
      zzakb.e(str1);
    } 
    return super.onConsoleMessage(paramConsoleMessage);
  }
  
  public final boolean onCreateWindow(WebView paramWebView, boolean paramBoolean1, boolean paramBoolean2, Message paramMessage) {
    WebView.WebViewTransport webViewTransport = (WebView.WebViewTransport)paramMessage.obj;
    paramWebView = new WebView(paramWebView.getContext());
    if (this.zzbnd.zzug() != null)
      paramWebView.setWebViewClient(this.zzbnd.zzug()); 
    webViewTransport.setWebView(paramWebView);
    paramMessage.sendToTarget();
    return true;
  }
  
  public final void onExceededDatabaseQuota(String paramString1, String paramString2, long paramLong1, long paramLong2, long paramLong3, WebStorage.QuotaUpdater paramQuotaUpdater) {
    long l = 5242880L - paramLong3;
    if (l <= 0L) {
      paramQuotaUpdater.updateQuota(paramLong1);
      return;
    } 
    if (paramLong1 == 0L) {
      if (paramLong2 > l || paramLong2 > 1048576L)
        paramLong2 = 0L; 
    } else {
      if (paramLong2 == 0L) {
        paramLong3 = Math.min(paramLong1 + Math.min(131072L, l), 1048576L);
      } else {
        paramLong3 = paramLong1;
        if (paramLong2 <= Math.min(1048576L - paramLong1, l))
          paramLong3 = paramLong1 + paramLong2; 
      } 
      paramLong2 = paramLong3;
    } 
    paramQuotaUpdater.updateQuota(paramLong2);
  }
  
  public final void onGeolocationPermissionsShowPrompt(String paramString, GeolocationPermissions.Callback paramCallback) { // Byte code:
    //   0: aload_2
    //   1: ifnull -> 67
    //   4: invokestatic zzek : ()Lcom/google/android/gms/internal/ads/zzakk;
    //   7: pop
    //   8: aload_0
    //   9: getfield zzbnd : Lcom/google/android/gms/internal/ads/zzaqw;
    //   12: invokeinterface getContext : ()Landroid/content/Context;
    //   17: ldc_w 'android.permission.ACCESS_FINE_LOCATION'
    //   20: invokestatic zzl : (Landroid/content/Context;Ljava/lang/String;)Z
    //   23: ifne -> 56
    //   26: invokestatic zzek : ()Lcom/google/android/gms/internal/ads/zzakk;
    //   29: pop
    //   30: aload_0
    //   31: getfield zzbnd : Lcom/google/android/gms/internal/ads/zzaqw;
    //   34: invokeinterface getContext : ()Landroid/content/Context;
    //   39: ldc_w 'android.permission.ACCESS_COARSE_LOCATION'
    //   42: invokestatic zzl : (Landroid/content/Context;Ljava/lang/String;)Z
    //   45: ifeq -> 51
    //   48: goto -> 56
    //   51: iconst_0
    //   52: istore_3
    //   53: goto -> 58
    //   56: iconst_1
    //   57: istore_3
    //   58: aload_2
    //   59: aload_1
    //   60: iload_3
    //   61: iconst_1
    //   62: invokeinterface invoke : (Ljava/lang/String;ZZ)V
    //   67: return }
  
  public final void onHideCustomView() {
    zzd zzd = this.zzbnd.zzub();
    if (zzd == null) {
      zzakb.zzdk("Could not get ad overlay when hiding custom view.");
      return;
    } 
    zzd.zznh();
  }
  
  public final boolean onJsAlert(WebView paramWebView, String paramString1, String paramString2, JsResult paramJsResult) { return zza(zza(paramWebView), "alert", paramString1, paramString2, null, paramJsResult, null, false); }
  
  public final boolean onJsBeforeUnload(WebView paramWebView, String paramString1, String paramString2, JsResult paramJsResult) { return zza(zza(paramWebView), "onBeforeUnload", paramString1, paramString2, null, paramJsResult, null, false); }
  
  public final boolean onJsConfirm(WebView paramWebView, String paramString1, String paramString2, JsResult paramJsResult) { return zza(zza(paramWebView), "confirm", paramString1, paramString2, null, paramJsResult, null, false); }
  
  public final boolean onJsPrompt(WebView paramWebView, String paramString1, String paramString2, String paramString3, JsPromptResult paramJsPromptResult) { return zza(zza(paramWebView), "prompt", paramString1, paramString2, paramString3, null, paramJsPromptResult, true); }
  
  @TargetApi(21)
  public final void onPermissionRequest(PermissionRequest paramPermissionRequest) {
    if (PlatformVersion.isAtLeastLollipop()) {
      zzna zzna = zznk.zzayb;
      if (!((Boolean)zzkb.zzik().zzd(zzna)).booleanValue()) {
        zzaqw zzaqw1 = this.zzbnd;
        if (zzaqw1 == null || zzaqw1.zzuf() == null || this.zzbnd.zzuf().zzvf() == null) {
          super.onPermissionRequest(paramPermissionRequest);
          return;
        } 
        String[] arrayOfString = this.zzbnd.zzuf().zzvf().zzb(paramPermissionRequest.getResources());
        if (arrayOfString.length > 0) {
          paramPermissionRequest.grant(arrayOfString);
          return;
        } 
        paramPermissionRequest.deny();
        return;
      } 
    } 
    super.onPermissionRequest(paramPermissionRequest);
  }
  
  public final void onReachedMaxAppCacheSize(long paramLong1, long paramLong2, WebStorage.QuotaUpdater paramQuotaUpdater) {
    paramLong1 += 131072L;
    if (5242880L - paramLong2 < paramLong1) {
      paramQuotaUpdater.updateQuota(0L);
      return;
    } 
    paramQuotaUpdater.updateQuota(paramLong1);
  }
  
  @Deprecated
  public final void onShowCustomView(View paramView, int paramInt, WebChromeClient.CustomViewCallback paramCustomViewCallback) {
    zzd zzd = this.zzbnd.zzub();
    if (zzd == null) {
      zzakb.zzdk("Could not get ad overlay when showing custom view.");
      paramCustomViewCallback.onCustomViewHidden();
      return;
    } 
    zzd.zza(paramView, paramCustomViewCallback);
    zzd.setRequestedOrientation(paramInt);
  }
  
  public final void onShowCustomView(View paramView, WebChromeClient.CustomViewCallback paramCustomViewCallback) { onShowCustomView(paramView, -1, paramCustomViewCallback); }
}
