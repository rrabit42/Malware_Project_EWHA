package com.android.volley;

import android.net.Uri;
import android.os.Handler;
import android.os.Looper;
import android.text.TextUtils;
import com.android.volley.error.AuthFailureError;
import com.android.volley.error.VolleyError;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Collections;
import java.util.Map;

public abstract class Request<T> extends Object implements Comparable<Request<T>> {
  private static final String DEFAULT_PARAMS_ENCODING = "UTF-8";
  
  private Cache.Entry mCacheEntry;
  
  private boolean mCanceled;
  
  private final int mDefaultTrafficStatsTag;
  
  private final Response.ErrorListener mErrorListener;
  
  private final VolleyLog.MarkerLog mEventLog;
  
  private final int mMethod;
  
  private Map<String, String> mParams;
  
  private Priority mPriority;
  
  private Map<String, String> mRequestHeaders;
  
  private RequestQueue mRequestQueue;
  
  private boolean mResponseDelivered;
  
  private RetryPolicy mRetryPolicy;
  
  private Integer mSequence;
  
  private boolean mShouldCache;
  
  private boolean mShouldOverridePatch;
  
  private Object mTag;
  
  private final String mUrl;
  
  public Request(int paramInt, String paramString, Priority paramPriority, Response.ErrorListener paramErrorListener, RetryPolicy paramRetryPolicy) {
    if (VolleyLog.MarkerLog.ENABLED) {
      object = new VolleyLog.MarkerLog();
    } else {
      object = null;
    } 
    this.mEventLog = object;
    this.mShouldCache = true;
    this.mCanceled = false;
    this.mResponseDelivered = false;
    this.mCacheEntry = null;
    this.mRequestHeaders = null;
    this.mParams = null;
    this.mShouldOverridePatch = false;
    this.mMethod = paramInt;
    this.mUrl = paramString;
    this.mPriority = paramPriority;
    this.mErrorListener = paramErrorListener;
    DefaultRetryPolicy defaultRetryPolicy = paramRetryPolicy;
    if (paramRetryPolicy == null)
      defaultRetryPolicy = new DefaultRetryPolicy(); 
    this.mDefaultTrafficStatsTag = setRetryPolicy(defaultRetryPolicy).findDefaultTrafficStatsTag(paramString);
  }
  
  public Request(int paramInt, String paramString, Response.ErrorListener paramErrorListener) { this(paramInt, paramString, paramErrorListener, null); }
  
  public Request(int paramInt, String paramString, Response.ErrorListener paramErrorListener, RetryPolicy paramRetryPolicy) { this(paramInt, paramString, Priority.NORMAL, paramErrorListener, paramRetryPolicy); }
  
  private byte[] encodeParameters(Map<String, String> paramMap, String paramString) {
    StringBuilder stringBuilder = new StringBuilder();
    try {
      for (Map.Entry entry : paramMap.entrySet()) {
        if (entry.getValue() == null)
          continue; 
        stringBuilder.append(URLEncoder.encode((String)entry.getKey(), paramString));
        stringBuilder.append('=');
        stringBuilder.append(URLEncoder.encode((String)entry.getValue(), paramString));
        stringBuilder.append('&');
      } 
      return stringBuilder.toString().getBytes(paramString);
    } catch (UnsupportedEncodingException paramMap) {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Encoding not supported: ");
      stringBuilder.append(paramString);
      RuntimeException runtimeException = new RuntimeException(stringBuilder.toString(), paramMap);
      throw runtimeException;
    } 
  }
  
  private static int findDefaultTrafficStatsTag(String paramString) {
    if (!TextUtils.isEmpty(paramString)) {
      Uri uri = Uri.parse(paramString);
      if (uri != null) {
        String str = uri.getHost();
        if (str != null)
          return str.hashCode(); 
      } 
    } 
    return 0;
  }
  
  public void addMarker(String paramString) {
    try {
      if (VolleyLog.MarkerLog.ENABLED)
        this.mEventLog.add(paramString, Thread.currentThread().getId()); 
      return;
    } catch (Exception paramString) {
      return;
    } 
  }
  
  public void cancel() { this.mCanceled = true; }
  
  public int compareTo(Request<T> paramRequest) {
    Priority priority1 = getPriority();
    Priority priority2 = paramRequest.getPriority();
    return (priority1 == priority2) ? (this.mSequence.intValue() - paramRequest.mSequence.intValue()) : (priority2.ordinal() - priority1.ordinal());
  }
  
  public void deliverError(VolleyError paramVolleyError) {
    Response.ErrorListener errorListener = this.mErrorListener;
    if (errorListener != null)
      errorListener.onErrorResponse(paramVolleyError); 
  }
  
  protected abstract void deliverResponse(T paramT);
  
  void finish(String paramString) {
    RequestQueue requestQueue = this.mRequestQueue;
    if (requestQueue != null)
      requestQueue.finish(this); 
    if (VolleyLog.MarkerLog.ENABLED)
      try {
        long l = Thread.currentThread().getId();
        if (Looper.myLooper() != Looper.getMainLooper()) {
          (new Handler(Looper.getMainLooper())).post(new Object(this, paramString, l));
          return;
        } 
        this.mEventLog.add(paramString, l);
        this.mEventLog.finish(toString());
        return;
      } catch (Exception paramString) {
        return;
      }  
  }
  
  public byte[] getBody() throws AuthFailureError {
    Map map = getParams();
    return (map != null && map.size() > 0) ? encodeParameters(map, getParamsEncoding()) : null;
  }
  
  public String getBodyContentType() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("application/x-www-form-urlencoded; charset=");
    stringBuilder.append(getParamsEncoding());
    return stringBuilder.toString();
  }
  
  public Cache.Entry getCacheEntry() { return this.mCacheEntry; }
  
  public String getCacheKey() { return getUrl(); }
  
  public String getEncodedUrlParams() {
    stringBuilder = new StringBuilder();
    String str = getParamsEncoding();
    Map map = getParams();
    try {
      for (Map.Entry entry : map.entrySet()) {
        if (entry.getValue() == null)
          continue; 
        stringBuilder.append(URLEncoder.encode((String)entry.getKey(), str));
        stringBuilder.append('=');
        stringBuilder.append(URLEncoder.encode((String)entry.getValue(), str));
        stringBuilder.append('&');
      } 
      return stringBuilder.toString();
    } catch (UnsupportedEncodingException stringBuilder) {
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("Encoding not supported: ");
      stringBuilder1.append(str);
      RuntimeException runtimeException = new RuntimeException(stringBuilder1.toString(), stringBuilder);
      throw runtimeException;
    } 
  }
  
  public Response.ErrorListener getErrorListener() { return this.mErrorListener; }
  
  public Map<String, String> getHeaders() throws AuthFailureError {
    Map map2 = this.mRequestHeaders;
    Map map1 = map2;
    if (map2 == null)
      map1 = Collections.emptyMap(); 
    return map1;
  }
  
  public int getMethod() { return this.mMethod; }
  
  protected Map<String, String> getParams() throws AuthFailureError {
    Map map2 = this.mParams;
    Map map1 = map2;
    if (map2 == null)
      map1 = Collections.emptyMap(); 
    return map1;
  }
  
  protected String getParamsEncoding() { return "UTF-8"; }
  
  public byte[] getPostBody() throws AuthFailureError {
    Map map = getPostParams();
    return (map != null && map.size() > 0) ? encodeParameters(map, getPostParamsEncoding()) : null;
  }
  
  public String getPostBodyContentType() { return getBodyContentType(); }
  
  protected Map<String, String> getPostParams() throws AuthFailureError { return getParams(); }
  
  protected String getPostParamsEncoding() { return getParamsEncoding(); }
  
  public Priority getPriority() { return this.mPriority; }
  
  public RetryPolicy getRetryPolicy() { return this.mRetryPolicy; }
  
  public final int getSequence() {
    Integer integer = this.mSequence;
    if (integer != null)
      return integer.intValue(); 
    throw new IllegalStateException("getSequence called before setSequence");
  }
  
  public Object getTag() { return this.mTag; }
  
  public final int getTimeoutMs() { return this.mRetryPolicy.getCurrentTimeout(); }
  
  public int getTrafficStatsTag() { return this.mDefaultTrafficStatsTag; }
  
  public String getUrl() {
    try {
      if (this.mMethod == 0 && getParams() != null && getParams().size() != 0) {
        String str2 = getEncodedUrlParams();
        String str1 = "";
        null = str1;
        if (str2 != null) {
          null = str1;
          if (str2.length() > 0) {
            if (!this.mUrl.endsWith("?")) {
              StringBuilder stringBuilder2 = new StringBuilder();
              stringBuilder2.append("");
              stringBuilder2.append("?");
              str1 = stringBuilder2.toString();
            } 
            StringBuilder stringBuilder1 = new StringBuilder();
            stringBuilder1.append(str1);
            stringBuilder1.append(str2);
            null = stringBuilder1.toString();
          } 
        } 
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(this.mUrl);
        stringBuilder.append(null);
        return stringBuilder.toString();
      } 
    } catch (AuthFailureError authFailureError) {}
    return this.mUrl;
  }
  
  public boolean hasHadResponseDelivered() { return this.mResponseDelivered; }
  
  public boolean isCanceled() { return this.mCanceled; }
  
  public void markDelivered() { this.mResponseDelivered = true; }
  
  public final void overridePatch(boolean paramBoolean) { this.mShouldOverridePatch = paramBoolean; }
  
  protected VolleyError parseNetworkError(VolleyError paramVolleyError) { return paramVolleyError; }
  
  protected abstract Response<T> parseNetworkResponse(NetworkResponse paramNetworkResponse);
  
  public void setCacheEntry(Cache.Entry paramEntry) { this.mCacheEntry = paramEntry; }
  
  public void setHeaders(Map<String, String> paramMap) { this.mRequestHeaders = paramMap; }
  
  public void setParams(Map<String, String> paramMap) { this.mParams = paramMap; }
  
  public void setPriority(Priority paramPriority) throws IllegalStateException {
    if (this.mRequestQueue == null) {
      this.mPriority = paramPriority;
      return;
    } 
    throw new IllegalStateException("Cannot change priority after adding to request queue");
  }
  
  public void setRequestQueue(RequestQueue paramRequestQueue) { this.mRequestQueue = paramRequestQueue; }
  
  public Request<?> setRetryPolicy(RetryPolicy paramRetryPolicy) {
    this.mRetryPolicy = paramRetryPolicy;
    return this;
  }
  
  public final void setSequence(int paramInt) { this.mSequence = Integer.valueOf(paramInt); }
  
  public final void setShouldCache(boolean paramBoolean) { this.mShouldCache = paramBoolean; }
  
  public Request<?> setTag(Object paramObject) {
    this.mTag = paramObject;
    return this;
  }
  
  public final boolean shouldCache() { return (this.mMethod == 0) ? (this.mShouldCache & true) : 0; }
  
  public final boolean shouldOverridePatch() { return this.mShouldOverridePatch; }
  
  public String toString() {
    String str1 = new StringBuilder();
    str1.append("0x");
    str1.append(Integer.toHexString(getTrafficStatsTag()));
    String str2 = str1.toString();
    StringBuilder stringBuilder = new StringBuilder();
    if (this.mCanceled) {
      String str = "[X] ";
    } else {
      str1 = "[ ] ";
    } 
    stringBuilder.append(str1);
    stringBuilder.append(getUrl());
    stringBuilder.append(" ");
    stringBuilder.append(str2);
    stringBuilder.append(" ");
    stringBuilder.append(getPriority());
    stringBuilder.append(" ");
    stringBuilder.append(this.mSequence);
    return stringBuilder.toString();
  }
}
