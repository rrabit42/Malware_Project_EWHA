package com.bumptech.glide.load.engine;

import com.bumptech.glide.load.Encoder;
import com.bumptech.glide.load.Key;
import com.bumptech.glide.load.ResourceDecoder;
import com.bumptech.glide.load.ResourceEncoder;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.security.MessageDigest;

class EngineKey implements Key {
  private static final String EMPTY_LOG_STRING = "";
  
  private final ResourceDecoder cacheDecoder;
  
  private final ResourceDecoder decoder;
  
  private final ResourceEncoder encoder;
  
  private int hashCode;
  
  private final int height;
  
  private final String id;
  
  private Key originalKey;
  
  private final Key signature;
  
  private final Encoder sourceEncoder;
  
  private String stringKey;
  
  private final ResourceTranscoder transcoder;
  
  private final Transformation transformation;
  
  private final int width;
  
  public EngineKey(String paramString, Key paramKey, int paramInt1, int paramInt2, ResourceDecoder paramResourceDecoder1, ResourceDecoder paramResourceDecoder2, Transformation paramTransformation, ResourceEncoder paramResourceEncoder, ResourceTranscoder paramResourceTranscoder, Encoder paramEncoder) {
    this.id = paramString;
    this.signature = paramKey;
    this.width = paramInt1;
    this.height = paramInt2;
    this.cacheDecoder = paramResourceDecoder1;
    this.decoder = paramResourceDecoder2;
    this.transformation = paramTransformation;
    this.encoder = paramResourceEncoder;
    this.transcoder = paramResourceTranscoder;
    this.sourceEncoder = paramEncoder;
  }
  
  public boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (paramObject != null) {
      byte b2;
      byte b1;
      if (getClass() != paramObject.getClass())
        return false; 
      paramObject = (EngineKey)paramObject;
      if (!this.id.equals(paramObject.id))
        return false; 
      if (!this.signature.equals(paramObject.signature))
        return false; 
      if (this.height != paramObject.height)
        return false; 
      if (this.width != paramObject.width)
        return false; 
      if (this.transformation == null) {
        b1 = 1;
      } else {
        b1 = 0;
      } 
      if (paramObject.transformation == null) {
        b2 = 1;
      } else {
        b2 = 0;
      } 
      if (b1 ^ b2)
        return false; 
      Transformation transformation1 = this.transformation;
      if (transformation1 != null && !transformation1.getId().equals(paramObject.transformation.getId()))
        return false; 
      if (this.decoder == null) {
        b1 = 1;
      } else {
        b1 = 0;
      } 
      if (paramObject.decoder == null) {
        b2 = 1;
      } else {
        b2 = 0;
      } 
      if ((b1 ^ b2) != 0)
        return false; 
      ResourceDecoder resourceDecoder = this.decoder;
      if (resourceDecoder != null && !resourceDecoder.getId().equals(paramObject.decoder.getId()))
        return false; 
      if (this.cacheDecoder == null) {
        b1 = 1;
      } else {
        b1 = 0;
      } 
      if (paramObject.cacheDecoder == null) {
        b2 = 1;
      } else {
        b2 = 0;
      } 
      if ((b1 ^ b2) != 0)
        return false; 
      resourceDecoder = this.cacheDecoder;
      if (resourceDecoder != null && !resourceDecoder.getId().equals(paramObject.cacheDecoder.getId()))
        return false; 
      if (this.encoder == null) {
        b1 = 1;
      } else {
        b1 = 0;
      } 
      if (paramObject.encoder == null) {
        b2 = 1;
      } else {
        b2 = 0;
      } 
      if ((b1 ^ b2) != 0)
        return false; 
      ResourceEncoder resourceEncoder = this.encoder;
      if (resourceEncoder != null && !resourceEncoder.getId().equals(paramObject.encoder.getId()))
        return false; 
      if (this.transcoder == null) {
        b1 = 1;
      } else {
        b1 = 0;
      } 
      if (paramObject.transcoder == null) {
        b2 = 1;
      } else {
        b2 = 0;
      } 
      if ((b1 ^ b2) != 0)
        return false; 
      ResourceTranscoder resourceTranscoder = this.transcoder;
      if (resourceTranscoder != null && !resourceTranscoder.getId().equals(paramObject.transcoder.getId()))
        return false; 
      if (this.sourceEncoder == null) {
        b1 = 1;
      } else {
        b1 = 0;
      } 
      if (paramObject.sourceEncoder == null) {
        b2 = 1;
      } else {
        b2 = 0;
      } 
      if ((b1 ^ b2) != 0)
        return false; 
      Encoder encoder1 = this.sourceEncoder;
      return !(encoder1 != null && !encoder1.getId().equals(paramObject.sourceEncoder.getId()));
    } 
    return false;
  }
  
  public Key getOriginalKey() {
    if (this.originalKey == null)
      this.originalKey = new OriginalKey(this.id, this.signature); 
    return this.originalKey;
  }
  
  public int hashCode() {
    if (this.hashCode == 0) {
      this.hashCode = this.id.hashCode();
      this.hashCode = this.hashCode * 31 + this.signature.hashCode();
      this.hashCode = this.hashCode * 31 + this.width;
      this.hashCode = this.hashCode * 31 + this.height;
      int k = this.hashCode;
      ResourceDecoder resourceDecoder = this.cacheDecoder;
      int j = 0;
      if (resourceDecoder != null) {
        i = resourceDecoder.getId().hashCode();
      } else {
        i = 0;
      } 
      this.hashCode = k * 31 + i;
      k = this.hashCode;
      resourceDecoder = this.decoder;
      if (resourceDecoder != null) {
        i = resourceDecoder.getId().hashCode();
      } else {
        i = 0;
      } 
      this.hashCode = k * 31 + i;
      k = this.hashCode;
      Transformation transformation1 = this.transformation;
      if (transformation1 != null) {
        i = transformation1.getId().hashCode();
      } else {
        i = 0;
      } 
      this.hashCode = k * 31 + i;
      k = this.hashCode;
      ResourceEncoder resourceEncoder = this.encoder;
      if (resourceEncoder != null) {
        i = resourceEncoder.getId().hashCode();
      } else {
        i = 0;
      } 
      this.hashCode = k * 31 + i;
      k = this.hashCode;
      ResourceTranscoder resourceTranscoder = this.transcoder;
      if (resourceTranscoder != null) {
        i = resourceTranscoder.getId().hashCode();
      } else {
        i = 0;
      } 
      this.hashCode = k * 31 + i;
      k = this.hashCode;
      Encoder encoder1 = this.sourceEncoder;
      int i = j;
      if (encoder1 != null)
        i = encoder1.getId().hashCode(); 
      this.hashCode = k * 31 + i;
    } 
    return this.hashCode;
  }
  
  public String toString() {
    if (this.stringKey == null) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("EngineKey{");
      stringBuilder.append(this.id);
      stringBuilder.append('+');
      stringBuilder.append(this.signature);
      stringBuilder.append("+[");
      stringBuilder.append(this.width);
      stringBuilder.append('x');
      stringBuilder.append(this.height);
      stringBuilder.append("]+");
      stringBuilder.append('\'');
      String str5 = this.cacheDecoder;
      String str6 = "";
      if (str5 != null) {
        String str = str5.getId();
      } else {
        str5 = "";
      } 
      stringBuilder.append(str5);
      stringBuilder.append('\'');
      stringBuilder.append('+');
      stringBuilder.append('\'');
      String str4 = this.decoder;
      if (str4 != null) {
        String str = str4.getId();
      } else {
        str4 = "";
      } 
      stringBuilder.append(str4);
      stringBuilder.append('\'');
      stringBuilder.append('+');
      stringBuilder.append('\'');
      String str3 = this.transformation;
      if (str3 != null) {
        String str = str3.getId();
      } else {
        str3 = "";
      } 
      stringBuilder.append(str3);
      stringBuilder.append('\'');
      stringBuilder.append('+');
      stringBuilder.append('\'');
      String str2 = this.encoder;
      if (str2 != null) {
        String str = str2.getId();
      } else {
        str2 = "";
      } 
      stringBuilder.append(str2);
      stringBuilder.append('\'');
      stringBuilder.append('+');
      stringBuilder.append('\'');
      String str1 = this.transcoder;
      if (str1 != null) {
        String str = str1.getId();
      } else {
        str1 = "";
      } 
      stringBuilder.append(str1);
      stringBuilder.append('\'');
      stringBuilder.append('+');
      stringBuilder.append('\'');
      Encoder encoder1 = this.sourceEncoder;
      str1 = str6;
      if (encoder1 != null)
        str1 = encoder1.getId(); 
      stringBuilder.append(str1);
      stringBuilder.append('\'');
      stringBuilder.append('}');
      this.stringKey = stringBuilder.toString();
    } 
    return this.stringKey;
  }
  
  public void updateDiskCacheKey(MessageDigest paramMessageDigest) throws UnsupportedEncodingException {
    byte[] arrayOfByte = ByteBuffer.allocate(8).putInt(this.width).putInt(this.height).array();
    this.signature.updateDiskCacheKey(paramMessageDigest);
    paramMessageDigest.update(this.id.getBytes("UTF-8"));
    paramMessageDigest.update(arrayOfByte);
    String str4 = this.cacheDecoder;
    String str5 = "";
    if (str4 != null) {
      String str = str4.getId();
    } else {
      str4 = "";
    } 
    paramMessageDigest.update(str4.getBytes("UTF-8"));
    String str3 = this.decoder;
    if (str3 != null) {
      String str = str3.getId();
    } else {
      str3 = "";
    } 
    paramMessageDigest.update(str3.getBytes("UTF-8"));
    String str2 = this.transformation;
    if (str2 != null) {
      String str = str2.getId();
    } else {
      str2 = "";
    } 
    paramMessageDigest.update(str2.getBytes("UTF-8"));
    String str1 = this.encoder;
    if (str1 != null) {
      String str = str1.getId();
    } else {
      str1 = "";
    } 
    paramMessageDigest.update(str1.getBytes("UTF-8"));
    Encoder encoder1 = this.sourceEncoder;
    str1 = str5;
    if (encoder1 != null)
      str1 = encoder1.getId(); 
    paramMessageDigest.update(str1.getBytes("UTF-8"));
  }
}
