package com.google.android.gms.internal.ads;

import android.content.Context;
import android.net.Uri;
import android.text.TextUtils;
import com.google.android.gms.ads.internal.zzbv;
import com.google.android.gms.common.util.VisibleForTesting;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import javax.annotation.Nullable;
import javax.annotation.concurrent.GuardedBy;
import org.json.JSONException;
import org.json.JSONObject;

@zzadh
public final class zzalk {
  private final Object mLock = new Object();
  
  @GuardedBy("mLock")
  private String zzcsm = "";
  
  @GuardedBy("mLock")
  private String zzcsn = "";
  
  @GuardedBy("mLock")
  private boolean zzcso = false;
  
  @VisibleForTesting
  private String zzcsp = "";
  
  @VisibleForTesting
  private final void zza(Context paramContext, String paramString, boolean paramBoolean1, boolean paramBoolean2) {
    if (!(paramContext instanceof android.app.Activity)) {
      zzakb.zzdj("Can not create dialog without Activity Context");
      return;
    } 
    zzakk.zzcrm.post(new zzall(this, paramContext, paramString, paramBoolean1, paramBoolean2));
  }
  
  private final String zzaz(Context paramContext) {
    synchronized (this.mLock) {
      if (TextUtils.isEmpty(this.zzcsm)) {
        this.zzcsm = zzbv.zzek().zzn(paramContext, "debug_signals_id.txt");
        if (TextUtils.isEmpty(this.zzcsm)) {
          this.zzcsm = zzbv.zzek().zzrh();
          zzbv.zzek().zze(paramContext, "debug_signals_id.txt", this.zzcsm);
        } 
      } 
      return this.zzcsm;
    } 
  }
  
  private final Uri zzc(Context paramContext, String paramString1, String paramString2, String paramString3) {
    Uri.Builder builder = Uri.parse(paramString1).buildUpon();
    builder.appendQueryParameter("linkedDeviceId", zzaz(paramContext));
    builder.appendQueryParameter("adSlotPath", paramString2);
    builder.appendQueryParameter("afmaVersion", paramString3);
    return builder.build();
  }
  
  @VisibleForTesting
  private final boolean zzh(Context paramContext, String paramString1, String paramString2) {
    zzna zzna = zznk.zzbeg;
    str = zzj(paramContext, zzc(paramContext, (String)zzkb.zzik().zzd(zzna), paramString1, paramString2).toString(), paramString2);
    if (TextUtils.isEmpty(str)) {
      zzakb.zzck("Not linked for in app preview.");
      return false;
    } 
    str = str.trim();
    try {
      JSONObject jSONObject = new JSONObject(str);
      str = jSONObject.optString("gct");
      this.zzcsp = jSONObject.optString("status");
      synchronized (this.mLock) {
        this.zzcsn = str;
        return true;
      } 
    } catch (JSONException str) {
      zzakb.zzc("Fail to get in app preview response json.", str);
      return false;
    } 
  }
  
  @VisibleForTesting
  private final boolean zzi(Context paramContext, String paramString1, String paramString2) {
    zzna zzna = zznk.zzbeh;
    str = zzj(paramContext, zzc(paramContext, (String)zzkb.zzik().zzd(zzna), paramString1, paramString2).toString(), paramString2);
    if (TextUtils.isEmpty(str)) {
      zzakb.zzck("Not linked for debug signals.");
      return false;
    } 
    str = str.trim();
    try {
      str = (new JSONObject(str)).optString("debug_mode");
      boolean bool = "1".equals(str);
      synchronized (this.mLock) {
        this.zzcso = bool;
        return bool;
      } 
    } catch (JSONException str) {
      zzakb.zzc("Fail to get debug mode response json.", str);
      return false;
    } 
  }
  
  @VisibleForTesting
  private static String zzj(Context paramContext, String paramString1, String paramString2) {
    String str;
    HashMap hashMap = new HashMap();
    hashMap.put("User-Agent", zzbv.zzek().zzm(paramContext, paramString2));
    zzanz zzanz = (new zzalt(paramContext)).zzc(paramString1, hashMap);
    try {
      str = zznk.zzbej;
      return (String)zzanz.get(((Integer)zzkb.zzik().zzd(str)).intValue(), TimeUnit.MILLISECONDS);
    } catch (TimeoutException paramContext) {
      String str1;
      paramString2 = (str1 = "Timeout while retriving a response from: ").valueOf(paramString1);
      if (paramString2.length() != 0) {
        paramString1 = str1;
      } else {
        paramString1 = new String("Timeout while retriving a response from: ");
        zzakb.zzb(paramString1, paramContext);
        zzanz.cancel(true);
      } 
    } catch (InterruptedException paramContext) {
      String str1 = (paramString2 = "Interrupted while retriving a response from: ").valueOf(paramString1);
      if (str1.length() != 0) {
        paramString1 = paramString2;
        paramString2 = str1;
      } else {
        paramString1 = new String("Interrupted while retriving a response from: ");
        zzakb.zzb(paramString1, paramContext);
        zzanz.cancel(true);
      } 
    } catch (Exception paramString2) {
      str = (paramString2 = null).valueOf(paramString1);
      if (str.length() != 0) {
        str = "Error retriving a response from: ".concat(str);
      } else {
        str = new String("Error retriving a response from: ");
      } 
      zzakb.zzb(str, paramString2);
    } 
    paramString1 = paramString1.concat(paramString2);
    zzakb.zzb(paramString1, str);
    zzanz.cancel(true);
  }
  
  private final void zzk(Context paramContext, String paramString1, String paramString2) {
    zzbv.zzek();
    zzna zzna = zznk.zzbef;
    zzakk.zza(paramContext, zzc(paramContext, (String)zzkb.zzik().zzd(zzna), paramString1, paramString2));
  }
  
  public final void zza(Context paramContext, String paramString1, String paramString2, @Nullable String paramString3) {
    boolean bool = zzrx();
    if (zzi(paramContext, paramString1, paramString2)) {
      if (!bool && !TextUtils.isEmpty(paramString3))
        zzb(paramContext, paramString2, paramString3, paramString1); 
      zzakb.zzck("Device is linked for debug signals.");
      zza(paramContext, "The device is successfully linked for troubleshooting.", false, true);
      return;
    } 
    zzk(paramContext, paramString1, paramString2);
  }
  
  public final void zzb(Context paramContext, String paramString1, String paramString2, String paramString3) {
    zzna zzna = zznk.zzbei;
    Uri.Builder builder = zzc(paramContext, (String)zzkb.zzik().zzd(zzna), paramString3, paramString1).buildUpon();
    builder.appendQueryParameter("debugData", paramString2);
    zzbv.zzek().zzd(paramContext, paramString1, builder.build().toString());
  }
  
  public final void zzg(Context paramContext, String paramString1, String paramString2) {
    if (!zzh(paramContext, paramString1, paramString2)) {
      zza(paramContext, "In-app preview failed to load because of a system error. Please try again later.", true, true);
      return;
    } 
    if ("2".equals(this.zzcsp)) {
      zzakb.zzck("Creative is not pushed for this device.");
      zza(paramContext, "There was no creative pushed from DFP to the device.", false, false);
      return;
    } 
    if ("1".equals(this.zzcsp)) {
      zzakb.zzck("The app is not linked for creative preview.");
      zzk(paramContext, paramString1, paramString2);
      return;
    } 
    if ("0".equals(this.zzcsp)) {
      zzakb.zzck("Device is linked for in app preview.");
      zza(paramContext, "The device is successfully linked for creative preview.", false, true);
    } 
  }
  
  public final String zzrw() {
    synchronized (this.mLock) {
      return this.zzcsn;
    } 
  }
  
  public final boolean zzrx() {
    synchronized (this.mLock) {
      return this.zzcso;
    } 
  }
}
