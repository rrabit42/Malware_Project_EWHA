package androidx.work.impl;

import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Build;
import android.support.annotation.NonNull;
import android.support.annotation.RestrictTo;
import androidx.work.Configuration;
import androidx.work.Logger;
import androidx.work.impl.background.systemalarm.SystemAlarmScheduler;
import androidx.work.impl.background.systemjob.SystemJobScheduler;
import androidx.work.impl.model.WorkSpec;
import androidx.work.impl.model.WorkSpecDao;
import androidx.work.impl.utils.PackageManagerHelper;
import java.util.Iterator;
import java.util.List;

@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
public class Schedulers {
  private static final String TAG = Logger.tagWithPrefix("Schedulers");
  
  @SuppressLint({"NewApi"})
  @NonNull
  static Scheduler createBestAvailableBackgroundScheduler(@NonNull Context paramContext, @NonNull WorkManagerImpl paramWorkManagerImpl) {
    SystemAlarmScheduler systemAlarmScheduler;
    int i = Build.VERSION.SDK_INT;
    boolean bool = true;
    if (i >= 23) {
      systemAlarmScheduler = new SystemJobScheduler(paramContext, paramWorkManagerImpl);
      PackageManagerHelper.setComponentEnabled(paramContext, androidx.work.impl.background.systemjob.SystemJobService.class, true);
      Logger.get().debug(TAG, "Created SystemJobScheduler and enabled SystemJobService", new Throwable[0]);
      bool = false;
    } else {
      systemAlarmScheduler = new SystemAlarmScheduler(paramContext);
      Logger.get().debug(TAG, "Created SystemAlarmScheduler", new Throwable[0]);
    } 
    PackageManagerHelper.setComponentEnabled(paramContext, androidx.work.impl.background.systemalarm.SystemAlarmService.class, bool);
    return systemAlarmScheduler;
  }
  
  public static void schedule(@NonNull Configuration paramConfiguration, @NonNull WorkDatabase paramWorkDatabase, List<Scheduler> paramList) {
    if (paramList != null) {
      if (paramList.size() == 0)
        return; 
      WorkSpecDao workSpecDao = paramWorkDatabase.workSpecDao();
      paramWorkDatabase.beginTransaction();
      try {
        list = workSpecDao.getEligibleWorkForScheduling(paramConfiguration.getMaxSchedulerLimit());
        if (list != null && list.size() > 0) {
          long l = System.currentTimeMillis();
          Iterator iterator1 = list.iterator();
          while (iterator1.hasNext())
            workSpecDao.markWorkSpecScheduled(((WorkSpec)iterator1.next()).id, l); 
        } 
        paramWorkDatabase.setTransactionSuccessful();
        paramWorkDatabase.endTransaction();
        return;
      } finally {
        iterator.endTransaction();
      } 
    } 
  }
}
