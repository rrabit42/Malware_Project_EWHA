package com.bumptech.glide.load.resource.gif;

import android.content.Context;
import android.graphics.Bitmap;
import android.util.Log;
import com.bumptech.glide.Glide;
import com.bumptech.glide.gifdecoder.GifDecoder;
import com.bumptech.glide.gifdecoder.GifHeader;
import com.bumptech.glide.gifdecoder.GifHeaderParser;
import com.bumptech.glide.load.ResourceDecoder;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.resource.UnitTransformation;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

public class GifResourceDecoder extends Object implements ResourceDecoder<InputStream, GifDrawable> {
  private static final GifDecoderPool DECODER_POOL;
  
  private static final GifHeaderParserPool PARSER_POOL = new GifHeaderParserPool();
  
  private static final String TAG = "GifResourceDecoder";
  
  private final BitmapPool bitmapPool;
  
  private final Context context;
  
  private final GifDecoderPool decoderPool;
  
  private final GifHeaderParserPool parserPool;
  
  private final GifBitmapProvider provider;
  
  static  {
    DECODER_POOL = new GifDecoderPool();
  }
  
  public GifResourceDecoder(Context paramContext) { this(paramContext, Glide.get(paramContext).getBitmapPool()); }
  
  public GifResourceDecoder(Context paramContext, BitmapPool paramBitmapPool) { this(paramContext, paramBitmapPool, PARSER_POOL, DECODER_POOL); }
  
  GifResourceDecoder(Context paramContext, BitmapPool paramBitmapPool, GifHeaderParserPool paramGifHeaderParserPool, GifDecoderPool paramGifDecoderPool) {
    this.context = paramContext;
    this.bitmapPool = paramBitmapPool;
    this.decoderPool = paramGifDecoderPool;
    this.provider = new GifBitmapProvider(paramBitmapPool);
    this.parserPool = paramGifHeaderParserPool;
  }
  
  private GifDrawableResource decode(byte[] paramArrayOfByte, int paramInt1, int paramInt2, GifHeaderParser paramGifHeaderParser, GifDecoder paramGifDecoder) {
    GifHeader gifHeader = paramGifHeaderParser.parseHeader();
    if (gifHeader.getNumFrames() > 0) {
      if (gifHeader.getStatus() != 0)
        return null; 
      Bitmap bitmap = decodeFirstFrame(paramGifDecoder, gifHeader, paramArrayOfByte);
      if (bitmap == null)
        return null; 
      UnitTransformation unitTransformation = UnitTransformation.get();
      return new GifDrawableResource(new GifDrawable(this.context, this.provider, this.bitmapPool, unitTransformation, paramInt1, paramInt2, gifHeader, paramArrayOfByte, bitmap));
    } 
    return null;
  }
  
  private Bitmap decodeFirstFrame(GifDecoder paramGifDecoder, GifHeader paramGifHeader, byte[] paramArrayOfByte) {
    paramGifDecoder.setData(paramGifHeader, paramArrayOfByte);
    paramGifDecoder.advance();
    return paramGifDecoder.getNextFrame();
  }
  
  private static byte[] inputStreamToBytes(InputStream paramInputStream) {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(16384);
    try {
      byte[] arrayOfByte = new byte[16384];
      while (true) {
        int i = paramInputStream.read(arrayOfByte);
        if (i != -1) {
          byteArrayOutputStream.write(arrayOfByte, 0, i);
          continue;
        } 
        break;
      } 
      byteArrayOutputStream.flush();
    } catch (IOException paramInputStream) {
      Log.w("GifResourceDecoder", "Error reading data from stream", paramInputStream);
    } 
    return byteArrayOutputStream.toByteArray();
  }
  
  public GifDrawableResource decode(InputStream paramInputStream, int paramInt1, int paramInt2) {
    null = inputStreamToBytes(paramInputStream);
    gifHeaderParser = this.parserPool.obtain(null);
    gifDecoder = this.decoderPool.obtain(this.provider);
    try {
      return decode(null, paramInt1, paramInt2, gifHeaderParser, gifDecoder);
    } finally {
      this.parserPool.release(gifHeaderParser);
      this.decoderPool.release(gifDecoder);
    } 
  }
  
  public String getId() { return ""; }
}
