package com.google.android.gms.security;

import android.content.Context;
import android.content.res.Resources;
import android.support.annotation.Nullable;
import android.util.Log;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.common.GooglePlayServicesRepairableException;
import com.google.android.gms.common.GooglePlayServicesUtilLight;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.CrashUtils;
import com.google.android.gms.dynamite.DynamiteModule;
import java.lang.reflect.Method;

public class ProviderInstaller {
  public static final String PROVIDER_NAME = "GmsCore_OpenSSL";
  
  private static final Object lock;
  
  private static final GoogleApiAvailabilityLight zziu = GoogleApiAvailabilityLight.getInstance();
  
  private static Method zziv;
  
  static  {
    lock = new Object();
    zziv = null;
  }
  
  public static void installIfNeeded(Context paramContext) throws GooglePlayServicesRepairableException, GooglePlayServicesNotAvailableException {
    Throwable throwable2;
    Preconditions.checkNotNull(paramContext, "Context must not be null");
    zziu.verifyGooglePlayServicesIsAvailable(paramContext, 11925000);
    context2 = zzk(paramContext);
    Context context1 = context2;
    if (context2 == null)
      context1 = zzl(paramContext); 
    if (context1 != null) {
      synchronized (lock) {
        if (zziv == null)
          zziv = context1.getClassLoader().loadClass("com.google.android.gms.common.security.ProviderInstallerImpl").getMethod("insertProvider", new Class[] { Context.class }); 
        zziv.invoke(null, new Object[] { context1 });
        return;
      } 
    } else {
      Log.e("ProviderInstaller", "Failed to get remote context");
      throw new GooglePlayServicesNotAvailableException(8);
    } 
    if (throwable2 == null) {
      context1 = context2;
      CrashUtils.addDynamiteErrorToDropBox(paramContext, context1);
      throw new GooglePlayServicesNotAvailableException(8);
    } 
    Throwable throwable1 = throwable2;
    CrashUtils.addDynamiteErrorToDropBox(paramContext, throwable1);
    throw new GooglePlayServicesNotAvailableException(8);
  }
  
  public static void installIfNeededAsync(Context paramContext, ProviderInstallListener paramProviderInstallListener) {
    Preconditions.checkNotNull(paramContext, "Context must not be null");
    Preconditions.checkNotNull(paramProviderInstallListener, "Listener must not be null");
    Preconditions.checkMainThread("Must be called on the UI thread");
    (new zza(paramContext, paramProviderInstallListener)).execute(new Void[0]);
  }
  
  @Nullable
  private static Context zzk(Context paramContext) {
    try {
      return DynamiteModule.load(paramContext, DynamiteModule.PREFER_HIGHEST_OR_LOCAL_VERSION_NO_FORCE_STAGING, "providerinstaller").getModuleContext();
    } catch (com.google.android.gms.dynamite.DynamiteModule.LoadingException paramContext) {
      String str = String.valueOf(paramContext.getMessage());
      if (str.length() != 0) {
        str = "Failed to load providerinstaller module: ".concat(str);
      } else {
        str = new String("Failed to load providerinstaller module: ");
      } 
      Log.w("ProviderInstaller", str);
      return null;
    } 
  }
  
  @Nullable
  private static Context zzl(Context paramContext) {
    try {
      return GooglePlayServicesUtilLight.getRemoteContext(paramContext);
    } catch (android.content.res.Resources.NotFoundException notFoundException) {
      String str = String.valueOf(notFoundException.getMessage());
      if (str.length() != 0) {
        str = "Failed to load GMS Core context for providerinstaller: ".concat(str);
      } else {
        str = new String("Failed to load GMS Core context for providerinstaller: ");
      } 
      Log.w("ProviderInstaller", str);
      CrashUtils.addDynamiteErrorToDropBox(paramContext, notFoundException);
      return null;
    } 
  }
}
