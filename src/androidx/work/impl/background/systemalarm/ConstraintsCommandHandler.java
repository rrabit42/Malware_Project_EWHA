package androidx.work.impl.background.systemalarm;

import android.content.Context;
import android.content.Intent;
import android.support.annotation.NonNull;
import android.support.annotation.RestrictTo;
import android.support.annotation.WorkerThread;
import androidx.work.Logger;
import androidx.work.impl.constraints.WorkConstraintsTracker;
import androidx.work.impl.model.WorkSpec;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
class ConstraintsCommandHandler {
  private static final String TAG = Logger.tagWithPrefix("ConstraintsCmdHandler");
  
  private final Context mContext;
  
  private final SystemAlarmDispatcher mDispatcher;
  
  private final int mStartId;
  
  private final WorkConstraintsTracker mWorkConstraintsTracker;
  
  ConstraintsCommandHandler(@NonNull Context paramContext, int paramInt, @NonNull SystemAlarmDispatcher paramSystemAlarmDispatcher) {
    this.mContext = paramContext;
    this.mStartId = paramInt;
    this.mDispatcher = paramSystemAlarmDispatcher;
    this.mWorkConstraintsTracker = new WorkConstraintsTracker(this.mContext, null);
  }
  
  @WorkerThread
  void handleConstraintsChanged() {
    List list = this.mDispatcher.getWorkManager().getWorkDatabase().workSpecDao().getScheduledWork();
    ConstraintProxy.updateAll(this.mContext, list);
    this.mWorkConstraintsTracker.replace(list);
    ArrayList arrayList = new ArrayList(list.size());
    long l = System.currentTimeMillis();
    for (WorkSpec workSpec : list) {
      String str = workSpec.id;
      if (l >= workSpec.calculateNextRunTime() && (!workSpec.hasConstraints() || this.mWorkConstraintsTracker.areAllConstraintsMet(str)))
        arrayList.add(workSpec); 
    } 
    Iterator iterator = arrayList.iterator();
    while (iterator.hasNext()) {
      String str = ((WorkSpec)iterator.next()).id;
      Intent intent = CommandHandler.createDelayMetIntent(this.mContext, str);
      Logger.get().debug(TAG, String.format("Creating a delay_met command for workSpec with id (%s)", new Object[] { str }), new Throwable[0]);
      SystemAlarmDispatcher systemAlarmDispatcher = this.mDispatcher;
      systemAlarmDispatcher.postOnMainThread(new SystemAlarmDispatcher.AddRunnable(systemAlarmDispatcher, intent, this.mStartId));
    } 
    this.mWorkConstraintsTracker.reset();
  }
}
