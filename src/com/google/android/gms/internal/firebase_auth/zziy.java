package com.google.android.gms.internal.firebase_auth;

final class zziy {
  private static final zzja zzacq;
  
  static  {
    zzjb zzjb;
    boolean bool;
    if (zziw.zzjs() && zziw.zzjt()) {
      bool = true;
    } else {
      bool = false;
    } 
    if (bool && !zzee.zzex()) {
      zzjb = new zzjd();
    } else {
      zzjb = new zzjb();
    } 
    zzacq = zzjb;
  }
  
  static int zza(CharSequence paramCharSequence) {
    int k;
    int n = paramCharSequence.length();
    int m = 0;
    int j;
    for (j = 0; j < n && paramCharSequence.charAt(j) < ''; j++);
    int i = n;
    while (true) {
      k = i;
      if (j < n) {
        k = paramCharSequence.charAt(j);
        if (k < 2048) {
          i += (127 - k >>> 31);
          j++;
          continue;
        } 
        int i1 = paramCharSequence.length();
        k = m;
        while (j < i1) {
          char c = paramCharSequence.charAt(j);
          if (c < 'ࠀ') {
            k += ('' - c >>> '\037');
            m = j;
          } else {
            int i2 = k + 2;
            k = i2;
            m = j;
            if ('?' <= c) {
              k = i2;
              m = j;
              if (c <= '?')
                if (Character.codePointAt(paramCharSequence, j) >= 65536) {
                  m = j + 1;
                  k = i2;
                } else {
                  throw new zzjc(j, i1);
                }  
            } 
          } 
          j = m + 1;
        } 
        k = i + k;
      } 
      break;
    } 
    if (k >= n)
      return k; 
    long l = k;
    paramCharSequence = new StringBuilder(54);
    paramCharSequence.append("UTF-8 length does not fit in int: ");
    paramCharSequence.append(l + 4294967296L);
    IllegalArgumentException illegalArgumentException = new IllegalArgumentException(paramCharSequence.toString());
    throw illegalArgumentException;
  }
  
  static int zza(CharSequence paramCharSequence, byte[] paramArrayOfByte, int paramInt1, int paramInt2) { return zzacq.zzb(paramCharSequence, paramArrayOfByte, paramInt1, paramInt2); }
  
  public static int zzb(int paramInt1, byte[] paramArrayOfByte, int paramInt2, int paramInt3) { return zzacq.zzb(paramInt1, paramArrayOfByte, paramInt2, paramInt3); }
  
  private static int zzbe(int paramInt) {
    int i = paramInt;
    if (paramInt > -12)
      i = -1; 
    return i;
  }
  
  public static boolean zzd(byte[] paramArrayOfByte) { return zzacq.zze(paramArrayOfByte, 0, paramArrayOfByte.length); }
  
  private static int zze(int paramInt1, int paramInt2, int paramInt3) { return (paramInt1 > -12 || paramInt2 > -65 || paramInt3 > -65) ? -1 : (paramInt1 ^ paramInt2 << 8 ^ paramInt3 << 16); }
  
  public static boolean zze(byte[] paramArrayOfByte, int paramInt1, int paramInt2) { return zzacq.zze(paramArrayOfByte, paramInt1, paramInt2); }
  
  private static int zzf(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    byte b = paramArrayOfByte[paramInt1 - 1];
    paramInt2 -= paramInt1;
    if (paramInt2 != 0) {
      if (paramInt2 != 1) {
        if (paramInt2 == 2)
          return zze(b, paramArrayOfByte[paramInt1], paramArrayOfByte[paramInt1 + 1]); 
        throw new AssertionError();
      } 
      return zzt(b, paramArrayOfByte[paramInt1]);
    } 
    return zzbe(b);
  }
  
  static String zzg(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws zzgc { return zzacq.zzg(paramArrayOfByte, paramInt1, paramInt2); }
  
  private static int zzt(int paramInt1, int paramInt2) { return (paramInt1 > -12 || paramInt2 > -65) ? -1 : (paramInt1 ^ paramInt2 << 8); }
}
