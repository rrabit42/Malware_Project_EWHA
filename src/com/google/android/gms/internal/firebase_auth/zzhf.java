package com.google.android.gms.internal.firebase_auth;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;

final class zzhf {
  static String zza(zzhc paramzzhc, String paramString) {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("# ");
    stringBuilder.append(paramString);
    zza(paramzzhc, stringBuilder, 0);
    return stringBuilder.toString();
  }
  
  private static void zza(zzhc paramzzhc, StringBuilder paramStringBuilder, int paramInt) {
    HashMap hashMap1 = new HashMap();
    HashMap hashMap2 = new HashMap();
    TreeSet treeSet = new TreeSet();
    for (Method method : paramzzhc.getClass().getDeclaredMethods()) {
      hashMap2.put(method.getName(), method);
      if (method.getParameterTypes().length == 0) {
        hashMap1.put(method.getName(), method);
        if (method.getName().startsWith("get"))
          treeSet.add(method.getName()); 
      } 
    } 
    Iterator iterator = treeSet.iterator();
    while (true) {
      while (true)
        break; 
      if (SYNTHETIC_LOCAL_VARIABLE_5 != null)
        zza(paramStringBuilder, paramInt, zzdd(treeSet), SYNTHETIC_LOCAL_VARIABLE_12); 
    } 
    if (paramzzhc instanceof zzft.zzc) {
      Iterator iterator1 = ((zzft.zzc)paramzzhc).zzxe.iterator();
      if (iterator1.hasNext()) {
        ((Map.Entry)iterator1.next()).getKey();
        throw new NoSuchMethodError();
      } 
    } 
    zzft zzft = (zzft)paramzzhc;
    if (zzft.zzwy != null)
      zzft.zzwy.zza(paramStringBuilder, paramInt); 
  }
  
  static final void zza(StringBuilder paramStringBuilder, int paramInt, String paramString, Object paramObject) {
    if (paramObject instanceof List) {
      paramObject = ((List)paramObject).iterator();
      while (paramObject.hasNext())
        zza(paramStringBuilder, paramInt, paramString, paramObject.next()); 
      return;
    } 
    if (paramObject instanceof Map) {
      paramObject = ((Map)paramObject).entrySet().iterator();
      while (paramObject.hasNext())
        zza(paramStringBuilder, paramInt, paramString, (Map.Entry)paramObject.next()); 
      return;
    } 
    paramStringBuilder.append('\n');
    int j = 0;
    byte b = 0;
    int i;
    for (i = 0; i < paramInt; i++)
      paramStringBuilder.append(' '); 
    paramStringBuilder.append(paramString);
    if (paramObject instanceof String) {
      paramStringBuilder.append(": \"");
      paramStringBuilder.append(zzik.zzf(zzeh.zzcz((String)paramObject)));
      paramStringBuilder.append('"');
      return;
    } 
    if (paramObject instanceof zzeh) {
      paramStringBuilder.append(": \"");
      paramStringBuilder.append(zzik.zzf((zzeh)paramObject));
      paramStringBuilder.append('"');
      return;
    } 
    if (paramObject instanceof zzft) {
      paramStringBuilder.append(" {");
      zza((zzft)paramObject, paramStringBuilder, paramInt + 2);
      paramStringBuilder.append("\n");
      for (i = b; i < paramInt; i++)
        paramStringBuilder.append(' '); 
      paramStringBuilder.append("}");
      return;
    } 
    if (paramObject instanceof Map.Entry) {
      paramStringBuilder.append(" {");
      Map.Entry entry = (Map.Entry)paramObject;
      i = paramInt + 2;
      zza(paramStringBuilder, i, "key", entry.getKey());
      zza(paramStringBuilder, i, "value", entry.getValue());
      paramStringBuilder.append("\n");
      for (i = j; i < paramInt; i++)
        paramStringBuilder.append(' '); 
      paramStringBuilder.append("}");
      return;
    } 
    paramStringBuilder.append(": ");
    paramStringBuilder.append(paramObject.toString());
  }
  
  private static final String zzdd(String paramString) {
    StringBuilder stringBuilder = new StringBuilder();
    for (byte b = 0; b < paramString.length(); b++) {
      char c = paramString.charAt(b);
      if (Character.isUpperCase(c))
        stringBuilder.append("_"); 
      stringBuilder.append(Character.toLowerCase(c));
    } 
    return stringBuilder.toString();
  }
}
