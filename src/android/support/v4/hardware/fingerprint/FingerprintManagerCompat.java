package android.support.v4.hardware.fingerprint;

import android.content.Context;
import android.hardware.fingerprint.FingerprintManager;
import android.os.Build;
import android.os.CancellationSignal;
import android.os.Handler;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresApi;
import android.support.annotation.RequiresPermission;
import android.support.v4.os.CancellationSignal;

public final class FingerprintManagerCompat {
  private final Context mContext;
  
  private FingerprintManagerCompat(Context paramContext) { this.mContext = paramContext; }
  
  @NonNull
  public static FingerprintManagerCompat from(@NonNull Context paramContext) { return new FingerprintManagerCompat(paramContext); }
  
  @Nullable
  @RequiresApi(23)
  private static FingerprintManager getFingerprintManagerOrNull(@NonNull Context paramContext) { return paramContext.getPackageManager().hasSystemFeature("android.hardware.fingerprint") ? (FingerprintManager)paramContext.getSystemService(FingerprintManager.class) : null; }
  
  @RequiresApi(23)
  static CryptoObject unwrapCryptoObject(FingerprintManager.CryptoObject paramCryptoObject) {
    CryptoObject cryptoObject = null;
    if (paramCryptoObject == null)
      return null; 
    if (paramCryptoObject.getCipher() != null)
      return new CryptoObject(paramCryptoObject.getCipher()); 
    if (paramCryptoObject.getSignature() != null)
      return new CryptoObject(paramCryptoObject.getSignature()); 
    if (paramCryptoObject.getMac() != null)
      cryptoObject = new CryptoObject(paramCryptoObject.getMac()); 
    return cryptoObject;
  }
  
  @RequiresApi(23)
  private static FingerprintManager.AuthenticationCallback wrapCallback(AuthenticationCallback paramAuthenticationCallback) { return new Object(paramAuthenticationCallback); }
  
  @RequiresApi(23)
  private static FingerprintManager.CryptoObject wrapCryptoObject(CryptoObject paramCryptoObject) {
    FingerprintManager.CryptoObject cryptoObject = null;
    if (paramCryptoObject == null)
      return null; 
    if (paramCryptoObject.getCipher() != null)
      return new FingerprintManager.CryptoObject(paramCryptoObject.getCipher()); 
    if (paramCryptoObject.getSignature() != null)
      return new FingerprintManager.CryptoObject(paramCryptoObject.getSignature()); 
    if (paramCryptoObject.getMac() != null)
      cryptoObject = new FingerprintManager.CryptoObject(paramCryptoObject.getMac()); 
    return cryptoObject;
  }
  
  @RequiresPermission("android.permission.USE_FINGERPRINT")
  public void authenticate(@Nullable CryptoObject paramCryptoObject, int paramInt, @Nullable CancellationSignal paramCancellationSignal, @NonNull AuthenticationCallback paramAuthenticationCallback, @Nullable Handler paramHandler) {
    if (Build.VERSION.SDK_INT >= 23) {
      FingerprintManager fingerprintManager = getFingerprintManagerOrNull(this.mContext);
      if (fingerprintManager != null) {
        if (paramCancellationSignal != null) {
          CancellationSignal cancellationSignal = (CancellationSignal)paramCancellationSignal.getCancellationSignalObject();
        } else {
          paramCancellationSignal = null;
        } 
        fingerprintManager.authenticate(wrapCryptoObject(paramCryptoObject), paramCancellationSignal, paramInt, wrapCallback(paramAuthenticationCallback), paramHandler);
      } 
    } 
  }
  
  @RequiresPermission("android.permission.USE_FINGERPRINT")
  public boolean hasEnrolledFingerprints() {
    int i = Build.VERSION.SDK_INT;
    byte b = 0;
    int j = b;
    if (i >= 23) {
      FingerprintManager fingerprintManager = getFingerprintManagerOrNull(this.mContext);
      j = b;
      if (fingerprintManager != null) {
        j = b;
        if (fingerprintManager.hasEnrolledFingerprints())
          j = 1; 
      } 
    } 
    return j;
  }
  
  @RequiresPermission("android.permission.USE_FINGERPRINT")
  public boolean isHardwareDetected() {
    int i = Build.VERSION.SDK_INT;
    byte b = 0;
    int j = b;
    if (i >= 23) {
      FingerprintManager fingerprintManager = getFingerprintManagerOrNull(this.mContext);
      j = b;
      if (fingerprintManager != null) {
        j = b;
        if (fingerprintManager.isHardwareDetected())
          j = 1; 
      } 
    } 
    return j;
  }
}
