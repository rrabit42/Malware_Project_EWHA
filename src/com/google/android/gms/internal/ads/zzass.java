package com.google.android.gms.internal.ads;

import android.os.Build;
import android.webkit.WebResourceResponse;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import com.google.android.gms.ads.internal.zzbv;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import javax.annotation.ParametersAreNonnullByDefault;

@zzadh
@ParametersAreNonnullByDefault
public class zzass extends WebView implements zzasx, zzasz, zzata, zzatb {
  private final List<zzasx> zzdew = new CopyOnWriteArrayList();
  
  private final List<zzatb> zzdex = new CopyOnWriteArrayList();
  
  private final List<zzasz> zzdey = new CopyOnWriteArrayList();
  
  private final List<zzata> zzdez = new CopyOnWriteArrayList();
  
  private final zzash zzdfa;
  
  protected final WebViewClient zzdfb;
  
  public zzass(zzash paramzzash) {
    super(paramzzash);
    this.zzdfa = paramzzash;
    setBackgroundColor(0);
    webSettings = getSettings();
    webSettings.setAllowFileAccess(false);
    webSettings.setSavePassword(false);
    webSettings.setSupportMultipleWindows(true);
    webSettings.setJavaScriptCanOpenWindowsAutomatically(true);
    if (Build.VERSION.SDK_INT >= 21)
      webSettings.setMixedContentMode(2); 
    zzbv.zzem().zza(getContext(), webSettings);
    removeJavascriptInterface("accessibility");
    removeJavascriptInterface("accessibilityTraversal");
    try {
      getSettings().setJavaScriptEnabled(true);
    } catch (NullPointerException webSettings) {
      zzakb.zzb("Unable to enable Javascript.", webSettings);
    } 
    setLayerType(1, null);
    this.zzdfb = new zzast(this, this, this, this);
    super.setWebViewClient(this.zzdfb);
  }
  
  public void addJavascriptInterface(Object paramObject, String paramString) {
    if (Build.VERSION.SDK_INT >= 17) {
      super.addJavascriptInterface(paramObject, paramString);
      return;
    } 
    zzakb.v("Ignore addJavascriptInterface due to low Android version.");
  }
  
  public void loadUrl(String paramString) {
    try {
      super.loadUrl(paramString);
      return;
    } catch (Exception paramString) {
    
    } catch (NoClassDefFoundError paramString) {
    
    } catch (IncompatibleClassChangeError paramString) {}
    zzbv.zzeo().zza(paramString, "CoreWebView.loadUrl");
    zzakb.zzd("#007 Could not call remote method.", paramString);
  }
  
  public void setWebViewClient(WebViewClient paramWebViewClient) {}
  
  public final void zza(zzasx paramzzasx) { this.zzdew.add(paramzzasx); }
  
  public final void zza(zzasz paramzzasz) { this.zzdey.add(paramzzasz); }
  
  public final void zza(zzata paramzzata) { this.zzdez.add(paramzzata); }
  
  public final void zza(zzatb paramzzatb) { this.zzdex.add(paramzzatb); }
  
  public final boolean zza(zzasu paramzzasu) {
    Iterator iterator = this.zzdew.iterator();
    while (iterator.hasNext()) {
      if (((zzasx)iterator.next()).zza(paramzzasu))
        return true; 
    } 
    return false;
  }
  
  public final void zzb(zzasu paramzzasu) {
    Iterator iterator = this.zzdey.iterator();
    while (iterator.hasNext())
      ((zzasz)iterator.next()).zzb(paramzzasu); 
  }
  
  public void zzbe(String paramString) { zzasy.zza(this, paramString); }
  
  public void zzc(zzasu paramzzasu) {
    Iterator iterator = this.zzdez.iterator();
    while (iterator.hasNext())
      ((zzata)iterator.next()).zzc(paramzzasu); 
  }
  
  public final WebResourceResponse zzd(zzasu paramzzasu) {
    Iterator iterator = this.zzdex.iterator();
    while (iterator.hasNext()) {
      WebResourceResponse webResourceResponse = ((zzatb)iterator.next()).zzd(paramzzasu);
      if (webResourceResponse != null)
        return webResourceResponse; 
    } 
    return null;
  }
  
  protected final zzash zzvv() { return this.zzdfa; }
}
