package com.android.volley.ui;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.TransitionDrawable;
import android.util.AttributeSet;
import android.view.ViewPropertyAnimator;
import com.android.volley.Response;
import com.android.volley.cache.plus.ImageLoader;
import com.android.volley.misc.Utils;

public class NetworkImageViewPlus extends RecyclingImageView {
  private static final int HALF_FADE_IN_TIME = 100;
  
  private static final ColorDrawable transparentDrawable = new ColorDrawable(17170445);
  
  private final int[] attrsArray = { 16843033 };
  
  int mDefaultImageId;
  
  int mErrorImageId;
  
  private boolean mFadeInImage = false;
  
  protected ImageLoader.ImageContainer mImageContainer;
  
  protected ImageLoader mImageLoader;
  
  private Response.Listener<BitmapDrawable> mListener;
  
  private int mMaxImageHeight = 0;
  
  private int mMaxImageWidth = 0;
  
  protected String mUrl;
  
  public NetworkImageViewPlus(Context paramContext) { this(paramContext, null); }
  
  public NetworkImageViewPlus(Context paramContext, AttributeSet paramAttributeSet) { this(paramContext, paramAttributeSet, 0); }
  
  public NetworkImageViewPlus(Context paramContext, AttributeSet paramAttributeSet, int paramInt) {
    super(paramContext, paramAttributeSet, paramInt);
    TypedArray typedArray = paramContext.obtainStyledAttributes(paramAttributeSet, this.attrsArray);
    setDefaultImageResId(typedArray.getResourceId(0, 0));
    typedArray.recycle();
  }
  
  @SuppressLint({"NewApi"})
  private void setAnimateImageBitmap(BitmapDrawable paramBitmapDrawable, boolean paramBoolean) {
    TransitionDrawable transitionDrawable;
    if (paramBoolean && Utils.hasHoneycombMR1()) {
      long l;
      ViewPropertyAnimator viewPropertyAnimator = animate().scaleY(0.95F).scaleX(0.95F).alpha(0.0F);
      if (getDrawable() == null) {
        l = 0L;
      } else {
        l = 100L;
      } 
      viewPropertyAnimator.setDuration(l).setListener(new Object(this, paramBitmapDrawable));
      return;
    } 
    if (paramBoolean) {
      ColorDrawable colorDrawable;
      if (getDrawable() != null) {
        colorDrawable = getDrawable();
      } else {
        colorDrawable = transparentDrawable;
      } 
      transitionDrawable = new TransitionDrawable(new Drawable[] { colorDrawable, paramBitmapDrawable });
      setImageDrawable(transitionDrawable);
      transitionDrawable.startTransition(200);
      return;
    } 
    setImageDrawable(transitionDrawable);
  }
  
  protected void drawableStateChanged() {
    super.drawableStateChanged();
    invalidate();
  }
  
  void loadImageIfNecessary(boolean paramBoolean) { // Byte code:
    //   0: aload_0
    //   1: invokevirtual getWidth : ()I
    //   4: istore #5
    //   6: aload_0
    //   7: invokevirtual getHeight : ()I
    //   10: istore #6
    //   12: aload_0
    //   13: invokevirtual getLayoutParams : ()Landroid/view/ViewGroup$LayoutParams;
    //   16: astore #8
    //   18: iconst_1
    //   19: istore #7
    //   21: aload #8
    //   23: ifnull -> 65
    //   26: aload_0
    //   27: invokevirtual getLayoutParams : ()Landroid/view/ViewGroup$LayoutParams;
    //   30: getfield width : I
    //   33: bipush #-2
    //   35: if_icmpne -> 43
    //   38: iconst_1
    //   39: istore_2
    //   40: goto -> 45
    //   43: iconst_0
    //   44: istore_2
    //   45: iload_2
    //   46: istore_3
    //   47: aload_0
    //   48: invokevirtual getLayoutParams : ()Landroid/view/ViewGroup$LayoutParams;
    //   51: getfield height : I
    //   54: bipush #-2
    //   56: if_icmpne -> 67
    //   59: iconst_1
    //   60: istore #4
    //   62: goto -> 72
    //   65: iconst_0
    //   66: istore_3
    //   67: iconst_0
    //   68: istore #4
    //   70: iload_3
    //   71: istore_2
    //   72: iload_2
    //   73: ifeq -> 87
    //   76: iload #4
    //   78: ifeq -> 87
    //   81: iload #7
    //   83: istore_3
    //   84: goto -> 89
    //   87: iconst_0
    //   88: istore_3
    //   89: iload #5
    //   91: ifne -> 104
    //   94: iload #6
    //   96: ifne -> 104
    //   99: iload_3
    //   100: ifne -> 104
    //   103: return
    //   104: aload_0
    //   105: getfield mUrl : Ljava/lang/String;
    //   108: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   111: ifeq -> 140
    //   114: aload_0
    //   115: getfield mImageContainer : Lcom/android/volley/cache/plus/ImageLoader$ImageContainer;
    //   118: astore #8
    //   120: aload #8
    //   122: ifnull -> 135
    //   125: aload #8
    //   127: invokevirtual cancelRequest : ()V
    //   130: aload_0
    //   131: aconst_null
    //   132: putfield mImageContainer : Lcom/android/volley/cache/plus/ImageLoader$ImageContainer;
    //   135: aload_0
    //   136: invokevirtual setDefaultImageOrNull : ()V
    //   139: return
    //   140: aload_0
    //   141: getfield mImageContainer : Lcom/android/volley/cache/plus/ImageLoader$ImageContainer;
    //   144: astore #8
    //   146: aload #8
    //   148: ifnull -> 188
    //   151: aload #8
    //   153: invokevirtual getRequestUrl : ()Ljava/lang/String;
    //   156: ifnull -> 188
    //   159: aload_0
    //   160: getfield mImageContainer : Lcom/android/volley/cache/plus/ImageLoader$ImageContainer;
    //   163: invokevirtual getRequestUrl : ()Ljava/lang/String;
    //   166: aload_0
    //   167: getfield mUrl : Ljava/lang/String;
    //   170: invokevirtual equals : (Ljava/lang/Object;)Z
    //   173: ifeq -> 177
    //   176: return
    //   177: aload_0
    //   178: getfield mImageContainer : Lcom/android/volley/cache/plus/ImageLoader$ImageContainer;
    //   181: invokevirtual cancelRequest : ()V
    //   184: aload_0
    //   185: invokevirtual setDefaultImageOrNull : ()V
    //   188: aload_0
    //   189: getfield mImageLoader : Lcom/android/volley/cache/plus/ImageLoader;
    //   192: astore #8
    //   194: aload #8
    //   196: instanceof com/android/volley/cache/plus/SimpleImageLoader
    //   199: ifeq -> 255
    //   202: aload #8
    //   204: checkcast com/android/volley/cache/plus/SimpleImageLoader
    //   207: astore #8
    //   209: aload_0
    //   210: getfield mMaxImageWidth : I
    //   213: istore_2
    //   214: iload_2
    //   215: istore_3
    //   216: iload_2
    //   217: ifne -> 226
    //   220: aload #8
    //   222: invokevirtual getMaxImageWidth : ()I
    //   225: istore_3
    //   226: aload_0
    //   227: getfield mMaxImageHeight : I
    //   230: istore #4
    //   232: iload_3
    //   233: istore #5
    //   235: iload #4
    //   237: istore_2
    //   238: iload #4
    //   240: ifne -> 280
    //   243: aload #8
    //   245: invokevirtual getMaxImageHeight : ()I
    //   248: istore_2
    //   249: iload_3
    //   250: istore #5
    //   252: goto -> 280
    //   255: iload #5
    //   257: istore_3
    //   258: iload_2
    //   259: ifeq -> 264
    //   262: iconst_0
    //   263: istore_3
    //   264: iload_3
    //   265: istore #5
    //   267: iload #6
    //   269: istore_2
    //   270: iload #4
    //   272: ifeq -> 280
    //   275: iconst_0
    //   276: istore_2
    //   277: iload_3
    //   278: istore #5
    //   280: aload_0
    //   281: aload_0
    //   282: getfield mImageLoader : Lcom/android/volley/cache/plus/ImageLoader;
    //   285: aload_0
    //   286: getfield mUrl : Ljava/lang/String;
    //   289: new com/android/volley/ui/NetworkImageViewPlus$1
    //   292: dup
    //   293: aload_0
    //   294: iload_1
    //   295: invokespecial <init> : (Lcom/android/volley/ui/NetworkImageViewPlus;Z)V
    //   298: iload #5
    //   300: iload_2
    //   301: invokevirtual get : (Ljava/lang/String;Lcom/android/volley/cache/plus/ImageLoader$ImageListener;II)Lcom/android/volley/cache/plus/ImageLoader$ImageContainer;
    //   304: putfield mImageContainer : Lcom/android/volley/cache/plus/ImageLoader$ImageContainer;
    //   307: return }
  
  protected void onDetachedFromWindow() {
    ImageLoader.ImageContainer imageContainer = this.mImageContainer;
    if (imageContainer != null) {
      imageContainer.cancelRequest();
      setImageDrawable(null);
      this.mImageContainer = null;
    } 
    super.onDetachedFromWindow();
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    if (this.mImageLoader != null)
      loadImageIfNecessary(true); 
  }
  
  protected void setDefaultImageOrNull() {
    int i = this.mDefaultImageId;
    if (i != 0) {
      setImageResource(i);
      return;
    } 
    setImageDrawable(null);
  }
  
  public void setDefaultImageResId(int paramInt) { this.mDefaultImageId = paramInt; }
  
  public void setErrorImageResId(int paramInt) { this.mErrorImageId = paramInt; }
  
  public void setFadeInImage(boolean paramBoolean) { this.mFadeInImage = paramBoolean; }
  
  public void setImageListener(Response.Listener<BitmapDrawable> paramListener) { this.mListener = paramListener; }
  
  public void setImageUrl(String paramString, ImageLoader paramImageLoader) {
    this.mUrl = paramString;
    this.mImageLoader = paramImageLoader;
    loadImageIfNecessary(false);
  }
  
  public void setMaxImageSize(int paramInt) { setMaxImageSize(paramInt, paramInt); }
  
  public void setMaxImageSize(int paramInt1, int paramInt2) {
    this.mMaxImageWidth = paramInt1;
    this.mMaxImageHeight = paramInt2;
  }
  
  public void setResetImageUrl(String paramString, ImageLoader paramImageLoader) {
    this.mImageContainer = null;
    this.mUrl = paramString;
    this.mImageLoader = paramImageLoader;
    loadImageIfNecessary(false);
  }
}
