package com.bumptech.glide;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.Fragment;
import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import android.os.ParcelFileDescriptor;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import com.bumptech.glide.load.DecodeFormat;
import com.bumptech.glide.load.engine.Engine;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.engine.cache.MemoryCache;
import com.bumptech.glide.load.engine.prefill.BitmapPreFiller;
import com.bumptech.glide.load.engine.prefill.PreFillType;
import com.bumptech.glide.load.model.GenericLoaderFactory;
import com.bumptech.glide.load.model.ModelLoader;
import com.bumptech.glide.load.model.ModelLoaderFactory;
import com.bumptech.glide.load.model.file_descriptor.FileDescriptorFileLoader;
import com.bumptech.glide.load.model.file_descriptor.FileDescriptorResourceLoader;
import com.bumptech.glide.load.model.file_descriptor.FileDescriptorStringLoader;
import com.bumptech.glide.load.model.file_descriptor.FileDescriptorUriLoader;
import com.bumptech.glide.load.model.stream.HttpUrlGlideUrlLoader;
import com.bumptech.glide.load.model.stream.StreamByteArrayLoader;
import com.bumptech.glide.load.model.stream.StreamFileLoader;
import com.bumptech.glide.load.model.stream.StreamResourceLoader;
import com.bumptech.glide.load.model.stream.StreamStringLoader;
import com.bumptech.glide.load.model.stream.StreamUriLoader;
import com.bumptech.glide.load.model.stream.StreamUrlLoader;
import com.bumptech.glide.load.resource.bitmap.CenterCrop;
import com.bumptech.glide.load.resource.bitmap.FileDescriptorBitmapDataLoadProvider;
import com.bumptech.glide.load.resource.bitmap.FitCenter;
import com.bumptech.glide.load.resource.bitmap.ImageVideoDataLoadProvider;
import com.bumptech.glide.load.resource.bitmap.StreamBitmapDataLoadProvider;
import com.bumptech.glide.load.resource.file.StreamFileDataLoadProvider;
import com.bumptech.glide.load.resource.gif.GifDrawableLoadProvider;
import com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapperTransformation;
import com.bumptech.glide.load.resource.gifbitmap.ImageVideoGifDrawableLoadProvider;
import com.bumptech.glide.load.resource.transcode.GifBitmapWrapperDrawableTranscoder;
import com.bumptech.glide.load.resource.transcode.GlideBitmapDrawableTranscoder;
import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
import com.bumptech.glide.load.resource.transcode.TranscoderRegistry;
import com.bumptech.glide.manager.RequestManagerRetriever;
import com.bumptech.glide.provider.DataLoadProvider;
import com.bumptech.glide.provider.DataLoadProviderRegistry;
import com.bumptech.glide.request.FutureTarget;
import com.bumptech.glide.request.Request;
import com.bumptech.glide.request.target.ImageViewTargetFactory;
import com.bumptech.glide.request.target.Target;
import com.bumptech.glide.util.Util;
import java.io.File;
import java.io.InputStream;

public class Glide {
  private static final String TAG = "Glide";
  
  private final CenterCrop bitmapCenterCrop;
  
  private final FitCenter bitmapFitCenter;
  
  private final BitmapPool bitmapPool;
  
  private final BitmapPreFiller bitmapPreFiller;
  
  private final DataLoadProviderRegistry dataLoadProviderRegistry;
  
  private final DecodeFormat decodeFormat;
  
  private final GifBitmapWrapperTransformation drawableCenterCrop;
  
  private final GifBitmapWrapperTransformation drawableFitCenter;
  
  private final Engine engine;
  
  private final ImageViewTargetFactory imageViewTargetFactory = new ImageViewTargetFactory();
  
  private final GenericLoaderFactory loaderFactory;
  
  private final Handler mainHandler;
  
  private final MemoryCache memoryCache;
  
  private final TranscoderRegistry transcoderRegistry = new TranscoderRegistry();
  
  Glide(Engine paramEngine, MemoryCache paramMemoryCache, BitmapPool paramBitmapPool, Context paramContext, DecodeFormat paramDecodeFormat) {
    this.engine = paramEngine;
    this.bitmapPool = paramBitmapPool;
    this.memoryCache = paramMemoryCache;
    this.decodeFormat = paramDecodeFormat;
    this.loaderFactory = new GenericLoaderFactory(paramContext);
    this.mainHandler = new Handler(Looper.getMainLooper());
    this.bitmapPreFiller = new BitmapPreFiller(paramMemoryCache, paramBitmapPool, paramDecodeFormat);
    this.dataLoadProviderRegistry = new DataLoadProviderRegistry();
    StreamBitmapDataLoadProvider streamBitmapDataLoadProvider = new StreamBitmapDataLoadProvider(paramBitmapPool, paramDecodeFormat);
    this.dataLoadProviderRegistry.register(InputStream.class, android.graphics.Bitmap.class, streamBitmapDataLoadProvider);
    FileDescriptorBitmapDataLoadProvider fileDescriptorBitmapDataLoadProvider = new FileDescriptorBitmapDataLoadProvider(paramBitmapPool, paramDecodeFormat);
    this.dataLoadProviderRegistry.register(ParcelFileDescriptor.class, android.graphics.Bitmap.class, fileDescriptorBitmapDataLoadProvider);
    ImageVideoDataLoadProvider imageVideoDataLoadProvider = new ImageVideoDataLoadProvider(streamBitmapDataLoadProvider, fileDescriptorBitmapDataLoadProvider);
    this.dataLoadProviderRegistry.register(com.bumptech.glide.load.model.ImageVideoWrapper.class, android.graphics.Bitmap.class, imageVideoDataLoadProvider);
    GifDrawableLoadProvider gifDrawableLoadProvider = new GifDrawableLoadProvider(paramContext, paramBitmapPool);
    this.dataLoadProviderRegistry.register(InputStream.class, com.bumptech.glide.load.resource.gif.GifDrawable.class, gifDrawableLoadProvider);
    this.dataLoadProviderRegistry.register(com.bumptech.glide.load.model.ImageVideoWrapper.class, com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapper.class, new ImageVideoGifDrawableLoadProvider(imageVideoDataLoadProvider, gifDrawableLoadProvider, paramBitmapPool));
    this.dataLoadProviderRegistry.register(InputStream.class, File.class, new StreamFileDataLoadProvider());
    register(File.class, ParcelFileDescriptor.class, new FileDescriptorFileLoader.Factory());
    register(File.class, InputStream.class, new StreamFileLoader.Factory());
    register(int.class, ParcelFileDescriptor.class, new FileDescriptorResourceLoader.Factory());
    register(int.class, InputStream.class, new StreamResourceLoader.Factory());
    register(Integer.class, ParcelFileDescriptor.class, new FileDescriptorResourceLoader.Factory());
    register(Integer.class, InputStream.class, new StreamResourceLoader.Factory());
    register(String.class, ParcelFileDescriptor.class, new FileDescriptorStringLoader.Factory());
    register(String.class, InputStream.class, new StreamStringLoader.Factory());
    register(android.net.Uri.class, ParcelFileDescriptor.class, new FileDescriptorUriLoader.Factory());
    register(android.net.Uri.class, InputStream.class, new StreamUriLoader.Factory());
    register(java.net.URL.class, InputStream.class, new StreamUrlLoader.Factory());
    register(com.bumptech.glide.load.model.GlideUrl.class, InputStream.class, new HttpUrlGlideUrlLoader.Factory());
    register(byte[].class, InputStream.class, new StreamByteArrayLoader.Factory());
    this.transcoderRegistry.register(android.graphics.Bitmap.class, com.bumptech.glide.load.resource.bitmap.GlideBitmapDrawable.class, new GlideBitmapDrawableTranscoder(paramContext.getResources(), paramBitmapPool));
    this.transcoderRegistry.register(com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapper.class, com.bumptech.glide.load.resource.drawable.GlideDrawable.class, new GifBitmapWrapperDrawableTranscoder(new GlideBitmapDrawableTranscoder(paramContext.getResources(), paramBitmapPool)));
    this.bitmapCenterCrop = new CenterCrop(paramBitmapPool);
    this.drawableCenterCrop = new GifBitmapWrapperTransformation(paramBitmapPool, this.bitmapCenterCrop);
    this.bitmapFitCenter = new FitCenter(paramBitmapPool);
    this.drawableFitCenter = new GifBitmapWrapperTransformation(paramBitmapPool, this.bitmapFitCenter);
  }
  
  public static <T> ModelLoader<T, ParcelFileDescriptor> buildFileDescriptorModelLoader(Class<T> paramClass, Context paramContext) { return buildModelLoader(paramClass, ParcelFileDescriptor.class, paramContext); }
  
  public static <T> ModelLoader<T, ParcelFileDescriptor> buildFileDescriptorModelLoader(T paramT, Context paramContext) { return buildModelLoader(paramT, ParcelFileDescriptor.class, paramContext); }
  
  public static <T, Y> ModelLoader<T, Y> buildModelLoader(Class<T> paramClass1, Class<Y> paramClass2, Context paramContext) {
    if (paramClass1 == null) {
      if (Log.isLoggable("Glide", 3))
        Log.d("Glide", "Unable to load null model, setting placeholder only"); 
      return null;
    } 
    return get(paramContext).getLoaderFactory().buildModelLoader(paramClass1, paramClass2);
  }
  
  public static <T, Y> ModelLoader<T, Y> buildModelLoader(T paramT, Class<Y> paramClass, Context paramContext) {
    if (paramT != null) {
      paramT = (T)paramT.getClass();
    } else {
      paramT = null;
    } 
    return buildModelLoader(paramT, paramClass, paramContext);
  }
  
  public static <T> ModelLoader<T, InputStream> buildStreamModelLoader(Class<T> paramClass, Context paramContext) { return buildModelLoader(paramClass, InputStream.class, paramContext); }
  
  public static <T> ModelLoader<T, InputStream> buildStreamModelLoader(T paramT, Context paramContext) { return buildModelLoader(paramT, InputStream.class, paramContext); }
  
  public static void clear(View paramView) { clear(new ClearTarget(paramView)); }
  
  public static void clear(FutureTarget<?> paramFutureTarget) { paramFutureTarget.clear(); }
  
  public static void clear(Target<?> paramTarget) {
    Util.assertMainThread();
    Request request = paramTarget.getRequest();
    if (request != null) {
      request.clear();
      paramTarget.setRequest(null);
    } 
  }
  
  public static Glide get(Context paramContext) { // Byte code:
    //   0: getstatic com/bumptech/glide/Glide.glide : Lcom/bumptech/glide/Glide;
    //   3: ifnonnull -> 132
    //   6: ldc com/bumptech/glide/Glide
    //   8: monitorenter
    //   9: getstatic com/bumptech/glide/Glide.glide : Lcom/bumptech/glide/Glide;
    //   12: ifnonnull -> 120
    //   15: aload_0
    //   16: invokevirtual getApplicationContext : ()Landroid/content/Context;
    //   19: astore_0
    //   20: new com/bumptech/glide/module/ManifestParser
    //   23: dup
    //   24: aload_0
    //   25: invokespecial <init> : (Landroid/content/Context;)V
    //   28: invokevirtual parse : ()Ljava/util/List;
    //   31: astore_1
    //   32: new com/bumptech/glide/GlideBuilder
    //   35: dup
    //   36: aload_0
    //   37: invokespecial <init> : (Landroid/content/Context;)V
    //   40: astore_2
    //   41: aload_1
    //   42: invokeinterface iterator : ()Ljava/util/Iterator;
    //   47: astore_3
    //   48: aload_3
    //   49: invokeinterface hasNext : ()Z
    //   54: ifeq -> 76
    //   57: aload_3
    //   58: invokeinterface next : ()Ljava/lang/Object;
    //   63: checkcast com/bumptech/glide/module/GlideModule
    //   66: aload_0
    //   67: aload_2
    //   68: invokeinterface applyOptions : (Landroid/content/Context;Lcom/bumptech/glide/GlideBuilder;)V
    //   73: goto -> 48
    //   76: aload_2
    //   77: invokevirtual createGlide : ()Lcom/bumptech/glide/Glide;
    //   80: putstatic com/bumptech/glide/Glide.glide : Lcom/bumptech/glide/Glide;
    //   83: aload_1
    //   84: invokeinterface iterator : ()Ljava/util/Iterator;
    //   89: astore_1
    //   90: aload_1
    //   91: invokeinterface hasNext : ()Z
    //   96: ifeq -> 120
    //   99: aload_1
    //   100: invokeinterface next : ()Ljava/lang/Object;
    //   105: checkcast com/bumptech/glide/module/GlideModule
    //   108: aload_0
    //   109: getstatic com/bumptech/glide/Glide.glide : Lcom/bumptech/glide/Glide;
    //   112: invokeinterface registerComponents : (Landroid/content/Context;Lcom/bumptech/glide/Glide;)V
    //   117: goto -> 90
    //   120: ldc com/bumptech/glide/Glide
    //   122: monitorexit
    //   123: goto -> 132
    //   126: astore_0
    //   127: ldc com/bumptech/glide/Glide
    //   129: monitorexit
    //   130: aload_0
    //   131: athrow
    //   132: getstatic com/bumptech/glide/Glide.glide : Lcom/bumptech/glide/Glide;
    //   135: areturn
    // Exception table:
    //   from	to	target	type
    //   9	48	126	finally
    //   48	73	126	finally
    //   76	90	126	finally
    //   90	117	126	finally
    //   120	123	126	finally
    //   127	130	126	finally }
  
  private GenericLoaderFactory getLoaderFactory() { return this.loaderFactory; }
  
  public static File getPhotoCacheDir(Context paramContext) { return getPhotoCacheDir(paramContext, "image_manager_disk_cache"); }
  
  public static File getPhotoCacheDir(Context paramContext, String paramString) {
    File file = paramContext.getCacheDir();
    if (file != null) {
      file = new File(file, paramString);
      return (!file.mkdirs() && (!file.exists() || !file.isDirectory())) ? null : file;
    } 
    if (Log.isLoggable("Glide", 6))
      Log.e("Glide", "default disk cache dir is null"); 
    return null;
  }
  
  @Deprecated
  public static boolean isSetup() { return (glide != null); }
  
  @Deprecated
  public static void setup(GlideBuilder paramGlideBuilder) {
    if (!isSetup()) {
      glide = paramGlideBuilder.createGlide();
      return;
    } 
    throw new IllegalArgumentException("Glide is already setup, check with isSetup() first");
  }
  
  static void tearDown() { glide = null; }
  
  public static RequestManager with(Activity paramActivity) { return RequestManagerRetriever.get().get(paramActivity); }
  
  @TargetApi(11)
  public static RequestManager with(Fragment paramFragment) { return RequestManagerRetriever.get().get(paramFragment); }
  
  public static RequestManager with(Context paramContext) { return RequestManagerRetriever.get().get(paramContext); }
  
  public static RequestManager with(Fragment paramFragment) { return RequestManagerRetriever.get().get(paramFragment); }
  
  public static RequestManager with(FragmentActivity paramFragmentActivity) { return RequestManagerRetriever.get().get(paramFragmentActivity); }
  
  <T, Z> DataLoadProvider<T, Z> buildDataProvider(Class<T> paramClass1, Class<Z> paramClass2) { return this.dataLoadProviderRegistry.get(paramClass1, paramClass2); }
  
  <R> Target<R> buildImageViewTarget(ImageView paramImageView, Class<R> paramClass) { return this.imageViewTargetFactory.buildTarget(paramImageView, paramClass); }
  
  <Z, R> ResourceTranscoder<Z, R> buildTranscoder(Class<Z> paramClass1, Class<R> paramClass2) { return this.transcoderRegistry.get(paramClass1, paramClass2); }
  
  public void clearDiskCache() {
    Util.assertBackgroundThread();
    getEngine().clearDiskCache();
  }
  
  public void clearMemory() {
    Util.assertMainThread();
    this.memoryCache.clearMemory();
    this.bitmapPool.clearMemory();
  }
  
  CenterCrop getBitmapCenterCrop() { return this.bitmapCenterCrop; }
  
  FitCenter getBitmapFitCenter() { return this.bitmapFitCenter; }
  
  public BitmapPool getBitmapPool() { return this.bitmapPool; }
  
  DecodeFormat getDecodeFormat() { return this.decodeFormat; }
  
  GifBitmapWrapperTransformation getDrawableCenterCrop() { return this.drawableCenterCrop; }
  
  GifBitmapWrapperTransformation getDrawableFitCenter() { return this.drawableFitCenter; }
  
  Engine getEngine() { return this.engine; }
  
  Handler getMainHandler() { return this.mainHandler; }
  
  public void preFillBitmapPool(PreFillType.Builder... paramVarArgs) { this.bitmapPreFiller.preFill(paramVarArgs); }
  
  public <T, Y> void register(Class<T> paramClass1, Class<Y> paramClass2, ModelLoaderFactory<T, Y> paramModelLoaderFactory) {
    ModelLoaderFactory modelLoaderFactory = this.loaderFactory.register(paramClass1, paramClass2, paramModelLoaderFactory);
    if (modelLoaderFactory != null)
      modelLoaderFactory.teardown(); 
  }
  
  public void setMemoryCategory(MemoryCategory paramMemoryCategory) {
    Util.assertMainThread();
    this.memoryCache.setSizeMultiplier(paramMemoryCategory.getMultiplier());
    this.bitmapPool.setSizeMultiplier(paramMemoryCategory.getMultiplier());
  }
  
  public void trimMemory(int paramInt) {
    Util.assertMainThread();
    this.memoryCache.trimMemory(paramInt);
    this.bitmapPool.trimMemory(paramInt);
  }
  
  @Deprecated
  public <T, Y> void unregister(Class<T> paramClass1, Class<Y> paramClass2) {
    ModelLoaderFactory modelLoaderFactory = this.loaderFactory.unregister(paramClass1, paramClass2);
    if (modelLoaderFactory != null)
      modelLoaderFactory.teardown(); 
  }
}
