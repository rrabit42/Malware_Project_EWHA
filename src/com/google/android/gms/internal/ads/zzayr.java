package com.google.android.gms.internal.ads;

import java.security.GeneralSecurityException;
import java.security.KeyPair;
import java.security.interfaces.ECPrivateKey;
import java.security.interfaces.ECPublicKey;
import java.security.spec.ECParameterSpec;
import java.security.spec.ECPoint;
import java.security.spec.EllipticCurve;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

public final class zzayr {
  private ECPublicKey zzdnj;
  
  public zzayr(ECPublicKey paramECPublicKey) { this.zzdnj = paramECPublicKey; }
  
  public final zzays zza(String paramString, byte[] paramArrayOfByte1, byte[] paramArrayOfByte2, int paramInt, zzayw paramzzayw) throws GeneralSecurityException {
    KeyPair keyPair = zzayt.zza(this.zzdnj.getParams());
    ECPublicKey eCPublicKey1 = (ECPublicKey)keyPair.getPublic();
    ECPrivateKey eCPrivateKey = (ECPrivateKey)keyPair.getPrivate();
    ECPublicKey eCPublicKey2 = this.zzdnj;
    ECParameterSpec eCParameterSpec1 = eCPublicKey2.getParams();
    ECParameterSpec eCParameterSpec2 = eCPrivateKey.getParams();
    if (eCParameterSpec1.getCurve().equals(eCParameterSpec2.getCurve()) && eCParameterSpec1.getGenerator().equals(eCParameterSpec2.getGenerator()) && eCParameterSpec1.getOrder().equals(eCParameterSpec2.getOrder()) && eCParameterSpec1.getCofactor() == eCParameterSpec2.getCofactor()) {
      byte[] arrayOfByte1;
      StringBuilder stringBuilder;
      byte[] arrayOfByte2 = zzayt.zza(eCPrivateKey, eCPublicKey2.getW());
      EllipticCurve ellipticCurve = eCPublicKey1.getParams().getCurve();
      ECPoint eCPoint = eCPublicKey1.getW();
      zzayt.zza(eCPoint, ellipticCurve);
      int i = zzayt.zzb(ellipticCurve);
      int j = zzayu.zzdnm[paramzzayw.ordinal()];
      int k = 1;
      if (j != 1) {
        if (j == 2) {
          arrayOfByte1 = new byte[++i];
          byte[] arrayOfByte = eCPoint.getAffineX().toByteArray();
          System.arraycopy(arrayOfByte, 0, arrayOfByte1, i - arrayOfByte.length, arrayOfByte.length);
          if (eCPoint.getAffineY().testBit(0)) {
            i = 3;
          } else {
            i = 2;
          } 
          arrayOfByte1[0] = (byte)i;
        } else {
          stringBuilder = new StringBuilder((paramString = String.valueOf(arrayOfByte1)).valueOf(paramString).length() + 15);
          stringBuilder.append("invalid format:");
          stringBuilder.append(paramString);
          throw new GeneralSecurityException(stringBuilder.toString());
        } 
      } else {
        j = i * 2 + 1;
        arrayOfByte1 = new byte[j];
        byte[] arrayOfByte5 = eCPoint.getAffineX().toByteArray();
        byte[] arrayOfByte4 = eCPoint.getAffineY().toByteArray();
        System.arraycopy(arrayOfByte4, 0, arrayOfByte1, j - arrayOfByte4.length, arrayOfByte4.length);
        System.arraycopy(arrayOfByte5, 0, arrayOfByte1, i + 1 - arrayOfByte5.length, arrayOfByte5.length);
        arrayOfByte1[0] = 4;
      } 
      byte[] arrayOfByte3 = zzayk.zza(new byte[][] { arrayOfByte1, arrayOfByte2 });
      Mac mac = (Mac)zzayy.zzdoa.zzek(paramString);
      if (paramInt <= mac.getMacLength() * 255) {
        if (stringBuilder == null || stringBuilder.length == 0) {
          mac.init(new SecretKeySpec(new byte[mac.getMacLength()], paramString));
        } else {
          mac.init(new SecretKeySpec(stringBuilder, paramString));
        } 
        arrayOfByte3 = mac.doFinal(arrayOfByte3);
        byte[] arrayOfByte5 = new byte[paramInt];
        mac.init(new SecretKeySpec(arrayOfByte3, paramString));
        byte[] arrayOfByte4 = new byte[0];
        j = 0;
        i = k;
        while (true) {
          mac.update(arrayOfByte4);
          mac.update(paramArrayOfByte2);
          mac.update((byte)i);
          arrayOfByte4 = mac.doFinal();
          if (arrayOfByte4.length + j < paramInt) {
            System.arraycopy(arrayOfByte4, 0, arrayOfByte5, j, arrayOfByte4.length);
            j += arrayOfByte4.length;
            i++;
            continue;
          } 
          break;
        } 
        System.arraycopy(arrayOfByte4, 0, arrayOfByte5, j, paramInt - j);
        return new zzays(arrayOfByte1, arrayOfByte5);
      } 
      throw new GeneralSecurityException("size too large");
    } 
    GeneralSecurityException generalSecurityException = new GeneralSecurityException("invalid public key spec");
    throw generalSecurityException;
  }
}
