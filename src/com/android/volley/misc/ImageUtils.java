package com.android.volley.misc;

import android.content.ContentResolver;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Point;
import android.graphics.Rect;
import android.net.Uri;
import android.util.Log;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.regex.Pattern;

public class ImageUtils {
  private static final Pattern BASE64_IMAGE_URI_PATTERN = Pattern.compile("^(?:.*;)?base64,.*");
  
  private static final String BASE64_URI_PREFIX = "base64,";
  
  private static final long MIN_NORMAL_CLASS = 32L;
  
  private static final long MIN_SMALL_CLASS = 24L;
  
  private static final String TAG = "ImageUtils";
  
  public static int calculateInSampleSize(BitmapFactory.Options paramOptions, int paramInt1, int paramInt2) {
    int k = paramOptions.outHeight;
    int m = paramOptions.outWidth;
    int j = 1;
    int i = 1;
    if (k > paramInt2 || m > paramInt1) {
      j = k / 2;
      int n = m / 2;
      while (j / i > paramInt2 && n / i > paramInt1)
        i *= 2; 
      long l1 = (m * k / i);
      long l2 = (paramInt1 * paramInt2 * 2);
      while (true) {
        j = i;
        if (l1 > l2) {
          i *= 2;
          l1 /= 2L;
          continue;
        } 
        break;
      } 
    } 
    return j;
  }
  
  public static InputStreamFactory createInputStreamFactory(ContentResolver paramContentResolver, Uri paramUri) { return "data".equals(paramUri.getScheme()) ? new DataInputStreamFactory(paramContentResolver, paramUri) : new BaseInputStreamFactory(paramContentResolver, paramUri); }
  
  public static Bitmap decodeSampledBitmapFromDescriptor(FileDescriptor paramFileDescriptor) {
    BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;
    BitmapFactory.decodeFileDescriptor(paramFileDescriptor, null, options);
    options.inJustDecodeBounds = false;
    return BitmapFactory.decodeFileDescriptor(paramFileDescriptor, null, options);
  }
  
  public static Bitmap decodeSampledBitmapFromDescriptor(FileDescriptor paramFileDescriptor, int paramInt1, int paramInt2) {
    BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;
    BitmapFactory.decodeFileDescriptor(paramFileDescriptor, null, options);
    options.inSampleSize = calculateInSampleSize(options, paramInt1, paramInt2);
    options.inJustDecodeBounds = false;
    return BitmapFactory.decodeFileDescriptor(paramFileDescriptor, null, options);
  }
  
  public static Bitmap decodeStream(ContentResolver paramContentResolver, Uri paramUri, int paramInt) {
    inputStreamFactory = createInputStreamFactory(paramContentResolver, paramUri);
    try {
      Point point = getImageBounds(inputStreamFactory);
      if (point == null)
        return null; 
      BitmapFactory.Options options = new BitmapFactory.Options();
      options.inSampleSize = Math.max(point.x / paramInt, point.y / paramInt);
      return decodeStream(inputStreamFactory, null, options);
    } catch (FileNotFoundException|IOException|IllegalArgumentException|SecurityException inputStreamFactory) {
      return null;
    } 
  }
  
  public static Bitmap decodeStream(ContentResolver paramContentResolver, Uri paramUri, BitmapFactory.Options paramOptions) {
    inputStreamFactory = createInputStreamFactory(paramContentResolver, paramUri);
    try {
      return decodeStream(inputStreamFactory, null, paramOptions);
    } catch (FileNotFoundException|IllegalArgumentException|SecurityException inputStreamFactory) {
      return null;
    } 
  }
  
  public static Bitmap decodeStream(InputStreamFactory paramInputStreamFactory, Rect paramRect, BitmapFactory.Options paramOptions) throws FileNotFoundException { // Byte code:
    //   0: aload_0
    //   1: invokeinterface createInputStream : ()Ljava/io/InputStream;
    //   6: astore #5
    //   8: aload #5
    //   10: ldc2_w -1
    //   13: invokestatic getOrientation : (Ljava/io/InputStream;J)I
    //   16: istore_3
    //   17: aload #5
    //   19: invokevirtual close : ()V
    //   22: aload_0
    //   23: invokeinterface createInputStream : ()Ljava/io/InputStream;
    //   28: astore #4
    //   30: aload #4
    //   32: astore_0
    //   33: aload #4
    //   35: aload_1
    //   36: aload_2
    //   37: invokestatic decodeStream : (Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   40: astore_1
    //   41: aload #4
    //   43: ifnull -> 87
    //   46: aload_1
    //   47: ifnonnull -> 87
    //   50: aload #4
    //   52: astore_0
    //   53: aload_2
    //   54: getfield inJustDecodeBounds : Z
    //   57: ifeq -> 63
    //   60: goto -> 87
    //   63: aload #4
    //   65: astore_0
    //   66: ldc 'ImageUtils'
    //   68: ldc 'ImageUtils#decodeStream(InputStream, Rect, Options): Image bytes cannot be decoded into a Bitmap'
    //   70: invokestatic w : (Ljava/lang/String;Ljava/lang/String;)I
    //   73: pop
    //   74: aload #4
    //   76: astore_0
    //   77: new java/lang/UnsupportedOperationException
    //   80: dup
    //   81: ldc 'Image bytes cannot be decoded into a Bitmap.'
    //   83: invokespecial <init> : (Ljava/lang/String;)V
    //   86: athrow
    //   87: aload_1
    //   88: ifnull -> 148
    //   91: iload_3
    //   92: ifeq -> 148
    //   95: aload #4
    //   97: astore_0
    //   98: new android/graphics/Matrix
    //   101: dup
    //   102: invokespecial <init> : ()V
    //   105: astore_2
    //   106: aload #4
    //   108: astore_0
    //   109: aload_2
    //   110: iload_3
    //   111: i2f
    //   112: invokevirtual postRotate : (F)Z
    //   115: pop
    //   116: aload #4
    //   118: astore_0
    //   119: aload_1
    //   120: iconst_0
    //   121: iconst_0
    //   122: aload_1
    //   123: invokevirtual getWidth : ()I
    //   126: aload_1
    //   127: invokevirtual getHeight : ()I
    //   130: aload_2
    //   131: iconst_1
    //   132: invokestatic createBitmap : (Landroid/graphics/Bitmap;IIIILandroid/graphics/Matrix;Z)Landroid/graphics/Bitmap;
    //   135: astore_1
    //   136: aload #4
    //   138: ifnull -> 146
    //   141: aload #4
    //   143: invokevirtual close : ()V
    //   146: aload_1
    //   147: areturn
    //   148: aload #4
    //   150: ifnull -> 158
    //   153: aload #4
    //   155: invokevirtual close : ()V
    //   158: aload_1
    //   159: areturn
    //   160: astore_2
    //   161: aload #4
    //   163: astore_1
    //   164: goto -> 204
    //   167: astore_2
    //   168: aload #4
    //   170: astore_1
    //   171: goto -> 228
    //   174: astore_1
    //   175: aload #5
    //   177: astore_0
    //   178: goto -> 250
    //   181: astore_2
    //   182: aload #5
    //   184: astore_1
    //   185: goto -> 204
    //   188: astore_2
    //   189: aload #5
    //   191: astore_1
    //   192: goto -> 228
    //   195: astore_1
    //   196: aconst_null
    //   197: astore_0
    //   198: goto -> 250
    //   201: astore_2
    //   202: aconst_null
    //   203: astore_1
    //   204: aload_1
    //   205: astore_0
    //   206: ldc 'ImageUtils'
    //   208: ldc 'ImageUtils#decodeStream(InputStream, Rect, Options) threw an IOE'
    //   210: aload_2
    //   211: invokestatic e : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   214: pop
    //   215: aload_1
    //   216: ifnull -> 223
    //   219: aload_1
    //   220: invokevirtual close : ()V
    //   223: aconst_null
    //   224: areturn
    //   225: astore_2
    //   226: aconst_null
    //   227: astore_1
    //   228: aload_1
    //   229: astore_0
    //   230: ldc 'ImageUtils'
    //   232: ldc 'ImageUtils#decodeStream(InputStream, Rect, Options) threw an OOME'
    //   234: aload_2
    //   235: invokestatic e : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   238: pop
    //   239: aload_1
    //   240: ifnull -> 247
    //   243: aload_1
    //   244: invokevirtual close : ()V
    //   247: aconst_null
    //   248: areturn
    //   249: astore_1
    //   250: aload_0
    //   251: ifnull -> 258
    //   254: aload_0
    //   255: invokevirtual close : ()V
    //   258: aload_1
    //   259: athrow
    //   260: astore_0
    //   261: aload_1
    //   262: areturn
    //   263: astore_0
    //   264: aload_1
    //   265: areturn
    //   266: astore_0
    //   267: aconst_null
    //   268: areturn
    //   269: astore_0
    //   270: aconst_null
    //   271: areturn
    //   272: astore_0
    //   273: goto -> 258
    // Exception table:
    //   from	to	target	type
    //   0	8	225	java/lang/OutOfMemoryError
    //   0	8	201	java/io/IOException
    //   0	8	195	finally
    //   8	30	188	java/lang/OutOfMemoryError
    //   8	30	181	java/io/IOException
    //   8	30	174	finally
    //   33	41	167	java/lang/OutOfMemoryError
    //   33	41	160	java/io/IOException
    //   33	41	249	finally
    //   53	60	167	java/lang/OutOfMemoryError
    //   53	60	160	java/io/IOException
    //   53	60	249	finally
    //   66	74	167	java/lang/OutOfMemoryError
    //   66	74	160	java/io/IOException
    //   66	74	249	finally
    //   77	87	167	java/lang/OutOfMemoryError
    //   77	87	160	java/io/IOException
    //   77	87	249	finally
    //   98	106	167	java/lang/OutOfMemoryError
    //   98	106	160	java/io/IOException
    //   98	106	249	finally
    //   109	116	167	java/lang/OutOfMemoryError
    //   109	116	160	java/io/IOException
    //   109	116	249	finally
    //   119	136	167	java/lang/OutOfMemoryError
    //   119	136	160	java/io/IOException
    //   119	136	249	finally
    //   141	146	260	java/io/IOException
    //   153	158	263	java/io/IOException
    //   206	215	249	finally
    //   219	223	266	java/io/IOException
    //   230	239	249	finally
    //   243	247	269	java/io/IOException
    //   254	258	272	java/io/IOException }
  
  public static Bitmap decodeStream(InputStream paramInputStream, Rect paramRect, BitmapFactory.Options paramOptions) {
    try {
      return BitmapFactory.decodeStream(paramInputStream, paramRect, paramOptions);
    } catch (OutOfMemoryError paramInputStream) {
      Log.e("ImageUtils", "ImageUtils#decodeStream(InputStream, Rect, Options) threw an OOME", paramInputStream);
      return null;
    } 
  }
  
  public static int findBestSampleSize(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    double d1 = paramInt1;
    double d2 = paramInt3;
    Double.isNaN(d1);
    Double.isNaN(d2);
    d1 /= d2;
    d2 = paramInt2;
    double d3 = paramInt4;
    Double.isNaN(d2);
    Double.isNaN(d3);
    d1 = Math.min(d1, d2 / d3);
    float f = 1.0F;
    while (true) {
      float f1 = 2.0F * f;
      if (f1 <= d1) {
        f = f1;
        continue;
      } 
      break;
    } 
    return (int)f;
  }
  
  public static Point getImageBounds(InputStreamFactory paramInputStreamFactory) throws IOException {
    BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;
    decodeStream(paramInputStreamFactory, null, options);
    return new Point(options.outWidth, options.outHeight);
  }
  
  public static boolean isImageMimeType(String paramString) { return (paramString != null && paramString.startsWith("image/")); }
}
