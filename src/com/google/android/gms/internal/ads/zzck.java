package com.google.android.gms.internal.ads;

import java.nio.ByteBuffer;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public final class zzck {
  private static Cipher zzrf;
  
  private static final Object zzrg = new Object();
  
  private static final Object zzrh = new Object();
  
  private final SecureRandom zzre = null;
  
  public zzck(SecureRandom paramSecureRandom) {}
  
  private static Cipher getCipher() throws NoSuchAlgorithmException, NoSuchPaddingException {
    synchronized (zzrh) {
      if (zzrf == null)
        zzrf = Cipher.getInstance("AES/CBC/PKCS5Padding"); 
      return zzrf;
    } 
  }
  
  public final byte[] zza(byte[] paramArrayOfByte, String paramString) throws zzcl {
    if (paramArrayOfByte.length == 16)
      try {
        byte[] arrayOfByte = zzbi.zza(paramString, false);
        if (arrayOfByte.length > 16) {
          ByteBuffer byteBuffer = ByteBuffer.allocate(arrayOfByte.length);
          byteBuffer.put(arrayOfByte);
          byteBuffer.flip();
          null = new byte[16];
          arrayOfByte = new byte[arrayOfByte.length - 16];
          byteBuffer.get(null);
          byteBuffer.get(arrayOfByte);
          SecretKeySpec secretKeySpec = new SecretKeySpec(paramArrayOfByte, "AES");
          synchronized (zzrg) {
            getCipher().init(2, secretKeySpec, new IvParameterSpec(null));
            return getCipher().doFinal(arrayOfByte);
          } 
        } 
        throw new zzcl(this);
      } catch (NoSuchAlgorithmException paramArrayOfByte) {
        throw new zzcl(this, paramArrayOfByte);
      } catch (InvalidKeyException paramArrayOfByte) {
        throw new zzcl(this, paramArrayOfByte);
      } catch (IllegalBlockSizeException paramArrayOfByte) {
        throw new zzcl(this, paramArrayOfByte);
      } catch (NoSuchPaddingException paramArrayOfByte) {
        throw new zzcl(this, paramArrayOfByte);
      } catch (BadPaddingException paramArrayOfByte) {
        throw new zzcl(this, paramArrayOfByte);
      } catch (InvalidAlgorithmParameterException paramArrayOfByte) {
        throw new zzcl(this, paramArrayOfByte);
      } catch (IllegalArgumentException paramArrayOfByte) {
        throw new zzcl(this, paramArrayOfByte);
      }  
    throw new zzcl(this);
  }
  
  public final String zzb(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) throws zzcl {
    if (paramArrayOfByte1.length == 16)
      try {
        SecretKeySpec secretKeySpec = new SecretKeySpec(paramArrayOfByte1, "AES");
        synchronized (zzrg) {
          getCipher().init(1, secretKeySpec, null);
          paramArrayOfByte2 = getCipher().doFinal(paramArrayOfByte2);
          byte[] arrayOfByte = getCipher().getIV();
          int i = paramArrayOfByte2.length + arrayOfByte.length;
          null = ByteBuffer.allocate(i);
          null.put(arrayOfByte).put(paramArrayOfByte2);
          null.flip();
          paramArrayOfByte2 = new byte[i];
          null.get(paramArrayOfByte2);
          return zzbi.zza(paramArrayOfByte2, false);
        } 
      } catch (NoSuchAlgorithmException paramArrayOfByte1) {
        throw new zzcl(this, paramArrayOfByte1);
      } catch (InvalidKeyException paramArrayOfByte1) {
        throw new zzcl(this, paramArrayOfByte1);
      } catch (IllegalBlockSizeException paramArrayOfByte1) {
        throw new zzcl(this, paramArrayOfByte1);
      } catch (NoSuchPaddingException paramArrayOfByte1) {
        throw new zzcl(this, paramArrayOfByte1);
      } catch (BadPaddingException paramArrayOfByte1) {
        throw new zzcl(this, paramArrayOfByte1);
      }  
    throw new zzcl(this);
  }
  
  public final byte[] zzl(String paramString) throws zzcl {
    byte[] arrayOfByte;
    byte b = 0;
    try {
      byte[] arrayOfByte1 = zzbi.zza(paramString, false);
      if (arrayOfByte1.length == 32) {
        ByteBuffer byteBuffer = ByteBuffer.wrap(arrayOfByte1, 4, 16);
        arrayOfByte = new byte[16];
        byteBuffer.get(arrayOfByte);
      } else {
        throw new zzcl(this);
      } 
    } catch (IllegalArgumentException paramString) {
      zzcl zzcl = new zzcl(this, paramString);
      throw zzcl;
    } 
    while (b < 16) {
      arrayOfByte[b] = (byte)(arrayOfByte[b] ^ 0x44);
      b++;
    } 
    return arrayOfByte;
  }
}
