package com.android.volley.toolbox;

import android.graphics.Bitmap;
import com.android.volley.Cache;
import com.android.volley.NetworkResponse;
import java.io.ByteArrayOutputStream;
import java.util.Map;
import org.apache.http.impl.cookie.DateParseException;
import org.apache.http.impl.cookie.DateUtils;

public class HttpHeaderParser {
  public static Cache.Entry parseBitmapCacheHeaders(Bitmap paramBitmap) {
    if (paramBitmap != null) {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
      paramBitmap.compress(Bitmap.CompressFormat.JPEG, 70, byteArrayOutputStream);
      NetworkResponse networkResponse = new NetworkResponse(byteArrayOutputStream.toByteArray());
    } else {
      paramBitmap = null;
    } 
    return parseCacheHeaders(paramBitmap);
  }
  
  public static Cache.Entry parseCacheHeaders(NetworkResponse paramNetworkResponse) { // Byte code:
    //   0: invokestatic currentTimeMillis : ()J
    //   3: lstore #16
    //   5: lconst_0
    //   6: lstore #10
    //   8: aload_0
    //   9: ifnull -> 430
    //   12: aload_0
    //   13: getfield headers : Ljava/util/Map;
    //   16: astore #19
    //   18: aload #19
    //   20: ldc 'Date'
    //   22: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   27: checkcast java/lang/String
    //   30: astore #18
    //   32: aload #18
    //   34: ifnull -> 47
    //   37: aload #18
    //   39: invokestatic parseDateAsEpoch : (Ljava/lang/String;)J
    //   42: lstore #6
    //   44: goto -> 50
    //   47: lconst_0
    //   48: lstore #6
    //   50: aload #19
    //   52: ldc 'Cache-Control'
    //   54: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   59: checkcast java/lang/String
    //   62: astore #18
    //   64: aload #18
    //   66: ifnull -> 258
    //   69: aload #18
    //   71: ldc ','
    //   73: invokevirtual split : (Ljava/lang/String;)[Ljava/lang/String;
    //   76: astore #18
    //   78: lconst_0
    //   79: lstore #4
    //   81: lload #4
    //   83: lstore #8
    //   85: iconst_0
    //   86: istore_3
    //   87: iconst_1
    //   88: istore_1
    //   89: iload_3
    //   90: aload #18
    //   92: arraylength
    //   93: if_icmpge -> 247
    //   96: aload #18
    //   98: iload_3
    //   99: aaload
    //   100: invokevirtual trim : ()Ljava/lang/String;
    //   103: astore #20
    //   105: aload #20
    //   107: ldc 'no-cache'
    //   109: invokevirtual equals : (Ljava/lang/Object;)Z
    //   112: ifne -> 228
    //   115: aload #20
    //   117: ldc 'no-store'
    //   119: invokevirtual equals : (Ljava/lang/Object;)Z
    //   122: ifeq -> 128
    //   125: goto -> 228
    //   128: aload #20
    //   130: ldc 'max-age='
    //   132: invokevirtual startsWith : (Ljava/lang/String;)Z
    //   135: ifeq -> 163
    //   138: aload #20
    //   140: bipush #8
    //   142: invokevirtual substring : (I)Ljava/lang/String;
    //   145: invokestatic parseLong : (Ljava/lang/String;)J
    //   148: lstore #12
    //   150: lload #12
    //   152: lstore #4
    //   154: iconst_1
    //   155: istore_2
    //   156: lload #8
    //   158: lstore #12
    //   160: goto -> 234
    //   163: aload #20
    //   165: ldc 'stale-while-revalidate='
    //   167: invokevirtual startsWith : (Ljava/lang/String;)Z
    //   170: ifeq -> 190
    //   173: aload #20
    //   175: bipush #23
    //   177: invokevirtual substring : (I)Ljava/lang/String;
    //   180: invokestatic parseLong : (Ljava/lang/String;)J
    //   183: lstore #12
    //   185: iload_1
    //   186: istore_2
    //   187: goto -> 234
    //   190: aload #20
    //   192: ldc 'must-revalidate'
    //   194: invokevirtual equals : (Ljava/lang/Object;)Z
    //   197: ifne -> 216
    //   200: iload_1
    //   201: istore_2
    //   202: lload #8
    //   204: lstore #12
    //   206: aload #20
    //   208: ldc 'proxy-revalidate'
    //   210: invokevirtual equals : (Ljava/lang/Object;)Z
    //   213: ifeq -> 234
    //   216: lconst_0
    //   217: lstore #4
    //   219: iload_1
    //   220: istore_2
    //   221: lload #8
    //   223: lstore #12
    //   225: goto -> 234
    //   228: iconst_0
    //   229: istore_2
    //   230: lload #8
    //   232: lstore #12
    //   234: iload_3
    //   235: iconst_1
    //   236: iadd
    //   237: istore_3
    //   238: iload_2
    //   239: istore_1
    //   240: lload #12
    //   242: lstore #8
    //   244: goto -> 89
    //   247: lload #4
    //   249: lstore #12
    //   251: lload #8
    //   253: lstore #4
    //   255: goto -> 267
    //   258: lconst_0
    //   259: lstore #12
    //   261: lload #12
    //   263: lstore #4
    //   265: iconst_0
    //   266: istore_1
    //   267: aload #19
    //   269: ldc 'Expires'
    //   271: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   276: checkcast java/lang/String
    //   279: astore #18
    //   281: aload #18
    //   283: ifnull -> 296
    //   286: aload #18
    //   288: invokestatic parseDateAsEpoch : (Ljava/lang/String;)J
    //   291: lstore #14
    //   293: goto -> 299
    //   296: lconst_0
    //   297: lstore #14
    //   299: aload #19
    //   301: ldc 'Last-Modified'
    //   303: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   308: checkcast java/lang/String
    //   311: astore #18
    //   313: aload #18
    //   315: ifnull -> 328
    //   318: aload #18
    //   320: invokestatic parseDateAsEpoch : (Ljava/lang/String;)J
    //   323: lstore #8
    //   325: goto -> 331
    //   328: lconst_0
    //   329: lstore #8
    //   331: aload #19
    //   333: ldc 'ETag'
    //   335: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   340: checkcast java/lang/String
    //   343: astore #18
    //   345: iload_1
    //   346: ifeq -> 386
    //   349: lload #16
    //   351: lload #12
    //   353: ldc2_w 1000
    //   356: lmul
    //   357: ladd
    //   358: lstore #10
    //   360: lload #10
    //   362: lload #4
    //   364: ldc2_w 1000
    //   367: lmul
    //   368: ladd
    //   369: lstore #12
    //   371: lload #10
    //   373: lstore #4
    //   375: lload #12
    //   377: lstore #10
    //   379: lload #6
    //   381: lstore #12
    //   383: goto -> 459
    //   386: lload #10
    //   388: lstore #4
    //   390: lload #6
    //   392: lconst_0
    //   393: lcmp
    //   394: ifle -> 419
    //   397: lload #10
    //   399: lstore #4
    //   401: lload #14
    //   403: lload #6
    //   405: lcmp
    //   406: iflt -> 419
    //   409: lload #16
    //   411: lload #14
    //   413: lload #6
    //   415: lsub
    //   416: ladd
    //   417: lstore #4
    //   419: lload #4
    //   421: lstore #10
    //   423: lload #6
    //   425: lstore #12
    //   427: goto -> 459
    //   430: lconst_0
    //   431: lstore #6
    //   433: lload #6
    //   435: lstore #4
    //   437: lload #4
    //   439: lstore #8
    //   441: aconst_null
    //   442: astore #18
    //   444: aconst_null
    //   445: astore #19
    //   447: lload #4
    //   449: lstore #12
    //   451: lload #10
    //   453: lstore #4
    //   455: lload #6
    //   457: lstore #10
    //   459: new com/android/volley/Cache$Entry
    //   462: dup
    //   463: invokespecial <init> : ()V
    //   466: astore #20
    //   468: aload_0
    //   469: ifnonnull -> 477
    //   472: aconst_null
    //   473: astore_0
    //   474: goto -> 482
    //   477: aload_0
    //   478: getfield data : [B
    //   481: astore_0
    //   482: aload #20
    //   484: aload_0
    //   485: putfield data : [B
    //   488: aload #20
    //   490: aload #18
    //   492: putfield etag : Ljava/lang/String;
    //   495: aload #20
    //   497: lload #4
    //   499: putfield softTtl : J
    //   502: aload #20
    //   504: lload #10
    //   506: putfield ttl : J
    //   509: aload #20
    //   511: lload #12
    //   513: putfield serverDate : J
    //   516: aload #20
    //   518: lload #8
    //   520: putfield lastModified : J
    //   523: aload #20
    //   525: aload #19
    //   527: putfield responseHeaders : Ljava/util/Map;
    //   530: aload #20
    //   532: areturn
    //   533: astore #20
    //   535: goto -> 154
    //   538: astore #20
    //   540: iload_1
    //   541: istore_2
    //   542: lload #8
    //   544: lstore #12
    //   546: goto -> 234
    // Exception table:
    //   from	to	target	type
    //   138	150	533	java/lang/Exception
    //   173	185	538	java/lang/Exception }
  
  public static String parseCharset(Map<String, String> paramMap) { return parseCharset(paramMap, "ISO-8859-1"); }
  
  public static String parseCharset(Map<String, String> paramMap, String paramString) {
    String str = (String)paramMap.get("Content-Type");
    if (str != null) {
      String[] arrayOfString = str.split(";");
      for (byte b = 1; b < arrayOfString.length; b++) {
        String[] arrayOfString1 = arrayOfString[b].trim().split("=");
        if (arrayOfString1.length == 2 && arrayOfString1[0].equals("charset"))
          return arrayOfString1[1]; 
      } 
    } 
    return paramString;
  }
  
  public static long parseDateAsEpoch(String paramString) {
    try {
      return DateUtils.parseDate(paramString).getTime();
    } catch (DateParseException paramString) {
      return 0L;
    } 
  }
  
  public static Cache.Entry parseIgnoreCacheHeaders(NetworkResponse paramNetworkResponse) {
    long l1;
    long l2 = System.currentTimeMillis();
    Map map = paramNetworkResponse.headers;
    String str = (String)map.get("Date");
    if (str != null) {
      l1 = parseDateAsEpoch(str);
    } else {
      l1 = 0L;
    } 
    str = (String)map.get("ETag");
    Cache.Entry entry = new Cache.Entry();
    entry.data = paramNetworkResponse.data;
    entry.etag = str;
    entry.softTtl = 180000L + l2;
    entry.ttl = l2 + 86400000L;
    entry.serverDate = l1;
    entry.responseHeaders = map;
    return entry;
  }
  
  public static Cache.Entry parseIgnoreCacheHeaders(NetworkResponse paramNetworkResponse, long paramLong1, long paramLong2) {
    long l1;
    long l2 = System.currentTimeMillis();
    Map map = paramNetworkResponse.headers;
    String str = (String)map.get("Date");
    if (str != null) {
      l1 = parseDateAsEpoch(str);
    } else {
      l1 = 0L;
    } 
    str = (String)map.get("ETag");
    Cache.Entry entry = new Cache.Entry();
    entry.data = paramNetworkResponse.data;
    entry.etag = str;
    entry.softTtl = paramLong1 + l2;
    entry.ttl = l2 + paramLong2;
    entry.serverDate = l1;
    entry.responseHeaders = map;
    return entry;
  }
}
