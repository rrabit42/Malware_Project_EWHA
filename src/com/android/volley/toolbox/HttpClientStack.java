package com.android.volley.toolbox;

import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.error.AuthFailureError;
import com.android.volley.request.MultiPartRequest;
import com.android.volley.toolbox.multipart.FilePart;
import com.android.volley.toolbox.multipart.MultipartProgressEntity;
import com.android.volley.toolbox.multipart.StringPart;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpHead;
import org.apache.http.client.methods.HttpOptions;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpTrace;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;

public class HttpClientStack implements HttpStack {
  private static final String CONTENT_TYPE_MULTIPART = "multipart/form-data; charset=%s; boundary=%s";
  
  private static final String HEADER_CONTENT_TYPE = "Content-Type";
  
  protected final HttpClient mClient;
  
  public HttpClientStack(HttpClient paramHttpClient) { this.mClient = paramHttpClient; }
  
  private static void addHeaders(HttpUriRequest paramHttpUriRequest, Map<String, String> paramMap) {
    for (String str : paramMap.keySet())
      paramHttpUriRequest.setHeader(str, (String)paramMap.get(str)); 
  }
  
  static HttpUriRequest createHttpRequest(Request<?> paramRequest, Map<String, String> paramMap) throws AuthFailureError, IOException {
    HttpPatch httpPatch;
    HttpPut httpPut;
    HttpPost httpPost;
    switch (paramRequest.getMethod()) {
      default:
        throw new IllegalStateException("Unknown request method.");
      case 7:
        httpPatch = new HttpPatch(paramRequest.getUrl());
        setEntityIfNonEmptyBody(httpPatch, paramRequest);
        return httpPatch;
      case 6:
        return new HttpTrace(paramRequest.getUrl());
      case 5:
        return new HttpOptions(paramRequest.getUrl());
      case 4:
        return new HttpHead(paramRequest.getUrl());
      case 3:
        return new HttpDelete(paramRequest.getUrl());
      case 2:
        httpPut = new HttpPut(paramRequest.getUrl());
        httpPut.addHeader("Content-Type", paramRequest.getBodyContentType());
        setEntityIfNonEmptyBody(httpPut, paramRequest);
        return httpPut;
      case 1:
        httpPost = new HttpPost(paramRequest.getUrl());
        setEntityIfNonEmptyBody(httpPost, paramRequest);
        return httpPost;
      case 0:
        return new HttpGet(paramRequest.getUrl());
      case -1:
        break;
    } 
    byte[] arrayOfByte = paramRequest.getPostBody();
    if (arrayOfByte != null) {
      HttpPost httpPost1 = new HttpPost(paramRequest.getUrl());
      httpPost1.addHeader("Content-Type", paramRequest.getPostBodyContentType());
      httpPost1.setEntity(new ByteArrayEntity(arrayOfByte));
      return httpPost1;
    } 
    return new HttpGet(paramRequest.getUrl());
  }
  
  private static List<NameValuePair> getPostParameterPairs(Map<String, String> paramMap) {
    ArrayList arrayList = new ArrayList(paramMap.size());
    for (String str : paramMap.keySet())
      arrayList.add(new BasicNameValuePair(str, (String)paramMap.get(str))); 
    return arrayList;
  }
  
  private static void setEntityIfNonEmptyBody(HttpEntityEnclosingRequestBase paramHttpEntityEnclosingRequestBase, Request<?> paramRequest) throws IOException, AuthFailureError {
    Map map;
    if (paramRequest instanceof MultiPartRequest) {
      Response.ProgressListener progressListener;
      if (paramRequest instanceof Response.ProgressListener) {
        progressListener = (Response.ProgressListener)paramRequest;
      } else {
        progressListener = null;
      } 
      MultipartProgressEntity multipartProgressEntity = new MultipartProgressEntity();
      multipartProgressEntity.setListener(progressListener);
      MultiPartRequest multiPartRequest = (MultiPartRequest)paramRequest;
      paramHttpEntityEnclosingRequestBase.addHeader("Content-Type", String.format("multipart/form-data; charset=%s; boundary=%s", new Object[] { multiPartRequest.getProtocolCharset(), multipartProgressEntity.getBoundary() }));
      Map map1 = multiPartRequest.getMultipartParams();
      map = multiPartRequest.getFilesToUpload();
      for (String str : map1.keySet())
        multipartProgressEntity.addPart(new StringPart(str, ((MultiPartRequest.MultiPartParam)map1.get(str)).value)); 
      for (String str : map.keySet()) {
        File file = new File((String)map.get(str));
        if (file.exists()) {
          if (!file.isDirectory()) {
            multipartProgressEntity.addPart(new FilePart(str, file, null, null));
            continue;
          } 
          throw new IOException(String.format("File is a directory: %s", new Object[] { file.getAbsolutePath() }));
        } 
        throw new IOException(String.format("File not found: %s", new Object[] { file.getAbsolutePath() }));
      } 
      paramHttpEntityEnclosingRequestBase.setEntity(multipartProgressEntity);
      return;
    } 
    paramHttpEntityEnclosingRequestBase.addHeader("Content-Type", map.getBodyContentType());
    byte[] arrayOfByte = map.getBody();
    if (arrayOfByte != null)
      paramHttpEntityEnclosingRequestBase.setEntity(new ByteArrayEntity(arrayOfByte)); 
  }
  
  protected void onPrepareRequest(HttpUriRequest paramHttpUriRequest) throws IOException {}
  
  public HttpResponse performRequest(Request<?> paramRequest, Map<String, String> paramMap) throws IOException, AuthFailureError {
    HttpUriRequest httpUriRequest = createHttpRequest(paramRequest, paramMap);
    addHeaders(httpUriRequest, paramMap);
    addHeaders(httpUriRequest, paramRequest.getHeaders());
    onPrepareRequest(httpUriRequest);
    HttpParams httpParams = httpUriRequest.getParams();
    int i = paramRequest.getTimeoutMs();
    HttpConnectionParams.setConnectionTimeout(httpParams, 5000);
    HttpConnectionParams.setSoTimeout(httpParams, i);
    return this.mClient.execute(httpUriRequest);
  }
}
