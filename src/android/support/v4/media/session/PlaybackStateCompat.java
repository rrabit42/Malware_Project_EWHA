package android.support.v4.media.session;

import android.os.Build;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.SystemClock;
import android.support.annotation.Nullable;
import android.support.annotation.RestrictTo;
import android.text.TextUtils;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public final class PlaybackStateCompat implements Parcelable {
  public static final long ACTION_FAST_FORWARD = 64L;
  
  public static final long ACTION_PAUSE = 2L;
  
  public static final long ACTION_PLAY = 4L;
  
  public static final long ACTION_PLAY_FROM_MEDIA_ID = 1024L;
  
  public static final long ACTION_PLAY_FROM_SEARCH = 2048L;
  
  public static final long ACTION_PLAY_FROM_URI = 8192L;
  
  public static final long ACTION_PLAY_PAUSE = 512L;
  
  public static final long ACTION_PREPARE = 16384L;
  
  public static final long ACTION_PREPARE_FROM_MEDIA_ID = 32768L;
  
  public static final long ACTION_PREPARE_FROM_SEARCH = 65536L;
  
  public static final long ACTION_PREPARE_FROM_URI = 131072L;
  
  public static final long ACTION_REWIND = 8L;
  
  public static final long ACTION_SEEK_TO = 256L;
  
  public static final long ACTION_SET_CAPTIONING_ENABLED = 1048576L;
  
  public static final long ACTION_SET_RATING = 128L;
  
  public static final long ACTION_SET_REPEAT_MODE = 262144L;
  
  public static final long ACTION_SET_SHUFFLE_MODE = 2097152L;
  
  @Deprecated
  public static final long ACTION_SET_SHUFFLE_MODE_ENABLED = 524288L;
  
  public static final long ACTION_SKIP_TO_NEXT = 32L;
  
  public static final long ACTION_SKIP_TO_PREVIOUS = 16L;
  
  public static final long ACTION_SKIP_TO_QUEUE_ITEM = 4096L;
  
  public static final long ACTION_STOP = 1L;
  
  public static final Parcelable.Creator<PlaybackStateCompat> CREATOR = new Object();
  
  public static final int ERROR_CODE_ACTION_ABORTED = 10;
  
  public static final int ERROR_CODE_APP_ERROR = 1;
  
  public static final int ERROR_CODE_AUTHENTICATION_EXPIRED = 3;
  
  public static final int ERROR_CODE_CONCURRENT_STREAM_LIMIT = 5;
  
  public static final int ERROR_CODE_CONTENT_ALREADY_PLAYING = 8;
  
  public static final int ERROR_CODE_END_OF_QUEUE = 11;
  
  public static final int ERROR_CODE_NOT_AVAILABLE_IN_REGION = 7;
  
  public static final int ERROR_CODE_NOT_SUPPORTED = 2;
  
  public static final int ERROR_CODE_PARENTAL_CONTROL_RESTRICTED = 6;
  
  public static final int ERROR_CODE_PREMIUM_ACCOUNT_REQUIRED = 4;
  
  public static final int ERROR_CODE_SKIP_LIMIT_REACHED = 9;
  
  public static final int ERROR_CODE_UNKNOWN_ERROR = 0;
  
  private static final int KEYCODE_MEDIA_PAUSE = 127;
  
  private static final int KEYCODE_MEDIA_PLAY = 126;
  
  public static final long PLAYBACK_POSITION_UNKNOWN = -1L;
  
  public static final int REPEAT_MODE_ALL = 2;
  
  public static final int REPEAT_MODE_GROUP = 3;
  
  public static final int REPEAT_MODE_INVALID = -1;
  
  public static final int REPEAT_MODE_NONE = 0;
  
  public static final int REPEAT_MODE_ONE = 1;
  
  public static final int SHUFFLE_MODE_ALL = 1;
  
  public static final int SHUFFLE_MODE_GROUP = 2;
  
  public static final int SHUFFLE_MODE_INVALID = -1;
  
  public static final int SHUFFLE_MODE_NONE = 0;
  
  public static final int STATE_BUFFERING = 6;
  
  public static final int STATE_CONNECTING = 8;
  
  public static final int STATE_ERROR = 7;
  
  public static final int STATE_FAST_FORWARDING = 4;
  
  public static final int STATE_NONE = 0;
  
  public static final int STATE_PAUSED = 2;
  
  public static final int STATE_PLAYING = 3;
  
  public static final int STATE_REWINDING = 5;
  
  public static final int STATE_SKIPPING_TO_NEXT = 10;
  
  public static final int STATE_SKIPPING_TO_PREVIOUS = 9;
  
  public static final int STATE_SKIPPING_TO_QUEUE_ITEM = 11;
  
  public static final int STATE_STOPPED = 1;
  
  final long mActions;
  
  final long mActiveItemId;
  
  final long mBufferedPosition;
  
  List<CustomAction> mCustomActions;
  
  final int mErrorCode;
  
  final CharSequence mErrorMessage;
  
  final Bundle mExtras;
  
  final long mPosition;
  
  final float mSpeed;
  
  final int mState;
  
  private Object mStateObj;
  
  final long mUpdateTime;
  
  PlaybackStateCompat(int paramInt1, long paramLong1, long paramLong2, float paramFloat, long paramLong3, int paramInt2, CharSequence paramCharSequence, long paramLong4, List<CustomAction> paramList, long paramLong5, Bundle paramBundle) {
    this.mState = paramInt1;
    this.mPosition = paramLong1;
    this.mBufferedPosition = paramLong2;
    this.mSpeed = paramFloat;
    this.mActions = paramLong3;
    this.mErrorCode = paramInt2;
    this.mErrorMessage = paramCharSequence;
    this.mUpdateTime = paramLong4;
    this.mCustomActions = new ArrayList(paramList);
    this.mActiveItemId = paramLong5;
    this.mExtras = paramBundle;
  }
  
  PlaybackStateCompat(Parcel paramParcel) {
    this.mState = paramParcel.readInt();
    this.mPosition = paramParcel.readLong();
    this.mSpeed = paramParcel.readFloat();
    this.mUpdateTime = paramParcel.readLong();
    this.mBufferedPosition = paramParcel.readLong();
    this.mActions = paramParcel.readLong();
    this.mErrorMessage = (CharSequence)TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(paramParcel);
    this.mCustomActions = paramParcel.createTypedArrayList(CustomAction.CREATOR);
    this.mActiveItemId = paramParcel.readLong();
    this.mExtras = paramParcel.readBundle(MediaSessionCompat.class.getClassLoader());
    this.mErrorCode = paramParcel.readInt();
  }
  
  public static PlaybackStateCompat fromPlaybackState(Object paramObject) {
    List list = null;
    Bundle bundle = null;
    PlaybackStateCompat playbackStateCompat = list;
    if (paramObject != null) {
      playbackStateCompat = list;
      if (Build.VERSION.SDK_INT >= 21) {
        list = PlaybackStateCompatApi21.getCustomActions(paramObject);
        if (list != null) {
          playbackStateCompat = new ArrayList(list.size());
          Iterator iterator = list.iterator();
          while (iterator.hasNext())
            playbackStateCompat.add(CustomAction.fromCustomAction(iterator.next())); 
        } else {
          playbackStateCompat = null;
        } 
        if (Build.VERSION.SDK_INT >= 22)
          bundle = PlaybackStateCompatApi22.getExtras(paramObject); 
        playbackStateCompat = new PlaybackStateCompat(PlaybackStateCompatApi21.getState(paramObject), PlaybackStateCompatApi21.getPosition(paramObject), PlaybackStateCompatApi21.getBufferedPosition(paramObject), PlaybackStateCompatApi21.getPlaybackSpeed(paramObject), PlaybackStateCompatApi21.getActions(paramObject), 0, PlaybackStateCompatApi21.getErrorMessage(paramObject), PlaybackStateCompatApi21.getLastPositionUpdateTime(paramObject), playbackStateCompat, PlaybackStateCompatApi21.getActiveQueueItemId(paramObject), bundle);
        playbackStateCompat.mStateObj = paramObject;
      } 
    } 
    return playbackStateCompat;
  }
  
  public static int toKeyCode(long paramLong) { return (paramLong == 4L) ? 126 : ((paramLong == 2L) ? 127 : ((paramLong == 32L) ? 87 : ((paramLong == 16L) ? 88 : ((paramLong == 1L) ? 86 : ((paramLong == 64L) ? 90 : ((paramLong == 8L) ? 89 : ((paramLong == 512L) ? 85 : 0))))))); }
  
  public int describeContents() { return 0; }
  
  public long getActions() { return this.mActions; }
  
  public long getActiveQueueItemId() { return this.mActiveItemId; }
  
  public long getBufferedPosition() { return this.mBufferedPosition; }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public long getCurrentPosition(Long paramLong) {
    long l1;
    long l2 = this.mPosition;
    float f = this.mSpeed;
    if (paramLong != null) {
      l1 = paramLong.longValue();
    } else {
      l1 = SystemClock.elapsedRealtime() - this.mUpdateTime;
    } 
    return Math.max(0L, l2 + (long)(f * (float)l1));
  }
  
  public List<CustomAction> getCustomActions() { return this.mCustomActions; }
  
  public int getErrorCode() { return this.mErrorCode; }
  
  public CharSequence getErrorMessage() { return this.mErrorMessage; }
  
  @Nullable
  public Bundle getExtras() { return this.mExtras; }
  
  public long getLastPositionUpdateTime() { return this.mUpdateTime; }
  
  public float getPlaybackSpeed() { return this.mSpeed; }
  
  public Object getPlaybackState() {
    if (this.mStateObj == null && Build.VERSION.SDK_INT >= 21) {
      List list1 = null;
      List list2 = this.mCustomActions;
      if (list2 != null) {
        list2 = new ArrayList(list2.size());
        Iterator iterator = this.mCustomActions.iterator();
        while (true) {
          list1 = list2;
          if (iterator.hasNext()) {
            list2.add(((CustomAction)iterator.next()).getCustomAction());
            continue;
          } 
          break;
        } 
      } 
      if (Build.VERSION.SDK_INT >= 22) {
        this.mStateObj = PlaybackStateCompatApi22.newInstance(this.mState, this.mPosition, this.mBufferedPosition, this.mSpeed, this.mActions, this.mErrorMessage, this.mUpdateTime, list1, this.mActiveItemId, this.mExtras);
      } else {
        this.mStateObj = PlaybackStateCompatApi21.newInstance(this.mState, this.mPosition, this.mBufferedPosition, this.mSpeed, this.mActions, this.mErrorMessage, this.mUpdateTime, list1, this.mActiveItemId);
      } 
    } 
    return this.mStateObj;
  }
  
  public long getPosition() { return this.mPosition; }
  
  public int getState() { return this.mState; }
  
  public String toString() {
    StringBuilder stringBuilder = new StringBuilder("PlaybackState {");
    stringBuilder.append("state=");
    stringBuilder.append(this.mState);
    stringBuilder.append(", position=");
    stringBuilder.append(this.mPosition);
    stringBuilder.append(", buffered position=");
    stringBuilder.append(this.mBufferedPosition);
    stringBuilder.append(", speed=");
    stringBuilder.append(this.mSpeed);
    stringBuilder.append(", updated=");
    stringBuilder.append(this.mUpdateTime);
    stringBuilder.append(", actions=");
    stringBuilder.append(this.mActions);
    stringBuilder.append(", error code=");
    stringBuilder.append(this.mErrorCode);
    stringBuilder.append(", error message=");
    stringBuilder.append(this.mErrorMessage);
    stringBuilder.append(", custom actions=");
    stringBuilder.append(this.mCustomActions);
    stringBuilder.append(", active item id=");
    stringBuilder.append(this.mActiveItemId);
    stringBuilder.append("}");
    return stringBuilder.toString();
  }
  
  public void writeToParcel(Parcel paramParcel, int paramInt) {
    paramParcel.writeInt(this.mState);
    paramParcel.writeLong(this.mPosition);
    paramParcel.writeFloat(this.mSpeed);
    paramParcel.writeLong(this.mUpdateTime);
    paramParcel.writeLong(this.mBufferedPosition);
    paramParcel.writeLong(this.mActions);
    TextUtils.writeToParcel(this.mErrorMessage, paramParcel, paramInt);
    paramParcel.writeTypedList(this.mCustomActions);
    paramParcel.writeLong(this.mActiveItemId);
    paramParcel.writeBundle(this.mExtras);
    paramParcel.writeInt(this.mErrorCode);
  }
}
