package com.google.android.gms.auth.api.signin;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.text.TextUtils;
import com.google.android.gms.auth.api.signin.internal.zzh;
import com.google.android.gms.auth.api.signin.internal.zzp;
import com.google.android.gms.common.api.Scope;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.internal.ApiExceptionUtil;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.Tasks;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;

public final class GoogleSignIn {
  @NonNull
  public static GoogleSignInAccount getAccountForExtension(@NonNull Context paramContext, @NonNull GoogleSignInOptionsExtension paramGoogleSignInOptionsExtension) {
    Preconditions.checkNotNull(paramContext, "please provide a valid Context object");
    Preconditions.checkNotNull(paramGoogleSignInOptionsExtension, "please provide valid GoogleSignInOptionsExtension");
    GoogleSignInAccount googleSignInAccount2 = getLastSignedInAccount(paramContext);
    GoogleSignInAccount googleSignInAccount1 = googleSignInAccount2;
    if (googleSignInAccount2 == null)
      googleSignInAccount1 = GoogleSignInAccount.createDefault(); 
    return googleSignInAccount1.requestExtraScopes(zzc(paramGoogleSignInOptionsExtension.getImpliedScopes()));
  }
  
  @NonNull
  public static GoogleSignInAccount getAccountForScopes(@NonNull Context paramContext, @NonNull Scope paramScope, Scope... paramVarArgs) {
    Preconditions.checkNotNull(paramContext, "please provide a valid Context object");
    Preconditions.checkNotNull(paramScope, "please provide at least one valid scope");
    GoogleSignInAccount googleSignInAccount2 = getLastSignedInAccount(paramContext);
    GoogleSignInAccount googleSignInAccount1 = googleSignInAccount2;
    if (googleSignInAccount2 == null)
      googleSignInAccount1 = GoogleSignInAccount.createDefault(); 
    googleSignInAccount1.requestExtraScopes(new Scope[] { paramScope });
    googleSignInAccount1.requestExtraScopes(paramVarArgs);
    return googleSignInAccount1;
  }
  
  public static GoogleSignInClient getClient(@NonNull Activity paramActivity, @NonNull GoogleSignInOptions paramGoogleSignInOptions) { return new GoogleSignInClient(paramActivity, (GoogleSignInOptions)Preconditions.checkNotNull(paramGoogleSignInOptions)); }
  
  public static GoogleSignInClient getClient(@NonNull Context paramContext, @NonNull GoogleSignInOptions paramGoogleSignInOptions) { return new GoogleSignInClient(paramContext, (GoogleSignInOptions)Preconditions.checkNotNull(paramGoogleSignInOptions)); }
  
  @Nullable
  public static GoogleSignInAccount getLastSignedInAccount(Context paramContext) { return zzp.zzd(paramContext).zzh(); }
  
  public static Task<GoogleSignInAccount> getSignedInAccountFromIntent(@Nullable Intent paramIntent) {
    GoogleSignInResult googleSignInResult = zzh.getSignInResultFromIntent(paramIntent);
    return (googleSignInResult == null) ? Tasks.forException(ApiExceptionUtil.fromStatus(Status.RESULT_INTERNAL_ERROR)) : ((!googleSignInResult.getStatus().isSuccess() || googleSignInResult.getSignInAccount() == null) ? Tasks.forException(ApiExceptionUtil.fromStatus(googleSignInResult.getStatus())) : Tasks.forResult(googleSignInResult.getSignInAccount()));
  }
  
  public static boolean hasPermissions(@Nullable GoogleSignInAccount paramGoogleSignInAccount, @NonNull GoogleSignInOptionsExtension paramGoogleSignInOptionsExtension) {
    Preconditions.checkNotNull(paramGoogleSignInOptionsExtension, "Please provide a non-null GoogleSignInOptionsExtension");
    return hasPermissions(paramGoogleSignInAccount, zzc(paramGoogleSignInOptionsExtension.getImpliedScopes()));
  }
  
  public static boolean hasPermissions(@Nullable GoogleSignInAccount paramGoogleSignInAccount, @NonNull Scope... paramVarArgs) {
    if (paramGoogleSignInAccount == null)
      return false; 
    HashSet hashSet = new HashSet();
    Collections.addAll(hashSet, paramVarArgs);
    return paramGoogleSignInAccount.getGrantedScopes().containsAll(hashSet);
  }
  
  public static void requestPermissions(@NonNull Activity paramActivity, int paramInt, @Nullable GoogleSignInAccount paramGoogleSignInAccount, @NonNull GoogleSignInOptionsExtension paramGoogleSignInOptionsExtension) {
    Preconditions.checkNotNull(paramActivity, "Please provide a non-null Activity");
    Preconditions.checkNotNull(paramGoogleSignInOptionsExtension, "Please provide a non-null GoogleSignInOptionsExtension");
    requestPermissions(paramActivity, paramInt, paramGoogleSignInAccount, zzc(paramGoogleSignInOptionsExtension.getImpliedScopes()));
  }
  
  public static void requestPermissions(@NonNull Activity paramActivity, int paramInt, @Nullable GoogleSignInAccount paramGoogleSignInAccount, @NonNull Scope... paramVarArgs) {
    Preconditions.checkNotNull(paramActivity, "Please provide a non-null Activity");
    Preconditions.checkNotNull(paramVarArgs, "Please provide at least one scope");
    paramActivity.startActivityForResult(zzc(paramActivity, paramGoogleSignInAccount, paramVarArgs), paramInt);
  }
  
  public static void requestPermissions(@NonNull Fragment paramFragment, int paramInt, @Nullable GoogleSignInAccount paramGoogleSignInAccount, @NonNull GoogleSignInOptionsExtension paramGoogleSignInOptionsExtension) {
    Preconditions.checkNotNull(paramFragment, "Please provide a non-null Fragment");
    Preconditions.checkNotNull(paramGoogleSignInOptionsExtension, "Please provide a non-null GoogleSignInOptionsExtension");
    requestPermissions(paramFragment, paramInt, paramGoogleSignInAccount, zzc(paramGoogleSignInOptionsExtension.getImpliedScopes()));
  }
  
  public static void requestPermissions(@NonNull Fragment paramFragment, int paramInt, @Nullable GoogleSignInAccount paramGoogleSignInAccount, @NonNull Scope... paramVarArgs) {
    Preconditions.checkNotNull(paramFragment, "Please provide a non-null Fragment");
    Preconditions.checkNotNull(paramVarArgs, "Please provide at least one scope");
    paramFragment.startActivityForResult(zzc(paramFragment.getActivity(), paramGoogleSignInAccount, paramVarArgs), paramInt);
  }
  
  @NonNull
  private static Intent zzc(@NonNull Activity paramActivity, @Nullable GoogleSignInAccount paramGoogleSignInAccount, @NonNull Scope... paramVarArgs) {
    GoogleSignInOptions.Builder builder = new GoogleSignInOptions.Builder();
    if (paramVarArgs.length > 0)
      builder.requestScopes(paramVarArgs[0], paramVarArgs); 
    if (paramGoogleSignInAccount != null && !TextUtils.isEmpty(paramGoogleSignInAccount.getEmail()))
      builder.setAccountName(paramGoogleSignInAccount.getEmail()); 
    return (new GoogleSignInClient(paramActivity, builder.build())).getSignInIntent();
  }
  
  @NonNull
  private static Scope[] zzc(@Nullable List<Scope> paramList) { return (paramList == null) ? new Scope[0] : (Scope[])paramList.toArray(new Scope[paramList.size()]); }
}
