package com.bumptech.glide.load.resource.gif;

import android.graphics.Bitmap;
import android.util.Log;
import com.bumptech.glide.gifdecoder.GifDecoder;
import com.bumptech.glide.gifdecoder.GifHeader;
import com.bumptech.glide.gifdecoder.GifHeaderParser;
import com.bumptech.glide.gifencoder.AnimatedGifEncoder;
import com.bumptech.glide.load.ResourceEncoder;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.util.LogTime;
import java.io.IOException;
import java.io.OutputStream;

public class GifResourceEncoder extends Object implements ResourceEncoder<GifDrawable> {
  private static final Factory FACTORY = new Factory();
  
  private static final String TAG = "GifEncoder";
  
  private final BitmapPool bitmapPool;
  
  private final Factory factory;
  
  private final GifDecoder.BitmapProvider provider;
  
  public GifResourceEncoder(BitmapPool paramBitmapPool) { this(paramBitmapPool, FACTORY); }
  
  GifResourceEncoder(BitmapPool paramBitmapPool, Factory paramFactory) {
    this.bitmapPool = paramBitmapPool;
    this.provider = new GifBitmapProvider(paramBitmapPool);
    this.factory = paramFactory;
  }
  
  private GifDecoder decodeHeaders(byte[] paramArrayOfByte) {
    GifHeaderParser gifHeaderParser = this.factory.buildParser();
    gifHeaderParser.setData(paramArrayOfByte);
    GifHeader gifHeader = gifHeaderParser.parseHeader();
    GifDecoder gifDecoder = this.factory.buildDecoder(this.provider);
    gifDecoder.setData(gifHeader, paramArrayOfByte);
    gifDecoder.advance();
    return gifDecoder;
  }
  
  private Resource<Bitmap> getTransformedFrame(Bitmap paramBitmap, Transformation<Bitmap> paramTransformation, GifDrawable paramGifDrawable) {
    Resource resource1 = this.factory.buildFrameResource(paramBitmap, this.bitmapPool);
    Resource resource2 = paramTransformation.transform(resource1, paramGifDrawable.getIntrinsicWidth(), paramGifDrawable.getIntrinsicHeight());
    if (!resource1.equals(resource2))
      resource1.recycle(); 
    return resource2;
  }
  
  private boolean writeDataDirect(byte[] paramArrayOfByte, OutputStream paramOutputStream) {
    try {
      paramOutputStream.write(paramArrayOfByte);
      return true;
    } catch (IOException paramArrayOfByte) {
      if (Log.isLoggable("GifEncoder", 3))
        Log.d("GifEncoder", "Failed to write data to output stream in GifResourceEncoder", paramArrayOfByte); 
      return false;
    } 
  }
  
  public boolean encode(Resource<GifDrawable> paramResource, OutputStream paramOutputStream) {
    long l = LogTime.getLogTime();
    GifDrawable gifDrawable = (GifDrawable)paramResource.get();
    Transformation transformation = gifDrawable.getFrameTransformation();
    if (transformation instanceof com.bumptech.glide.load.resource.UnitTransformation)
      return writeDataDirect(gifDrawable.getData(), paramOutputStream); 
    GifDecoder gifDecoder = decodeHeaders(gifDrawable.getData());
    AnimatedGifEncoder animatedGifEncoder = this.factory.buildEncoder();
    if (!animatedGifEncoder.start(paramOutputStream))
      return false; 
    b = 0;
    while (b < gifDecoder.getFrameCount()) {
      resource = getTransformedFrame(gifDecoder.getNextFrame(), transformation, gifDrawable);
      try {
        boolean bool1 = animatedGifEncoder.addFrame((Bitmap)resource.get());
        if (!bool1)
          return false; 
        animatedGifEncoder.setDelay(gifDecoder.getDelay(gifDecoder.getCurrentFrameIndex()));
        gifDecoder.advance();
        resource.recycle();
      } finally {
        resource.recycle();
      } 
    } 
    boolean bool = animatedGifEncoder.finish();
    if (Log.isLoggable("GifEncoder", 2)) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Encoded gif with ");
      stringBuilder.append(gifDecoder.getFrameCount());
      stringBuilder.append(" frames and ");
      stringBuilder.append(gifDrawable.getData().length);
      stringBuilder.append(" bytes in ");
      stringBuilder.append(LogTime.getElapsedMillis(l));
      stringBuilder.append(" ms");
      Log.v("GifEncoder", stringBuilder.toString());
    } 
    return bool;
  }
  
  public String getId() { return ""; }
}
