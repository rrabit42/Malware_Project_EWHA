package com.google.android.gms.common.api;

import android.os.Looper;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.api.internal.OptionalPendingResultImpl;
import com.google.android.gms.common.api.internal.StatusPendingResult;
import com.google.android.gms.common.internal.Preconditions;

@KeepForSdk
public final class PendingResults {
  public static PendingResult<Status> canceledPendingResult() {
    StatusPendingResult statusPendingResult = new StatusPendingResult(Looper.getMainLooper());
    statusPendingResult.cancel();
    return statusPendingResult;
  }
  
  public static <R extends Result> PendingResult<R> canceledPendingResult(R paramR) { // Byte code:
    //   0: aload_0
    //   1: ldc 'Result must not be null'
    //   3: invokestatic checkNotNull : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   6: pop
    //   7: aload_0
    //   8: invokeinterface getStatus : ()Lcom/google/android/gms/common/api/Status;
    //   13: invokevirtual getStatusCode : ()I
    //   16: bipush #16
    //   18: if_icmpne -> 26
    //   21: iconst_1
    //   22: istore_1
    //   23: goto -> 28
    //   26: iconst_0
    //   27: istore_1
    //   28: iload_1
    //   29: ldc 'Status code must be CommonStatusCodes.CANCELED'
    //   31: invokestatic checkArgument : (ZLjava/lang/Object;)V
    //   34: new com/google/android/gms/common/api/PendingResults$zaa
    //   37: dup
    //   38: aload_0
    //   39: invokespecial <init> : (Lcom/google/android/gms/common/api/Result;)V
    //   42: astore_0
    //   43: aload_0
    //   44: invokevirtual cancel : ()V
    //   47: aload_0
    //   48: areturn }
  
  @KeepForSdk
  public static <R extends Result> PendingResult<R> immediateFailedResult(R paramR, GoogleApiClient paramGoogleApiClient) {
    Preconditions.checkNotNull(paramR, "Result must not be null");
    Preconditions.checkArgument(paramR.getStatus().isSuccess() ^ true, "Status code must not be SUCCESS");
    zab zab = new zab(paramGoogleApiClient, paramR);
    zab.setResult(paramR);
    return zab;
  }
  
  @KeepForSdk
  public static <R extends Result> OptionalPendingResult<R> immediatePendingResult(R paramR) {
    Preconditions.checkNotNull(paramR, "Result must not be null");
    zac zac = new zac(null);
    zac.setResult(paramR);
    return new OptionalPendingResultImpl(zac);
  }
  
  @KeepForSdk
  public static <R extends Result> OptionalPendingResult<R> immediatePendingResult(R paramR, GoogleApiClient paramGoogleApiClient) {
    Preconditions.checkNotNull(paramR, "Result must not be null");
    zac zac = new zac(paramGoogleApiClient);
    zac.setResult(paramR);
    return new OptionalPendingResultImpl(zac);
  }
  
  @KeepForSdk
  public static PendingResult<Status> immediatePendingResult(Status paramStatus) {
    Preconditions.checkNotNull(paramStatus, "Result must not be null");
    StatusPendingResult statusPendingResult = new StatusPendingResult(Looper.getMainLooper());
    statusPendingResult.setResult(paramStatus);
    return statusPendingResult;
  }
  
  @KeepForSdk
  public static PendingResult<Status> immediatePendingResult(Status paramStatus, GoogleApiClient paramGoogleApiClient) {
    Preconditions.checkNotNull(paramStatus, "Result must not be null");
    StatusPendingResult statusPendingResult = new StatusPendingResult(paramGoogleApiClient);
    statusPendingResult.setResult(paramStatus);
    return statusPendingResult;
  }
}
