package com.google.android.gms.internal.ads;

import com.google.android.gms.ads.internal.zzbv;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

@zzadh
public final class zzano {
  public static <V> zzanz<V> zza(zzanz<V> paramzzanz, long paramLong, TimeUnit paramTimeUnit, ScheduledExecutorService paramScheduledExecutorService) {
    zzaoj zzaoj = new zzaoj();
    zza(zzaoj, paramzzanz);
    ScheduledFuture scheduledFuture = paramScheduledExecutorService.schedule(new zzans(zzaoj), paramLong, paramTimeUnit);
    zza(paramzzanz, zzaoj);
    zzaoj.zza(new zzant(scheduledFuture), zzaoe.zzcvz);
    return zzaoj;
  }
  
  public static <A, B> zzanz<B> zza(zzanz<A> paramzzanz, zzanj<? super A, ? extends B> paramzzanj, Executor paramExecutor) {
    zzaoj zzaoj = new zzaoj();
    paramzzanz.zza(new zzanr(zzaoj, paramzzanj, paramzzanz), paramExecutor);
    zza(zzaoj, paramzzanz);
    return zzaoj;
  }
  
  public static <A, B> zzanz<B> zza(zzanz<A> paramzzanz, zzank<A, B> paramzzank, Executor paramExecutor) {
    zzaoj zzaoj = new zzaoj();
    paramzzanz.zza(new zzanq(zzaoj, paramzzank, paramzzanz), paramExecutor);
    zza(zzaoj, paramzzanz);
    return zzaoj;
  }
  
  public static <V, X extends Throwable> zzanz<V> zza(zzanz<? extends V> paramzzanz, Class<X> paramClass, zzanj<? super X, ? extends V> paramzzanj, Executor paramExecutor) {
    zzaoj zzaoj = new zzaoj();
    zza(zzaoj, paramzzanz);
    paramzzanz.zza(new zzanu(zzaoj, paramzzanz, paramClass, paramzzanj, paramExecutor), zzaoe.zzcvz);
    return zzaoj;
  }
  
  public static <T> T zza(Future<T> paramFuture, T paramT) {
    Exception exception;
    try {
      zzna zzna = zznk.zzbam;
      return (T)paramFuture.get(((Long)zzkb.zzik().zzd(zzna)).longValue(), TimeUnit.MILLISECONDS);
    } catch (InterruptedException interruptedException) {
      paramFuture.cancel(true);
      zzakb.zzc("InterruptedException caught while resolving future.", interruptedException);
      Thread.currentThread().interrupt();
      exception = interruptedException;
    } catch (Exception exception1) {
      exception.cancel(true);
      zzakb.zzb("Error waiting for future.", exception1);
      exception = exception1;
    } 
    zzbv.zzeo().zzb(exception, "Futures.resolveFuture");
    return paramT;
  }
  
  public static <T> T zza(Future<T> paramFuture, T paramT, long paramLong, TimeUnit paramTimeUnit) {
    TimeUnit timeUnit;
    try {
      return (T)paramFuture.get(paramLong, paramTimeUnit);
    } catch (InterruptedException paramTimeUnit) {
      paramFuture.cancel(true);
      zzakb.zzc("InterruptedException caught while resolving future.", paramTimeUnit);
      Thread.currentThread().interrupt();
      timeUnit = paramTimeUnit;
    } catch (Exception paramTimeUnit) {
      timeUnit.cancel(true);
      zzakb.zzb("Error waiting for future.", paramTimeUnit);
      timeUnit = paramTimeUnit;
    } 
    zzbv.zzeo().zza(timeUnit, "Futures.resolveFuture");
    return paramT;
  }
  
  public static <V> void zza(zzanz<V> paramzzanz, zzanl<V> paramzzanl, Executor paramExecutor) { paramzzanz.zza(new zzanp(paramzzanl, paramzzanz), paramExecutor); }
  
  private static <V> void zza(zzanz<? extends V> paramzzanz, zzaoj<V> paramzzaoj) {
    zza(paramzzaoj, paramzzanz);
    paramzzanz.zza(new zzanv(paramzzaoj, paramzzanz), zzaoe.zzcvz);
  }
  
  private static <A, B> void zza(zzanz<A> paramzzanz, Future<B> paramFuture) { paramzzanz.zza(new zzanw(paramzzanz, paramFuture), zzaoe.zzcvz); }
  
  public static <T> zzanx<T> zzd(Throwable paramThrowable) { return new zzanx(paramThrowable); }
  
  public static <T> zzany<T> zzi(T paramT) { return new zzany(paramT); }
}
