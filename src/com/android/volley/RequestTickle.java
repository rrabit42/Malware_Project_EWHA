package com.android.volley;

import android.annotation.TargetApi;
import android.net.TrafficStats;
import android.os.Build;
import android.os.Handler;
import android.os.Looper;
import android.os.SystemClock;
import com.android.volley.error.VolleyError;

public class RequestTickle {
  private VolleyError error;
  
  private final Cache mCache;
  
  private final ResponseDelivery mDelivery;
  
  private final Network mNetwork;
  
  private Request<?> mRequest;
  
  private Response<?> response;
  
  public RequestTickle(Cache paramCache, Network paramNetwork) { this(paramCache, paramNetwork, new ExecutorDelivery(new Handler(Looper.getMainLooper()))); }
  
  public RequestTickle(Cache paramCache, Network paramNetwork, ResponseDelivery paramResponseDelivery) {
    this.mCache = paramCache;
    this.mNetwork = paramNetwork;
    this.mDelivery = paramResponseDelivery;
  }
  
  private void parseAndDeliverNetworkError(Request<?> paramRequest, VolleyError paramVolleyError) {
    this.error = paramRequest.parseNetworkError(paramVolleyError);
    this.mDelivery.postError(paramRequest, this.error);
  }
  
  public <T> Request<T> add(Request<T> paramRequest) {
    this.mRequest = paramRequest;
    return paramRequest;
  }
  
  public void cancel() {
    Request request = this.mRequest;
    if (request == null)
      return; 
    request.cancel();
  }
  
  public Cache getCache() { return this.mCache; }
  
  public VolleyError getError() { return this.error; }
  
  public Response<?> getResponse() { return this.response; }
  
  @TargetApi(14)
  public NetworkResponse start() {
    Object object;
    if (this.mRequest == null)
      return null; 
    long l = SystemClock.elapsedRealtime();
    try {
      this.mRequest.addMarker("network-queue-take");
      if (this.mRequest.isCanceled()) {
        this.mRequest.finish("network-discard-cancelled");
        return null;
      } 
      if (Build.VERSION.SDK_INT >= 14)
        TrafficStats.setThreadStatsTag(this.mRequest.getTrafficStatsTag()); 
      object = this.mNetwork.performRequest(this.mRequest);
      try {
        if (object.notModified && this.mRequest.hasHadResponseDelivered()) {
          this.mRequest.finish("not-modified");
          return object;
        } 
        this.response = this.mRequest.parseNetworkResponse(object);
        this.mRequest.addMarker("network-parse-complete");
        if (this.mCache != null && this.mRequest.shouldCache() && this.response.cacheEntry != null) {
          this.mCache.put(this.mRequest.getCacheKey(), this.response.cacheEntry);
          this.mRequest.addMarker("network-cache-written");
        } 
        this.mRequest.markDelivered();
        this.mDelivery.postResponse(this.mRequest, this.response);
      } catch (Exception exception) {
        VolleyLog.e(exception, "Unhandled exception %s", new Object[] { exception.toString() });
        VolleyError volleyError = new VolleyError(exception);
        volleyError.setNetworkTimeMs(SystemClock.elapsedRealtime() - l);
        this.mDelivery.postError(this.mRequest, volleyError);
      } 
    } catch (VolleyError volleyError) {
      object = volleyError.networkResponse;
      volleyError.setNetworkTimeMs(SystemClock.elapsedRealtime() - l);
      parseAndDeliverNetworkError(this.mRequest, volleyError);
    } catch (Exception exception) {
      object = null;
      VolleyLog.e(exception, "Unhandled exception %s", new Object[] { exception.toString() });
      VolleyError volleyError = new VolleyError(exception);
      volleyError.setNetworkTimeMs(SystemClock.elapsedRealtime() - l);
      this.mDelivery.postError(this.mRequest, volleyError);
    } 
    NetworkResponse networkResponse = object;
    if (object == null)
      networkResponse = new NetworkResponse(0, null, null, false); 
    return networkResponse;
  }
}
