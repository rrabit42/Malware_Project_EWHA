package com.google.android.gms.common.internal;

import android.accounts.Account;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.DeadObjectException;
import android.os.Handler;
import android.os.IBinder;
import android.os.IInterface;
import android.os.Looper;
import android.os.RemoteException;
import android.support.annotation.CallSuper;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.WorkerThread;
import android.text.TextUtils;
import android.util.Log;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.Feature;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.api.CommonStatusCodes;
import com.google.android.gms.common.api.Scope;
import com.google.android.gms.common.util.VisibleForTesting;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import javax.annotation.concurrent.GuardedBy;

@KeepForSdk
public abstract class BaseGmsClient<T extends IInterface> extends Object {
  @KeepForSdk
  public static final int CONNECT_STATE_CONNECTED = 4;
  
  @KeepForSdk
  public static final int CONNECT_STATE_DISCONNECTED = 1;
  
  @KeepForSdk
  public static final int CONNECT_STATE_DISCONNECTING = 5;
  
  @KeepForSdk
  public static final String DEFAULT_ACCOUNT = "<<default account>>";
  
  @KeepForSdk
  public static final String[] GOOGLE_PLUS_REQUIRED_FEATURES;
  
  @KeepForSdk
  public static final String KEY_PENDING_INTENT = "pendingIntent";
  
  private static final Feature[] zzbt = new Feature[0];
  
  private final Context mContext;
  
  final Handler mHandler;
  
  private final Object mLock = new Object();
  
  private int zzbu;
  
  private long zzbv;
  
  private long zzbw;
  
  private int zzbx;
  
  private long zzby;
  
  @VisibleForTesting
  private zzh zzbz;
  
  private final Looper zzca;
  
  private final GmsClientSupervisor zzcb;
  
  private final GoogleApiAvailabilityLight zzcc;
  
  private final Object zzcd = new Object();
  
  @GuardedBy("mServiceBrokerLock")
  private IGmsServiceBroker zzce;
  
  @VisibleForTesting
  protected ConnectionProgressReportCallbacks zzcf;
  
  @GuardedBy("mLock")
  private T zzcg;
  
  private final ArrayList<zzc<?>> zzch = new ArrayList();
  
  @GuardedBy("mLock")
  private zze zzci;
  
  @GuardedBy("mLock")
  private int zzcj = 1;
  
  private final BaseConnectionCallbacks zzck;
  
  private final BaseOnConnectionFailedListener zzcl;
  
  private final int zzcm;
  
  private final String zzcn;
  
  private ConnectionResult zzco = null;
  
  private boolean zzcp = false;
  
  @VisibleForTesting
  protected AtomicInteger zzcr = new AtomicInteger(0);
  
  static  {
    GOOGLE_PLUS_REQUIRED_FEATURES = new String[] { "service_esmobile", "service_googleme" };
  }
  
  @KeepForSdk
  @VisibleForTesting
  protected BaseGmsClient(Context paramContext, Handler paramHandler, GmsClientSupervisor paramGmsClientSupervisor, GoogleApiAvailabilityLight paramGoogleApiAvailabilityLight, int paramInt, BaseConnectionCallbacks paramBaseConnectionCallbacks, BaseOnConnectionFailedListener paramBaseOnConnectionFailedListener) {
    this.mContext = (Context)Preconditions.checkNotNull(paramContext, "Context must not be null");
    this.mHandler = (Handler)Preconditions.checkNotNull(paramHandler, "Handler must not be null");
    this.zzca = paramHandler.getLooper();
    this.zzcb = (GmsClientSupervisor)Preconditions.checkNotNull(paramGmsClientSupervisor, "Supervisor must not be null");
    this.zzcc = (GoogleApiAvailabilityLight)Preconditions.checkNotNull(paramGoogleApiAvailabilityLight, "API availability must not be null");
    this.zzcm = paramInt;
    this.zzck = paramBaseConnectionCallbacks;
    this.zzcl = paramBaseOnConnectionFailedListener;
    this.zzcn = null;
  }
  
  @KeepForSdk
  protected BaseGmsClient(Context paramContext, Looper paramLooper, int paramInt, BaseConnectionCallbacks paramBaseConnectionCallbacks, BaseOnConnectionFailedListener paramBaseOnConnectionFailedListener, String paramString) { this(paramContext, paramLooper, GmsClientSupervisor.getInstance(paramContext), GoogleApiAvailabilityLight.getInstance(), paramInt, (BaseConnectionCallbacks)Preconditions.checkNotNull(paramBaseConnectionCallbacks), (BaseOnConnectionFailedListener)Preconditions.checkNotNull(paramBaseOnConnectionFailedListener), paramString); }
  
  @KeepForSdk
  @VisibleForTesting
  protected BaseGmsClient(Context paramContext, Looper paramLooper, GmsClientSupervisor paramGmsClientSupervisor, GoogleApiAvailabilityLight paramGoogleApiAvailabilityLight, int paramInt, BaseConnectionCallbacks paramBaseConnectionCallbacks, BaseOnConnectionFailedListener paramBaseOnConnectionFailedListener, String paramString) {
    this.mContext = (Context)Preconditions.checkNotNull(paramContext, "Context must not be null");
    this.zzca = (Looper)Preconditions.checkNotNull(paramLooper, "Looper must not be null");
    this.zzcb = (GmsClientSupervisor)Preconditions.checkNotNull(paramGmsClientSupervisor, "Supervisor must not be null");
    this.zzcc = (GoogleApiAvailabilityLight)Preconditions.checkNotNull(paramGoogleApiAvailabilityLight, "API availability must not be null");
    this.mHandler = new zzb(this, paramLooper);
    this.zzcm = paramInt;
    this.zzck = paramBaseConnectionCallbacks;
    this.zzcl = paramBaseOnConnectionFailedListener;
    this.zzcn = paramString;
  }
  
  private final void zza(int paramInt, T paramT) { // Byte code:
    //   0: iload_1
    //   1: iconst_4
    //   2: if_icmpne -> 10
    //   5: iconst_1
    //   6: istore_3
    //   7: goto -> 12
    //   10: iconst_0
    //   11: istore_3
    //   12: aload_2
    //   13: ifnull -> 22
    //   16: iconst_1
    //   17: istore #4
    //   19: goto -> 25
    //   22: iconst_0
    //   23: istore #4
    //   25: iload_3
    //   26: iload #4
    //   28: if_icmpne -> 37
    //   31: iconst_1
    //   32: istore #5
    //   34: goto -> 40
    //   37: iconst_0
    //   38: istore #5
    //   40: iload #5
    //   42: invokestatic checkArgument : (Z)V
    //   45: aload_0
    //   46: getfield mLock : Ljava/lang/Object;
    //   49: astore #6
    //   51: aload #6
    //   53: monitorenter
    //   54: aload_0
    //   55: iload_1
    //   56: putfield zzcj : I
    //   59: aload_0
    //   60: aload_2
    //   61: putfield zzcg : Landroid/os/IInterface;
    //   64: aload_0
    //   65: iload_1
    //   66: aload_2
    //   67: invokevirtual onSetConnectState : (ILandroid/os/IInterface;)V
    //   70: iload_1
    //   71: iconst_1
    //   72: if_icmpeq -> 507
    //   75: iload_1
    //   76: iconst_2
    //   77: if_icmpeq -> 101
    //   80: iload_1
    //   81: iconst_3
    //   82: if_icmpeq -> 101
    //   85: iload_1
    //   86: iconst_4
    //   87: if_icmpeq -> 93
    //   90: goto -> 555
    //   93: aload_0
    //   94: aload_2
    //   95: invokevirtual onConnectedLocked : (Landroid/os/IInterface;)V
    //   98: goto -> 555
    //   101: aload_0
    //   102: getfield zzci : Lcom/google/android/gms/common/internal/BaseGmsClient$zze;
    //   105: ifnull -> 249
    //   108: aload_0
    //   109: getfield zzbz : Lcom/google/android/gms/common/internal/zzh;
    //   112: ifnull -> 249
    //   115: aload_0
    //   116: getfield zzbz : Lcom/google/android/gms/common/internal/zzh;
    //   119: invokevirtual zzu : ()Ljava/lang/String;
    //   122: astore_2
    //   123: aload_0
    //   124: getfield zzbz : Lcom/google/android/gms/common/internal/zzh;
    //   127: invokevirtual getPackageName : ()Ljava/lang/String;
    //   130: astore #7
    //   132: new java/lang/StringBuilder
    //   135: dup
    //   136: aload_2
    //   137: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   140: invokevirtual length : ()I
    //   143: bipush #70
    //   145: iadd
    //   146: aload #7
    //   148: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   151: invokevirtual length : ()I
    //   154: iadd
    //   155: invokespecial <init> : (I)V
    //   158: astore #8
    //   160: aload #8
    //   162: ldc_w 'Calling connect() while still connected, missing disconnect() for '
    //   165: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   168: pop
    //   169: aload #8
    //   171: aload_2
    //   172: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   175: pop
    //   176: aload #8
    //   178: ldc_w ' on '
    //   181: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   184: pop
    //   185: aload #8
    //   187: aload #7
    //   189: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   192: pop
    //   193: ldc_w 'GmsClient'
    //   196: aload #8
    //   198: invokevirtual toString : ()Ljava/lang/String;
    //   201: invokestatic e : (Ljava/lang/String;Ljava/lang/String;)I
    //   204: pop
    //   205: aload_0
    //   206: getfield zzcb : Lcom/google/android/gms/common/internal/GmsClientSupervisor;
    //   209: aload_0
    //   210: getfield zzbz : Lcom/google/android/gms/common/internal/zzh;
    //   213: invokevirtual zzu : ()Ljava/lang/String;
    //   216: aload_0
    //   217: getfield zzbz : Lcom/google/android/gms/common/internal/zzh;
    //   220: invokevirtual getPackageName : ()Ljava/lang/String;
    //   223: aload_0
    //   224: getfield zzbz : Lcom/google/android/gms/common/internal/zzh;
    //   227: invokevirtual zzq : ()I
    //   230: aload_0
    //   231: getfield zzci : Lcom/google/android/gms/common/internal/BaseGmsClient$zze;
    //   234: aload_0
    //   235: invokespecial zzj : ()Ljava/lang/String;
    //   238: invokevirtual zza : (Ljava/lang/String;Ljava/lang/String;ILandroid/content/ServiceConnection;Ljava/lang/String;)V
    //   241: aload_0
    //   242: getfield zzcr : Ljava/util/concurrent/atomic/AtomicInteger;
    //   245: invokevirtual incrementAndGet : ()I
    //   248: pop
    //   249: aload_0
    //   250: new com/google/android/gms/common/internal/BaseGmsClient$zze
    //   253: dup
    //   254: aload_0
    //   255: aload_0
    //   256: getfield zzcr : Ljava/util/concurrent/atomic/AtomicInteger;
    //   259: invokevirtual get : ()I
    //   262: invokespecial <init> : (Lcom/google/android/gms/common/internal/BaseGmsClient;I)V
    //   265: putfield zzci : Lcom/google/android/gms/common/internal/BaseGmsClient$zze;
    //   268: aload_0
    //   269: getfield zzcj : I
    //   272: iconst_3
    //   273: if_icmpne -> 309
    //   276: aload_0
    //   277: invokevirtual getLocalStartServiceAction : ()Ljava/lang/String;
    //   280: ifnull -> 309
    //   283: new com/google/android/gms/common/internal/zzh
    //   286: dup
    //   287: aload_0
    //   288: invokevirtual getContext : ()Landroid/content/Context;
    //   291: invokevirtual getPackageName : ()Ljava/lang/String;
    //   294: aload_0
    //   295: invokevirtual getLocalStartServiceAction : ()Ljava/lang/String;
    //   298: iconst_1
    //   299: sipush #129
    //   302: invokespecial <init> : (Ljava/lang/String;Ljava/lang/String;ZI)V
    //   305: astore_2
    //   306: goto -> 329
    //   309: new com/google/android/gms/common/internal/zzh
    //   312: dup
    //   313: aload_0
    //   314: invokevirtual getStartServicePackage : ()Ljava/lang/String;
    //   317: aload_0
    //   318: invokevirtual getStartServiceAction : ()Ljava/lang/String;
    //   321: iconst_0
    //   322: sipush #129
    //   325: invokespecial <init> : (Ljava/lang/String;Ljava/lang/String;ZI)V
    //   328: astore_2
    //   329: aload_0
    //   330: aload_2
    //   331: putfield zzbz : Lcom/google/android/gms/common/internal/zzh;
    //   334: aload_0
    //   335: getfield zzcb : Lcom/google/android/gms/common/internal/GmsClientSupervisor;
    //   338: astore_2
    //   339: aload_0
    //   340: getfield zzbz : Lcom/google/android/gms/common/internal/zzh;
    //   343: invokevirtual zzu : ()Ljava/lang/String;
    //   346: astore #7
    //   348: aload_0
    //   349: getfield zzbz : Lcom/google/android/gms/common/internal/zzh;
    //   352: invokevirtual getPackageName : ()Ljava/lang/String;
    //   355: astore #8
    //   357: aload_0
    //   358: getfield zzbz : Lcom/google/android/gms/common/internal/zzh;
    //   361: invokevirtual zzq : ()I
    //   364: istore_1
    //   365: aload_0
    //   366: getfield zzci : Lcom/google/android/gms/common/internal/BaseGmsClient$zze;
    //   369: astore #9
    //   371: aload_0
    //   372: invokespecial zzj : ()Ljava/lang/String;
    //   375: astore #10
    //   377: aload_2
    //   378: new com/google/android/gms/common/internal/GmsClientSupervisor$zza
    //   381: dup
    //   382: aload #7
    //   384: aload #8
    //   386: iload_1
    //   387: invokespecial <init> : (Ljava/lang/String;Ljava/lang/String;I)V
    //   390: aload #9
    //   392: aload #10
    //   394: invokevirtual zza : (Lcom/google/android/gms/common/internal/GmsClientSupervisor$zza;Landroid/content/ServiceConnection;Ljava/lang/String;)Z
    //   397: ifne -> 555
    //   400: aload_0
    //   401: getfield zzbz : Lcom/google/android/gms/common/internal/zzh;
    //   404: invokevirtual zzu : ()Ljava/lang/String;
    //   407: astore_2
    //   408: aload_0
    //   409: getfield zzbz : Lcom/google/android/gms/common/internal/zzh;
    //   412: invokevirtual getPackageName : ()Ljava/lang/String;
    //   415: astore #7
    //   417: new java/lang/StringBuilder
    //   420: dup
    //   421: aload_2
    //   422: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   425: invokevirtual length : ()I
    //   428: bipush #34
    //   430: iadd
    //   431: aload #7
    //   433: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   436: invokevirtual length : ()I
    //   439: iadd
    //   440: invokespecial <init> : (I)V
    //   443: astore #8
    //   445: aload #8
    //   447: ldc_w 'unable to connect to service: '
    //   450: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   453: pop
    //   454: aload #8
    //   456: aload_2
    //   457: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   460: pop
    //   461: aload #8
    //   463: ldc_w ' on '
    //   466: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   469: pop
    //   470: aload #8
    //   472: aload #7
    //   474: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   477: pop
    //   478: ldc_w 'GmsClient'
    //   481: aload #8
    //   483: invokevirtual toString : ()Ljava/lang/String;
    //   486: invokestatic e : (Ljava/lang/String;Ljava/lang/String;)I
    //   489: pop
    //   490: aload_0
    //   491: bipush #16
    //   493: aconst_null
    //   494: aload_0
    //   495: getfield zzcr : Ljava/util/concurrent/atomic/AtomicInteger;
    //   498: invokevirtual get : ()I
    //   501: invokevirtual zza : (ILandroid/os/Bundle;I)V
    //   504: goto -> 555
    //   507: aload_0
    //   508: getfield zzci : Lcom/google/android/gms/common/internal/BaseGmsClient$zze;
    //   511: ifnull -> 555
    //   514: aload_0
    //   515: getfield zzcb : Lcom/google/android/gms/common/internal/GmsClientSupervisor;
    //   518: aload_0
    //   519: getfield zzbz : Lcom/google/android/gms/common/internal/zzh;
    //   522: invokevirtual zzu : ()Ljava/lang/String;
    //   525: aload_0
    //   526: getfield zzbz : Lcom/google/android/gms/common/internal/zzh;
    //   529: invokevirtual getPackageName : ()Ljava/lang/String;
    //   532: aload_0
    //   533: getfield zzbz : Lcom/google/android/gms/common/internal/zzh;
    //   536: invokevirtual zzq : ()I
    //   539: aload_0
    //   540: getfield zzci : Lcom/google/android/gms/common/internal/BaseGmsClient$zze;
    //   543: aload_0
    //   544: invokespecial zzj : ()Ljava/lang/String;
    //   547: invokevirtual zza : (Ljava/lang/String;Ljava/lang/String;ILandroid/content/ServiceConnection;Ljava/lang/String;)V
    //   550: aload_0
    //   551: aconst_null
    //   552: putfield zzci : Lcom/google/android/gms/common/internal/BaseGmsClient$zze;
    //   555: aload #6
    //   557: monitorexit
    //   558: return
    //   559: astore_2
    //   560: aload #6
    //   562: monitorexit
    //   563: aload_2
    //   564: athrow
    // Exception table:
    //   from	to	target	type
    //   54	70	559	finally
    //   93	98	559	finally
    //   101	249	559	finally
    //   249	306	559	finally
    //   309	329	559	finally
    //   329	504	559	finally
    //   507	555	559	finally
    //   555	558	559	finally
    //   560	563	559	finally }
  
  private final void zza(zzb paramzzb) { this.zzcq = paramzzb; }
  
  private final boolean zza(int paramInt1, int paramInt2, T paramT) {
    synchronized (this.mLock) {
      if (this.zzcj != paramInt1)
        return false; 
      zza(paramInt2, paramT);
      return true;
    } 
  }
  
  private final void zzb(int paramInt) {
    if (zzk()) {
      paramInt = 5;
      this.zzcp = true;
    } else {
      paramInt = 4;
    } 
    Handler handler = this.mHandler;
    handler.sendMessage(handler.obtainMessage(paramInt, this.zzcr.get(), 16));
  }
  
  @Nullable
  private final String zzj() {
    String str2 = this.zzcn;
    String str1 = str2;
    if (str2 == null)
      str1 = this.mContext.getClass().getName(); 
    return str1;
  }
  
  private final boolean zzk() {
    synchronized (this.mLock) {
      if (this.zzcj == 3)
        return true; 
    } 
    boolean bool = false;
    /* monitor exit ClassFileLocalVariableReferenceExpression{type=ObjectType{java/lang/Object}, name=SYNTHETIC_LOCAL_VARIABLE_2} */
    return bool;
  }
  
  private final boolean zzl() {
    if (this.zzcp)
      return false; 
    if (TextUtils.isEmpty(getServiceDescriptor()))
      return false; 
    if (TextUtils.isEmpty(getLocalStartServiceAction()))
      return false; 
    try {
      Class.forName(getServiceDescriptor());
      return true;
    } catch (ClassNotFoundException classNotFoundException) {
      return false;
    } 
  }
  
  @KeepForSdk
  public void checkAvailabilityAndConnect() {
    int i = this.zzcc.isGooglePlayServicesAvailable(this.mContext, getMinApkVersion());
    if (i != 0) {
      zza(1, null);
      triggerNotAvailable(new LegacyClientCallbackAdapter(this), i, null);
      return;
    } 
    connect(new LegacyClientCallbackAdapter(this));
  }
  
  @KeepForSdk
  protected final void checkConnected() {
    if (isConnected())
      return; 
    throw new IllegalStateException("Not connected. Call connect() and wait for onConnected() to be called.");
  }
  
  @KeepForSdk
  public void connect(@NonNull ConnectionProgressReportCallbacks paramConnectionProgressReportCallbacks) {
    this.zzcf = (ConnectionProgressReportCallbacks)Preconditions.checkNotNull(paramConnectionProgressReportCallbacks, "Connection progress callbacks cannot be null.");
    zza(2, null);
  }
  
  @Nullable
  @KeepForSdk
  protected abstract T createServiceInterface(IBinder paramIBinder);
  
  @KeepForSdk
  public void disconnect() {
    this.zzcr.incrementAndGet();
    synchronized (this.zzch) {
      int i = this.zzch.size();
      for (byte b = 0; b < i; b++)
        ((zzc)this.zzch.get(b)).removeListener(); 
      this.zzch.clear();
      synchronized (this.zzcd) {
        this.zzce = null;
        zza(1, null);
        return;
      } 
    } 
  }
  
  @KeepForSdk
  public void dump(String paramString, FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString) {
    synchronized (this.mLock) {
      int i = this.zzcj;
      IInterface iInterface = this.zzcg;
      synchronized (this.zzcd) {
        IGmsServiceBroker iGmsServiceBroker = this.zzce;
        paramPrintWriter.append(paramString).append("mConnectState=");
        if (i != 1) {
          if (i != 2) {
            if (i != 3) {
              if (i != 4) {
                if (i != 5) {
                  paramPrintWriter.print("UNKNOWN");
                } else {
                  paramPrintWriter.print("DISCONNECTING");
                } 
              } else {
                paramPrintWriter.print("CONNECTED");
              } 
            } else {
              paramPrintWriter.print("LOCAL_CONNECTING");
            } 
          } else {
            paramPrintWriter.print("REMOTE_CONNECTING");
          } 
        } else {
          paramPrintWriter.print("DISCONNECTED");
        } 
        paramPrintWriter.append(" mService=");
        if (iInterface == null) {
          paramPrintWriter.append("null");
        } else {
          paramPrintWriter.append(getServiceDescriptor()).append("@").append(Integer.toHexString(System.identityHashCode(iInterface.asBinder())));
        } 
        paramPrintWriter.append(" mServiceBroker=");
        if (iGmsServiceBroker == null) {
          paramPrintWriter.println("null");
        } else {
          paramPrintWriter.append("IGmsServiceBroker@").println(Integer.toHexString(System.identityHashCode(iGmsServiceBroker.asBinder())));
        } 
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS", Locale.US);
        if (this.zzbw > 0L) {
          null = paramPrintWriter.append(paramString).append("lastConnectedTime=");
          long l = this.zzbw;
          String str;
          StringBuilder stringBuilder = new StringBuilder((str = simpleDateFormat.format(new Date(l))).valueOf(str).length() + 21);
          stringBuilder.append(l);
          stringBuilder.append(" ");
          stringBuilder.append(str);
          null.println(stringBuilder.toString());
        } 
        if (this.zzbv > 0L) {
          paramPrintWriter.append(paramString).append("lastSuspendedCause=");
          i = this.zzbu;
          if (i != 1) {
            if (i != 2) {
              paramPrintWriter.append(String.valueOf(i));
            } else {
              paramPrintWriter.append("CAUSE_NETWORK_LOST");
            } 
          } else {
            paramPrintWriter.append("CAUSE_SERVICE_DISCONNECTED");
          } 
          null = paramPrintWriter.append(" lastSuspendedTime=");
          long l = this.zzbv;
          String str;
          StringBuilder stringBuilder = new StringBuilder((str = simpleDateFormat.format(new Date(l))).valueOf(str).length() + 21);
          stringBuilder.append(l);
          stringBuilder.append(" ");
          stringBuilder.append(str);
          null.println(stringBuilder.toString());
        } 
        if (this.zzby > 0L) {
          paramPrintWriter.append(paramString).append("lastFailedStatus=").append(CommonStatusCodes.getStatusCodeString(this.zzbx));
          PrintWriter printWriter = paramPrintWriter.append(" lastFailedTime=");
          long l = this.zzby;
          String str;
          StringBuilder stringBuilder = new StringBuilder((str = simpleDateFormat.format(new Date(l))).valueOf(str).length() + 21);
          stringBuilder.append(l);
          stringBuilder.append(" ");
          stringBuilder.append(str);
          printWriter.println(stringBuilder.toString());
        } 
        return;
      } 
    } 
  }
  
  @KeepForSdk
  public Account getAccount() { return null; }
  
  @KeepForSdk
  public Feature[] getApiFeatures() { return zzbt; }
  
  @Nullable
  @KeepForSdk
  public final Feature[] getAvailableFeatures() {
    zzb zzb1 = this.zzcq;
    return (zzb1 == null) ? null : zzb1.zzdb;
  }
  
  @KeepForSdk
  public Bundle getConnectionHint() { return null; }
  
  @KeepForSdk
  public final Context getContext() { return this.mContext; }
  
  @KeepForSdk
  public String getEndpointPackageName() {
    if (isConnected()) {
      zzh zzh1 = this.zzbz;
      if (zzh1 != null)
        return zzh1.getPackageName(); 
    } 
    throw new RuntimeException("Failed to connect when checking package");
  }
  
  @KeepForSdk
  protected Bundle getGetServiceRequestExtraArgs() { return new Bundle(); }
  
  @Nullable
  @KeepForSdk
  protected String getLocalStartServiceAction() { return null; }
  
  @KeepForSdk
  public final Looper getLooper() { return this.zzca; }
  
  @KeepForSdk
  public int getMinApkVersion() { return GoogleApiAvailabilityLight.GOOGLE_PLAY_SERVICES_VERSION_CODE; }
  
  @WorkerThread
  @KeepForSdk
  public void getRemoteService(IAccountAccessor paramIAccountAccessor, Set<Scope> paramSet) {
    Bundle bundle = getGetServiceRequestExtraArgs();
    GetServiceRequest getServiceRequest = new GetServiceRequest(this.zzcm);
    getServiceRequest.zzy = this.mContext.getPackageName();
    getServiceRequest.zzdk = bundle;
    if (paramSet != null)
      getServiceRequest.zzdj = (Scope[])paramSet.toArray(new Scope[paramSet.size()]); 
    if (requiresSignIn()) {
      Account account;
      if (getAccount() != null) {
        account = getAccount();
      } else {
        account = new Account("<<default account>>", "com.google");
      } 
      getServiceRequest.zzdl = account;
      if (paramIAccountAccessor != null)
        getServiceRequest.zzdi = paramIAccountAccessor.asBinder(); 
    } else if (requiresAccount()) {
      getServiceRequest.zzdl = getAccount();
    } 
    getServiceRequest.zzdm = zzbt;
    getServiceRequest.zzdn = getApiFeatures();
    try {
      synchronized (this.zzcd) {
        if (this.zzce != null) {
          this.zzce.getService(new zzd(this, this.zzcr.get()), getServiceRequest);
        } else {
          Log.w("GmsClient", "mServiceBroker is null, client disconnected");
        } 
        return;
      } 
    } catch (DeadObjectException paramIAccountAccessor) {
      Log.w("GmsClient", "IGmsServiceBroker.getService failed", paramIAccountAccessor);
      triggerConnectionSuspended(1);
      return;
    } catch (SecurityException paramIAccountAccessor) {
      throw paramIAccountAccessor;
    } catch (RemoteException paramIAccountAccessor) {
      Log.w("GmsClient", "IGmsServiceBroker.getService failed", paramIAccountAccessor);
      onPostInitHandler(8, null, null, this.zzcr.get());
      return;
    } catch (RuntimeException paramIAccountAccessor) {
      Log.w("GmsClient", "IGmsServiceBroker.getService failed", paramIAccountAccessor);
      onPostInitHandler(8, null, null, this.zzcr.get());
      return;
    } 
  }
  
  @KeepForSdk
  protected Set<Scope> getScopes() { return Collections.EMPTY_SET; }
  
  @KeepForSdk
  public final T getService() throws DeadObjectException {
    synchronized (this.mLock) {
      if (this.zzcj != 5) {
        checkConnected();
        if (this.zzcg != null) {
          boolean bool1 = true;
          Preconditions.checkState(bool1, "Client is connected but service is null");
          IInterface iInterface1 = this.zzcg;
          return (T)iInterface1;
        } 
      } else {
        throw new DeadObjectException();
      } 
    } 
    boolean bool = false;
    Preconditions.checkState(bool, "Client is connected but service is null");
    IInterface iInterface = this.zzcg;
    /* monitor exit ClassFileLocalVariableReferenceExpression{type=ObjectType{java/lang/Object}, name=SYNTHETIC_LOCAL_VARIABLE_2} */
    return (T)iInterface;
  }
  
  @Nullable
  @KeepForSdk
  public IBinder getServiceBrokerBinder() {
    synchronized (this.zzcd) {
      if (this.zzce == null)
        return null; 
      return this.zzce.asBinder();
    } 
  }
  
  @NonNull
  @KeepForSdk
  protected abstract String getServiceDescriptor();
  
  @KeepForSdk
  public Intent getSignInIntent() { throw new UnsupportedOperationException("Not a sign in API"); }
  
  @NonNull
  @KeepForSdk
  protected abstract String getStartServiceAction();
  
  @KeepForSdk
  protected String getStartServicePackage() { return "com.google.android.gms"; }
  
  @KeepForSdk
  public boolean isConnected() {
    synchronized (this.mLock) {
      if (this.zzcj == 4)
        return true; 
    } 
    boolean bool = false;
    /* monitor exit ClassFileLocalVariableReferenceExpression{type=ObjectType{java/lang/Object}, name=SYNTHETIC_LOCAL_VARIABLE_2} */
    return bool;
  }
  
  @KeepForSdk
  public boolean isConnecting() {
    synchronized (this.mLock) {
      if (this.zzcj == 2 || this.zzcj == 3)
        return true; 
    } 
    boolean bool = false;
    /* monitor exit ClassFileLocalVariableReferenceExpression{type=ObjectType{java/lang/Object}, name=SYNTHETIC_LOCAL_VARIABLE_2} */
    return bool;
  }
  
  @CallSuper
  @KeepForSdk
  protected void onConnectedLocked(@NonNull T paramT) { this.zzbw = System.currentTimeMillis(); }
  
  @CallSuper
  @KeepForSdk
  protected void onConnectionFailed(ConnectionResult paramConnectionResult) {
    this.zzbx = paramConnectionResult.getErrorCode();
    this.zzby = System.currentTimeMillis();
  }
  
  @CallSuper
  @KeepForSdk
  protected void onConnectionSuspended(int paramInt) {
    this.zzbu = paramInt;
    this.zzbv = System.currentTimeMillis();
  }
  
  @KeepForSdk
  protected void onPostInitHandler(int paramInt1, IBinder paramIBinder, Bundle paramBundle, int paramInt2) {
    Handler handler = this.mHandler;
    handler.sendMessage(handler.obtainMessage(1, paramInt2, -1, new zzf(this, paramInt1, paramIBinder, paramBundle)));
  }
  
  @KeepForSdk
  void onSetConnectState(int paramInt, T paramT) {}
  
  @KeepForSdk
  public void onUserSignOut(@NonNull SignOutCallbacks paramSignOutCallbacks) { paramSignOutCallbacks.onSignOutComplete(); }
  
  @KeepForSdk
  public boolean providesSignIn() { return false; }
  
  @KeepForSdk
  public boolean requiresAccount() { return false; }
  
  @KeepForSdk
  public boolean requiresGooglePlayServices() { return true; }
  
  @KeepForSdk
  public boolean requiresSignIn() { return false; }
  
  @KeepForSdk
  public void triggerConnectionSuspended(int paramInt) {
    Handler handler = this.mHandler;
    handler.sendMessage(handler.obtainMessage(6, this.zzcr.get(), paramInt));
  }
  
  @KeepForSdk
  @VisibleForTesting
  protected void triggerNotAvailable(@NonNull ConnectionProgressReportCallbacks paramConnectionProgressReportCallbacks, int paramInt, @Nullable PendingIntent paramPendingIntent) {
    this.zzcf = (ConnectionProgressReportCallbacks)Preconditions.checkNotNull(paramConnectionProgressReportCallbacks, "Connection progress callbacks cannot be null.");
    Handler handler = this.mHandler;
    handler.sendMessage(handler.obtainMessage(3, this.zzcr.get(), paramInt, paramPendingIntent));
  }
  
  protected final void zza(int paramInt1, @Nullable Bundle paramBundle, int paramInt2) {
    Handler handler = this.mHandler;
    handler.sendMessage(handler.obtainMessage(7, paramInt2, -1, new zzg(this, paramInt1, null)));
  }
}
