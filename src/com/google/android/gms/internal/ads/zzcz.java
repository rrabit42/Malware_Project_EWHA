package com.google.android.gms.internal.ads;

import android.content.Context;
import android.content.IntentFilter;
import android.content.pm.PackageInfo;
import android.support.annotation.VisibleForTesting;
import android.util.Log;
import android.util.Pair;
import com.google.android.gms.ads.identifier.AdvertisingIdClient;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import dalvik.system.DexClassLoader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class zzcz {
  private static final String TAG = "zzcz";
  
  protected Context zzrt;
  
  private ExecutorService zzru;
  
  private DexClassLoader zzrv;
  
  private zzck zzrw;
  
  private byte[] zzrx;
  
  private Future zzrz = null;
  
  private boolean zzsa;
  
  private Future zzsc = null;
  
  private zzcc zzsd;
  
  private boolean zzse = false;
  
  private boolean zzsf = false;
  
  private Map<Pair<String, String>, zzeg> zzsg;
  
  private boolean zzsh = false;
  
  private boolean zzsi;
  
  private boolean zzsj;
  
  static  {
  
  }
  
  private zzcz(Context paramContext) {
    boolean bool = true;
    this.zzsi = true;
    this.zzsj = false;
    Context context = paramContext.getApplicationContext();
    if (context == null)
      bool = false; 
    this.zzsa = bool;
    if (this.zzsa)
      paramContext = context; 
    this.zzrt = paramContext;
    this.zzsg = new HashMap();
  }
  
  public static zzcz zza(Context paramContext, String paramString1, String paramString2, boolean paramBoolean) {
    zzcz1 = new zzcz(paramContext);
    try {
      zzcz1.zzru = Executors.newCachedThreadPool(new zzda());
      zzcz1.zzqt = paramBoolean;
      if (paramBoolean)
        zzcz1.zzrz = zzcz1.zzru.submit(new zzdb(zzcz1)); 
      zzcz1.zzru.execute(new zzdd(zzcz1));
      try {
        GoogleApiAvailabilityLight googleApiAvailabilityLight = GoogleApiAvailabilityLight.getInstance();
        if (googleApiAvailabilityLight.getApkVersion(zzcz1.zzrt) > 0) {
          paramBoolean = true;
        } else {
          paramBoolean = false;
        } 
        zzcz1.zzse = paramBoolean;
        if (googleApiAvailabilityLight.isGooglePlayServicesAvailable(zzcz1.zzrt) == 0) {
          paramBoolean = true;
        } else {
          paramBoolean = false;
        } 
        zzcz1.zzsf = paramBoolean;
      } catch (Throwable paramContext) {}
      zzcz1.zza(0, true);
      if (zzdg.isMainThread()) {
        zzna zzna = zznk.zzbaz;
        if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue())
          throw new IllegalStateException("Task Context initialization must not be called from the UI thread."); 
      } 
      zzcz1.zzrw = new zzck(null);
      try {
        zzcz1.zzrx = zzcz1.zzrw.zzl(paramString1);
        try {
          File file = zzcz1.zzrt.getCacheDir();
          intentFilter = file;
          if (file == null) {
            intentFilter = zzcz1.zzrt.getDir("dex", 0);
            if (intentFilter == null)
              throw new zzcw(); 
          } 
          file = new File(String.format("%s/%s.jar", new Object[] { intentFilter, "1521499837408" }));
          if (!file.exists()) {
            byte[] arrayOfByte = zzcz1.zzrw.zza(zzcz1.zzrx, paramString2);
            file.createNewFile();
            FileOutputStream fileOutputStream = new FileOutputStream(file);
            fileOutputStream.write(arrayOfByte, 0, arrayOfByte.length);
            fileOutputStream.close();
          } 
          zzcz1.zzb(intentFilter, "1521499837408");
          try {
            zzcz1.zzrv = new DexClassLoader(file.getAbsolutePath(), intentFilter.getAbsolutePath(), null, zzcz1.zzrt.getClassLoader());
            zzb(file);
            zzcz1.zza(intentFilter, "1521499837408");
            zzm(String.format("%s/%s.dex", new Object[] { intentFilter, "1521499837408" }));
            return zzcz1;
          } finally {
            zzb(file);
            zzcz1.zza(intentFilter, "1521499837408");
            zzm(String.format("%s/%s.dex", new Object[] { intentFilter, "1521499837408" }));
          } 
        } catch (FileNotFoundException paramContext) {
          throw new zzcw(paramContext);
        } catch (IOException paramContext) {
          throw new zzcw(paramContext);
        } catch (zzcl paramContext) {
          throw new zzcw(paramContext);
        } catch (NullPointerException paramContext) {
          throw new zzcw(paramContext);
        } 
      } catch (zzcl paramContext) {
        throw new zzcw(paramContext);
      } 
    } catch (zzcw paramContext) {
      return zzcz1;
    } 
  }
  
  private final void zza(File paramFile, String paramString) {
    file1 = new File(String.format("%s/%s.tmp", new Object[] { paramFile, paramString }));
    if (file1.exists())
      return; 
    file2 = new File(String.format("%s/%s.dex", new Object[] { paramFile, paramString }));
    if (!file2.exists())
      return; 
    long l = file2.length();
    if (l <= 0L)
      return; 
    arrayOfByte = new byte[(int)l];
    fileInputStream2 = null;
    fileInputStream3 = null;
    try {
    
    } catch (IOException|java.security.NoSuchAlgorithmException|zzcl paramFile) {
    
    } finally {
      fileInputStream2 = null;
      fileInputStream1 = fileInputStream3;
      if (fileInputStream2 != null)
        try {
          fileInputStream2.close();
        } catch (IOException fileInputStream2) {} 
      if (fileInputStream1 != null)
        try {
          fileInputStream1.close();
        } catch (IOException fileInputStream1) {} 
      zzb(file2);
    } 
    if (paramFile != null)
      try {
        paramFile.close();
      } catch (IOException paramFile) {} 
    if (fileInputStream1 != null)
      try {
        fileInputStream1.close();
      } catch (IOException paramFile) {} 
    zzb(file2);
  }
  
  private static boolean zza(int paramInt, zzba paramzzba) {
    if (paramInt < 4) {
      if (paramzzba == null)
        return true; 
      zzna zzna = zznk.zzbbc;
      if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue() && (paramzzba.zzcx == null || paramzzba.zzcx.equals("0000000000000000000000000000000000000000000000000000000000000000")))
        return true; 
      zzna = zznk.zzbbd;
      if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue() && (paramzzba.zzfn == null || paramzzba.zzfn.zzgl == null || paramzzba.zzfn.zzgl.longValue() == -2L))
        return true; 
    } 
    return false;
  }
  
  private final void zzal() {
    try {
      if (this.zzry == null && this.zzsa) {
        AdvertisingIdClient advertisingIdClient = new AdvertisingIdClient(this.zzrt);
        advertisingIdClient.start();
        this.zzry = advertisingIdClient;
      } 
      return;
    } catch (GooglePlayServicesNotAvailableException|IOException|com.google.android.gms.common.GooglePlayServicesRepairableException googlePlayServicesNotAvailableException) {
      this.zzry = null;
      return;
    } 
  }
  
  @VisibleForTesting
  private final zzba zzam() {
    try {
      PackageInfo packageInfo = this.zzrt.getPackageManager().getPackageInfo(this.zzrt.getPackageName(), 0);
      return zzatq.zzl(this.zzrt, this.zzrt.getPackageName(), Integer.toString(packageInfo.versionCode));
    } catch (Throwable throwable) {
      return null;
    } 
  }
  
  private static void zzb(File paramFile) {
    if (!paramFile.exists()) {
      Log.d(TAG, String.format("File %s not found. No need for deletion", new Object[] { paramFile.getAbsolutePath() }));
      return;
    } 
    paramFile.delete();
  }
  
  private final boolean zzb(File paramFile, String paramString) {
    file1 = new File(String.format("%s/%s.tmp", new Object[] { paramFile, paramString }));
    if (!file1.exists())
      return false; 
    file2 = new File(String.format("%s/%s.dex", new Object[] { paramFile, paramString }));
    if (file2.exists())
      return false; 
    fileInputStream = null;
    fileOutputStream = null;
    try {
      l = file1.length();
      if (l <= 0L)
        return false; 
    } catch (IOException|java.security.NoSuchAlgorithmException|zzcl paramFile) {
    
    } finally {
      paramString = null;
      if (paramString != null)
        try {
          paramString.close();
        } catch (IOException paramString) {} 
      if (fileOutputStream != null)
        try {
          fileOutputStream.close();
        } catch (IOException paramString) {} 
    } 
    if (paramFile != null)
      try {
        paramFile.close();
      } catch (IOException paramFile) {} 
    if (paramString != null)
      try {
        paramString.close();
        return false;
      } catch (IOException paramFile) {
        return false;
      }  
    return false;
  }
  
  private static void zzm(String paramString) { zzb(new File(paramString)); }
  
  public final Context getContext() { return this.zzrt; }
  
  public final boolean isInitialized() { return this.zzsh; }
  
  public final Method zza(String paramString1, String paramString2) {
    zzeg zzeg = (zzeg)this.zzsg.get(new Pair(paramString1, paramString2));
    return (zzeg == null) ? null : zzeg.zzaw();
  }
  
  @VisibleForTesting
  final void zza(int paramInt, boolean paramBoolean) {
    if (!this.zzsf)
      return; 
    Future future = this.zzru.submit(new zzdc(this, paramInt, paramBoolean));
    if (paramInt == 0)
      this.zzsc = future; 
  }
  
  public final boolean zza(String paramString1, String paramString2, Class<?>... paramVarArgs) {
    if (!this.zzsg.containsKey(new Pair(paramString1, paramString2))) {
      this.zzsg.put(new Pair(paramString1, paramString2), new zzeg(this, paramString1, paramString2, paramVarArgs));
      return true;
    } 
    return false;
  }
  
  public final ExecutorService zzab() { return this.zzru; }
  
  public final DexClassLoader zzac() { return this.zzrv; }
  
  public final zzck zzad() { return this.zzrw; }
  
  public final byte[] zzae() { return this.zzrx; }
  
  public final boolean zzaf() { return this.zzse; }
  
  public final zzcc zzag() { return this.zzsd; }
  
  public final boolean zzah() { return this.zzsf; }
  
  public final boolean zzai() { return this.zzsi; }
  
  public final zzba zzaj() { return this.zzsb; }
  
  public final Future zzak() { return this.zzsc; }
  
  public final AdvertisingIdClient zzan() {
    if (!this.zzqt)
      return null; 
    if (this.zzry != null)
      return this.zzry; 
    future = this.zzrz;
    if (future != null)
      try {
        future.get(2000L, TimeUnit.MILLISECONDS);
        this.zzrz = null;
      } catch (InterruptedException|java.util.concurrent.ExecutionException future) {
      
      } catch (TimeoutException future) {
        this.zzrz.cancel(true);
      }  
    return this.zzry;
  }
  
  @VisibleForTesting
  final zzba zzb(int paramInt, boolean paramBoolean) {
    if (paramInt > 0 && paramBoolean) {
      long l = (paramInt * 1000);
      try {
        Thread.sleep(l);
      } catch (InterruptedException interruptedException) {}
    } 
    return zzam();
  }
  
  public final int zzx() { return (this.zzsd != null) ? zzcc.zzx() : Integer.MIN_VALUE; }
}
