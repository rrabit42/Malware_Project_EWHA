package com.google.android.gms.ads.identifier;

import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.SystemClock;
import android.support.annotation.Nullable;
import com.google.android.gms.common.BlockingServiceConnection;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.common.GooglePlayServicesRepairableException;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.stats.ConnectionTracker;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.ads_identifier.zze;
import com.google.android.gms.internal.ads_identifier.zzf;
import java.io.IOException;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.GuardedBy;

@ParametersAreNonnullByDefault
@KeepForSdk
public class AdvertisingIdClient {
  @GuardedBy("this")
  private final Context mContext;
  
  @Nullable
  @GuardedBy("this")
  private BlockingServiceConnection zze;
  
  @Nullable
  @GuardedBy("this")
  private zze zzf;
  
  @GuardedBy("this")
  private boolean zzg;
  
  private final Object zzh = new Object();
  
  @Nullable
  @GuardedBy("mAutoDisconnectTaskLock")
  private zza zzi;
  
  private final boolean zzj;
  
  private final long zzk;
  
  @KeepForSdk
  public AdvertisingIdClient(Context paramContext) { this(paramContext, 30000L, false, false); }
  
  @VisibleForTesting
  private AdvertisingIdClient(Context paramContext, long paramLong, boolean paramBoolean1, boolean paramBoolean2) {
    Preconditions.checkNotNull(paramContext);
    Context context = paramContext;
    if (paramBoolean1) {
      context = paramContext.getApplicationContext();
      if (context == null)
        context = paramContext; 
    } 
    this.mContext = context;
    this.zzg = false;
    this.zzk = paramLong;
    this.zzj = paramBoolean2;
  }
  
  @KeepForSdk
  public static Info getAdvertisingIdInfo(Context paramContext) throws IOException, IllegalStateException, GooglePlayServicesNotAvailableException, GooglePlayServicesRepairableException {
    zzb = new zzb(paramContext);
    boolean bool = zzb.getBoolean("gads:ad_id_app_context:enabled", false);
    float f = zzb.getFloat("gads:ad_id_app_context:ping_ratio", 0.0F);
    String str = zzb.getString("gads:ad_id_use_shared_preference:experiment_id", "");
    AdvertisingIdClient advertisingIdClient = new AdvertisingIdClient(paramContext, -1L, bool, zzb.getBoolean("gads:ad_id_use_persistent_service:enabled", false));
    try {
      long l = SystemClock.elapsedRealtime();
      advertisingIdClient.zza(false);
      Info info = advertisingIdClient.getInfo();
      advertisingIdClient.zza(info, bool, f, SystemClock.elapsedRealtime() - l, str, null);
      advertisingIdClient.finish();
      return info;
    } catch (Throwable zzb) {
      advertisingIdClient.zza(null, bool, f, -1L, str, zzb);
      throw zzb;
    } finally {}
    advertisingIdClient.finish();
    throw str;
  }
  
  @KeepForSdk
  public static boolean getIsAdIdFakeForDebugLogging(Context paramContext) throws IOException, GooglePlayServicesNotAvailableException, GooglePlayServicesRepairableException {
    null = new zzb(paramContext);
    advertisingIdClient = new AdvertisingIdClient(paramContext, -1L, null.getBoolean("gads:ad_id_app_context:enabled", false), null.getBoolean("com.google.android.gms.ads.identifier.service.PERSISTENT_START", false));
    try {
      advertisingIdClient.zza(false);
      return advertisingIdClient.zzb();
    } finally {
      advertisingIdClient.finish();
    } 
  }
  
  @KeepForSdk
  public static void setShouldSkipGmsCoreVersionCheck(boolean paramBoolean) {}
  
  private static BlockingServiceConnection zza(Context paramContext, boolean paramBoolean) throws IOException, GooglePlayServicesNotAvailableException, GooglePlayServicesRepairableException {
    try {
      paramContext.getPackageManager().getPackageInfo("com.android.vending", 0);
      int i = GoogleApiAvailabilityLight.getInstance().isGooglePlayServicesAvailable(paramContext, 12451000);
      if (i == 0 || i == 2) {
        String str;
        if (paramBoolean) {
          str = "com.google.android.gms.ads.identifier.service.PERSISTENT_START";
        } else {
          str = "com.google.android.gms.ads.identifier.service.START";
        } 
        BlockingServiceConnection blockingServiceConnection = new BlockingServiceConnection();
        Intent intent = new Intent(str);
        intent.setPackage("com.google.android.gms");
        try {
          paramBoolean = ConnectionTracker.getInstance().bindService(paramContext, intent, blockingServiceConnection, 1);
          if (paramBoolean)
            return blockingServiceConnection; 
          throw new IOException("Connection failure");
        } catch (Throwable paramContext) {
          throw new IOException(paramContext);
        } 
      } 
      throw new IOException("Google Play services not available");
    } catch (android.content.pm.PackageManager.NameNotFoundException paramContext) {
      throw new GooglePlayServicesNotAvailableException(9);
    } 
  }
  
  @VisibleForTesting
  private static zze zza(Context paramContext, BlockingServiceConnection paramBlockingServiceConnection) throws IOException {
    try {
      return zzf.zza(paramBlockingServiceConnection.getServiceWithTimeout(10000L, TimeUnit.MILLISECONDS));
    } catch (InterruptedException paramContext) {
      throw new IOException("Interrupted exception");
    } catch (Throwable paramContext) {
      throw new IOException(paramContext);
    } 
  }
  
  private final void zza() {
    synchronized (this.zzh) {
      if (this.zzi != null) {
        this.zzi.zzo.countDown();
        try {
          this.zzi.join();
        } catch (InterruptedException interruptedException) {}
      } 
      if (this.zzk > 0L)
        this.zzi = new zza(this, this.zzk); 
      return;
    } 
  }
  
  @VisibleForTesting
  private final void zza(boolean paramBoolean) { // Byte code:
    //   0: ldc 'Calling this from your main thread can lead to deadlock'
    //   2: invokestatic checkNotMainThread : (Ljava/lang/String;)V
    //   5: aload_0
    //   6: monitorenter
    //   7: aload_0
    //   8: getfield zzg : Z
    //   11: ifeq -> 18
    //   14: aload_0
    //   15: invokevirtual finish : ()V
    //   18: aload_0
    //   19: aload_0
    //   20: getfield mContext : Landroid/content/Context;
    //   23: aload_0
    //   24: getfield zzj : Z
    //   27: invokestatic zza : (Landroid/content/Context;Z)Lcom/google/android/gms/common/BlockingServiceConnection;
    //   30: putfield zze : Lcom/google/android/gms/common/BlockingServiceConnection;
    //   33: aload_0
    //   34: aload_0
    //   35: getfield mContext : Landroid/content/Context;
    //   38: aload_0
    //   39: getfield zze : Lcom/google/android/gms/common/BlockingServiceConnection;
    //   42: invokestatic zza : (Landroid/content/Context;Lcom/google/android/gms/common/BlockingServiceConnection;)Lcom/google/android/gms/internal/ads_identifier/zze;
    //   45: putfield zzf : Lcom/google/android/gms/internal/ads_identifier/zze;
    //   48: aload_0
    //   49: iconst_1
    //   50: putfield zzg : Z
    //   53: iload_1
    //   54: ifeq -> 61
    //   57: aload_0
    //   58: invokespecial zza : ()V
    //   61: aload_0
    //   62: monitorexit
    //   63: return
    //   64: astore_2
    //   65: aload_0
    //   66: monitorexit
    //   67: aload_2
    //   68: athrow
    // Exception table:
    //   from	to	target	type
    //   7	18	64	finally
    //   18	53	64	finally
    //   57	61	64	finally
    //   61	63	64	finally
    //   65	67	64	finally }
  
  @VisibleForTesting
  private final boolean zza(Info paramInfo, boolean paramBoolean, float paramFloat, long paramLong, String paramString, Throwable paramThrowable) {
    String str1;
    if (Math.random() > paramFloat)
      return false; 
    HashMap hashMap = new HashMap();
    String str2 = "1";
    if (paramBoolean) {
      str1 = "1";
    } else {
      str1 = "0";
    } 
    hashMap.put("app_context", str1);
    if (paramInfo != null) {
      if (paramInfo.isLimitAdTrackingEnabled()) {
        str1 = str2;
      } else {
        str1 = "0";
      } 
      hashMap.put("limit_ad_tracking", str1);
    } 
    if (paramInfo != null && paramInfo.getId() != null)
      hashMap.put("ad_id_size", Integer.toString(paramInfo.getId().length())); 
    if (paramThrowable != null)
      hashMap.put("error", paramThrowable.getClass().getName()); 
    if (paramString != null && !paramString.isEmpty())
      hashMap.put("experiment_id", paramString); 
    hashMap.put("tag", "AdvertisingIdClient");
    hashMap.put("time_spent", Long.toString(paramLong));
    (new zza(this, hashMap)).start();
    return true;
  }
  
  private final boolean zzb() throws IOException { // Byte code:
    //   0: ldc 'Calling this from your main thread can lead to deadlock'
    //   2: invokestatic checkNotMainThread : (Ljava/lang/String;)V
    //   5: aload_0
    //   6: monitorenter
    //   7: aload_0
    //   8: getfield zzg : Z
    //   11: ifne -> 95
    //   14: aload_0
    //   15: getfield zzh : Ljava/lang/Object;
    //   18: astore_2
    //   19: aload_2
    //   20: monitorenter
    //   21: aload_0
    //   22: getfield zzi : Lcom/google/android/gms/ads/identifier/AdvertisingIdClient$zza;
    //   25: ifnull -> 79
    //   28: aload_0
    //   29: getfield zzi : Lcom/google/android/gms/ads/identifier/AdvertisingIdClient$zza;
    //   32: getfield zzp : Z
    //   35: ifeq -> 79
    //   38: aload_2
    //   39: monitorexit
    //   40: aload_0
    //   41: iconst_0
    //   42: invokespecial zza : (Z)V
    //   45: aload_0
    //   46: getfield zzg : Z
    //   49: ifeq -> 55
    //   52: goto -> 95
    //   55: new java/io/IOException
    //   58: dup
    //   59: ldc_w 'AdvertisingIdClient cannot reconnect.'
    //   62: invokespecial <init> : (Ljava/lang/String;)V
    //   65: athrow
    //   66: astore_2
    //   67: new java/io/IOException
    //   70: dup
    //   71: ldc_w 'AdvertisingIdClient cannot reconnect.'
    //   74: aload_2
    //   75: invokespecial <init> : (Ljava/lang/String;Ljava/lang/Throwable;)V
    //   78: athrow
    //   79: new java/io/IOException
    //   82: dup
    //   83: ldc_w 'AdvertisingIdClient is not connected.'
    //   86: invokespecial <init> : (Ljava/lang/String;)V
    //   89: athrow
    //   90: astore_3
    //   91: aload_2
    //   92: monitorexit
    //   93: aload_3
    //   94: athrow
    //   95: aload_0
    //   96: getfield zze : Lcom/google/android/gms/common/BlockingServiceConnection;
    //   99: invokestatic checkNotNull : (Ljava/lang/Object;)Ljava/lang/Object;
    //   102: pop
    //   103: aload_0
    //   104: getfield zzf : Lcom/google/android/gms/internal/ads_identifier/zze;
    //   107: invokestatic checkNotNull : (Ljava/lang/Object;)Ljava/lang/Object;
    //   110: pop
    //   111: aload_0
    //   112: getfield zzf : Lcom/google/android/gms/internal/ads_identifier/zze;
    //   115: invokeinterface zzc : ()Z
    //   120: istore_1
    //   121: aload_0
    //   122: monitorexit
    //   123: aload_0
    //   124: invokespecial zza : ()V
    //   127: iload_1
    //   128: ireturn
    //   129: astore_2
    //   130: ldc_w 'AdvertisingIdClient'
    //   133: ldc_w 'GMS remote exception '
    //   136: aload_2
    //   137: invokestatic i : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   140: pop
    //   141: new java/io/IOException
    //   144: dup
    //   145: ldc_w 'Remote exception'
    //   148: invokespecial <init> : (Ljava/lang/String;)V
    //   151: athrow
    //   152: astore_2
    //   153: aload_0
    //   154: monitorexit
    //   155: aload_2
    //   156: athrow
    // Exception table:
    //   from	to	target	type
    //   7	21	152	finally
    //   21	40	90	finally
    //   40	45	66	java/lang/Exception
    //   40	45	152	finally
    //   45	52	152	finally
    //   55	66	152	finally
    //   67	79	152	finally
    //   79	90	90	finally
    //   91	93	90	finally
    //   93	95	152	finally
    //   95	111	152	finally
    //   111	121	129	android/os/RemoteException
    //   111	121	152	finally
    //   121	123	152	finally
    //   130	152	152	finally
    //   153	155	152	finally }
  
  protected void finalize() {
    finish();
    super.finalize();
  }
  
  public final void finish() { // Byte code:
    //   0: ldc 'Calling this from your main thread can lead to deadlock'
    //   2: invokestatic checkNotMainThread : (Ljava/lang/String;)V
    //   5: aload_0
    //   6: monitorenter
    //   7: aload_0
    //   8: getfield mContext : Landroid/content/Context;
    //   11: ifnull -> 80
    //   14: aload_0
    //   15: getfield zze : Lcom/google/android/gms/common/BlockingServiceConnection;
    //   18: astore_1
    //   19: aload_1
    //   20: ifnonnull -> 26
    //   23: goto -> 80
    //   26: aload_0
    //   27: getfield zzg : Z
    //   30: ifeq -> 62
    //   33: invokestatic getInstance : ()Lcom/google/android/gms/common/stats/ConnectionTracker;
    //   36: aload_0
    //   37: getfield mContext : Landroid/content/Context;
    //   40: aload_0
    //   41: getfield zze : Lcom/google/android/gms/common/BlockingServiceConnection;
    //   44: invokevirtual unbindService : (Landroid/content/Context;Landroid/content/ServiceConnection;)V
    //   47: goto -> 62
    //   50: astore_1
    //   51: ldc_w 'AdvertisingIdClient'
    //   54: ldc_w 'AdvertisingIdClient unbindService failed.'
    //   57: aload_1
    //   58: invokestatic i : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   61: pop
    //   62: aload_0
    //   63: iconst_0
    //   64: putfield zzg : Z
    //   67: aload_0
    //   68: aconst_null
    //   69: putfield zzf : Lcom/google/android/gms/internal/ads_identifier/zze;
    //   72: aload_0
    //   73: aconst_null
    //   74: putfield zze : Lcom/google/android/gms/common/BlockingServiceConnection;
    //   77: aload_0
    //   78: monitorexit
    //   79: return
    //   80: aload_0
    //   81: monitorexit
    //   82: return
    //   83: astore_1
    //   84: aload_0
    //   85: monitorexit
    //   86: aload_1
    //   87: athrow
    // Exception table:
    //   from	to	target	type
    //   7	19	83	finally
    //   26	47	50	java/lang/Throwable
    //   26	47	83	finally
    //   51	62	83	finally
    //   62	79	83	finally
    //   80	82	83	finally
    //   84	86	83	finally }
  
  @KeepForSdk
  public Info getInfo() throws IOException { // Byte code:
    //   0: ldc 'Calling this from your main thread can lead to deadlock'
    //   2: invokestatic checkNotMainThread : (Ljava/lang/String;)V
    //   5: aload_0
    //   6: monitorenter
    //   7: aload_0
    //   8: getfield zzg : Z
    //   11: ifne -> 95
    //   14: aload_0
    //   15: getfield zzh : Ljava/lang/Object;
    //   18: astore_1
    //   19: aload_1
    //   20: monitorenter
    //   21: aload_0
    //   22: getfield zzi : Lcom/google/android/gms/ads/identifier/AdvertisingIdClient$zza;
    //   25: ifnull -> 79
    //   28: aload_0
    //   29: getfield zzi : Lcom/google/android/gms/ads/identifier/AdvertisingIdClient$zza;
    //   32: getfield zzp : Z
    //   35: ifeq -> 79
    //   38: aload_1
    //   39: monitorexit
    //   40: aload_0
    //   41: iconst_0
    //   42: invokespecial zza : (Z)V
    //   45: aload_0
    //   46: getfield zzg : Z
    //   49: ifeq -> 55
    //   52: goto -> 95
    //   55: new java/io/IOException
    //   58: dup
    //   59: ldc_w 'AdvertisingIdClient cannot reconnect.'
    //   62: invokespecial <init> : (Ljava/lang/String;)V
    //   65: athrow
    //   66: astore_1
    //   67: new java/io/IOException
    //   70: dup
    //   71: ldc_w 'AdvertisingIdClient cannot reconnect.'
    //   74: aload_1
    //   75: invokespecial <init> : (Ljava/lang/String;Ljava/lang/Throwable;)V
    //   78: athrow
    //   79: new java/io/IOException
    //   82: dup
    //   83: ldc_w 'AdvertisingIdClient is not connected.'
    //   86: invokespecial <init> : (Ljava/lang/String;)V
    //   89: athrow
    //   90: astore_2
    //   91: aload_1
    //   92: monitorexit
    //   93: aload_2
    //   94: athrow
    //   95: aload_0
    //   96: getfield zze : Lcom/google/android/gms/common/BlockingServiceConnection;
    //   99: invokestatic checkNotNull : (Ljava/lang/Object;)Ljava/lang/Object;
    //   102: pop
    //   103: aload_0
    //   104: getfield zzf : Lcom/google/android/gms/internal/ads_identifier/zze;
    //   107: invokestatic checkNotNull : (Ljava/lang/Object;)Ljava/lang/Object;
    //   110: pop
    //   111: new com/google/android/gms/ads/identifier/AdvertisingIdClient$Info
    //   114: dup
    //   115: aload_0
    //   116: getfield zzf : Lcom/google/android/gms/internal/ads_identifier/zze;
    //   119: invokeinterface getId : ()Ljava/lang/String;
    //   124: aload_0
    //   125: getfield zzf : Lcom/google/android/gms/internal/ads_identifier/zze;
    //   128: iconst_1
    //   129: invokeinterface zzb : (Z)Z
    //   134: invokespecial <init> : (Ljava/lang/String;Z)V
    //   137: astore_1
    //   138: aload_0
    //   139: monitorexit
    //   140: aload_0
    //   141: invokespecial zza : ()V
    //   144: aload_1
    //   145: areturn
    //   146: astore_1
    //   147: ldc_w 'AdvertisingIdClient'
    //   150: ldc_w 'GMS remote exception '
    //   153: aload_1
    //   154: invokestatic i : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   157: pop
    //   158: new java/io/IOException
    //   161: dup
    //   162: ldc_w 'Remote exception'
    //   165: invokespecial <init> : (Ljava/lang/String;)V
    //   168: athrow
    //   169: astore_1
    //   170: aload_0
    //   171: monitorexit
    //   172: aload_1
    //   173: athrow
    // Exception table:
    //   from	to	target	type
    //   7	21	169	finally
    //   21	40	90	finally
    //   40	45	66	java/lang/Exception
    //   40	45	169	finally
    //   45	52	169	finally
    //   55	66	169	finally
    //   67	79	169	finally
    //   79	90	90	finally
    //   91	93	90	finally
    //   93	95	169	finally
    //   95	111	169	finally
    //   111	138	146	android/os/RemoteException
    //   111	138	169	finally
    //   138	140	169	finally
    //   147	169	169	finally
    //   170	172	169	finally }
  
  @KeepForSdk
  public void start() { zza(true); }
}
