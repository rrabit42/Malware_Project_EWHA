package androidx.work.impl;

import android.arch.persistence.room.Database;
import android.arch.persistence.room.Room;
import android.arch.persistence.room.RoomDatabase;
import android.arch.persistence.room.TypeConverters;
import android.arch.persistence.room.migration.Migration;
import android.content.Context;
import android.support.annotation.RestrictTo;
import androidx.work.impl.model.DependencyDao;
import androidx.work.impl.model.SystemIdInfoDao;
import androidx.work.impl.model.WorkNameDao;
import androidx.work.impl.model.WorkSpecDao;
import androidx.work.impl.model.WorkTagDao;
import java.util.concurrent.TimeUnit;

@Database(entities = {androidx.work.impl.model.Dependency.class, androidx.work.impl.model.WorkSpec.class, androidx.work.impl.model.WorkTag.class, androidx.work.impl.model.SystemIdInfo.class, androidx.work.impl.model.WorkName.class}, version = 5)
@TypeConverters({androidx.work.Data.class, androidx.work.impl.model.WorkTypeConverters.class})
@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
public abstract class WorkDatabase extends RoomDatabase {
  private static final String CLEANUP_SQL = "UPDATE workspec SET state=0, schedule_requested_at=-1 WHERE state=1";
  
  private static final String DB_NAME = "androidx.work.workdb";
  
  private static final String PRUNE_SQL_FORMAT_PREFIX = "DELETE FROM workspec WHERE state IN (2, 3, 5) AND (period_start_time + minimum_retention_duration) < ";
  
  private static final String PRUNE_SQL_FORMAT_SUFFIX = " AND (SELECT COUNT(*)=0 FROM dependency WHERE     prerequisite_id=id AND     work_spec_id NOT IN         (SELECT id FROM workspec WHERE state IN (2, 3, 5)))";
  
  private static final long PRUNE_THRESHOLD_MILLIS = TimeUnit.DAYS.toMillis(7L);
  
  public static WorkDatabase create(Context paramContext, boolean paramBoolean) {
    RoomDatabase.Builder builder;
    if (paramBoolean) {
      builder = Room.inMemoryDatabaseBuilder(paramContext, WorkDatabase.class).allowMainThreadQueries();
    } else {
      builder = Room.databaseBuilder(paramContext, WorkDatabase.class, "androidx.work.workdb");
    } 
    return (WorkDatabase)builder.addCallback(generateCleanupCallback()).addMigrations(new Migration[] { WorkDatabaseMigrations.MIGRATION_1_2 }).addMigrations(new Migration[] { new WorkDatabaseMigrations.WorkMigration(paramContext, 2, 3) }).addMigrations(new Migration[] { WorkDatabaseMigrations.MIGRATION_3_4 }).addMigrations(new Migration[] { WorkDatabaseMigrations.MIGRATION_4_5 }).fallbackToDestructiveMigration().build();
  }
  
  static RoomDatabase.Callback generateCleanupCallback() { return new Object(); }
  
  static long getPruneDate() { return System.currentTimeMillis() - PRUNE_THRESHOLD_MILLIS; }
  
  static String getPruneSQL() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("DELETE FROM workspec WHERE state IN (2, 3, 5) AND (period_start_time + minimum_retention_duration) < ");
    stringBuilder.append(getPruneDate());
    stringBuilder.append(" AND (SELECT COUNT(*)=0 FROM dependency WHERE     prerequisite_id=id AND     work_spec_id NOT IN         (SELECT id FROM workspec WHERE state IN (2, 3, 5)))");
    return stringBuilder.toString();
  }
  
  public abstract DependencyDao dependencyDao();
  
  public abstract SystemIdInfoDao systemIdInfoDao();
  
  public abstract WorkNameDao workNameDao();
  
  public abstract WorkSpecDao workSpecDao();
  
  public abstract WorkTagDao workTagDao();
}
