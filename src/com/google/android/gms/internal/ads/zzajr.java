package com.google.android.gms.internal.ads;

import android.content.ComponentName;
import android.content.Context;
import android.content.pm.PackageManager;
import android.os.Bundle;
import com.google.android.gms.ads.internal.zzbv;
import com.google.android.gms.common.util.VisibleForTesting;
import javax.annotation.concurrent.GuardedBy;

@zzadh
public final class zzajr {
  private final Object mLock = new Object();
  
  @VisibleForTesting
  private final String zzasc;
  
  @VisibleForTesting
  private long zzcqd = -1L;
  
  @VisibleForTesting
  private long zzcqe = -1L;
  
  @VisibleForTesting
  @GuardedBy("mLock")
  private int zzcqf = -1;
  
  @VisibleForTesting
  int zzcqg = -1;
  
  @VisibleForTesting
  private long zzcqh = 0L;
  
  @VisibleForTesting
  @GuardedBy("mLock")
  private int zzcqi = 0;
  
  @VisibleForTesting
  @GuardedBy("mLock")
  private int zzcqj = 0;
  
  public zzajr(String paramString) { this.zzasc = paramString; }
  
  private static boolean zzah(Context paramContext) {
    int i = paramContext.getResources().getIdentifier("Theme.Translucent", "style", "android");
    if (i == 0) {
      zzakb.zzdj("Please set theme of AdActivity to @android:style/Theme.Translucent to enable transparent background interstitial ad.");
      return false;
    } 
    ComponentName componentName = new ComponentName(paramContext.getPackageName(), "com.google.android.gms.ads.AdActivity");
    try {
      if (i == (paramContext.getPackageManager().getActivityInfo(componentName, 0)).theme)
        return true; 
      zzakb.zzdj("Please set theme of AdActivity to @android:style/Theme.Translucent to enable transparent background interstitial ad.");
      return false;
    } catch (android.content.pm.PackageManager.NameNotFoundException paramContext) {
      zzakb.zzdk("Fail to fetch AdActivity theme");
      zzakb.zzdj("Please set theme of AdActivity to @android:style/Theme.Translucent to enable transparent background interstitial ad.");
      return false;
    } 
  }
  
  public final void zzb(zzjj paramzzjj, long paramLong) {
    synchronized (this.mLock) {
      long l3 = zzbv.zzeo().zzqh().zzrb();
      long l2 = zzbv.zzer().currentTimeMillis();
      long l1 = paramLong;
      if (this.zzcqe == -1L) {
        zzna zzna = zznk.zzayi;
        if (l2 - l3 > ((Long)zzkb.zzik().zzd(zzna)).longValue()) {
          this.zzcqg = -1;
        } else {
          this.zzcqg = zzbv.zzeo().zzqh().zzrc();
        } 
        this.zzcqe = paramLong;
        l1 = this.zzcqe;
      } 
      this.zzcqd = l1;
      if (paramzzjj != null && paramzzjj.extras != null && paramzzjj.extras.getInt("gw", 2) == 1)
        return; 
      this.zzcqf++;
      this.zzcqg++;
      if (this.zzcqg == 0) {
        this.zzcqh = 0L;
        zzbv.zzeo().zzqh().zzk(l2);
      } else {
        this.zzcqh = l2 - zzbv.zzeo().zzqh().zzrd();
      } 
      return;
    } 
  }
  
  public final Bundle zzk(Context paramContext, String paramString) {
    synchronized (this.mLock) {
      Bundle bundle = new Bundle();
      bundle.putString("session_id", this.zzasc);
      bundle.putLong("basets", this.zzcqe);
      bundle.putLong("currts", this.zzcqd);
      bundle.putString("seq_num", paramString);
      bundle.putInt("preqs", this.zzcqf);
      bundle.putInt("preqs_in_session", this.zzcqg);
      bundle.putLong("time_in_session", this.zzcqh);
      bundle.putInt("pclick", this.zzcqi);
      bundle.putInt("pimp", this.zzcqj);
      bundle.putBoolean("support_transparent_background", zzah(paramContext));
      return bundle;
    } 
  }
  
  public final void zzpm() {
    synchronized (this.mLock) {
      this.zzcqj++;
      return;
    } 
  }
  
  public final void zzpn() {
    synchronized (this.mLock) {
      this.zzcqi++;
      return;
    } 
  }
}
