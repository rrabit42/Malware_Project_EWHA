package com.google.android.gms.common.server.response;

import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.internal.ShowFirstParty;
import com.google.android.gms.common.util.Base64Utils;
import com.google.android.gms.common.util.JsonUtils;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

@KeepForSdk
@ShowFirstParty
public class FastParser<T extends FastJsonResponse> extends Object {
  private static final char[] zaqf = { 'u', 'l', 'l' };
  
  private static final char[] zaqg = { 'r', 'u', 'e' };
  
  private static final char[] zaqh = { 'r', 'u', 'e', '"' };
  
  private static final char[] zaqi = { 'a', 'l', 's', 'e' };
  
  private static final char[] zaqj = { 'a', 'l', 's', 'e', '"' };
  
  private static final char[] zaqk = { '\n' };
  
  private static final zaa<Integer> zaqm = new zaa();
  
  private static final zaa<Long> zaqn = new zab();
  
  private static final zaa<Float> zaqo = new zac();
  
  private static final zaa<Double> zaqp = new zad();
  
  private static final zaa<Boolean> zaqq = new zae();
  
  private static final zaa<String> zaqr = new zaf();
  
  private static final zaa<BigInteger> zaqs = new zag();
  
  private static final zaa<BigDecimal> zaqt = new zah();
  
  private final char[] zaqa = new char[1];
  
  private final char[] zaqb = new char[32];
  
  private final char[] zaqc = new char[1024];
  
  private final StringBuilder zaqd = new StringBuilder(32);
  
  private final StringBuilder zaqe = new StringBuilder(1024);
  
  private final Stack<Integer> zaql = new Stack();
  
  private final int zaa(BufferedReader paramBufferedReader, char[] paramArrayOfChar) throws ParseException, IOException {
    char c = zaj(paramBufferedReader);
    if (c != '\000') {
      if (c != ',') {
        byte b;
        if (c == 'n') {
          zab(paramBufferedReader, zaqf);
          return 0;
        } 
        paramBufferedReader.mark(1024);
        if (c == '"') {
          byte b1 = 0;
          boolean bool = false;
          while (true) {
            b = b1;
            if (b1 < paramArrayOfChar.length) {
              b = b1;
              if (paramBufferedReader.read(paramArrayOfChar, b1, 1) != -1) {
                c = paramArrayOfChar[b1];
                if (!Character.isISOControl(c)) {
                  if (c == '"' && !bool) {
                    paramBufferedReader.reset();
                    paramBufferedReader.skip((b1 + 1));
                    return b1;
                  } 
                  if (c == '\\') {
                    bool ^= true;
                  } else {
                    bool = false;
                  } 
                  b1++;
                  continue;
                } 
                throw new ParseException("Unexpected control character while reading string");
              } 
            } 
            break;
          } 
        } else {
          paramArrayOfChar[0] = c;
          byte b1 = 1;
          while (true) {
            b = b1;
            if (b1 < paramArrayOfChar.length) {
              b = b1;
              if (paramBufferedReader.read(paramArrayOfChar, b1, 1) != -1) {
                if (paramArrayOfChar[b1] == '}' || paramArrayOfChar[b1] == ',' || Character.isWhitespace(paramArrayOfChar[b1]) || paramArrayOfChar[b1] == ']') {
                  paramBufferedReader.reset();
                  paramBufferedReader.skip((b1 - 1));
                  paramArrayOfChar[b1] = Character.MIN_VALUE;
                  return b1;
                } 
                b1++;
                continue;
              } 
            } 
            break;
          } 
        } 
        if (b == paramArrayOfChar.length)
          throw new ParseException("Absurdly long value"); 
        throw new ParseException("Unexpected EOF");
      } 
      throw new ParseException("Missing value");
    } 
    ParseException parseException = new ParseException("Unexpected EOF");
    throw parseException;
  }
  
  private final String zaa(BufferedReader paramBufferedReader) throws ParseException, IOException {
    StringBuilder stringBuilder;
    this.zaql.push(Integer.valueOf(2));
    char c = zaj(paramBufferedReader);
    if (c != '"') {
      if (c != ']') {
        if (c == '}') {
          zak(2);
          return null;
        } 
        stringBuilder = new StringBuilder(19);
        stringBuilder.append("Unexpected token: ");
        stringBuilder.append(c);
        throw new ParseException(stringBuilder.toString());
      } 
      zak(2);
      zak(1);
      zak(5);
      return null;
    } 
    this.zaql.push(Integer.valueOf(3));
    String str = zab(stringBuilder, this.zaqb, this.zaqd, null);
    zak(3);
    if (zaj(stringBuilder) == ':')
      return str; 
    throw new ParseException("Expected key/value separator");
  }
  
  private final String zaa(BufferedReader paramBufferedReader, char[] paramArrayOfChar1, StringBuilder paramStringBuilder, char[] paramArrayOfChar2) throws ParseException, IOException {
    char c = zaj(paramBufferedReader);
    if (c != '"') {
      if (c == 'n') {
        zab(paramBufferedReader, zaqf);
        return null;
      } 
      throw new ParseException("Expected string");
    } 
    return zab(paramBufferedReader, paramArrayOfChar1, paramStringBuilder, paramArrayOfChar2);
  }
  
  private final <T extends FastJsonResponse> ArrayList<T> zaa(BufferedReader paramBufferedReader, FastJsonResponse.Field<?, ?> paramField) throws ParseException, IOException {
    ArrayList arrayList = new ArrayList();
    char c = zaj(paramBufferedReader);
    if (c != ']') {
      StringBuilder stringBuilder;
      if (c != 'n') {
        if (c == '{') {
          this.zaql.push(Integer.valueOf(1));
          try {
            while (true) {
              FastJsonResponse fastJsonResponse = paramField.zacp();
              if (zaa(paramBufferedReader, fastJsonResponse)) {
                StringBuilder stringBuilder1;
                arrayList.add(fastJsonResponse);
                c = zaj(paramBufferedReader);
                if (c != ',') {
                  if (c == ']') {
                    zak(5);
                    return arrayList;
                  } 
                  stringBuilder1 = new StringBuilder(19);
                  stringBuilder1.append("Unexpected token: ");
                  stringBuilder1.append(c);
                  throw new ParseException(stringBuilder1.toString());
                } 
                if (zaj(stringBuilder1) == '{') {
                  this.zaql.push(Integer.valueOf(1));
                  continue;
                } 
                throw new ParseException("Expected start of next object in array");
              } 
              break;
            } 
            return arrayList;
          } catch (InstantiationException paramBufferedReader) {
            throw new ParseException("Error instantiating inner object", paramBufferedReader);
          } catch (IllegalAccessException paramBufferedReader) {
            throw new ParseException("Error instantiating inner object", paramBufferedReader);
          } 
        } 
        stringBuilder = new StringBuilder(19);
        stringBuilder.append("Unexpected token: ");
        stringBuilder.append(c);
        throw new ParseException(stringBuilder.toString());
      } 
      zab(stringBuilder, zaqf);
      zak(5);
      return null;
    } 
    zak(5);
    return arrayList;
  }
  
  private final <O> ArrayList<O> zaa(BufferedReader paramBufferedReader, zaa<O> paramzaa) throws ParseException, IOException {
    char c = zaj(paramBufferedReader);
    if (c == 'n') {
      zab(paramBufferedReader, zaqf);
      return null;
    } 
    if (c == '[') {
      this.zaql.push(Integer.valueOf(5));
      ArrayList arrayList = new ArrayList();
      while (true) {
        paramBufferedReader.mark(1024);
        c = zaj(paramBufferedReader);
        if (c != '\000') {
          if (c != ',') {
            if (c != ']') {
              paramBufferedReader.reset();
              arrayList.add(paramzaa.zah(this, paramBufferedReader));
              continue;
            } 
            zak(5);
            return arrayList;
          } 
          continue;
        } 
        break;
      } 
      throw new ParseException("Unexpected EOF");
    } 
    ParseException parseException = new ParseException("Expected start of array");
    throw parseException;
  }
  
  private final boolean zaa(BufferedReader paramBufferedReader, FastJsonResponse paramFastJsonResponse) throws ParseException, IOException {
    Map map = paramFastJsonResponse.getFieldMappings();
    String str = zaa(paramBufferedReader);
    Integer integer = Integer.valueOf(1);
    if (str == null) {
      zak(1);
      return false;
    } 
    while (str != null) {
      int i;
      StringBuilder stringBuilder;
      FastJsonResponse.Field field = (FastJsonResponse.Field)map.get(str);
      if (field == null) {
        str = zab(paramBufferedReader);
        continue;
      } 
      this.zaql.push(Integer.valueOf(4));
      switch (field.zapq) {
        default:
          i = field.zapq;
          stringBuilder = new StringBuilder(30);
          stringBuilder.append("Invalid field type ");
          stringBuilder.append(i);
          throw new ParseException(stringBuilder.toString());
        case 11:
          if (field.zapr) {
            i = zaj(stringBuilder);
            if (i == 110) {
              zab(stringBuilder, zaqf);
              paramFastJsonResponse.addConcreteTypeArrayInternal(field, field.zapu, null);
              continue;
            } 
            this.zaql.push(Integer.valueOf(5));
            if (i == 91) {
              paramFastJsonResponse.addConcreteTypeArrayInternal(field, field.zapu, zaa(stringBuilder, field));
              continue;
            } 
            throw new ParseException("Expected array start");
          } 
          i = zaj(stringBuilder);
          if (i == 110) {
            zab(stringBuilder, zaqf);
            paramFastJsonResponse.addConcreteTypeInternal(field, field.zapu, null);
            continue;
          } 
          this.zaql.push(integer);
          if (i == 123)
            try {
              FastJsonResponse fastJsonResponse = field.zacp();
              zaa(stringBuilder, fastJsonResponse);
              paramFastJsonResponse.addConcreteTypeInternal(field, field.zapu, fastJsonResponse);
              continue;
            } catch (InstantiationException null) {
              throw new ParseException("Error instantiating inner object", stringBuilder);
            } catch (IllegalAccessException null) {
              throw new ParseException("Error instantiating inner object", stringBuilder);
            }  
          throw new ParseException("Expected start of object");
        case 10:
          i = zaj(stringBuilder);
          if (i == 110) {
            zab(stringBuilder, zaqf);
            str = null;
            continue;
          } 
          if (i == 123) {
            this.zaql.push(integer);
            HashMap hashMap = new HashMap();
            while (true) {
              i = zaj(stringBuilder);
              if (i != 0) {
                if (i != 34) {
                  if (i != 125)
                    continue; 
                  zak(1);
                } else {
                  String str1 = zab(stringBuilder, this.zaqb, this.zaqd, null);
                  if (zaj(stringBuilder) != ':') {
                    stringBuilder = String.valueOf(str1);
                    if (stringBuilder.length() != 0) {
                      stringBuilder = "No map value found for key ".concat(stringBuilder);
                    } else {
                      stringBuilder = new String("No map value found for key ");
                    } 
                    throw new ParseException(stringBuilder);
                  } 
                  if (zaj(stringBuilder) != '"') {
                    stringBuilder = String.valueOf(str1);
                    if (stringBuilder.length() != 0) {
                      stringBuilder = "Expected String value for key ".concat(stringBuilder);
                    } else {
                      stringBuilder = new String("Expected String value for key ");
                    } 
                    throw new ParseException(stringBuilder);
                  } 
                  hashMap.put(str1, zab(stringBuilder, this.zaqb, this.zaqd, null));
                  char c1 = zaj(stringBuilder);
                  if (c1 != ',') {
                    if (c1 == '}') {
                      zak(1);
                    } else {
                      stringBuilder = new StringBuilder(48);
                      stringBuilder.append("Unexpected character while parsing string map: ");
                      stringBuilder.append(c1);
                      throw new ParseException(stringBuilder.toString());
                    } 
                  } else {
                    continue;
                  } 
                } 
                paramFastJsonResponse.zaa(field, hashMap);
              } else {
                throw new ParseException("Unexpected EOF");
              } 
              zak(4);
              zak(2);
              char c = zaj(stringBuilder);
              if (c != ',') {
                if (c == '}') {
                  hashMap = null;
                  continue;
                } 
                stringBuilder = new StringBuilder(55);
                stringBuilder.append("Expected end of object or field separator, but found: ");
                stringBuilder.append(c);
                throw new ParseException(stringBuilder.toString());
              } 
              break;
            } 
            break;
          } 
          throw new ParseException("Expected start of a map object");
        case 9:
          paramFastJsonResponse.zaa(field, Base64Utils.decodeUrlSafe(zaa(stringBuilder, this.zaqc, this.zaqe, zaqk)));
          continue;
        case 8:
          paramFastJsonResponse.zaa(field, Base64Utils.decode(zaa(stringBuilder, this.zaqc, this.zaqe, zaqk)));
          continue;
        case 7:
          if (field.zapr) {
            paramFastJsonResponse.zah(field, zaa(stringBuilder, zaqr));
            continue;
          } 
          paramFastJsonResponse.zaa(field, zac(stringBuilder));
          continue;
        case 6:
          if (field.zapr) {
            paramFastJsonResponse.zag(field, zaa(stringBuilder, zaqq));
            continue;
          } 
          paramFastJsonResponse.zaa(field, zaa(stringBuilder, false));
          continue;
        case 5:
          if (field.zapr) {
            paramFastJsonResponse.zaf(field, zaa(stringBuilder, zaqt));
            continue;
          } 
          paramFastJsonResponse.zaa(field, zai(stringBuilder));
          continue;
        case 4:
          if (field.zapr) {
            paramFastJsonResponse.zae(field, zaa(stringBuilder, zaqp));
            continue;
          } 
          paramFastJsonResponse.zaa(field, zah(stringBuilder));
          continue;
        case 3:
          if (field.zapr) {
            paramFastJsonResponse.zad(field, zaa(stringBuilder, zaqo));
            continue;
          } 
          paramFastJsonResponse.zaa(field, zag(stringBuilder));
          continue;
        case 2:
          if (field.zapr) {
            paramFastJsonResponse.zac(field, zaa(stringBuilder, zaqn));
            continue;
          } 
          paramFastJsonResponse.zaa(field, zae(stringBuilder));
          continue;
        case 1:
          if (field.zapr) {
            paramFastJsonResponse.zab(field, zaa(stringBuilder, zaqs));
            continue;
          } 
          paramFastJsonResponse.zaa(field, zaf(stringBuilder));
          continue;
        case 0:
          if (field.zapr) {
            paramFastJsonResponse.zaa(field, zaa(stringBuilder, zaqm));
            continue;
          } 
          paramFastJsonResponse.zaa(field, zad(stringBuilder));
          continue;
      } 
      str = zaa(stringBuilder);
    } 
    zak(1);
    return true;
  }
  
  private final boolean zaa(BufferedReader paramBufferedReader, boolean paramBoolean) throws ParseException, IOException {
    while (true) {
      char c = zaj(paramBufferedReader);
      if (c != '"') {
        char[] arrayOfChar;
        StringBuilder stringBuilder;
        if (c != 'f') {
          if (c != 'n') {
            if (c == 't') {
              if (paramBoolean) {
                arrayOfChar = zaqh;
              } else {
                arrayOfChar = zaqg;
              } 
              zab(paramBufferedReader, arrayOfChar);
              return true;
            } 
            stringBuilder = new StringBuilder(19);
            stringBuilder.append("Unexpected token: ");
            stringBuilder.append(c);
            throw new ParseException(stringBuilder.toString());
          } 
          zab(stringBuilder, zaqf);
          return false;
        } 
        if (paramBoolean) {
          arrayOfChar = zaqj;
        } else {
          arrayOfChar = zaqi;
        } 
        zab(stringBuilder, arrayOfChar);
        return false;
      } 
      if (!paramBoolean) {
        paramBoolean = true;
        continue;
      } 
      break;
    } 
    ParseException parseException = new ParseException("No boolean value found in string");
    throw parseException;
  }
  
  private final String zab(BufferedReader paramBufferedReader) throws ParseException, IOException { // Byte code:
    //   0: aload_1
    //   1: sipush #1024
    //   4: invokevirtual mark : (I)V
    //   7: aload_0
    //   8: aload_1
    //   9: invokespecial zaj : (Ljava/io/BufferedReader;)C
    //   12: istore_3
    //   13: iload_3
    //   14: bipush #34
    //   16: if_icmpeq -> 375
    //   19: iload_3
    //   20: bipush #44
    //   22: if_icmpeq -> 365
    //   25: iconst_1
    //   26: istore #4
    //   28: iload_3
    //   29: bipush #91
    //   31: if_icmpeq -> 163
    //   34: iload_3
    //   35: bipush #123
    //   37: if_icmpeq -> 57
    //   40: aload_1
    //   41: invokevirtual reset : ()V
    //   44: aload_0
    //   45: aload_1
    //   46: aload_0
    //   47: getfield zaqc : [C
    //   50: invokespecial zaa : (Ljava/io/BufferedReader;[C)I
    //   53: pop
    //   54: goto -> 411
    //   57: aload_0
    //   58: getfield zaql : Ljava/util/Stack;
    //   61: iconst_1
    //   62: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   65: invokevirtual push : (Ljava/lang/Object;)Ljava/lang/Object;
    //   68: pop
    //   69: aload_1
    //   70: bipush #32
    //   72: invokevirtual mark : (I)V
    //   75: aload_0
    //   76: aload_1
    //   77: invokespecial zaj : (Ljava/io/BufferedReader;)C
    //   80: istore_2
    //   81: iload_2
    //   82: bipush #125
    //   84: if_icmpne -> 95
    //   87: aload_0
    //   88: iconst_1
    //   89: invokespecial zak : (I)V
    //   92: goto -> 411
    //   95: iload_2
    //   96: bipush #34
    //   98: if_icmpne -> 127
    //   101: aload_1
    //   102: invokevirtual reset : ()V
    //   105: aload_0
    //   106: aload_1
    //   107: invokespecial zaa : (Ljava/io/BufferedReader;)Ljava/lang/String;
    //   110: pop
    //   111: aload_0
    //   112: aload_1
    //   113: invokespecial zab : (Ljava/io/BufferedReader;)Ljava/lang/String;
    //   116: ifnonnull -> 111
    //   119: aload_0
    //   120: iconst_1
    //   121: invokespecial zak : (I)V
    //   124: goto -> 411
    //   127: new java/lang/StringBuilder
    //   130: dup
    //   131: bipush #18
    //   133: invokespecial <init> : (I)V
    //   136: astore_1
    //   137: aload_1
    //   138: ldc_w 'Unexpected token '
    //   141: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   144: pop
    //   145: aload_1
    //   146: iload_2
    //   147: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   150: pop
    //   151: new com/google/android/gms/common/server/response/FastParser$ParseException
    //   154: dup
    //   155: aload_1
    //   156: invokevirtual toString : ()Ljava/lang/String;
    //   159: invokespecial <init> : (Ljava/lang/String;)V
    //   162: athrow
    //   163: aload_0
    //   164: getfield zaql : Ljava/util/Stack;
    //   167: iconst_5
    //   168: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   171: invokevirtual push : (Ljava/lang/Object;)Ljava/lang/Object;
    //   174: pop
    //   175: aload_1
    //   176: bipush #32
    //   178: invokevirtual mark : (I)V
    //   181: aload_0
    //   182: aload_1
    //   183: invokespecial zaj : (Ljava/io/BufferedReader;)C
    //   186: bipush #93
    //   188: if_icmpne -> 199
    //   191: aload_0
    //   192: iconst_5
    //   193: invokespecial zak : (I)V
    //   196: goto -> 411
    //   199: aload_1
    //   200: invokevirtual reset : ()V
    //   203: iconst_0
    //   204: istore_3
    //   205: iconst_0
    //   206: istore #5
    //   208: iload #4
    //   210: ifle -> 357
    //   213: aload_0
    //   214: aload_1
    //   215: invokespecial zaj : (Ljava/io/BufferedReader;)C
    //   218: istore_2
    //   219: iload_2
    //   220: ifeq -> 346
    //   223: iload_2
    //   224: invokestatic isISOControl : (C)Z
    //   227: ifne -> 335
    //   230: iload #5
    //   232: istore #6
    //   234: iload_2
    //   235: bipush #34
    //   237: if_icmpne -> 254
    //   240: iload #5
    //   242: istore #6
    //   244: iload_3
    //   245: ifne -> 254
    //   248: iload #5
    //   250: iconst_1
    //   251: ixor
    //   252: istore #6
    //   254: iload #4
    //   256: istore #5
    //   258: iload_2
    //   259: bipush #91
    //   261: if_icmpne -> 279
    //   264: iload #4
    //   266: istore #5
    //   268: iload #6
    //   270: ifne -> 279
    //   273: iload #4
    //   275: iconst_1
    //   276: iadd
    //   277: istore #5
    //   279: iload #5
    //   281: istore #4
    //   283: iload_2
    //   284: bipush #93
    //   286: if_icmpne -> 304
    //   289: iload #5
    //   291: istore #4
    //   293: iload #6
    //   295: ifne -> 304
    //   298: iload #5
    //   300: iconst_1
    //   301: isub
    //   302: istore #4
    //   304: iload_2
    //   305: bipush #92
    //   307: if_icmpne -> 326
    //   310: iload #6
    //   312: ifeq -> 326
    //   315: iload_3
    //   316: iconst_1
    //   317: ixor
    //   318: istore_3
    //   319: iload #6
    //   321: istore #5
    //   323: goto -> 208
    //   326: iconst_0
    //   327: istore_3
    //   328: iload #6
    //   330: istore #5
    //   332: goto -> 208
    //   335: new com/google/android/gms/common/server/response/FastParser$ParseException
    //   338: dup
    //   339: ldc_w 'Unexpected control character while reading array'
    //   342: invokespecial <init> : (Ljava/lang/String;)V
    //   345: athrow
    //   346: new com/google/android/gms/common/server/response/FastParser$ParseException
    //   349: dup
    //   350: ldc_w 'Unexpected EOF while parsing array'
    //   353: invokespecial <init> : (Ljava/lang/String;)V
    //   356: athrow
    //   357: aload_0
    //   358: iconst_5
    //   359: invokespecial zak : (I)V
    //   362: goto -> 411
    //   365: new com/google/android/gms/common/server/response/FastParser$ParseException
    //   368: dup
    //   369: ldc 'Missing value'
    //   371: invokespecial <init> : (Ljava/lang/String;)V
    //   374: athrow
    //   375: aload_1
    //   376: aload_0
    //   377: getfield zaqa : [C
    //   380: invokevirtual read : ([C)I
    //   383: iconst_m1
    //   384: if_icmpeq -> 552
    //   387: aload_0
    //   388: getfield zaqa : [C
    //   391: iconst_0
    //   392: caload
    //   393: istore #4
    //   395: iconst_0
    //   396: istore_3
    //   397: iload #4
    //   399: bipush #34
    //   401: if_icmpne -> 483
    //   404: iload_3
    //   405: ifeq -> 411
    //   408: goto -> 483
    //   411: aload_0
    //   412: aload_1
    //   413: invokespecial zaj : (Ljava/io/BufferedReader;)C
    //   416: istore_2
    //   417: iload_2
    //   418: bipush #44
    //   420: if_icmpeq -> 472
    //   423: iload_2
    //   424: bipush #125
    //   426: if_icmpne -> 436
    //   429: aload_0
    //   430: iconst_2
    //   431: invokespecial zak : (I)V
    //   434: aconst_null
    //   435: areturn
    //   436: new java/lang/StringBuilder
    //   439: dup
    //   440: bipush #18
    //   442: invokespecial <init> : (I)V
    //   445: astore_1
    //   446: aload_1
    //   447: ldc_w 'Unexpected token '
    //   450: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   453: pop
    //   454: aload_1
    //   455: iload_2
    //   456: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   459: pop
    //   460: new com/google/android/gms/common/server/response/FastParser$ParseException
    //   463: dup
    //   464: aload_1
    //   465: invokevirtual toString : ()Ljava/lang/String;
    //   468: invokespecial <init> : (Ljava/lang/String;)V
    //   471: athrow
    //   472: aload_0
    //   473: iconst_2
    //   474: invokespecial zak : (I)V
    //   477: aload_0
    //   478: aload_1
    //   479: invokespecial zaa : (Ljava/io/BufferedReader;)Ljava/lang/String;
    //   482: areturn
    //   483: iload #4
    //   485: bipush #92
    //   487: if_icmpne -> 497
    //   490: iload_3
    //   491: iconst_1
    //   492: ixor
    //   493: istore_3
    //   494: goto -> 499
    //   497: iconst_0
    //   498: istore_3
    //   499: aload_1
    //   500: aload_0
    //   501: getfield zaqa : [C
    //   504: invokevirtual read : ([C)I
    //   507: iconst_m1
    //   508: if_icmpeq -> 541
    //   511: aload_0
    //   512: getfield zaqa : [C
    //   515: iconst_0
    //   516: caload
    //   517: istore_2
    //   518: iload_2
    //   519: invokestatic isISOControl : (C)Z
    //   522: ifne -> 531
    //   525: iload_2
    //   526: istore #4
    //   528: goto -> 397
    //   531: new com/google/android/gms/common/server/response/FastParser$ParseException
    //   534: dup
    //   535: ldc 'Unexpected control character while reading string'
    //   537: invokespecial <init> : (Ljava/lang/String;)V
    //   540: athrow
    //   541: new com/google/android/gms/common/server/response/FastParser$ParseException
    //   544: dup
    //   545: ldc_w 'Unexpected EOF while parsing string'
    //   548: invokespecial <init> : (Ljava/lang/String;)V
    //   551: athrow
    //   552: new com/google/android/gms/common/server/response/FastParser$ParseException
    //   555: dup
    //   556: ldc_w 'Unexpected EOF while parsing string'
    //   559: invokespecial <init> : (Ljava/lang/String;)V
    //   562: astore_1
    //   563: goto -> 568
    //   566: aload_1
    //   567: athrow
    //   568: goto -> 566 }
  
  private static String zab(BufferedReader paramBufferedReader, char[] paramArrayOfChar1, StringBuilder paramStringBuilder, char[] paramArrayOfChar2) throws ParseException, IOException {
    paramStringBuilder.setLength(0);
    paramBufferedReader.mark(paramArrayOfChar1.length);
    byte b1 = 0;
    byte b2 = 0;
    while (true) {
      int i = paramBufferedReader.read(paramArrayOfChar1);
      if (i != -1) {
        byte b3 = b1;
        byte b4 = 0;
        b1 = b2;
        b2 = b3;
        label40: for (b3 = b4; b3 < i; b3++) {
          char c = paramArrayOfChar1[b3];
          if (Character.isISOControl(c)) {
            if (paramArrayOfChar2 != null)
              for (b4 = 0; b4 < paramArrayOfChar2.length; b4++) {
                if (paramArrayOfChar2[b4] == c) {
                  b4 = 1;
                  continue label40;
                } 
              }  
            b4 = 0;
            if (b4 == 0)
              throw new ParseException("Unexpected control character while reading string"); 
          } 
          if (c == '"' && b2 == 0) {
            paramStringBuilder.append(paramArrayOfChar1, 0, b3);
            paramBufferedReader.reset();
            paramBufferedReader.skip((b3 + 1));
            return (b1 != 0) ? JsonUtils.unescapeString(paramStringBuilder.toString()) : paramStringBuilder.toString();
          } 
          if (c == '\\') {
            b2 ^= 0x1;
            b1 = 1;
          } else {
            b2 = 0;
          } 
        } 
        paramStringBuilder.append(paramArrayOfChar1, 0, i);
        paramBufferedReader.mark(paramArrayOfChar1.length);
        b3 = b1;
        b1 = b2;
        b2 = b3;
        continue;
      } 
      break;
    } 
    ParseException parseException = new ParseException("Unexpected EOF while parsing string");
    throw parseException;
  }
  
  private final void zab(BufferedReader paramBufferedReader, char[] paramArrayOfChar) throws ParseException, IOException {
    int i = 0;
    while (i < paramArrayOfChar.length) {
      int j = paramBufferedReader.read(this.zaqb, 0, paramArrayOfChar.length - i);
      if (j != -1) {
        int k = 0;
        while (k < j) {
          if (paramArrayOfChar[k + i] == this.zaqb[k]) {
            k++;
            continue;
          } 
          throw new ParseException("Unexpected character");
        } 
        i += j;
        continue;
      } 
      throw new ParseException("Unexpected EOF");
    } 
  }
  
  private final String zac(BufferedReader paramBufferedReader) throws ParseException, IOException { return zaa(paramBufferedReader, this.zaqb, this.zaqd, null); }
  
  private final int zad(BufferedReader paramBufferedReader) throws ParseException, IOException {
    int i = zaa(paramBufferedReader, this.zaqc);
    if (i == 0)
      return 0; 
    char[] arrayOfChar = this.zaqc;
    if (i > 0) {
      int m;
      boolean bool;
      int k;
      int j;
      if (arrayOfChar[0] == '-') {
        j = 1;
        bool = true;
        m = Integer.MIN_VALUE;
      } else {
        j = 0;
        bool = false;
        m = -2147483647;
      } 
      if (j < i) {
        k = j + true;
        j = Character.digit(arrayOfChar[j], 10);
        if (j >= 0) {
          int n = -j;
          j = k;
          k = n;
        } else {
          throw new ParseException("Unexpected non-digit character");
        } 
      } else {
        k = 0;
      } 
      while (j < i) {
        int n = Character.digit(arrayOfChar[j], 10);
        if (n >= 0) {
          if (k >= -214748364) {
            k *= 10;
            if (k >= m + n) {
              k -= n;
              j++;
              continue;
            } 
            throw new ParseException("Number too large");
          } 
          throw new ParseException("Number too large");
        } 
        throw new ParseException("Unexpected non-digit character");
      } 
      if (bool) {
        if (j > 1)
          return k; 
        throw new ParseException("No digits to parse");
      } 
      return -k;
    } 
    ParseException parseException = new ParseException("No number to parse");
    throw parseException;
  }
  
  private final long zae(BufferedReader paramBufferedReader) throws ParseException, IOException {
    int i = zaa(paramBufferedReader, this.zaqc);
    if (i == 0)
      return 0L; 
    char[] arrayOfChar = this.zaqc;
    if (i > 0) {
      long l2;
      long l1;
      boolean bool;
      int j = 0;
      if (arrayOfChar[0] == '-') {
        l2 = Float.MIN_VALUE;
        j = 1;
        bool = true;
      } else {
        l2 = -9223372036854775807L;
        bool = false;
      } 
      if (j < i) {
        int k = j + true;
        j = Character.digit(arrayOfChar[j], 10);
        if (j >= 0) {
          l1 = -j;
          j = k;
        } else {
          throw new ParseException("Unexpected non-digit character");
        } 
      } else {
        l1 = 0L;
      } 
      while (j < i) {
        int k = Character.digit(arrayOfChar[j], 10);
        if (k >= 0) {
          if (l1 >= -922337203685477580L) {
            l1 *= 10L;
            long l = k;
            if (l1 >= l2 + l) {
              l1 -= l;
              j++;
              continue;
            } 
            throw new ParseException("Number too large");
          } 
          throw new ParseException("Number too large");
        } 
        throw new ParseException("Unexpected non-digit character");
      } 
      if (bool) {
        if (j > 1)
          return l1; 
        throw new ParseException("No digits to parse");
      } 
      return -l1;
    } 
    ParseException parseException = new ParseException("No number to parse");
    throw parseException;
  }
  
  private final BigInteger zaf(BufferedReader paramBufferedReader) throws ParseException, IOException {
    int i = zaa(paramBufferedReader, this.zaqc);
    return (i == 0) ? null : new BigInteger(new String(this.zaqc, 0, i));
  }
  
  private final float zag(BufferedReader paramBufferedReader) throws ParseException, IOException {
    int i = zaa(paramBufferedReader, this.zaqc);
    return (i == 0) ? 0.0F : Float.parseFloat(new String(this.zaqc, 0, i));
  }
  
  private final double zah(BufferedReader paramBufferedReader) throws ParseException, IOException {
    int i = zaa(paramBufferedReader, this.zaqc);
    return (i == 0) ? 0.0D : Double.parseDouble(new String(this.zaqc, 0, i));
  }
  
  private final BigDecimal zai(BufferedReader paramBufferedReader) throws ParseException, IOException {
    int i = zaa(paramBufferedReader, this.zaqc);
    return (i == 0) ? null : new BigDecimal(new String(this.zaqc, 0, i));
  }
  
  private final char zaj(BufferedReader paramBufferedReader) throws ParseException, IOException {
    if (paramBufferedReader.read(this.zaqa) == -1)
      return Character.MIN_VALUE; 
    while (Character.isWhitespace(this.zaqa[0])) {
      if (paramBufferedReader.read(this.zaqa) == -1)
        return Character.MIN_VALUE; 
    } 
    return this.zaqa[0];
  }
  
  private final void zak(int paramInt) throws ParseException {
    if (!this.zaql.isEmpty()) {
      int i = ((Integer)this.zaql.pop()).intValue();
      if (i == paramInt)
        return; 
      StringBuilder stringBuilder1 = new StringBuilder(46);
      stringBuilder1.append("Expected state ");
      stringBuilder1.append(paramInt);
      stringBuilder1.append(" but had ");
      stringBuilder1.append(i);
      throw new ParseException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder(46);
    stringBuilder.append("Expected state ");
    stringBuilder.append(paramInt);
    stringBuilder.append(" but had empty stack");
    throw new ParseException(stringBuilder.toString());
  }
  
  @KeepForSdk
  public void parse(InputStream paramInputStream, T paramT) throws ParseException { // Byte code:
    //   0: new java/io/BufferedReader
    //   3: dup
    //   4: new java/io/InputStreamReader
    //   7: dup
    //   8: aload_1
    //   9: invokespecial <init> : (Ljava/io/InputStream;)V
    //   12: sipush #1024
    //   15: invokespecial <init> : (Ljava/io/Reader;I)V
    //   18: astore_1
    //   19: aload_0
    //   20: getfield zaql : Ljava/util/Stack;
    //   23: iconst_0
    //   24: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   27: invokevirtual push : (Ljava/lang/Object;)Ljava/lang/Object;
    //   30: pop
    //   31: aload_0
    //   32: aload_1
    //   33: invokespecial zaj : (Ljava/io/BufferedReader;)C
    //   36: istore_3
    //   37: iload_3
    //   38: ifeq -> 223
    //   41: iload_3
    //   42: bipush #91
    //   44: if_icmpeq -> 110
    //   47: iload_3
    //   48: bipush #123
    //   50: if_icmpne -> 75
    //   53: aload_0
    //   54: getfield zaql : Ljava/util/Stack;
    //   57: iconst_1
    //   58: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   61: invokevirtual push : (Ljava/lang/Object;)Ljava/lang/Object;
    //   64: pop
    //   65: aload_0
    //   66: aload_1
    //   67: aload_2
    //   68: invokespecial zaa : (Ljava/io/BufferedReader;Lcom/google/android/gms/common/server/response/FastJsonResponse;)Z
    //   71: pop
    //   72: goto -> 191
    //   75: new java/lang/StringBuilder
    //   78: dup
    //   79: bipush #19
    //   81: invokespecial <init> : (I)V
    //   84: astore_2
    //   85: aload_2
    //   86: ldc 'Unexpected token: '
    //   88: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   91: pop
    //   92: aload_2
    //   93: iload_3
    //   94: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   97: pop
    //   98: new com/google/android/gms/common/server/response/FastParser$ParseException
    //   101: dup
    //   102: aload_2
    //   103: invokevirtual toString : ()Ljava/lang/String;
    //   106: invokespecial <init> : (Ljava/lang/String;)V
    //   109: athrow
    //   110: aload_0
    //   111: getfield zaql : Ljava/util/Stack;
    //   114: iconst_5
    //   115: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   118: invokevirtual push : (Ljava/lang/Object;)Ljava/lang/Object;
    //   121: pop
    //   122: aload_2
    //   123: invokevirtual getFieldMappings : ()Ljava/util/Map;
    //   126: astore #4
    //   128: aload #4
    //   130: invokeinterface size : ()I
    //   135: iconst_1
    //   136: if_icmpne -> 212
    //   139: aload #4
    //   141: invokeinterface entrySet : ()Ljava/util/Set;
    //   146: invokeinterface iterator : ()Ljava/util/Iterator;
    //   151: invokeinterface next : ()Ljava/lang/Object;
    //   156: checkcast java/util/Map$Entry
    //   159: invokeinterface getValue : ()Ljava/lang/Object;
    //   164: checkcast com/google/android/gms/common/server/response/FastJsonResponse$Field
    //   167: astore #4
    //   169: aload_0
    //   170: aload_1
    //   171: aload #4
    //   173: invokespecial zaa : (Ljava/io/BufferedReader;Lcom/google/android/gms/common/server/response/FastJsonResponse$Field;)Ljava/util/ArrayList;
    //   176: astore #5
    //   178: aload_2
    //   179: aload #4
    //   181: aload #4
    //   183: getfield zapu : Ljava/lang/String;
    //   186: aload #5
    //   188: invokevirtual addConcreteTypeArrayInternal : (Lcom/google/android/gms/common/server/response/FastJsonResponse$Field;Ljava/lang/String;Ljava/util/ArrayList;)V
    //   191: aload_0
    //   192: iconst_0
    //   193: invokespecial zak : (I)V
    //   196: aload_1
    //   197: invokevirtual close : ()V
    //   200: return
    //   201: ldc_w 'FastParser'
    //   204: ldc_w 'Failed to close reader while parsing.'
    //   207: invokestatic w : (Ljava/lang/String;Ljava/lang/String;)I
    //   210: pop
    //   211: return
    //   212: new com/google/android/gms/common/server/response/FastParser$ParseException
    //   215: dup
    //   216: ldc_w 'Object array response class must have a single Field'
    //   219: invokespecial <init> : (Ljava/lang/String;)V
    //   222: athrow
    //   223: new com/google/android/gms/common/server/response/FastParser$ParseException
    //   226: dup
    //   227: ldc_w 'No data to parse'
    //   230: invokespecial <init> : (Ljava/lang/String;)V
    //   233: athrow
    //   234: astore_2
    //   235: goto -> 248
    //   238: astore_2
    //   239: new com/google/android/gms/common/server/response/FastParser$ParseException
    //   242: dup
    //   243: aload_2
    //   244: invokespecial <init> : (Ljava/lang/Throwable;)V
    //   247: athrow
    //   248: aload_1
    //   249: invokevirtual close : ()V
    //   252: goto -> 265
    //   255: ldc_w 'FastParser'
    //   258: ldc_w 'Failed to close reader while parsing.'
    //   261: invokestatic w : (Ljava/lang/String;Ljava/lang/String;)I
    //   264: pop
    //   265: aload_2
    //   266: athrow
    //   267: astore_1
    //   268: goto -> 201
    //   271: astore_1
    //   272: goto -> 255
    // Exception table:
    //   from	to	target	type
    //   19	37	238	java/io/IOException
    //   19	37	234	finally
    //   53	72	238	java/io/IOException
    //   53	72	234	finally
    //   75	110	238	java/io/IOException
    //   75	110	234	finally
    //   110	191	238	java/io/IOException
    //   110	191	234	finally
    //   191	196	238	java/io/IOException
    //   191	196	234	finally
    //   196	200	267	java/io/IOException
    //   212	223	238	java/io/IOException
    //   212	223	234	finally
    //   223	234	238	java/io/IOException
    //   223	234	234	finally
    //   239	248	234	finally
    //   248	252	271	java/io/IOException }
}
