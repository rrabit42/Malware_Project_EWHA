package android.support.design.chip;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.Canvas;
import android.graphics.PorterDuff;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.RippleDrawable;
import android.os.Build;
import android.support.annotation.AnimatorRes;
import android.support.annotation.BoolRes;
import android.support.annotation.CallSuper;
import android.support.annotation.ColorRes;
import android.support.annotation.DimenRes;
import android.support.annotation.DrawableRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.Px;
import android.support.annotation.StringRes;
import android.support.annotation.StyleRes;
import android.support.design.R;
import android.support.design.animation.MotionSpec;
import android.support.design.internal.ViewUtils;
import android.support.design.resources.TextAppearance;
import android.support.design.ripple.RippleUtils;
import android.support.v4.content.res.ResourcesCompat;
import android.support.v4.text.BidiFormatter;
import android.support.v4.view.ViewCompat;
import android.support.v7.widget.AppCompatCheckBox;
import android.text.TextPaint;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.PointerIcon;
import android.view.View;
import android.view.ViewParent;
import android.widget.CompoundButton;
import android.widget.TextView;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class Chip extends AppCompatCheckBox implements ChipDrawable.Delegate {
  private static final int CLOSE_ICON_VIRTUAL_ID = 0;
  
  private static final Rect EMPTY_BOUNDS = new Rect();
  
  private static final String NAMESPACE_ANDROID = "http://schemas.android.com/apk/res/android";
  
  private static final int[] SELECTED_STATE = { 16842913 };
  
  private static final String TAG = "Chip";
  
  @Nullable
  private ChipDrawable chipDrawable;
  
  private boolean closeIconFocused;
  
  private boolean closeIconHovered;
  
  private boolean closeIconPressed;
  
  private boolean deferredCheckedValue;
  
  private int focusedVirtualView = Integer.MIN_VALUE;
  
  private final ResourcesCompat.FontCallback fontCallback = new Object(this);
  
  @Nullable
  private CompoundButton.OnCheckedChangeListener onCheckedChangeListenerInternal;
  
  @Nullable
  private View.OnClickListener onCloseIconClickListener;
  
  private final Rect rect = new Rect();
  
  private final RectF rectF = new RectF();
  
  @Nullable
  private RippleDrawable ripple;
  
  private final ChipTouchHelper touchHelper;
  
  public Chip(Context paramContext) { this(paramContext, null); }
  
  public Chip(Context paramContext, AttributeSet paramAttributeSet) { this(paramContext, paramAttributeSet, R.attr.chipStyle); }
  
  public Chip(Context paramContext, AttributeSet paramAttributeSet, int paramInt) {
    super(paramContext, paramAttributeSet, paramInt);
    validateAttributes(paramAttributeSet);
    ChipDrawable chipDrawable1 = ChipDrawable.createFromAttributes(paramContext, paramAttributeSet, paramInt, R.style.Widget_MaterialComponents_Chip_Action);
    setChipDrawable(chipDrawable1);
    this.touchHelper = new ChipTouchHelper(this, this);
    ViewCompat.setAccessibilityDelegate(this, this.touchHelper);
    initOutlineProvider();
    setChecked(this.deferredCheckedValue);
    chipDrawable1.setShouldDrawText(false);
    setText(chipDrawable1.getText());
    setEllipsize(chipDrawable1.getEllipsize());
    setIncludeFontPadding(false);
    if (getTextAppearance() != null)
      updateTextPaintDrawState(getTextAppearance()); 
    setSingleLine();
    setGravity(8388627);
    updatePaddingInternal();
  }
  
  private void applyChipDrawable(@NonNull ChipDrawable paramChipDrawable) { paramChipDrawable.setDelegate(this); }
  
  private float calculateTextOffsetFromStart(@NonNull ChipDrawable paramChipDrawable) {
    float f = getChipStartPadding() + paramChipDrawable.calculateChipIconWidth() + getTextStartPadding();
    return (ViewCompat.getLayoutDirection(this) == 0) ? f : -f;
  }
  
  private int[] createCloseIconDrawableState() {
    boolean bool = isEnabled();
    byte b3 = 0;
    if (bool) {
      b2 = 1;
    } else {
      b2 = 0;
    } 
    byte b1 = b2;
    if (this.closeIconFocused)
      b1 = b2 + true; 
    byte b2 = b1;
    if (this.closeIconHovered)
      b2 = b1 + 1; 
    b1 = b2;
    if (this.closeIconPressed)
      b1 = b2 + 1; 
    b2 = b1;
    if (isChecked())
      b2 = b1 + 1; 
    int[] arrayOfInt = new int[b2];
    b2 = b3;
    if (isEnabled()) {
      arrayOfInt[0] = 16842910;
      b2 = 1;
    } 
    b1 = b2;
    if (this.closeIconFocused) {
      arrayOfInt[b2] = 16842908;
      b1 = b2 + 1;
    } 
    b2 = b1;
    if (this.closeIconHovered) {
      arrayOfInt[b1] = 16843623;
      b2 = b1 + 1;
    } 
    b1 = b2;
    if (this.closeIconPressed) {
      arrayOfInt[b2] = 16842919;
      b1 = b2 + 1;
    } 
    if (isChecked())
      arrayOfInt[b1] = 16842913; 
    return arrayOfInt;
  }
  
  private void ensureFocus() {
    if (this.focusedVirtualView == Integer.MIN_VALUE)
      setFocusedVirtualView(-1); 
  }
  
  private RectF getCloseIconTouchBounds() {
    this.rectF.setEmpty();
    if (hasCloseIcon())
      this.chipDrawable.getCloseIconTouchBounds(this.rectF); 
    return this.rectF;
  }
  
  private Rect getCloseIconTouchBoundsInt() {
    RectF rectF1 = getCloseIconTouchBounds();
    this.rect.set((int)rectF1.left, (int)rectF1.top, (int)rectF1.right, (int)rectF1.bottom);
    return this.rect;
  }
  
  @Nullable
  private TextAppearance getTextAppearance() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getTextAppearance() : null;
  }
  
  @SuppressLint({"PrivateApi"})
  private boolean handleAccessibilityExit(MotionEvent paramMotionEvent) {
    if (paramMotionEvent.getAction() == 10)
      try {
        Field field = android.support.v4.widget.ExploreByTouchHelper.class.getDeclaredField("mHoveredVirtualViewId");
        field.setAccessible(true);
        if (((Integer)field.get(this.touchHelper)).intValue() != Integer.MIN_VALUE) {
          Method method = android.support.v4.widget.ExploreByTouchHelper.class.getDeclaredMethod("updateHoveredVirtualView", new Class[] { int.class });
          method.setAccessible(true);
          method.invoke(this.touchHelper, new Object[] { Integer.valueOf(-2147483648) });
          return true;
        } 
      } catch (NoSuchMethodException paramMotionEvent) {
        Log.e("Chip", "Unable to send Accessibility Exit event", paramMotionEvent);
      } catch (IllegalAccessException paramMotionEvent) {
        Log.e("Chip", "Unable to send Accessibility Exit event", paramMotionEvent);
        return false;
      } catch (InvocationTargetException paramMotionEvent) {
        Log.e("Chip", "Unable to send Accessibility Exit event", paramMotionEvent);
        return false;
      } catch (NoSuchFieldException paramMotionEvent) {
        Log.e("Chip", "Unable to send Accessibility Exit event", paramMotionEvent);
        return false;
      }  
    return false;
  }
  
  private boolean hasCloseIcon() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null && chipDrawable1.getCloseIcon() != null);
  }
  
  private void initOutlineProvider() {
    if (Build.VERSION.SDK_INT >= 21)
      setOutlineProvider(new Object(this)); 
  }
  
  private boolean moveFocus(boolean paramBoolean) {
    ensureFocus();
    if (paramBoolean) {
      if (this.focusedVirtualView == -1) {
        setFocusedVirtualView(0);
        return true;
      } 
    } else if (this.focusedVirtualView == 0) {
      setFocusedVirtualView(-1);
      return true;
    } 
    return false;
  }
  
  private void setCloseIconFocused(boolean paramBoolean) {
    if (this.closeIconFocused != paramBoolean) {
      this.closeIconFocused = paramBoolean;
      refreshDrawableState();
    } 
  }
  
  private void setCloseIconHovered(boolean paramBoolean) {
    if (this.closeIconHovered != paramBoolean) {
      this.closeIconHovered = paramBoolean;
      refreshDrawableState();
    } 
  }
  
  private void setCloseIconPressed(boolean paramBoolean) {
    if (this.closeIconPressed != paramBoolean) {
      this.closeIconPressed = paramBoolean;
      refreshDrawableState();
    } 
  }
  
  private void setFocusedVirtualView(int paramInt) {
    int i = this.focusedVirtualView;
    if (i != paramInt) {
      if (i == 0)
        setCloseIconFocused(false); 
      this.focusedVirtualView = paramInt;
      if (paramInt == 0)
        setCloseIconFocused(true); 
    } 
  }
  
  private void unapplyChipDrawable(@Nullable ChipDrawable paramChipDrawable) {
    if (paramChipDrawable != null)
      paramChipDrawable.setDelegate(null); 
  }
  
  private void updatePaddingInternal() { // Byte code:
    //   0: aload_0
    //   1: invokevirtual getText : ()Ljava/lang/CharSequence;
    //   4: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   7: ifne -> 206
    //   10: aload_0
    //   11: getfield chipDrawable : Landroid/support/design/chip/ChipDrawable;
    //   14: astore_3
    //   15: aload_3
    //   16: ifnonnull -> 20
    //   19: return
    //   20: aload_3
    //   21: invokevirtual getChipStartPadding : ()F
    //   24: aload_0
    //   25: getfield chipDrawable : Landroid/support/design/chip/ChipDrawable;
    //   28: invokevirtual getChipEndPadding : ()F
    //   31: fadd
    //   32: aload_0
    //   33: getfield chipDrawable : Landroid/support/design/chip/ChipDrawable;
    //   36: invokevirtual getTextStartPadding : ()F
    //   39: fadd
    //   40: aload_0
    //   41: getfield chipDrawable : Landroid/support/design/chip/ChipDrawable;
    //   44: invokevirtual getTextEndPadding : ()F
    //   47: fadd
    //   48: fstore_2
    //   49: aload_0
    //   50: getfield chipDrawable : Landroid/support/design/chip/ChipDrawable;
    //   53: invokevirtual isChipIconVisible : ()Z
    //   56: ifeq -> 69
    //   59: aload_0
    //   60: getfield chipDrawable : Landroid/support/design/chip/ChipDrawable;
    //   63: invokevirtual getChipIcon : ()Landroid/graphics/drawable/Drawable;
    //   66: ifnonnull -> 102
    //   69: fload_2
    //   70: fstore_1
    //   71: aload_0
    //   72: getfield chipDrawable : Landroid/support/design/chip/ChipDrawable;
    //   75: invokevirtual getCheckedIcon : ()Landroid/graphics/drawable/Drawable;
    //   78: ifnull -> 128
    //   81: fload_2
    //   82: fstore_1
    //   83: aload_0
    //   84: getfield chipDrawable : Landroid/support/design/chip/ChipDrawable;
    //   87: invokevirtual isCheckedIconVisible : ()Z
    //   90: ifeq -> 128
    //   93: fload_2
    //   94: fstore_1
    //   95: aload_0
    //   96: invokevirtual isChecked : ()Z
    //   99: ifeq -> 128
    //   102: fload_2
    //   103: aload_0
    //   104: getfield chipDrawable : Landroid/support/design/chip/ChipDrawable;
    //   107: invokevirtual getIconStartPadding : ()F
    //   110: aload_0
    //   111: getfield chipDrawable : Landroid/support/design/chip/ChipDrawable;
    //   114: invokevirtual getIconEndPadding : ()F
    //   117: fadd
    //   118: aload_0
    //   119: getfield chipDrawable : Landroid/support/design/chip/ChipDrawable;
    //   122: invokevirtual getChipIconSize : ()F
    //   125: fadd
    //   126: fadd
    //   127: fstore_1
    //   128: fload_1
    //   129: fstore_2
    //   130: aload_0
    //   131: getfield chipDrawable : Landroid/support/design/chip/ChipDrawable;
    //   134: invokevirtual isCloseIconVisible : ()Z
    //   137: ifeq -> 178
    //   140: fload_1
    //   141: fstore_2
    //   142: aload_0
    //   143: getfield chipDrawable : Landroid/support/design/chip/ChipDrawable;
    //   146: invokevirtual getCloseIcon : ()Landroid/graphics/drawable/Drawable;
    //   149: ifnull -> 178
    //   152: fload_1
    //   153: aload_0
    //   154: getfield chipDrawable : Landroid/support/design/chip/ChipDrawable;
    //   157: invokevirtual getCloseIconStartPadding : ()F
    //   160: aload_0
    //   161: getfield chipDrawable : Landroid/support/design/chip/ChipDrawable;
    //   164: invokevirtual getCloseIconEndPadding : ()F
    //   167: fadd
    //   168: aload_0
    //   169: getfield chipDrawable : Landroid/support/design/chip/ChipDrawable;
    //   172: invokevirtual getCloseIconSize : ()F
    //   175: fadd
    //   176: fadd
    //   177: fstore_2
    //   178: aload_0
    //   179: invokestatic getPaddingEnd : (Landroid/view/View;)I
    //   182: i2f
    //   183: fload_2
    //   184: fcmpl
    //   185: ifeq -> 206
    //   188: aload_0
    //   189: aload_0
    //   190: invokestatic getPaddingStart : (Landroid/view/View;)I
    //   193: aload_0
    //   194: invokevirtual getPaddingTop : ()I
    //   197: fload_2
    //   198: f2i
    //   199: aload_0
    //   200: invokevirtual getPaddingBottom : ()I
    //   203: invokestatic setPaddingRelative : (Landroid/view/View;IIII)V
    //   206: return }
  
  private void updateTextPaintDrawState(TextAppearance paramTextAppearance) {
    TextPaint textPaint = getPaint();
    textPaint.drawableState = this.chipDrawable.getState();
    paramTextAppearance.updateDrawState(getContext(), textPaint, this.fontCallback);
  }
  
  private void validateAttributes(@Nullable AttributeSet paramAttributeSet) {
    if (paramAttributeSet == null)
      return; 
    if (paramAttributeSet.getAttributeValue("http://schemas.android.com/apk/res/android", "background") == null) {
      if (paramAttributeSet.getAttributeValue("http://schemas.android.com/apk/res/android", "drawableLeft") == null) {
        if (paramAttributeSet.getAttributeValue("http://schemas.android.com/apk/res/android", "drawableStart") == null) {
          if (paramAttributeSet.getAttributeValue("http://schemas.android.com/apk/res/android", "drawableEnd") == null) {
            if (paramAttributeSet.getAttributeValue("http://schemas.android.com/apk/res/android", "drawableRight") == null) {
              if (paramAttributeSet.getAttributeBooleanValue("http://schemas.android.com/apk/res/android", "singleLine", true) && paramAttributeSet.getAttributeIntValue("http://schemas.android.com/apk/res/android", "lines", 1) == 1 && paramAttributeSet.getAttributeIntValue("http://schemas.android.com/apk/res/android", "minLines", 1) == 1 && paramAttributeSet.getAttributeIntValue("http://schemas.android.com/apk/res/android", "maxLines", 1) == 1) {
                if (paramAttributeSet.getAttributeIntValue("http://schemas.android.com/apk/res/android", "gravity", 8388627) != 8388627)
                  Log.w("Chip", "Chip text must be vertically center and start aligned"); 
                return;
              } 
              throw new UnsupportedOperationException("Chip does not support multi-line text");
            } 
            throw new UnsupportedOperationException("Please set end drawable using R.attr#closeIcon.");
          } 
          throw new UnsupportedOperationException("Please set end drawable using R.attr#closeIcon.");
        } 
        throw new UnsupportedOperationException("Please set start drawable using R.attr#chipIcon.");
      } 
      throw new UnsupportedOperationException("Please set left drawable using R.attr#chipIcon.");
    } 
    throw new UnsupportedOperationException("Do not set the background; Chip manages its own background drawable.");
  }
  
  protected boolean dispatchHoverEvent(MotionEvent paramMotionEvent) { return (handleAccessibilityExit(paramMotionEvent) || this.touchHelper.dispatchHoverEvent(paramMotionEvent) || super.dispatchHoverEvent(paramMotionEvent)); }
  
  public boolean dispatchKeyEvent(KeyEvent paramKeyEvent) { return (this.touchHelper.dispatchKeyEvent(paramKeyEvent) || super.dispatchKeyEvent(paramKeyEvent)); }
  
  protected void drawableStateChanged() {
    boolean bool;
    super.drawableStateChanged();
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null && chipDrawable1.isCloseIconStateful()) {
      bool = this.chipDrawable.setCloseIconState(createCloseIconDrawableState());
    } else {
      bool = false;
    } 
    if (bool)
      invalidate(); 
  }
  
  @Nullable
  public Drawable getCheckedIcon() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getCheckedIcon() : null;
  }
  
  @Nullable
  public ColorStateList getChipBackgroundColor() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getChipBackgroundColor() : null;
  }
  
  public float getChipCornerRadius() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getChipCornerRadius() : 0.0F;
  }
  
  public Drawable getChipDrawable() { return this.chipDrawable; }
  
  public float getChipEndPadding() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getChipEndPadding() : 0.0F;
  }
  
  @Nullable
  public Drawable getChipIcon() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getChipIcon() : null;
  }
  
  public float getChipIconSize() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getChipIconSize() : 0.0F;
  }
  
  @Nullable
  public ColorStateList getChipIconTint() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getChipIconTint() : null;
  }
  
  public float getChipMinHeight() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getChipMinHeight() : 0.0F;
  }
  
  public float getChipStartPadding() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getChipStartPadding() : 0.0F;
  }
  
  @Nullable
  public ColorStateList getChipStrokeColor() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getChipStrokeColor() : null;
  }
  
  public float getChipStrokeWidth() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getChipStrokeWidth() : 0.0F;
  }
  
  @Deprecated
  public CharSequence getChipText() { return getText(); }
  
  @Nullable
  public Drawable getCloseIcon() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getCloseIcon() : null;
  }
  
  @Nullable
  public CharSequence getCloseIconContentDescription() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getCloseIconContentDescription() : null;
  }
  
  public float getCloseIconEndPadding() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getCloseIconEndPadding() : 0.0F;
  }
  
  public float getCloseIconSize() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getCloseIconSize() : 0.0F;
  }
  
  public float getCloseIconStartPadding() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getCloseIconStartPadding() : 0.0F;
  }
  
  @Nullable
  public ColorStateList getCloseIconTint() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getCloseIconTint() : null;
  }
  
  public TextUtils.TruncateAt getEllipsize() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getEllipsize() : null;
  }
  
  public void getFocusedRect(Rect paramRect) {
    if (this.focusedVirtualView == 0) {
      paramRect.set(getCloseIconTouchBoundsInt());
      return;
    } 
    super.getFocusedRect(paramRect);
  }
  
  @Nullable
  public MotionSpec getHideMotionSpec() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getHideMotionSpec() : null;
  }
  
  public float getIconEndPadding() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getIconEndPadding() : 0.0F;
  }
  
  public float getIconStartPadding() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getIconStartPadding() : 0.0F;
  }
  
  @Nullable
  public ColorStateList getRippleColor() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getRippleColor() : null;
  }
  
  @Nullable
  public MotionSpec getShowMotionSpec() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getShowMotionSpec() : null;
  }
  
  public CharSequence getText() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getText() : "";
  }
  
  public float getTextEndPadding() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getTextEndPadding() : 0.0F;
  }
  
  public float getTextStartPadding() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null) ? chipDrawable1.getTextStartPadding() : 0.0F;
  }
  
  public boolean isCheckable() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null && chipDrawable1.isCheckable());
  }
  
  @Deprecated
  public boolean isCheckedIconEnabled() { return isCheckedIconVisible(); }
  
  public boolean isCheckedIconVisible() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null && chipDrawable1.isCheckedIconVisible());
  }
  
  @Deprecated
  public boolean isChipIconEnabled() { return isChipIconVisible(); }
  
  public boolean isChipIconVisible() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null && chipDrawable1.isChipIconVisible());
  }
  
  @Deprecated
  public boolean isCloseIconEnabled() { return isCloseIconVisible(); }
  
  public boolean isCloseIconVisible() {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    return (chipDrawable1 != null && chipDrawable1.isCloseIconVisible());
  }
  
  public void onChipDrawableSizeChange() {
    updatePaddingInternal();
    requestLayout();
    if (Build.VERSION.SDK_INT >= 21)
      invalidateOutline(); 
  }
  
  protected int[] onCreateDrawableState(int paramInt) {
    int[] arrayOfInt = super.onCreateDrawableState(paramInt + 1);
    if (isChecked())
      mergeDrawableStates(arrayOfInt, SELECTED_STATE); 
    return arrayOfInt;
  }
  
  protected void onDraw(Canvas paramCanvas) {
    if (!TextUtils.isEmpty(getText())) {
      ChipDrawable chipDrawable1 = this.chipDrawable;
      if (chipDrawable1 != null && !chipDrawable1.shouldDrawText()) {
        int i = paramCanvas.save();
        paramCanvas.translate(calculateTextOffsetFromStart(this.chipDrawable), 0.0F);
        super.onDraw(paramCanvas);
        paramCanvas.restoreToCount(i);
        return;
      } 
    } 
    super.onDraw(paramCanvas);
  }
  
  protected void onFocusChanged(boolean paramBoolean, int paramInt, Rect paramRect) {
    if (paramBoolean) {
      setFocusedVirtualView(-1);
    } else {
      setFocusedVirtualView(-2147483648);
    } 
    invalidate();
    super.onFocusChanged(paramBoolean, paramInt, paramRect);
    this.touchHelper.onFocusChanged(paramBoolean, paramInt, paramRect);
  }
  
  public boolean onHoverEvent(MotionEvent paramMotionEvent) {
    int i = paramMotionEvent.getActionMasked();
    if (i != 7) {
      if (i == 10)
        setCloseIconHovered(false); 
    } else {
      setCloseIconHovered(getCloseIconTouchBounds().contains(paramMotionEvent.getX(), paramMotionEvent.getY()));
    } 
    return super.onHoverEvent(paramMotionEvent);
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent) {
    byte b1;
    int i = paramKeyEvent.getKeyCode();
    byte b2 = 0;
    if (i != 61) {
      if (i != 66) {
        switch (i) {
          default:
            b1 = b2;
            break;
          case 22:
            b1 = b2;
            if (paramKeyEvent.hasNoModifiers())
              boolean bool = moveFocus(ViewUtils.isLayoutRtl(this) ^ true); 
            break;
          case 21:
            b1 = b2;
            if (paramKeyEvent.hasNoModifiers())
              boolean bool = moveFocus(ViewUtils.isLayoutRtl(this)); 
            break;
          case 23:
            i = this.focusedVirtualView;
            if (i != -1) {
              if (i != 0) {
                b1 = b2;
                break;
              } 
              performCloseIconClick();
              return true;
            } 
            performClick();
            return true;
        } 
      } else {
      
      } 
    } else {
      if (paramKeyEvent.hasNoModifiers()) {
        i = 2;
      } else if (paramKeyEvent.hasModifiers(1)) {
        i = 1;
      } else {
        i = 0;
      } 
      b1 = b2;
      if (i != 0) {
        View view;
        ViewParent viewParent = getParent();
        Chip chip = this;
        while (true) {
          view = chip.focusSearch(i);
          if (view != null && view != this) {
            View view1 = view;
            if (view.getParent() != viewParent)
              break; 
            continue;
          } 
          break;
        } 
        b1 = b2;
        if (view != null) {
          view.requestFocus();
          return true;
        } 
      } 
    } 
    if (b1 != 0) {
      invalidate();
      return true;
    } 
    return super.onKeyDown(paramInt, paramKeyEvent);
  }
  
  @TargetApi(24)
  public PointerIcon onResolvePointerIcon(MotionEvent paramMotionEvent, int paramInt) { return (getCloseIconTouchBounds().contains(paramMotionEvent.getX(), paramMotionEvent.getY()) && isEnabled()) ? PointerIcon.getSystemIcon(getContext(), 1002) : null; }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent) { // Byte code:
    //   0: aload_1
    //   1: invokevirtual getActionMasked : ()I
    //   4: istore_2
    //   5: aload_0
    //   6: invokespecial getCloseIconTouchBounds : ()Landroid/graphics/RectF;
    //   9: aload_1
    //   10: invokevirtual getX : ()F
    //   13: aload_1
    //   14: invokevirtual getY : ()F
    //   17: invokevirtual contains : (FF)Z
    //   20: istore #4
    //   22: iconst_0
    //   23: istore_3
    //   24: iload_2
    //   25: ifeq -> 93
    //   28: iload_2
    //   29: iconst_1
    //   30: if_icmpeq -> 66
    //   33: iload_2
    //   34: iconst_2
    //   35: if_icmpeq -> 46
    //   38: iload_2
    //   39: iconst_3
    //   40: if_icmpeq -> 83
    //   43: goto -> 108
    //   46: aload_0
    //   47: getfield closeIconPressed : Z
    //   50: ifeq -> 108
    //   53: iload #4
    //   55: ifne -> 103
    //   58: aload_0
    //   59: iconst_0
    //   60: invokespecial setCloseIconPressed : (Z)V
    //   63: goto -> 103
    //   66: aload_0
    //   67: getfield closeIconPressed : Z
    //   70: ifeq -> 83
    //   73: aload_0
    //   74: invokevirtual performCloseIconClick : ()Z
    //   77: pop
    //   78: iconst_1
    //   79: istore_2
    //   80: goto -> 85
    //   83: iconst_0
    //   84: istore_2
    //   85: aload_0
    //   86: iconst_0
    //   87: invokespecial setCloseIconPressed : (Z)V
    //   90: goto -> 110
    //   93: iload #4
    //   95: ifeq -> 108
    //   98: aload_0
    //   99: iconst_1
    //   100: invokespecial setCloseIconPressed : (Z)V
    //   103: iconst_1
    //   104: istore_2
    //   105: goto -> 110
    //   108: iconst_0
    //   109: istore_2
    //   110: iload_2
    //   111: ifne -> 122
    //   114: aload_0
    //   115: aload_1
    //   116: invokespecial onTouchEvent : (Landroid/view/MotionEvent;)Z
    //   119: ifeq -> 124
    //   122: iconst_1
    //   123: istore_3
    //   124: iload_3
    //   125: ireturn }
  
  @CallSuper
  public boolean performCloseIconClick() {
    boolean bool;
    playSoundEffect(0);
    View.OnClickListener onClickListener = this.onCloseIconClickListener;
    if (onClickListener != null) {
      onClickListener.onClick(this);
      bool = true;
    } else {
      bool = false;
    } 
    this.touchHelper.sendEventForVirtualView(0, 1);
    return bool;
  }
  
  public void setBackground(Drawable paramDrawable) {
    if (paramDrawable == this.chipDrawable || paramDrawable == this.ripple) {
      super.setBackground(paramDrawable);
      return;
    } 
    throw new UnsupportedOperationException("Do not set the background; Chip manages its own background drawable.");
  }
  
  public void setBackgroundColor(int paramInt) { throw new UnsupportedOperationException("Do not set the background color; Chip manages its own background drawable."); }
  
  public void setBackgroundDrawable(Drawable paramDrawable) {
    if (paramDrawable == this.chipDrawable || paramDrawable == this.ripple) {
      super.setBackgroundDrawable(paramDrawable);
      return;
    } 
    throw new UnsupportedOperationException("Do not set the background drawable; Chip manages its own background drawable.");
  }
  
  public void setBackgroundResource(int paramInt) { throw new UnsupportedOperationException("Do not set the background resource; Chip manages its own background drawable."); }
  
  public void setBackgroundTintList(@Nullable ColorStateList paramColorStateList) { throw new UnsupportedOperationException("Do not set the background tint list; Chip manages its own background drawable."); }
  
  public void setBackgroundTintMode(@Nullable PorterDuff.Mode paramMode) { throw new UnsupportedOperationException("Do not set the background tint mode; Chip manages its own background drawable."); }
  
  public void setCheckable(boolean paramBoolean) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCheckable(paramBoolean); 
  }
  
  public void setCheckableResource(@BoolRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCheckableResource(paramInt); 
  }
  
  public void setChecked(boolean paramBoolean) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 == null) {
      this.deferredCheckedValue = paramBoolean;
      return;
    } 
    if (chipDrawable1.isCheckable()) {
      boolean bool = isChecked();
      super.setChecked(paramBoolean);
      if (bool != paramBoolean) {
        CompoundButton.OnCheckedChangeListener onCheckedChangeListener = this.onCheckedChangeListenerInternal;
        if (onCheckedChangeListener != null)
          onCheckedChangeListener.onCheckedChanged(this, paramBoolean); 
      } 
    } 
  }
  
  public void setCheckedIcon(@Nullable Drawable paramDrawable) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCheckedIcon(paramDrawable); 
  }
  
  @Deprecated
  public void setCheckedIconEnabled(boolean paramBoolean) { setCheckedIconVisible(paramBoolean); }
  
  @Deprecated
  public void setCheckedIconEnabledResource(@BoolRes int paramInt) { setCheckedIconVisible(paramInt); }
  
  public void setCheckedIconResource(@DrawableRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCheckedIconResource(paramInt); 
  }
  
  public void setCheckedIconVisible(@BoolRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCheckedIconVisible(paramInt); 
  }
  
  public void setCheckedIconVisible(boolean paramBoolean) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCheckedIconVisible(paramBoolean); 
  }
  
  public void setChipBackgroundColor(@Nullable ColorStateList paramColorStateList) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipBackgroundColor(paramColorStateList); 
  }
  
  public void setChipBackgroundColorResource(@ColorRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipBackgroundColorResource(paramInt); 
  }
  
  public void setChipCornerRadius(float paramFloat) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipCornerRadius(paramFloat); 
  }
  
  public void setChipCornerRadiusResource(@DimenRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipCornerRadiusResource(paramInt); 
  }
  
  public void setChipDrawable(@NonNull ChipDrawable paramChipDrawable) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != paramChipDrawable) {
      unapplyChipDrawable(chipDrawable1);
      this.chipDrawable = paramChipDrawable;
      applyChipDrawable(this.chipDrawable);
      if (RippleUtils.USE_FRAMEWORK_RIPPLE) {
        this.ripple = new RippleDrawable(RippleUtils.convertToRippleDrawableColor(this.chipDrawable.getRippleColor()), this.chipDrawable, null);
        this.chipDrawable.setUseCompatRipple(false);
        ViewCompat.setBackground(this, this.ripple);
        return;
      } 
      this.chipDrawable.setUseCompatRipple(true);
      ViewCompat.setBackground(this, this.chipDrawable);
    } 
  }
  
  public void setChipEndPadding(float paramFloat) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipEndPadding(paramFloat); 
  }
  
  public void setChipEndPaddingResource(@DimenRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipEndPaddingResource(paramInt); 
  }
  
  public void setChipIcon(@Nullable Drawable paramDrawable) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipIcon(paramDrawable); 
  }
  
  @Deprecated
  public void setChipIconEnabled(boolean paramBoolean) { setChipIconVisible(paramBoolean); }
  
  @Deprecated
  public void setChipIconEnabledResource(@BoolRes int paramInt) { setChipIconVisible(paramInt); }
  
  public void setChipIconResource(@DrawableRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipIconResource(paramInt); 
  }
  
  public void setChipIconSize(float paramFloat) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipIconSize(paramFloat); 
  }
  
  public void setChipIconSizeResource(@DimenRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipIconSizeResource(paramInt); 
  }
  
  public void setChipIconTint(@Nullable ColorStateList paramColorStateList) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipIconTint(paramColorStateList); 
  }
  
  public void setChipIconTintResource(@ColorRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipIconTintResource(paramInt); 
  }
  
  public void setChipIconVisible(@BoolRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipIconVisible(paramInt); 
  }
  
  public void setChipIconVisible(boolean paramBoolean) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipIconVisible(paramBoolean); 
  }
  
  public void setChipMinHeight(float paramFloat) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipMinHeight(paramFloat); 
  }
  
  public void setChipMinHeightResource(@DimenRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipMinHeightResource(paramInt); 
  }
  
  public void setChipStartPadding(float paramFloat) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipStartPadding(paramFloat); 
  }
  
  public void setChipStartPaddingResource(@DimenRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipStartPaddingResource(paramInt); 
  }
  
  public void setChipStrokeColor(@Nullable ColorStateList paramColorStateList) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipStrokeColor(paramColorStateList); 
  }
  
  public void setChipStrokeColorResource(@ColorRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipStrokeColorResource(paramInt); 
  }
  
  public void setChipStrokeWidth(float paramFloat) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipStrokeWidth(paramFloat); 
  }
  
  public void setChipStrokeWidthResource(@DimenRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setChipStrokeWidthResource(paramInt); 
  }
  
  @Deprecated
  public void setChipText(@Nullable CharSequence paramCharSequence) { setText(paramCharSequence); }
  
  @Deprecated
  public void setChipTextResource(@StringRes int paramInt) { setText(getResources().getString(paramInt)); }
  
  public void setCloseIcon(@Nullable Drawable paramDrawable) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCloseIcon(paramDrawable); 
  }
  
  public void setCloseIconContentDescription(@Nullable CharSequence paramCharSequence) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCloseIconContentDescription(paramCharSequence); 
  }
  
  @Deprecated
  public void setCloseIconEnabled(boolean paramBoolean) { setCloseIconVisible(paramBoolean); }
  
  @Deprecated
  public void setCloseIconEnabledResource(@BoolRes int paramInt) { setCloseIconVisible(paramInt); }
  
  public void setCloseIconEndPadding(float paramFloat) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCloseIconEndPadding(paramFloat); 
  }
  
  public void setCloseIconEndPaddingResource(@DimenRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCloseIconEndPaddingResource(paramInt); 
  }
  
  public void setCloseIconResource(@DrawableRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCloseIconResource(paramInt); 
  }
  
  public void setCloseIconSize(float paramFloat) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCloseIconSize(paramFloat); 
  }
  
  public void setCloseIconSizeResource(@DimenRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCloseIconSizeResource(paramInt); 
  }
  
  public void setCloseIconStartPadding(float paramFloat) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCloseIconStartPadding(paramFloat); 
  }
  
  public void setCloseIconStartPaddingResource(@DimenRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCloseIconStartPaddingResource(paramInt); 
  }
  
  public void setCloseIconTint(@Nullable ColorStateList paramColorStateList) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCloseIconTint(paramColorStateList); 
  }
  
  public void setCloseIconTintResource(@ColorRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCloseIconTintResource(paramInt); 
  }
  
  public void setCloseIconVisible(@BoolRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCloseIconVisible(paramInt); 
  }
  
  public void setCloseIconVisible(boolean paramBoolean) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setCloseIconVisible(paramBoolean); 
  }
  
  public void setCompoundDrawables(@Nullable Drawable paramDrawable1, @Nullable Drawable paramDrawable2, @Nullable Drawable paramDrawable3, @Nullable Drawable paramDrawable4) {
    if (paramDrawable1 == null) {
      if (paramDrawable3 == null) {
        super.setCompoundDrawables(paramDrawable1, paramDrawable2, paramDrawable3, paramDrawable4);
        return;
      } 
      throw new UnsupportedOperationException("Please set end drawable using R.attr#closeIcon.");
    } 
    throw new UnsupportedOperationException("Please set start drawable using R.attr#chipIcon.");
  }
  
  public void setCompoundDrawablesRelative(@Nullable Drawable paramDrawable1, @Nullable Drawable paramDrawable2, @Nullable Drawable paramDrawable3, @Nullable Drawable paramDrawable4) {
    if (paramDrawable1 == null) {
      if (paramDrawable3 == null) {
        super.setCompoundDrawablesRelative(paramDrawable1, paramDrawable2, paramDrawable3, paramDrawable4);
        return;
      } 
      throw new UnsupportedOperationException("Please set end drawable using R.attr#closeIcon.");
    } 
    throw new UnsupportedOperationException("Please set start drawable using R.attr#chipIcon.");
  }
  
  public void setCompoundDrawablesRelativeWithIntrinsicBounds(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    if (paramInt1 == 0) {
      if (paramInt3 == 0) {
        super.setCompoundDrawablesRelativeWithIntrinsicBounds(paramInt1, paramInt2, paramInt3, paramInt4);
        return;
      } 
      throw new UnsupportedOperationException("Please set end drawable using R.attr#closeIcon.");
    } 
    throw new UnsupportedOperationException("Please set start drawable using R.attr#chipIcon.");
  }
  
  public void setCompoundDrawablesRelativeWithIntrinsicBounds(@Nullable Drawable paramDrawable1, @Nullable Drawable paramDrawable2, @Nullable Drawable paramDrawable3, @Nullable Drawable paramDrawable4) {
    if (paramDrawable1 == null) {
      if (paramDrawable3 == null) {
        super.setCompoundDrawablesRelativeWithIntrinsicBounds(paramDrawable1, paramDrawable2, paramDrawable3, paramDrawable4);
        return;
      } 
      throw new UnsupportedOperationException("Please set end drawable using R.attr#closeIcon.");
    } 
    throw new UnsupportedOperationException("Please set start drawable using R.attr#chipIcon.");
  }
  
  public void setCompoundDrawablesWithIntrinsicBounds(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    if (paramInt1 == 0) {
      if (paramInt3 == 0) {
        super.setCompoundDrawablesWithIntrinsicBounds(paramInt1, paramInt2, paramInt3, paramInt4);
        return;
      } 
      throw new UnsupportedOperationException("Please set end drawable using R.attr#closeIcon.");
    } 
    throw new UnsupportedOperationException("Please set start drawable using R.attr#chipIcon.");
  }
  
  public void setCompoundDrawablesWithIntrinsicBounds(@Nullable Drawable paramDrawable1, @Nullable Drawable paramDrawable2, @Nullable Drawable paramDrawable3, @Nullable Drawable paramDrawable4) {
    if (paramDrawable1 == null) {
      if (paramDrawable3 == null) {
        super.setCompoundDrawablesWithIntrinsicBounds(paramDrawable1, paramDrawable2, paramDrawable3, paramDrawable4);
        return;
      } 
      throw new UnsupportedOperationException("Please set right drawable using R.attr#closeIcon.");
    } 
    throw new UnsupportedOperationException("Please set left drawable using R.attr#chipIcon.");
  }
  
  public void setEllipsize(TextUtils.TruncateAt paramTruncateAt) {
    if (this.chipDrawable == null)
      return; 
    if (paramTruncateAt != TextUtils.TruncateAt.MARQUEE) {
      super.setEllipsize(paramTruncateAt);
      ChipDrawable chipDrawable1 = this.chipDrawable;
      if (chipDrawable1 != null)
        chipDrawable1.setEllipsize(paramTruncateAt); 
      return;
    } 
    throw new UnsupportedOperationException("Text within a chip are not allowed to scroll.");
  }
  
  public void setGravity(int paramInt) {
    if (paramInt != 8388627) {
      Log.w("Chip", "Chip text must be vertically center and start aligned");
      return;
    } 
    super.setGravity(paramInt);
  }
  
  public void setHideMotionSpec(@Nullable MotionSpec paramMotionSpec) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setHideMotionSpec(paramMotionSpec); 
  }
  
  public void setHideMotionSpecResource(@AnimatorRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setHideMotionSpecResource(paramInt); 
  }
  
  public void setIconEndPadding(float paramFloat) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setIconEndPadding(paramFloat); 
  }
  
  public void setIconEndPaddingResource(@DimenRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setIconEndPaddingResource(paramInt); 
  }
  
  public void setIconStartPadding(float paramFloat) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setIconStartPadding(paramFloat); 
  }
  
  public void setIconStartPaddingResource(@DimenRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setIconStartPaddingResource(paramInt); 
  }
  
  public void setLines(int paramInt) {
    if (paramInt <= 1) {
      super.setLines(paramInt);
      return;
    } 
    throw new UnsupportedOperationException("Chip does not support multi-line text");
  }
  
  public void setMaxLines(int paramInt) {
    if (paramInt <= 1) {
      super.setMaxLines(paramInt);
      return;
    } 
    throw new UnsupportedOperationException("Chip does not support multi-line text");
  }
  
  public void setMaxWidth(@Px int paramInt) {
    super.setMaxWidth(paramInt);
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setMaxWidth(paramInt); 
  }
  
  public void setMinLines(int paramInt) {
    if (paramInt <= 1) {
      super.setMinLines(paramInt);
      return;
    } 
    throw new UnsupportedOperationException("Chip does not support multi-line text");
  }
  
  void setOnCheckedChangeListenerInternal(CompoundButton.OnCheckedChangeListener paramOnCheckedChangeListener) { this.onCheckedChangeListenerInternal = paramOnCheckedChangeListener; }
  
  public void setOnCloseIconClickListener(View.OnClickListener paramOnClickListener) { this.onCloseIconClickListener = paramOnClickListener; }
  
  public void setRippleColor(@Nullable ColorStateList paramColorStateList) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setRippleColor(paramColorStateList); 
  }
  
  public void setRippleColorResource(@ColorRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setRippleColorResource(paramInt); 
  }
  
  public void setShowMotionSpec(@Nullable MotionSpec paramMotionSpec) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setShowMotionSpec(paramMotionSpec); 
  }
  
  public void setShowMotionSpecResource(@AnimatorRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setShowMotionSpecResource(paramInt); 
  }
  
  public void setSingleLine(boolean paramBoolean) {
    if (paramBoolean) {
      super.setSingleLine(paramBoolean);
      return;
    } 
    throw new UnsupportedOperationException("Chip does not support multi-line text");
  }
  
  public void setText(CharSequence paramCharSequence, TextView.BufferType paramBufferType) {
    if (this.chipDrawable == null)
      return; 
    CharSequence charSequence = paramCharSequence;
    if (paramCharSequence == null)
      charSequence = ""; 
    paramCharSequence = BidiFormatter.getInstance().unicodeWrap(charSequence);
    if (this.chipDrawable.shouldDrawText())
      paramCharSequence = null; 
    super.setText(paramCharSequence, paramBufferType);
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setText(charSequence); 
  }
  
  public void setTextAppearance(int paramInt) {
    super.setTextAppearance(paramInt);
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setTextAppearanceResource(paramInt); 
    if (getTextAppearance() != null) {
      getTextAppearance().updateMeasureState(getContext(), getPaint(), this.fontCallback);
      updateTextPaintDrawState(getTextAppearance());
    } 
  }
  
  public void setTextAppearance(Context paramContext, int paramInt) {
    super.setTextAppearance(paramContext, paramInt);
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setTextAppearanceResource(paramInt); 
    if (getTextAppearance() != null) {
      getTextAppearance().updateMeasureState(paramContext, getPaint(), this.fontCallback);
      updateTextPaintDrawState(getTextAppearance());
    } 
  }
  
  public void setTextAppearance(@Nullable TextAppearance paramTextAppearance) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setTextAppearance(paramTextAppearance); 
    if (getTextAppearance() != null) {
      getTextAppearance().updateMeasureState(getContext(), getPaint(), this.fontCallback);
      updateTextPaintDrawState(paramTextAppearance);
    } 
  }
  
  public void setTextAppearanceResource(@StyleRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setTextAppearanceResource(paramInt); 
    setTextAppearance(getContext(), paramInt);
  }
  
  public void setTextEndPadding(float paramFloat) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setTextEndPadding(paramFloat); 
  }
  
  public void setTextEndPaddingResource(@DimenRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setTextEndPaddingResource(paramInt); 
  }
  
  public void setTextStartPadding(float paramFloat) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setTextStartPadding(paramFloat); 
  }
  
  public void setTextStartPaddingResource(@DimenRes int paramInt) {
    ChipDrawable chipDrawable1 = this.chipDrawable;
    if (chipDrawable1 != null)
      chipDrawable1.setTextStartPaddingResource(paramInt); 
  }
}
