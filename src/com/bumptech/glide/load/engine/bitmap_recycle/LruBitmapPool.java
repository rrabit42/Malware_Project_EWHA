package com.bumptech.glide.load.engine.bitmap_recycle;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.graphics.Bitmap;
import android.os.Build;
import android.util.Log;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public class LruBitmapPool implements BitmapPool {
  private static final Bitmap.Config DEFAULT_CONFIG = Bitmap.Config.ARGB_8888;
  
  private static final String TAG = "LruBitmapPool";
  
  private final Set<Bitmap.Config> allowedConfigs;
  
  private int currentSize;
  
  private int evictions;
  
  private int hits;
  
  private final int initialMaxSize;
  
  private int maxSize;
  
  private int misses;
  
  private int puts;
  
  private final LruPoolStrategy strategy;
  
  private final BitmapTracker tracker;
  
  public LruBitmapPool(int paramInt) { this(paramInt, getDefaultStrategy(), getDefaultAllowedConfigs()); }
  
  LruBitmapPool(int paramInt, LruPoolStrategy paramLruPoolStrategy, Set<Bitmap.Config> paramSet) {
    this.initialMaxSize = paramInt;
    this.maxSize = paramInt;
    this.strategy = paramLruPoolStrategy;
    this.allowedConfigs = paramSet;
    this.tracker = new NullBitmapTracker(null);
  }
  
  public LruBitmapPool(int paramInt, Set<Bitmap.Config> paramSet) { this(paramInt, getDefaultStrategy(), paramSet); }
  
  private void dump() {
    if (Log.isLoggable("LruBitmapPool", 2))
      dumpUnchecked(); 
  }
  
  private void dumpUnchecked() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Hits=");
    stringBuilder.append(this.hits);
    stringBuilder.append(", misses=");
    stringBuilder.append(this.misses);
    stringBuilder.append(", puts=");
    stringBuilder.append(this.puts);
    stringBuilder.append(", evictions=");
    stringBuilder.append(this.evictions);
    stringBuilder.append(", currentSize=");
    stringBuilder.append(this.currentSize);
    stringBuilder.append(", maxSize=");
    stringBuilder.append(this.maxSize);
    stringBuilder.append("\nStrategy=");
    stringBuilder.append(this.strategy);
    Log.v("LruBitmapPool", stringBuilder.toString());
  }
  
  private void evict() { trimToSize(this.maxSize); }
  
  private static Set<Bitmap.Config> getDefaultAllowedConfigs() {
    HashSet hashSet = new HashSet();
    hashSet.addAll(Arrays.asList(Bitmap.Config.values()));
    if (Build.VERSION.SDK_INT >= 19)
      hashSet.add(null); 
    return Collections.unmodifiableSet(hashSet);
  }
  
  private static LruPoolStrategy getDefaultStrategy() { return (Build.VERSION.SDK_INT >= 19) ? new SizeConfigStrategy() : new AttributeStrategy(); }
  
  private void trimToSize(int paramInt) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield currentSize : I
    //   6: iload_1
    //   7: if_icmple -> 152
    //   10: aload_0
    //   11: getfield strategy : Lcom/bumptech/glide/load/engine/bitmap_recycle/LruPoolStrategy;
    //   14: invokeinterface removeLast : ()Landroid/graphics/Bitmap;
    //   19: astore_2
    //   20: aload_2
    //   21: ifnonnull -> 53
    //   24: ldc 'LruBitmapPool'
    //   26: iconst_5
    //   27: invokestatic isLoggable : (Ljava/lang/String;I)Z
    //   30: ifeq -> 45
    //   33: ldc 'LruBitmapPool'
    //   35: ldc 'Size mismatch, resetting'
    //   37: invokestatic w : (Ljava/lang/String;Ljava/lang/String;)I
    //   40: pop
    //   41: aload_0
    //   42: invokespecial dumpUnchecked : ()V
    //   45: aload_0
    //   46: iconst_0
    //   47: putfield currentSize : I
    //   50: aload_0
    //   51: monitorexit
    //   52: return
    //   53: aload_0
    //   54: getfield tracker : Lcom/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool$BitmapTracker;
    //   57: aload_2
    //   58: invokeinterface remove : (Landroid/graphics/Bitmap;)V
    //   63: aload_0
    //   64: aload_0
    //   65: getfield currentSize : I
    //   68: aload_0
    //   69: getfield strategy : Lcom/bumptech/glide/load/engine/bitmap_recycle/LruPoolStrategy;
    //   72: aload_2
    //   73: invokeinterface getSize : (Landroid/graphics/Bitmap;)I
    //   78: isub
    //   79: putfield currentSize : I
    //   82: aload_2
    //   83: invokevirtual recycle : ()V
    //   86: aload_0
    //   87: aload_0
    //   88: getfield evictions : I
    //   91: iconst_1
    //   92: iadd
    //   93: putfield evictions : I
    //   96: ldc 'LruBitmapPool'
    //   98: iconst_3
    //   99: invokestatic isLoggable : (Ljava/lang/String;I)Z
    //   102: ifeq -> 145
    //   105: new java/lang/StringBuilder
    //   108: dup
    //   109: invokespecial <init> : ()V
    //   112: astore_3
    //   113: aload_3
    //   114: ldc 'Evicting bitmap='
    //   116: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   119: pop
    //   120: aload_3
    //   121: aload_0
    //   122: getfield strategy : Lcom/bumptech/glide/load/engine/bitmap_recycle/LruPoolStrategy;
    //   125: aload_2
    //   126: invokeinterface logBitmap : (Landroid/graphics/Bitmap;)Ljava/lang/String;
    //   131: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   134: pop
    //   135: ldc 'LruBitmapPool'
    //   137: aload_3
    //   138: invokevirtual toString : ()Ljava/lang/String;
    //   141: invokestatic d : (Ljava/lang/String;Ljava/lang/String;)I
    //   144: pop
    //   145: aload_0
    //   146: invokespecial dump : ()V
    //   149: goto -> 2
    //   152: aload_0
    //   153: monitorexit
    //   154: return
    //   155: astore_2
    //   156: aload_0
    //   157: monitorexit
    //   158: goto -> 163
    //   161: aload_2
    //   162: athrow
    //   163: goto -> 161
    // Exception table:
    //   from	to	target	type
    //   2	20	155	finally
    //   24	45	155	finally
    //   45	50	155	finally
    //   53	145	155	finally
    //   145	149	155	finally }
  
  public void clearMemory() {
    if (Log.isLoggable("LruBitmapPool", 3))
      Log.d("LruBitmapPool", "clearMemory"); 
    trimToSize(0);
  }
  
  public Bitmap get(int paramInt1, int paramInt2, Bitmap.Config paramConfig) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: iload_1
    //   4: iload_2
    //   5: aload_3
    //   6: invokevirtual getDirty : (IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;
    //   9: astore_3
    //   10: aload_3
    //   11: ifnull -> 19
    //   14: aload_3
    //   15: iconst_0
    //   16: invokevirtual eraseColor : (I)V
    //   19: aload_0
    //   20: monitorexit
    //   21: aload_3
    //   22: areturn
    //   23: astore_3
    //   24: aload_0
    //   25: monitorexit
    //   26: aload_3
    //   27: athrow
    // Exception table:
    //   from	to	target	type
    //   2	10	23	finally
    //   14	19	23	finally }
  
  @TargetApi(12)
  public Bitmap getDirty(int paramInt1, int paramInt2, Bitmap.Config paramConfig) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield strategy : Lcom/bumptech/glide/load/engine/bitmap_recycle/LruPoolStrategy;
    //   6: astore #5
    //   8: aload_3
    //   9: ifnull -> 18
    //   12: aload_3
    //   13: astore #4
    //   15: goto -> 23
    //   18: getstatic com/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool.DEFAULT_CONFIG : Landroid/graphics/Bitmap$Config;
    //   21: astore #4
    //   23: aload #5
    //   25: iload_1
    //   26: iload_2
    //   27: aload #4
    //   29: invokeinterface get : (IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;
    //   34: astore #4
    //   36: aload #4
    //   38: ifnonnull -> 109
    //   41: ldc 'LruBitmapPool'
    //   43: iconst_3
    //   44: invokestatic isLoggable : (Ljava/lang/String;I)Z
    //   47: ifeq -> 96
    //   50: new java/lang/StringBuilder
    //   53: dup
    //   54: invokespecial <init> : ()V
    //   57: astore #5
    //   59: aload #5
    //   61: ldc 'Missing bitmap='
    //   63: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   66: pop
    //   67: aload #5
    //   69: aload_0
    //   70: getfield strategy : Lcom/bumptech/glide/load/engine/bitmap_recycle/LruPoolStrategy;
    //   73: iload_1
    //   74: iload_2
    //   75: aload_3
    //   76: invokeinterface logBitmap : (IILandroid/graphics/Bitmap$Config;)Ljava/lang/String;
    //   81: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   84: pop
    //   85: ldc 'LruBitmapPool'
    //   87: aload #5
    //   89: invokevirtual toString : ()Ljava/lang/String;
    //   92: invokestatic d : (Ljava/lang/String;Ljava/lang/String;)I
    //   95: pop
    //   96: aload_0
    //   97: aload_0
    //   98: getfield misses : I
    //   101: iconst_1
    //   102: iadd
    //   103: putfield misses : I
    //   106: goto -> 164
    //   109: aload_0
    //   110: aload_0
    //   111: getfield hits : I
    //   114: iconst_1
    //   115: iadd
    //   116: putfield hits : I
    //   119: aload_0
    //   120: aload_0
    //   121: getfield currentSize : I
    //   124: aload_0
    //   125: getfield strategy : Lcom/bumptech/glide/load/engine/bitmap_recycle/LruPoolStrategy;
    //   128: aload #4
    //   130: invokeinterface getSize : (Landroid/graphics/Bitmap;)I
    //   135: isub
    //   136: putfield currentSize : I
    //   139: aload_0
    //   140: getfield tracker : Lcom/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool$BitmapTracker;
    //   143: aload #4
    //   145: invokeinterface remove : (Landroid/graphics/Bitmap;)V
    //   150: getstatic android/os/Build$VERSION.SDK_INT : I
    //   153: bipush #12
    //   155: if_icmplt -> 164
    //   158: aload #4
    //   160: iconst_1
    //   161: invokevirtual setHasAlpha : (Z)V
    //   164: ldc 'LruBitmapPool'
    //   166: iconst_2
    //   167: invokestatic isLoggable : (Ljava/lang/String;I)Z
    //   170: ifeq -> 219
    //   173: new java/lang/StringBuilder
    //   176: dup
    //   177: invokespecial <init> : ()V
    //   180: astore #5
    //   182: aload #5
    //   184: ldc 'Get bitmap='
    //   186: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   189: pop
    //   190: aload #5
    //   192: aload_0
    //   193: getfield strategy : Lcom/bumptech/glide/load/engine/bitmap_recycle/LruPoolStrategy;
    //   196: iload_1
    //   197: iload_2
    //   198: aload_3
    //   199: invokeinterface logBitmap : (IILandroid/graphics/Bitmap$Config;)Ljava/lang/String;
    //   204: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   207: pop
    //   208: ldc 'LruBitmapPool'
    //   210: aload #5
    //   212: invokevirtual toString : ()Ljava/lang/String;
    //   215: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   218: pop
    //   219: aload_0
    //   220: invokespecial dump : ()V
    //   223: aload_0
    //   224: monitorexit
    //   225: aload #4
    //   227: areturn
    //   228: astore_3
    //   229: aload_0
    //   230: monitorexit
    //   231: aload_3
    //   232: athrow
    // Exception table:
    //   from	to	target	type
    //   2	8	228	finally
    //   18	23	228	finally
    //   23	36	228	finally
    //   41	96	228	finally
    //   96	106	228	finally
    //   109	164	228	finally
    //   164	219	228	finally
    //   219	223	228	finally }
  
  public int getMaxSize() { return this.maxSize; }
  
  public boolean put(Bitmap paramBitmap) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_1
    //   3: ifnull -> 263
    //   6: aload_1
    //   7: invokevirtual isMutable : ()Z
    //   10: ifeq -> 162
    //   13: aload_0
    //   14: getfield strategy : Lcom/bumptech/glide/load/engine/bitmap_recycle/LruPoolStrategy;
    //   17: aload_1
    //   18: invokeinterface getSize : (Landroid/graphics/Bitmap;)I
    //   23: aload_0
    //   24: getfield maxSize : I
    //   27: if_icmpgt -> 162
    //   30: aload_0
    //   31: getfield allowedConfigs : Ljava/util/Set;
    //   34: aload_1
    //   35: invokevirtual getConfig : ()Landroid/graphics/Bitmap$Config;
    //   38: invokeinterface contains : (Ljava/lang/Object;)Z
    //   43: ifne -> 49
    //   46: goto -> 162
    //   49: aload_0
    //   50: getfield strategy : Lcom/bumptech/glide/load/engine/bitmap_recycle/LruPoolStrategy;
    //   53: aload_1
    //   54: invokeinterface getSize : (Landroid/graphics/Bitmap;)I
    //   59: istore_2
    //   60: aload_0
    //   61: getfield strategy : Lcom/bumptech/glide/load/engine/bitmap_recycle/LruPoolStrategy;
    //   64: aload_1
    //   65: invokeinterface put : (Landroid/graphics/Bitmap;)V
    //   70: aload_0
    //   71: getfield tracker : Lcom/bumptech/glide/load/engine/bitmap_recycle/LruBitmapPool$BitmapTracker;
    //   74: aload_1
    //   75: invokeinterface add : (Landroid/graphics/Bitmap;)V
    //   80: aload_0
    //   81: aload_0
    //   82: getfield puts : I
    //   85: iconst_1
    //   86: iadd
    //   87: putfield puts : I
    //   90: aload_0
    //   91: aload_0
    //   92: getfield currentSize : I
    //   95: iload_2
    //   96: iadd
    //   97: putfield currentSize : I
    //   100: ldc 'LruBitmapPool'
    //   102: iconst_2
    //   103: invokestatic isLoggable : (Ljava/lang/String;I)Z
    //   106: ifeq -> 150
    //   109: new java/lang/StringBuilder
    //   112: dup
    //   113: invokespecial <init> : ()V
    //   116: astore_3
    //   117: aload_3
    //   118: ldc_w 'Put bitmap in pool='
    //   121: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   124: pop
    //   125: aload_3
    //   126: aload_0
    //   127: getfield strategy : Lcom/bumptech/glide/load/engine/bitmap_recycle/LruPoolStrategy;
    //   130: aload_1
    //   131: invokeinterface logBitmap : (Landroid/graphics/Bitmap;)Ljava/lang/String;
    //   136: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   139: pop
    //   140: ldc 'LruBitmapPool'
    //   142: aload_3
    //   143: invokevirtual toString : ()Ljava/lang/String;
    //   146: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   149: pop
    //   150: aload_0
    //   151: invokespecial dump : ()V
    //   154: aload_0
    //   155: invokespecial evict : ()V
    //   158: aload_0
    //   159: monitorexit
    //   160: iconst_1
    //   161: ireturn
    //   162: ldc 'LruBitmapPool'
    //   164: iconst_2
    //   165: invokestatic isLoggable : (Ljava/lang/String;I)Z
    //   168: ifeq -> 255
    //   171: new java/lang/StringBuilder
    //   174: dup
    //   175: invokespecial <init> : ()V
    //   178: astore_3
    //   179: aload_3
    //   180: ldc_w 'Reject bitmap from pool, bitmap: '
    //   183: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   186: pop
    //   187: aload_3
    //   188: aload_0
    //   189: getfield strategy : Lcom/bumptech/glide/load/engine/bitmap_recycle/LruPoolStrategy;
    //   192: aload_1
    //   193: invokeinterface logBitmap : (Landroid/graphics/Bitmap;)Ljava/lang/String;
    //   198: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   201: pop
    //   202: aload_3
    //   203: ldc_w ', is mutable: '
    //   206: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   209: pop
    //   210: aload_3
    //   211: aload_1
    //   212: invokevirtual isMutable : ()Z
    //   215: invokevirtual append : (Z)Ljava/lang/StringBuilder;
    //   218: pop
    //   219: aload_3
    //   220: ldc_w ', is allowed config: '
    //   223: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   226: pop
    //   227: aload_3
    //   228: aload_0
    //   229: getfield allowedConfigs : Ljava/util/Set;
    //   232: aload_1
    //   233: invokevirtual getConfig : ()Landroid/graphics/Bitmap$Config;
    //   236: invokeinterface contains : (Ljava/lang/Object;)Z
    //   241: invokevirtual append : (Z)Ljava/lang/StringBuilder;
    //   244: pop
    //   245: ldc 'LruBitmapPool'
    //   247: aload_3
    //   248: invokevirtual toString : ()Ljava/lang/String;
    //   251: invokestatic v : (Ljava/lang/String;Ljava/lang/String;)I
    //   254: pop
    //   255: aload_0
    //   256: monitorexit
    //   257: iconst_0
    //   258: ireturn
    //   259: astore_1
    //   260: goto -> 274
    //   263: new java/lang/NullPointerException
    //   266: dup
    //   267: ldc_w 'Bitmap must not be null'
    //   270: invokespecial <init> : (Ljava/lang/String;)V
    //   273: athrow
    //   274: aload_0
    //   275: monitorexit
    //   276: aload_1
    //   277: athrow
    // Exception table:
    //   from	to	target	type
    //   6	46	259	finally
    //   49	150	259	finally
    //   150	158	259	finally
    //   162	255	259	finally
    //   263	274	259	finally }
  
  public void setSizeMultiplier(float paramFloat) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: aload_0
    //   4: getfield initialMaxSize : I
    //   7: i2f
    //   8: fload_1
    //   9: fmul
    //   10: invokestatic round : (F)I
    //   13: putfield maxSize : I
    //   16: aload_0
    //   17: invokespecial evict : ()V
    //   20: aload_0
    //   21: monitorexit
    //   22: return
    //   23: astore_2
    //   24: aload_0
    //   25: monitorexit
    //   26: aload_2
    //   27: athrow
    // Exception table:
    //   from	to	target	type
    //   2	20	23	finally }
  
  @SuppressLint({"InlinedApi"})
  public void trimMemory(int paramInt) {
    if (Log.isLoggable("LruBitmapPool", 3)) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("trimMemory, level=");
      stringBuilder.append(paramInt);
      Log.d("LruBitmapPool", stringBuilder.toString());
    } 
    if (paramInt >= 60) {
      clearMemory();
      return;
    } 
    if (paramInt >= 40)
      trimToSize(this.maxSize / 2); 
  }
}
