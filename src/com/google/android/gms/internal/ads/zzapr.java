package com.google.android.gms.internal.ads;

import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Handler;
import android.os.HandlerThread;
import android.view.Display;
import android.view.WindowManager;
import javax.annotation.concurrent.GuardedBy;

@zzadh
final class zzapr implements SensorEventListener {
  private final SensorManager zzcyn;
  
  private final Object zzcyo;
  
  private final Display zzcyp;
  
  private final float[] zzcyq;
  
  private final float[] zzcyr;
  
  @GuardedBy("mSensorThreadLock")
  private float[] zzcys;
  
  private Handler zzcyt;
  
  private zzapt zzcyu;
  
  zzapr(Context paramContext) {
    this.zzcyn = (SensorManager)paramContext.getSystemService("sensor");
    this.zzcyp = ((WindowManager)paramContext.getSystemService("window")).getDefaultDisplay();
    this.zzcyq = new float[9];
    this.zzcyr = new float[9];
    this.zzcyo = new Object();
  }
  
  private final void zzg(int paramInt1, int paramInt2) {
    float[] arrayOfFloat = this.zzcyr;
    float f = arrayOfFloat[paramInt1];
    arrayOfFloat[paramInt1] = arrayOfFloat[paramInt2];
    arrayOfFloat[paramInt2] = f;
  }
  
  public final void onAccuracyChanged(Sensor paramSensor, int paramInt) {}
  
  public final void onSensorChanged(SensorEvent paramSensorEvent) {
    float[] arrayOfFloat = paramSensorEvent.values;
    if (arrayOfFloat[0] != 0.0F || arrayOfFloat[1] != 0.0F || arrayOfFloat[2] != 0.0F)
      synchronized (this.zzcyo) {
        if (this.zzcys == null)
          this.zzcys = new float[9]; 
        SensorManager.getRotationMatrixFromVector(this.zzcyq, arrayOfFloat);
        int i = this.zzcyp.getRotation();
        if (i != 1) {
          if (i != 2) {
            if (i != 3) {
              System.arraycopy(this.zzcyq, 0, this.zzcyr, 0, 9);
            } else {
              SensorManager.remapCoordinateSystem(this.zzcyq, 130, 1, this.zzcyr);
            } 
          } else {
            SensorManager.remapCoordinateSystem(this.zzcyq, 129, 130, this.zzcyr);
          } 
        } else {
          SensorManager.remapCoordinateSystem(this.zzcyq, 2, 129, this.zzcyr);
        } 
        zzg(1, 3);
        zzg(2, 6);
        zzg(5, 7);
        synchronized (this.zzcyo) {
          System.arraycopy(this.zzcyr, 0, this.zzcys, 0, 9);
          null = this.zzcyu;
          if (null != null)
            null.zznn(); 
          return;
        } 
      }  
  }
  
  final void start() {
    if (this.zzcyt != null)
      return; 
    Sensor sensor = this.zzcyn.getDefaultSensor(11);
    if (sensor == null) {
      zzakb.e("No Sensor of TYPE_ROTATION_VECTOR");
      return;
    } 
    HandlerThread handlerThread = new HandlerThread("OrientationMonitor");
    handlerThread.start();
    this.zzcyt = new Handler(handlerThread.getLooper());
    if (!this.zzcyn.registerListener(this, sensor, 0, this.zzcyt)) {
      zzakb.e("SensorManager.registerListener failed.");
      stop();
    } 
  }
  
  final void stop() {
    if (this.zzcyt == null)
      return; 
    this.zzcyn.unregisterListener(this);
    this.zzcyt.post(new zzaps(this));
    this.zzcyt = null;
  }
  
  final void zza(zzapt paramzzapt) { this.zzcyu = paramzzapt; }
  
  final boolean zza(float[] paramArrayOfFloat) {
    synchronized (this.zzcyo) {
      if (this.zzcys == null)
        return false; 
      System.arraycopy(this.zzcys, 0, paramArrayOfFloat, 0, this.zzcys.length);
      return true;
    } 
  }
}
