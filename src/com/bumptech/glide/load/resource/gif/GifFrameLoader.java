package com.bumptech.glide.load.resource.gif;

import android.content.Context;
import android.graphics.Bitmap;
import android.os.Handler;
import android.os.Looper;
import android.os.SystemClock;
import com.bumptech.glide.GenericRequestBuilder;
import com.bumptech.glide.Glide;
import com.bumptech.glide.gifdecoder.GifDecoder;
import com.bumptech.glide.load.Encoder;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.resource.NullEncoder;

class GifFrameLoader {
  private final FrameCallback callback;
  
  private DelayTarget current;
  
  private final GifDecoder gifDecoder;
  
  private final Handler handler;
  
  private boolean isCleared;
  
  private boolean isLoadPending = false;
  
  private boolean isRunning = false;
  
  private GenericRequestBuilder<GifDecoder, GifDecoder, Bitmap, Bitmap> requestBuilder;
  
  public GifFrameLoader(Context paramContext, FrameCallback paramFrameCallback, GifDecoder paramGifDecoder, int paramInt1, int paramInt2) { this(paramFrameCallback, paramGifDecoder, null, getRequestBuilder(paramContext, paramGifDecoder, paramInt1, paramInt2, Glide.get(paramContext).getBitmapPool())); }
  
  GifFrameLoader(FrameCallback paramFrameCallback, GifDecoder paramGifDecoder, Handler paramHandler, GenericRequestBuilder<GifDecoder, GifDecoder, Bitmap, Bitmap> paramGenericRequestBuilder) {
    Handler handler1 = paramHandler;
    if (paramHandler == null)
      handler1 = new Handler(Looper.getMainLooper(), new FrameLoaderCallback(this, null)); 
    this.callback = paramFrameCallback;
    this.gifDecoder = paramGifDecoder;
    this.handler = handler1;
    this.requestBuilder = paramGenericRequestBuilder;
  }
  
  private static GenericRequestBuilder<GifDecoder, GifDecoder, Bitmap, Bitmap> getRequestBuilder(Context paramContext, GifDecoder paramGifDecoder, int paramInt1, int paramInt2, BitmapPool paramBitmapPool) {
    GifFrameResourceDecoder gifFrameResourceDecoder = new GifFrameResourceDecoder(paramBitmapPool);
    GifFrameModelLoader gifFrameModelLoader = new GifFrameModelLoader();
    Encoder encoder = NullEncoder.get();
    return Glide.with(paramContext).using(gifFrameModelLoader, GifDecoder.class).load(paramGifDecoder).as(Bitmap.class).sourceEncoder(encoder).decoder(gifFrameResourceDecoder).skipMemoryCache(true).diskCacheStrategy(DiskCacheStrategy.NONE).override(paramInt1, paramInt2);
  }
  
  private void loadNextFrame() {
    if (this.isRunning) {
      if (this.isLoadPending)
        return; 
      this.isLoadPending = true;
      this.gifDecoder.advance();
      long l1 = SystemClock.uptimeMillis();
      long l2 = this.gifDecoder.getNextDelay();
      DelayTarget delayTarget = new DelayTarget(this.handler, this.gifDecoder.getCurrentFrameIndex(), l1 + l2);
      this.requestBuilder.signature(new FrameSignature()).into(delayTarget);
    } 
  }
  
  public void clear() {
    stop();
    DelayTarget delayTarget = this.current;
    if (delayTarget != null) {
      Glide.clear(delayTarget);
      this.current = null;
    } 
    this.isCleared = true;
  }
  
  public Bitmap getCurrentFrame() {
    DelayTarget delayTarget = this.current;
    return (delayTarget != null) ? delayTarget.getResource() : null;
  }
  
  void onFrameReady(DelayTarget paramDelayTarget) {
    if (this.isCleared) {
      this.handler.obtainMessage(2, paramDelayTarget).sendToTarget();
      return;
    } 
    DelayTarget delayTarget = this.current;
    this.callback.onFrameReady((this.current = paramDelayTarget).access$100(paramDelayTarget));
    if (delayTarget != null)
      this.handler.obtainMessage(2, delayTarget).sendToTarget(); 
    this.isLoadPending = false;
    loadNextFrame();
  }
  
  public void setFrameTransformation(Transformation<Bitmap> paramTransformation) {
    if (paramTransformation != null) {
      this.requestBuilder = this.requestBuilder.transform(new Transformation[] { paramTransformation });
      return;
    } 
    throw new NullPointerException("Transformation must not be null");
  }
  
  public void start() {
    if (this.isRunning)
      return; 
    this.isRunning = true;
    this.isCleared = false;
    loadNextFrame();
  }
  
  public void stop() { this.isRunning = false; }
}
