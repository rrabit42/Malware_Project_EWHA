package com.android.volley.toolbox;

import android.content.ContentResolver;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.os.Handler;
import android.os.Looper;
import android.support.v4.util.ArrayMap;
import android.widget.ImageView;
import com.android.volley.Cache;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.cache.BitmapCache;
import com.android.volley.error.VolleyError;
import com.android.volley.request.ImageRequest;

public class ImageLoader {
  private int mBatchResponseDelayMs = 100;
  
  private final ArrayMap<String, BatchedImageRequest> mBatchedResponses = new ArrayMap();
  
  private final ImageCache mCache;
  
  private ContentResolver mContentResolver;
  
  private final Handler mHandler = new Handler(Looper.getMainLooper());
  
  private ArrayMap<String, String> mHeaders;
  
  private final ArrayMap<String, BatchedImageRequest> mInFlightRequests = new ArrayMap();
  
  private final RequestQueue mRequestQueue;
  
  private Resources mResources;
  
  private Runnable mRunnable;
  
  public ImageLoader(RequestQueue paramRequestQueue) { this(paramRequestQueue, BitmapCache.getInstance(null)); }
  
  public ImageLoader(RequestQueue paramRequestQueue, ImageCache paramImageCache) { this(paramRequestQueue, paramImageCache, null); }
  
  public ImageLoader(RequestQueue paramRequestQueue, ImageCache paramImageCache, Resources paramResources) {
    this.mRequestQueue = paramRequestQueue;
    this.mCache = paramImageCache;
    this.mResources = paramResources;
  }
  
  private void batchResponse(String paramString, BatchedImageRequest paramBatchedImageRequest) {
    this.mBatchedResponses.put(paramString, paramBatchedImageRequest);
    if (this.mRunnable == null) {
      this.mRunnable = new Object(this);
      this.mHandler.postDelayed(this.mRunnable, this.mBatchResponseDelayMs);
    } 
  }
  
  public static String getCacheKey(String paramString, int paramInt1, int paramInt2) {
    StringBuilder stringBuilder = new StringBuilder(paramString.length() + 12);
    stringBuilder.append("#W");
    stringBuilder.append(paramInt1);
    stringBuilder.append("#H");
    stringBuilder.append(paramInt2);
    stringBuilder.append(paramString);
    return stringBuilder.toString();
  }
  
  public static String getCacheKey(String paramString, int paramInt1, int paramInt2, ImageView.ScaleType paramScaleType) {
    if (paramScaleType == ImageView.ScaleType.CENTER_INSIDE)
      return getCacheKey(paramString, paramInt1, paramInt2); 
    StringBuilder stringBuilder = new StringBuilder(paramString.length() + 12);
    stringBuilder.append("#W");
    stringBuilder.append(paramInt1);
    stringBuilder.append("#H");
    stringBuilder.append(paramInt2);
    stringBuilder.append("#S");
    stringBuilder.append(paramScaleType.ordinal());
    stringBuilder.append(paramString);
    return stringBuilder.toString();
  }
  
  public static ImageListener getImageListener(ImageView paramImageView, int paramInt1, int paramInt2) { return new Object(paramInt2, paramImageView, paramInt1); }
  
  private void throwIfNotOnMainThread() {
    if (Looper.myLooper() == Looper.getMainLooper())
      return; 
    throw new IllegalStateException("ImageLoader must be invoked from the main thread.");
  }
  
  public ImageContainer get(String paramString, ImageListener paramImageListener) { return get(paramString, paramImageListener, 0, 0); }
  
  public ImageContainer get(String paramString, ImageListener paramImageListener, int paramInt1, int paramInt2) { return get(paramString, paramImageListener, paramInt1, paramInt2, ImageView.ScaleType.CENTER_INSIDE); }
  
  public ImageContainer get(String paramString, ImageListener paramImageListener, int paramInt1, int paramInt2, ImageView.ScaleType paramScaleType) {
    ImageContainer imageContainer1;
    throwIfNotOnMainThread();
    String str = getCacheKey(paramString, paramInt1, paramInt2, paramScaleType);
    Bitmap bitmap = this.mCache.getBitmap(str);
    if (bitmap != null) {
      imageContainer1 = new ImageContainer(this, bitmap, paramString, null, null);
      paramImageListener.onResponse(imageContainer1, true);
      return imageContainer1;
    } 
    ImageContainer imageContainer2 = new ImageContainer(this, null, imageContainer1, str, paramImageListener);
    paramImageListener.onResponse(imageContainer2, true);
    BatchedImageRequest batchedImageRequest = (BatchedImageRequest)this.mInFlightRequests.get(str);
    if (batchedImageRequest != null) {
      batchedImageRequest.addContainer(imageContainer2);
      return imageContainer2;
    } 
    Request request = makeImageRequest(imageContainer1, paramInt1, paramInt2, paramScaleType, str);
    request.setHeaders(this.mHeaders);
    this.mRequestQueue.add(request);
    this.mInFlightRequests.put(str, new BatchedImageRequest(this, request, imageContainer2));
    return imageContainer2;
  }
  
  protected Cache getCache() { return this.mRequestQueue.getCache(); }
  
  public ContentResolver getContentResolver() { return this.mContentResolver; }
  
  protected ImageCache getImageCache() { return this.mCache; }
  
  protected RequestQueue getRequestQueue() { return this.mRequestQueue; }
  
  public Resources getResources() { return this.mResources; }
  
  public boolean isCached(String paramString, int paramInt1, int paramInt2) { return isCached(paramString, paramInt1, paramInt2, ImageView.ScaleType.CENTER_INSIDE); }
  
  public boolean isCached(String paramString, int paramInt1, int paramInt2, ImageView.ScaleType paramScaleType) {
    throwIfNotOnMainThread();
    paramString = getCacheKey(paramString, paramInt1, paramInt2, paramScaleType);
    return (this.mCache.getBitmap(paramString) != null);
  }
  
  protected Request<Bitmap> makeImageRequest(String paramString1, int paramInt1, int paramInt2, ImageView.ScaleType paramScaleType, String paramString2) { return new ImageRequest(paramString1, this.mResources, this.mContentResolver, new Object(this, paramString2), paramInt1, paramInt2, paramScaleType, Bitmap.Config.RGB_565, new Object(this, paramString2)); }
  
  protected void onGetImageError(String paramString, VolleyError paramVolleyError) {
    BatchedImageRequest batchedImageRequest = (BatchedImageRequest)this.mInFlightRequests.remove(paramString);
    if (batchedImageRequest != null) {
      batchedImageRequest.setError(paramVolleyError);
      batchResponse(paramString, batchedImageRequest);
    } 
  }
  
  protected void onGetImageSuccess(String paramString, Bitmap paramBitmap) {
    this.mCache.putBitmap(paramString, paramBitmap);
    BatchedImageRequest batchedImageRequest = (BatchedImageRequest)this.mInFlightRequests.remove(paramString);
    if (batchedImageRequest != null) {
      BatchedImageRequest.access$002(batchedImageRequest, paramBitmap);
      batchResponse(paramString, batchedImageRequest);
    } 
  }
  
  public ImageContainer set(String paramString, ImageListener paramImageListener, int paramInt1, int paramInt2, ImageView.ScaleType paramScaleType, Bitmap paramBitmap) {
    throwIfNotOnMainThread();
    String str = getCacheKey(paramString, paramInt1, paramInt2, paramScaleType);
    ImageContainer imageContainer = new ImageContainer(this, paramBitmap, paramString, str, paramImageListener);
    paramImageListener.onResponse(imageContainer, true);
    this.mCache.putBitmap(str, paramBitmap);
    Response response = Response.success(paramBitmap, HttpHeaderParser.parseBitmapCacheHeaders(paramBitmap));
    getCache().put(paramString, response.cacheEntry);
    return imageContainer;
  }
  
  public void setBatchedResponseDelay(int paramInt) { this.mBatchResponseDelayMs = paramInt; }
  
  public void setContetResolver(ContentResolver paramContentResolver) { this.mContentResolver = paramContentResolver; }
  
  public void setHeaders(ArrayMap<String, String> paramArrayMap) { this.mHeaders = paramArrayMap; }
  
  protected void setImageSuccess(String paramString, Bitmap paramBitmap) {
    this.mCache.putBitmap(paramString, paramBitmap);
    BatchedImageRequest batchedImageRequest = (BatchedImageRequest)this.mInFlightRequests.remove(paramString);
    if (batchedImageRequest != null) {
      BatchedImageRequest.access$002(batchedImageRequest, paramBitmap);
      batchResponse(paramString, batchedImageRequest);
    } 
  }
  
  public void setResources(Resources paramResources) { this.mResources = paramResources; }
}
