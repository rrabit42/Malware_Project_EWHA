package com.google.android.gms.internal.ads;

import android.os.Parcel;
import android.os.ParcelFileDescriptor;
import android.os.Parcelable;
import com.google.android.gms.ads.internal.zzbv;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Class;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Constructor;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Field;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Param;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Reserved;
import com.google.android.gms.common.util.IOUtils;
import java.io.DataInputStream;
import java.io.IOException;

@zzadh
@Class(creator = "LargeParcelTeleporterCreator")
@Reserved({1})
public final class zzaev extends AbstractSafeParcelable {
  public static final Parcelable.Creator<zzaev> CREATOR = new zzaex();
  
  @Field(id = 2)
  private ParcelFileDescriptor zzcft;
  
  private Parcelable zzcfu;
  
  private boolean zzcfv;
  
  @Constructor
  public zzaev(@Param(id = 2) ParcelFileDescriptor paramParcelFileDescriptor) {
    this.zzcft = paramParcelFileDescriptor;
    this.zzcfu = null;
    this.zzcfv = true;
  }
  
  public zzaev(SafeParcelable paramSafeParcelable) {
    this.zzcft = null;
    this.zzcfu = paramSafeParcelable;
    this.zzcfv = false;
  }
  
  private final <T> ParcelFileDescriptor zze(byte[] paramArrayOfByte) {
    try {
      arrayOfParcelFileDescriptor = ParcelFileDescriptor.createPipe();
      iOException = new ParcelFileDescriptor.AutoCloseOutputStream(arrayOfParcelFileDescriptor[1]);
      try {
        (new Thread(new zzaew(this, iOException, paramArrayOfByte))).start();
        return arrayOfParcelFileDescriptor[0];
      } catch (IOException arrayOfParcelFileDescriptor) {
        ParcelFileDescriptor.AutoCloseOutputStream autoCloseOutputStream = iOException;
        ParcelFileDescriptor[] arrayOfParcelFileDescriptor1 = arrayOfParcelFileDescriptor;
      } 
    } catch (IOException iOException) {
      paramArrayOfByte = null;
    } 
    zzakb.zzb("Error transporting the ad response", iOException);
    zzbv.zzeo().zza(iOException, "LargeParcelTeleporter.pipeData.2");
    IOUtils.closeQuietly(paramArrayOfByte);
    return null;
  }
  
  private final ParcelFileDescriptor zzoc() {
    if (this.zzcft == null) {
      Parcel parcel = Parcel.obtain();
      try {
        this.zzcfu.writeToParcel(parcel, 0);
        arrayOfByte = parcel.marshall();
        parcel.recycle();
      } finally {
        parcel.recycle();
      } 
    } 
    return this.zzcft;
  }
  
  public final void writeToParcel(Parcel paramParcel, int paramInt) {
    zzoc();
    int i = SafeParcelWriter.beginObjectHeader(paramParcel);
    SafeParcelWriter.writeParcelable(paramParcel, 2, this.zzcft, paramInt, false);
    SafeParcelWriter.finishObjectHeader(paramParcel, i);
  }
  
  public final <T extends SafeParcelable> T zza(Parcelable.Creator<T> paramCreator) {
    if (this.zzcfv) {
      ParcelFileDescriptor parcelFileDescriptor = this.zzcft;
      if (parcelFileDescriptor == null) {
        zzakb.e("File descriptor is empty, returning null.");
        return null;
      } 
      Parcel parcel = new DataInputStream(new ParcelFileDescriptor.AutoCloseInputStream(parcelFileDescriptor));
      try {
        byte[] arrayOfByte = new byte[parcel.readInt()];
        parcel.readFully(arrayOfByte, 0, arrayOfByte.length);
        IOUtils.closeQuietly(parcel);
        parcel = Parcel.obtain();
        try {
          parcel.unmarshall(arrayOfByte, 0, arrayOfByte.length);
          parcel.setDataPosition(0);
          this.zzcfu = (SafeParcelable)paramCreator.createFromParcel(parcel);
          parcel.recycle();
        } finally {
          parcel.recycle();
        } 
      } catch (IOException paramCreator) {
        zzakb.zzb("Could not read from parcel file descriptor", paramCreator);
        IOUtils.closeQuietly(parcel);
        return null;
      } finally {}
    } 
    return (T)(SafeParcelable)this.zzcfu;
  }
}
