package com.bumptech.glide.load.resource.bitmap;

import android.graphics.Bitmap;
import android.util.Log;
import com.bumptech.glide.load.ResourceEncoder;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.util.LogTime;
import com.bumptech.glide.util.Util;
import java.io.OutputStream;

public class BitmapEncoder extends Object implements ResourceEncoder<Bitmap> {
  private static final int DEFAULT_COMPRESSION_QUALITY = 90;
  
  private static final String TAG = "BitmapEncoder";
  
  private Bitmap.CompressFormat compressFormat;
  
  private int quality;
  
  public BitmapEncoder() { this(null, 90); }
  
  public BitmapEncoder(Bitmap.CompressFormat paramCompressFormat, int paramInt) {
    this.compressFormat = paramCompressFormat;
    this.quality = paramInt;
  }
  
  private Bitmap.CompressFormat getFormat(Bitmap paramBitmap) {
    Bitmap.CompressFormat compressFormat1 = this.compressFormat;
    return (compressFormat1 != null) ? compressFormat1 : (paramBitmap.hasAlpha() ? Bitmap.CompressFormat.PNG : Bitmap.CompressFormat.JPEG);
  }
  
  public boolean encode(Resource<Bitmap> paramResource, OutputStream paramOutputStream) {
    Bitmap bitmap = (Bitmap)paramResource.get();
    long l = LogTime.getLogTime();
    Bitmap.CompressFormat compressFormat1 = getFormat(bitmap);
    bitmap.compress(compressFormat1, this.quality, paramOutputStream);
    if (Log.isLoggable("BitmapEncoder", 2)) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Compressed with type: ");
      stringBuilder.append(compressFormat1);
      stringBuilder.append(" of size ");
      stringBuilder.append(Util.getBitmapByteSize(bitmap));
      stringBuilder.append(" in ");
      stringBuilder.append(LogTime.getElapsedMillis(l));
      Log.v("BitmapEncoder", stringBuilder.toString());
    } 
    return true;
  }
  
  public String getId() { return "BitmapEncoder.com.bumptech.glide.load.resource.bitmap"; }
}
