package androidx.work.impl.utils;

import android.support.annotation.RestrictTo;
import androidx.work.Logger;
import androidx.work.WorkInfo;
import androidx.work.impl.WorkDatabase;
import androidx.work.impl.WorkManagerImpl;
import androidx.work.impl.model.WorkSpecDao;

@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
public class StopWorkRunnable implements Runnable {
  private static final String TAG = Logger.tagWithPrefix("StopWorkRunnable");
  
  private WorkManagerImpl mWorkManagerImpl;
  
  private String mWorkSpecId;
  
  public StopWorkRunnable(WorkManagerImpl paramWorkManagerImpl, String paramString) {
    this.mWorkManagerImpl = paramWorkManagerImpl;
    this.mWorkSpecId = paramString;
  }
  
  public void run() {
    workDatabase = this.mWorkManagerImpl.getWorkDatabase();
    null = workDatabase.workSpecDao();
    workDatabase.beginTransaction();
    try {
      if (null.getState(this.mWorkSpecId) == WorkInfo.State.RUNNING)
        null.setState(WorkInfo.State.ENQUEUED, new String[] { this.mWorkSpecId }); 
      boolean bool = this.mWorkManagerImpl.getProcessor().stopWork(this.mWorkSpecId);
      Logger.get().debug(TAG, String.format("StopWorkRunnable for %s; Processor.stopWork = %s", new Object[] { this.mWorkSpecId, Boolean.valueOf(bool) }), new Throwable[0]);
      workDatabase.setTransactionSuccessful();
      return;
    } finally {
      workDatabase.endTransaction();
    } 
  }
}
