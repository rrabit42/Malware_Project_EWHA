package android.support.v4.media.session;

import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RestrictTo;
import android.support.v4.media.MediaMetadataCompat;
import android.support.v4.media.MediaSessionManager;
import android.support.v4.media.VolumeProviderCompat;
import android.text.TextUtils;
import android.util.Log;
import android.util.TypedValue;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class MediaSessionCompat {
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_ARGUMENT_CAPTIONING_ENABLED = "android.support.v4.media.session.action.ARGUMENT_CAPTIONING_ENABLED";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_ARGUMENT_EXTRAS = "android.support.v4.media.session.action.ARGUMENT_EXTRAS";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_ARGUMENT_MEDIA_ID = "android.support.v4.media.session.action.ARGUMENT_MEDIA_ID";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_ARGUMENT_QUERY = "android.support.v4.media.session.action.ARGUMENT_QUERY";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_ARGUMENT_RATING = "android.support.v4.media.session.action.ARGUMENT_RATING";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_ARGUMENT_REPEAT_MODE = "android.support.v4.media.session.action.ARGUMENT_REPEAT_MODE";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_ARGUMENT_SHUFFLE_MODE = "android.support.v4.media.session.action.ARGUMENT_SHUFFLE_MODE";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_ARGUMENT_URI = "android.support.v4.media.session.action.ARGUMENT_URI";
  
  public static final String ACTION_FLAG_AS_INAPPROPRIATE = "android.support.v4.media.session.action.FLAG_AS_INAPPROPRIATE";
  
  public static final String ACTION_FOLLOW = "android.support.v4.media.session.action.FOLLOW";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_PLAY_FROM_URI = "android.support.v4.media.session.action.PLAY_FROM_URI";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_PREPARE = "android.support.v4.media.session.action.PREPARE";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_PREPARE_FROM_MEDIA_ID = "android.support.v4.media.session.action.PREPARE_FROM_MEDIA_ID";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_PREPARE_FROM_SEARCH = "android.support.v4.media.session.action.PREPARE_FROM_SEARCH";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_PREPARE_FROM_URI = "android.support.v4.media.session.action.PREPARE_FROM_URI";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_SET_CAPTIONING_ENABLED = "android.support.v4.media.session.action.SET_CAPTIONING_ENABLED";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_SET_RATING = "android.support.v4.media.session.action.SET_RATING";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_SET_REPEAT_MODE = "android.support.v4.media.session.action.SET_REPEAT_MODE";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String ACTION_SET_SHUFFLE_MODE = "android.support.v4.media.session.action.SET_SHUFFLE_MODE";
  
  public static final String ACTION_SKIP_AD = "android.support.v4.media.session.action.SKIP_AD";
  
  public static final String ACTION_UNFOLLOW = "android.support.v4.media.session.action.UNFOLLOW";
  
  public static final String ARGUMENT_MEDIA_ATTRIBUTE = "android.support.v4.media.session.ARGUMENT_MEDIA_ATTRIBUTE";
  
  public static final String ARGUMENT_MEDIA_ATTRIBUTE_VALUE = "android.support.v4.media.session.ARGUMENT_MEDIA_ATTRIBUTE_VALUE";
  
  private static final String DATA_CALLING_PACKAGE = "data_calling_pkg";
  
  private static final String DATA_CALLING_PID = "data_calling_pid";
  
  private static final String DATA_CALLING_UID = "data_calling_uid";
  
  private static final String DATA_EXTRAS = "data_extras";
  
  public static final int FLAG_HANDLES_MEDIA_BUTTONS = 1;
  
  public static final int FLAG_HANDLES_QUEUE_COMMANDS = 4;
  
  public static final int FLAG_HANDLES_TRANSPORT_CONTROLS = 2;
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String KEY_EXTRA_BINDER = "android.support.v4.media.session.EXTRA_BINDER";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public static final String KEY_SESSION_TOKEN2_BUNDLE = "android.support.v4.media.session.SESSION_TOKEN2_BUNDLE";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public static final String KEY_TOKEN = "android.support.v4.media.session.TOKEN";
  
  private static final int MAX_BITMAP_SIZE_IN_DP = 320;
  
  public static final int MEDIA_ATTRIBUTE_ALBUM = 1;
  
  public static final int MEDIA_ATTRIBUTE_ARTIST = 0;
  
  public static final int MEDIA_ATTRIBUTE_PLAYLIST = 2;
  
  static final String TAG = "MediaSessionCompat";
  
  static int sMaxBitmapSize;
  
  private final ArrayList<OnActiveChangeListener> mActiveListeners = new ArrayList();
  
  private final MediaControllerCompat mController;
  
  private final MediaSessionImpl mImpl;
  
  private MediaSessionCompat(Context paramContext, MediaSessionImpl paramMediaSessionImpl) {
    this.mImpl = paramMediaSessionImpl;
    if (Build.VERSION.SDK_INT >= 21 && !MediaSessionCompatApi21.hasCallback(paramMediaSessionImpl.getMediaSession()))
      setCallback(new Object(this)); 
    this.mController = new MediaControllerCompat(paramContext, this);
  }
  
  public MediaSessionCompat(Context paramContext, String paramString) { this(paramContext, paramString, null, null); }
  
  public MediaSessionCompat(Context paramContext, String paramString, ComponentName paramComponentName, PendingIntent paramPendingIntent) { this(paramContext, paramString, paramComponentName, paramPendingIntent, null); }
  
  private MediaSessionCompat(Context paramContext, String paramString, ComponentName paramComponentName, PendingIntent paramPendingIntent, Bundle paramBundle) {
    if (paramContext != null) {
      if (!TextUtils.isEmpty(paramString)) {
        ComponentName componentName = paramComponentName;
        if (paramComponentName == null) {
          paramComponentName = MediaButtonReceiver.getMediaButtonReceiverComponent(paramContext);
          componentName = paramComponentName;
          if (paramComponentName == null) {
            Log.w("MediaSessionCompat", "Couldn't find a unique registered media button receiver in the given context.");
            componentName = paramComponentName;
          } 
        } 
        PendingIntent pendingIntent = paramPendingIntent;
        if (componentName != null) {
          pendingIntent = paramPendingIntent;
          if (paramPendingIntent == null) {
            Intent intent = new Intent("android.intent.action.MEDIA_BUTTON");
            intent.setComponent(componentName);
            pendingIntent = PendingIntent.getBroadcast(paramContext, 0, intent, 0);
          } 
        } 
        if (Build.VERSION.SDK_INT >= 28) {
          this.mImpl = new MediaSessionImplApi28(paramContext, paramString, paramBundle);
          setCallback(new Object(this));
          this.mImpl.setMediaButtonReceiver(pendingIntent);
        } else if (Build.VERSION.SDK_INT >= 21) {
          this.mImpl = new MediaSessionImplApi21(paramContext, paramString, paramBundle);
          setCallback(new Object(this));
          this.mImpl.setMediaButtonReceiver(pendingIntent);
        } else if (Build.VERSION.SDK_INT >= 19) {
          this.mImpl = new MediaSessionImplApi19(paramContext, paramString, componentName, pendingIntent);
        } else if (Build.VERSION.SDK_INT >= 18) {
          this.mImpl = new MediaSessionImplApi18(paramContext, paramString, componentName, pendingIntent);
        } else {
          this.mImpl = new MediaSessionImplBase(paramContext, paramString, componentName, pendingIntent);
        } 
        this.mController = new MediaControllerCompat(paramContext, this);
        if (sMaxBitmapSize == 0)
          sMaxBitmapSize = (int)(TypedValue.applyDimension(1, 320.0F, paramContext.getResources().getDisplayMetrics()) + 0.5F); 
        return;
      } 
      throw new IllegalArgumentException("tag must not be null or empty");
    } 
    throw new IllegalArgumentException("context must not be null");
  }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public MediaSessionCompat(Context paramContext, String paramString, Bundle paramBundle) { this(paramContext, paramString, null, null, paramBundle); }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public static void ensureClassLoader(@Nullable Bundle paramBundle) {
    if (paramBundle != null)
      paramBundle.setClassLoader(MediaSessionCompat.class.getClassLoader()); 
  }
  
  public static MediaSessionCompat fromMediaSession(Context paramContext, Object paramObject) { return (paramContext != null && paramObject != null && Build.VERSION.SDK_INT >= 21) ? new MediaSessionCompat(paramContext, new MediaSessionImplApi21(paramObject)) : null; }
  
  static PlaybackStateCompat getStateWithUpdatedPosition(PlaybackStateCompat paramPlaybackStateCompat, MediaMetadataCompat paramMediaMetadataCompat) { // Byte code:
    //   0: aload_0
    //   1: astore #10
    //   3: aload_0
    //   4: ifnull -> 177
    //   7: aload_0
    //   8: invokevirtual getPosition : ()J
    //   11: lstore_2
    //   12: ldc2_w -1
    //   15: lstore #4
    //   17: lload_2
    //   18: ldc2_w -1
    //   21: lcmp
    //   22: ifne -> 27
    //   25: aload_0
    //   26: areturn
    //   27: aload_0
    //   28: invokevirtual getState : ()I
    //   31: iconst_3
    //   32: if_icmpeq -> 54
    //   35: aload_0
    //   36: invokevirtual getState : ()I
    //   39: iconst_4
    //   40: if_icmpeq -> 54
    //   43: aload_0
    //   44: astore #10
    //   46: aload_0
    //   47: invokevirtual getState : ()I
    //   50: iconst_5
    //   51: if_icmpne -> 177
    //   54: aload_0
    //   55: invokevirtual getLastPositionUpdateTime : ()J
    //   58: lstore_2
    //   59: aload_0
    //   60: astore #10
    //   62: lload_2
    //   63: lconst_0
    //   64: lcmp
    //   65: ifle -> 177
    //   68: invokestatic elapsedRealtime : ()J
    //   71: lstore #8
    //   73: aload_0
    //   74: invokevirtual getPlaybackSpeed : ()F
    //   77: lload #8
    //   79: lload_2
    //   80: lsub
    //   81: l2f
    //   82: fmul
    //   83: f2l
    //   84: aload_0
    //   85: invokevirtual getPosition : ()J
    //   88: ladd
    //   89: lstore #6
    //   91: lload #4
    //   93: lstore_2
    //   94: aload_1
    //   95: ifnull -> 119
    //   98: lload #4
    //   100: lstore_2
    //   101: aload_1
    //   102: ldc_w 'android.media.metadata.DURATION'
    //   105: invokevirtual containsKey : (Ljava/lang/String;)Z
    //   108: ifeq -> 119
    //   111: aload_1
    //   112: ldc_w 'android.media.metadata.DURATION'
    //   115: invokevirtual getLong : (Ljava/lang/String;)J
    //   118: lstore_2
    //   119: lload_2
    //   120: lconst_0
    //   121: lcmp
    //   122: iflt -> 135
    //   125: lload #6
    //   127: lload_2
    //   128: lcmp
    //   129: ifle -> 135
    //   132: goto -> 150
    //   135: lload #6
    //   137: lconst_0
    //   138: lcmp
    //   139: ifge -> 147
    //   142: lconst_0
    //   143: lstore_2
    //   144: goto -> 150
    //   147: lload #6
    //   149: lstore_2
    //   150: new android/support/v4/media/session/PlaybackStateCompat$Builder
    //   153: dup
    //   154: aload_0
    //   155: invokespecial <init> : (Landroid/support/v4/media/session/PlaybackStateCompat;)V
    //   158: aload_0
    //   159: invokevirtual getState : ()I
    //   162: lload_2
    //   163: aload_0
    //   164: invokevirtual getPlaybackSpeed : ()F
    //   167: lload #8
    //   169: invokevirtual setState : (IJFJ)Landroid/support/v4/media/session/PlaybackStateCompat$Builder;
    //   172: invokevirtual build : ()Landroid/support/v4/media/session/PlaybackStateCompat;
    //   175: astore #10
    //   177: aload #10
    //   179: areturn }
  
  public void addOnActiveChangeListener(OnActiveChangeListener paramOnActiveChangeListener) {
    if (paramOnActiveChangeListener != null) {
      this.mActiveListeners.add(paramOnActiveChangeListener);
      return;
    } 
    throw new IllegalArgumentException("Listener may not be null");
  }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public String getCallingPackage() { return this.mImpl.getCallingPackage(); }
  
  public MediaControllerCompat getController() { return this.mController; }
  
  @NonNull
  public final MediaSessionManager.RemoteUserInfo getCurrentControllerInfo() { return this.mImpl.getCurrentControllerInfo(); }
  
  public Object getMediaSession() { return this.mImpl.getMediaSession(); }
  
  public Object getRemoteControlClient() { return this.mImpl.getRemoteControlClient(); }
  
  public Token getSessionToken() { return this.mImpl.getSessionToken(); }
  
  public boolean isActive() { return this.mImpl.isActive(); }
  
  public void release() { this.mImpl.release(); }
  
  public void removeOnActiveChangeListener(OnActiveChangeListener paramOnActiveChangeListener) {
    if (paramOnActiveChangeListener != null) {
      this.mActiveListeners.remove(paramOnActiveChangeListener);
      return;
    } 
    throw new IllegalArgumentException("Listener may not be null");
  }
  
  public void sendSessionEvent(String paramString, Bundle paramBundle) {
    if (!TextUtils.isEmpty(paramString)) {
      this.mImpl.sendSessionEvent(paramString, paramBundle);
      return;
    } 
    throw new IllegalArgumentException("event cannot be null or empty");
  }
  
  public void setActive(boolean paramBoolean) {
    this.mImpl.setActive(paramBoolean);
    Iterator iterator = this.mActiveListeners.iterator();
    while (iterator.hasNext())
      ((OnActiveChangeListener)iterator.next()).onActiveChanged(); 
  }
  
  public void setCallback(Callback paramCallback) { setCallback(paramCallback, null); }
  
  public void setCallback(Callback paramCallback, Handler paramHandler) {
    if (paramCallback == null) {
      this.mImpl.setCallback(null, null);
      return;
    } 
    MediaSessionImpl mediaSessionImpl = this.mImpl;
    if (paramHandler == null)
      paramHandler = new Handler(); 
    mediaSessionImpl.setCallback(paramCallback, paramHandler);
  }
  
  public void setCaptioningEnabled(boolean paramBoolean) { this.mImpl.setCaptioningEnabled(paramBoolean); }
  
  public void setExtras(Bundle paramBundle) { this.mImpl.setExtras(paramBundle); }
  
  public void setFlags(int paramInt) { this.mImpl.setFlags(paramInt); }
  
  public void setMediaButtonReceiver(PendingIntent paramPendingIntent) { this.mImpl.setMediaButtonReceiver(paramPendingIntent); }
  
  public void setMetadata(MediaMetadataCompat paramMediaMetadataCompat) { this.mImpl.setMetadata(paramMediaMetadataCompat); }
  
  public void setPlaybackState(PlaybackStateCompat paramPlaybackStateCompat) { this.mImpl.setPlaybackState(paramPlaybackStateCompat); }
  
  public void setPlaybackToLocal(int paramInt) { this.mImpl.setPlaybackToLocal(paramInt); }
  
  public void setPlaybackToRemote(VolumeProviderCompat paramVolumeProviderCompat) {
    if (paramVolumeProviderCompat != null) {
      this.mImpl.setPlaybackToRemote(paramVolumeProviderCompat);
      return;
    } 
    throw new IllegalArgumentException("volumeProvider may not be null!");
  }
  
  public void setQueue(List<QueueItem> paramList) { this.mImpl.setQueue(paramList); }
  
  public void setQueueTitle(CharSequence paramCharSequence) { this.mImpl.setQueueTitle(paramCharSequence); }
  
  public void setRatingType(int paramInt) { this.mImpl.setRatingType(paramInt); }
  
  public void setRepeatMode(int paramInt) { this.mImpl.setRepeatMode(paramInt); }
  
  public void setSessionActivity(PendingIntent paramPendingIntent) { this.mImpl.setSessionActivity(paramPendingIntent); }
  
  public void setShuffleMode(int paramInt) { this.mImpl.setShuffleMode(paramInt); }
}
