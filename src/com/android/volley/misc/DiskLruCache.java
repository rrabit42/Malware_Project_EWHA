package com.android.volley.misc;

import java.io.BufferedWriter;
import java.io.Closeable;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.Writer;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

public final class DiskLruCache implements Closeable {
  static final long ANY_SEQUENCE_NUMBER = -1L;
  
  private static final String CLEAN = "CLEAN";
  
  private static final String DIRTY = "DIRTY";
  
  static final String JOURNAL_FILE = "journal";
  
  static final String JOURNAL_FILE_BACKUP = "journal.bkp";
  
  static final String JOURNAL_FILE_TEMP = "journal.tmp";
  
  static final Pattern LEGAL_KEY_PATTERN = Pattern.compile("[a-z0-9_-]{1,64}");
  
  static final String MAGIC = "libcore.io.DiskLruCache";
  
  private static final OutputStream NULL_OUTPUT_STREAM = new Object();
  
  private static final String READ = "READ";
  
  private static final String REMOVE = "REMOVE";
  
  static final String VERSION_1 = "1";
  
  private final int appVersion;
  
  private final Callable<Void> cleanupCallable = new Object(this);
  
  private final File directory;
  
  final ThreadPoolExecutor executorService = new ThreadPoolExecutor(0, 1, 60L, TimeUnit.SECONDS, new LinkedBlockingQueue());
  
  private final File journalFile;
  
  private final File journalFileBackup;
  
  private final File journalFileTmp;
  
  private Writer journalWriter;
  
  private final LinkedHashMap<String, Entry> lruEntries = new LinkedHashMap(0, 0.75F, true);
  
  private long maxSize;
  
  private long nextSequenceNumber = 0L;
  
  private int redundantOpCount;
  
  private long size = 0L;
  
  private final int valueCount;
  
  private DiskLruCache(File paramFile, int paramInt1, int paramInt2, long paramLong) {
    this.directory = paramFile;
    this.appVersion = paramInt1;
    this.journalFile = new File(paramFile, "journal");
    this.journalFileTmp = new File(paramFile, "journal.tmp");
    this.journalFileBackup = new File(paramFile, "journal.bkp");
    this.valueCount = paramInt2;
    this.maxSize = paramLong;
  }
  
  private void checkNotClosed() {
    if (this.journalWriter != null)
      return; 
    throw new IllegalStateException("cache is closed");
  }
  
  private void completeEdit(Editor paramEditor, boolean paramBoolean) throws IOException { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_1
    //   3: invokestatic access$1400 : (Lcom/android/volley/misc/DiskLruCache$Editor;)Lcom/android/volley/misc/DiskLruCache$Entry;
    //   6: astore #10
    //   8: aload #10
    //   10: invokestatic access$700 : (Lcom/android/volley/misc/DiskLruCache$Entry;)Lcom/android/volley/misc/DiskLruCache$Editor;
    //   13: aload_1
    //   14: if_acmpne -> 451
    //   17: iconst_0
    //   18: istore #5
    //   20: iload #5
    //   22: istore #4
    //   24: iload_2
    //   25: ifeq -> 126
    //   28: iload #5
    //   30: istore #4
    //   32: aload #10
    //   34: invokestatic access$600 : (Lcom/android/volley/misc/DiskLruCache$Entry;)Z
    //   37: ifne -> 126
    //   40: iconst_0
    //   41: istore_3
    //   42: iload #5
    //   44: istore #4
    //   46: iload_3
    //   47: aload_0
    //   48: getfield valueCount : I
    //   51: if_icmpge -> 126
    //   54: aload_1
    //   55: invokestatic access$1500 : (Lcom/android/volley/misc/DiskLruCache$Editor;)[Z
    //   58: iload_3
    //   59: baload
    //   60: ifeq -> 89
    //   63: aload #10
    //   65: iload_3
    //   66: invokevirtual getDirtyFile : (I)Ljava/io/File;
    //   69: invokevirtual exists : ()Z
    //   72: ifne -> 82
    //   75: aload_1
    //   76: invokevirtual abort : ()V
    //   79: aload_0
    //   80: monitorexit
    //   81: return
    //   82: iload_3
    //   83: iconst_1
    //   84: iadd
    //   85: istore_3
    //   86: goto -> 42
    //   89: aload_1
    //   90: invokevirtual abort : ()V
    //   93: new java/lang/StringBuilder
    //   96: dup
    //   97: invokespecial <init> : ()V
    //   100: astore_1
    //   101: aload_1
    //   102: ldc 'Newly created entry didn't create value for index '
    //   104: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   107: pop
    //   108: aload_1
    //   109: iload_3
    //   110: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   113: pop
    //   114: new java/lang/IllegalStateException
    //   117: dup
    //   118: aload_1
    //   119: invokevirtual toString : ()Ljava/lang/String;
    //   122: invokespecial <init> : (Ljava/lang/String;)V
    //   125: athrow
    //   126: iload #4
    //   128: aload_0
    //   129: getfield valueCount : I
    //   132: if_icmpge -> 221
    //   135: aload #10
    //   137: iload #4
    //   139: invokevirtual getDirtyFile : (I)Ljava/io/File;
    //   142: astore_1
    //   143: iload_2
    //   144: ifeq -> 214
    //   147: aload_1
    //   148: invokevirtual exists : ()Z
    //   151: ifeq -> 470
    //   154: aload #10
    //   156: iload #4
    //   158: invokevirtual getCleanFile : (I)Ljava/io/File;
    //   161: astore #11
    //   163: aload_1
    //   164: aload #11
    //   166: invokevirtual renameTo : (Ljava/io/File;)Z
    //   169: pop
    //   170: aload #10
    //   172: invokestatic access$1000 : (Lcom/android/volley/misc/DiskLruCache$Entry;)[J
    //   175: iload #4
    //   177: laload
    //   178: lstore #6
    //   180: aload #11
    //   182: invokevirtual length : ()J
    //   185: lstore #8
    //   187: aload #10
    //   189: invokestatic access$1000 : (Lcom/android/volley/misc/DiskLruCache$Entry;)[J
    //   192: iload #4
    //   194: lload #8
    //   196: lastore
    //   197: aload_0
    //   198: aload_0
    //   199: getfield size : J
    //   202: lload #6
    //   204: lsub
    //   205: lload #8
    //   207: ladd
    //   208: putfield size : J
    //   211: goto -> 470
    //   214: aload_1
    //   215: invokestatic deleteIfExists : (Ljava/io/File;)V
    //   218: goto -> 470
    //   221: aload_0
    //   222: aload_0
    //   223: getfield redundantOpCount : I
    //   226: iconst_1
    //   227: iadd
    //   228: putfield redundantOpCount : I
    //   231: aload #10
    //   233: aconst_null
    //   234: invokestatic access$702 : (Lcom/android/volley/misc/DiskLruCache$Entry;Lcom/android/volley/misc/DiskLruCache$Editor;)Lcom/android/volley/misc/DiskLruCache$Editor;
    //   237: pop
    //   238: aload #10
    //   240: invokestatic access$600 : (Lcom/android/volley/misc/DiskLruCache$Entry;)Z
    //   243: iload_2
    //   244: ior
    //   245: ifeq -> 346
    //   248: aload #10
    //   250: iconst_1
    //   251: invokestatic access$602 : (Lcom/android/volley/misc/DiskLruCache$Entry;Z)Z
    //   254: pop
    //   255: aload_0
    //   256: getfield journalWriter : Ljava/io/Writer;
    //   259: astore_1
    //   260: new java/lang/StringBuilder
    //   263: dup
    //   264: invokespecial <init> : ()V
    //   267: astore #11
    //   269: aload #11
    //   271: ldc_w 'CLEAN '
    //   274: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   277: pop
    //   278: aload #11
    //   280: aload #10
    //   282: invokestatic access$1100 : (Lcom/android/volley/misc/DiskLruCache$Entry;)Ljava/lang/String;
    //   285: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   288: pop
    //   289: aload #11
    //   291: aload #10
    //   293: invokevirtual getLengths : ()Ljava/lang/String;
    //   296: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   299: pop
    //   300: aload #11
    //   302: bipush #10
    //   304: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   307: pop
    //   308: aload_1
    //   309: aload #11
    //   311: invokevirtual toString : ()Ljava/lang/String;
    //   314: invokevirtual write : (Ljava/lang/String;)V
    //   317: iload_2
    //   318: ifeq -> 410
    //   321: aload_0
    //   322: getfield nextSequenceNumber : J
    //   325: lstore #6
    //   327: aload_0
    //   328: lconst_1
    //   329: lload #6
    //   331: ladd
    //   332: putfield nextSequenceNumber : J
    //   335: aload #10
    //   337: lload #6
    //   339: invokestatic access$1202 : (Lcom/android/volley/misc/DiskLruCache$Entry;J)J
    //   342: pop2
    //   343: goto -> 410
    //   346: aload_0
    //   347: getfield lruEntries : Ljava/util/LinkedHashMap;
    //   350: aload #10
    //   352: invokestatic access$1100 : (Lcom/android/volley/misc/DiskLruCache$Entry;)Ljava/lang/String;
    //   355: invokevirtual remove : (Ljava/lang/Object;)Ljava/lang/Object;
    //   358: pop
    //   359: aload_0
    //   360: getfield journalWriter : Ljava/io/Writer;
    //   363: astore_1
    //   364: new java/lang/StringBuilder
    //   367: dup
    //   368: invokespecial <init> : ()V
    //   371: astore #11
    //   373: aload #11
    //   375: ldc_w 'REMOVE '
    //   378: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   381: pop
    //   382: aload #11
    //   384: aload #10
    //   386: invokestatic access$1100 : (Lcom/android/volley/misc/DiskLruCache$Entry;)Ljava/lang/String;
    //   389: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   392: pop
    //   393: aload #11
    //   395: bipush #10
    //   397: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   400: pop
    //   401: aload_1
    //   402: aload #11
    //   404: invokevirtual toString : ()Ljava/lang/String;
    //   407: invokevirtual write : (Ljava/lang/String;)V
    //   410: aload_0
    //   411: getfield journalWriter : Ljava/io/Writer;
    //   414: invokevirtual flush : ()V
    //   417: aload_0
    //   418: getfield size : J
    //   421: aload_0
    //   422: getfield maxSize : J
    //   425: lcmp
    //   426: ifgt -> 436
    //   429: aload_0
    //   430: invokespecial journalRebuildRequired : ()Z
    //   433: ifeq -> 448
    //   436: aload_0
    //   437: getfield executorService : Ljava/util/concurrent/ThreadPoolExecutor;
    //   440: aload_0
    //   441: getfield cleanupCallable : Ljava/util/concurrent/Callable;
    //   444: invokevirtual submit : (Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
    //   447: pop
    //   448: aload_0
    //   449: monitorexit
    //   450: return
    //   451: new java/lang/IllegalStateException
    //   454: dup
    //   455: invokespecial <init> : ()V
    //   458: athrow
    //   459: astore_1
    //   460: aload_0
    //   461: monitorexit
    //   462: goto -> 467
    //   465: aload_1
    //   466: athrow
    //   467: goto -> 465
    //   470: iload #4
    //   472: iconst_1
    //   473: iadd
    //   474: istore #4
    //   476: goto -> 126
    // Exception table:
    //   from	to	target	type
    //   2	17	459	finally
    //   32	40	459	finally
    //   46	79	459	finally
    //   89	126	459	finally
    //   126	143	459	finally
    //   147	211	459	finally
    //   214	218	459	finally
    //   221	317	459	finally
    //   321	343	459	finally
    //   346	410	459	finally
    //   410	436	459	finally
    //   436	448	459	finally
    //   451	459	459	finally }
  
  private static void deleteIfExists(File paramFile) throws IOException {
    if (paramFile.exists()) {
      if (paramFile.delete())
        return; 
      throw new IOException();
    } 
  }
  
  private Editor edit(String paramString, long paramLong) throws IOException { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: invokespecial checkNotClosed : ()V
    //   6: aload_0
    //   7: aload_1
    //   8: invokespecial validateKey : (Ljava/lang/String;)V
    //   11: aload_0
    //   12: getfield lruEntries : Ljava/util/LinkedHashMap;
    //   15: aload_1
    //   16: invokevirtual get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   19: checkcast com/android/volley/misc/DiskLruCache$Entry
    //   22: astore #6
    //   24: lload_2
    //   25: ldc2_w -1
    //   28: lcmp
    //   29: ifeq -> 55
    //   32: aload #6
    //   34: ifnull -> 51
    //   37: aload #6
    //   39: invokestatic access$1200 : (Lcom/android/volley/misc/DiskLruCache$Entry;)J
    //   42: lstore #4
    //   44: lload #4
    //   46: lload_2
    //   47: lcmp
    //   48: ifeq -> 55
    //   51: aload_0
    //   52: monitorexit
    //   53: aconst_null
    //   54: areturn
    //   55: aload #6
    //   57: ifnonnull -> 86
    //   60: new com/android/volley/misc/DiskLruCache$Entry
    //   63: dup
    //   64: aload_0
    //   65: aload_1
    //   66: aconst_null
    //   67: invokespecial <init> : (Lcom/android/volley/misc/DiskLruCache;Ljava/lang/String;Lcom/android/volley/misc/DiskLruCache$1;)V
    //   70: astore #6
    //   72: aload_0
    //   73: getfield lruEntries : Ljava/util/LinkedHashMap;
    //   76: aload_1
    //   77: aload #6
    //   79: invokevirtual put : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   82: pop
    //   83: goto -> 102
    //   86: aload #6
    //   88: invokestatic access$700 : (Lcom/android/volley/misc/DiskLruCache$Entry;)Lcom/android/volley/misc/DiskLruCache$Editor;
    //   91: astore #7
    //   93: aload #7
    //   95: ifnull -> 102
    //   98: aload_0
    //   99: monitorexit
    //   100: aconst_null
    //   101: areturn
    //   102: new com/android/volley/misc/DiskLruCache$Editor
    //   105: dup
    //   106: aload_0
    //   107: aload #6
    //   109: aconst_null
    //   110: invokespecial <init> : (Lcom/android/volley/misc/DiskLruCache;Lcom/android/volley/misc/DiskLruCache$Entry;Lcom/android/volley/misc/DiskLruCache$1;)V
    //   113: astore #7
    //   115: aload #6
    //   117: aload #7
    //   119: invokestatic access$702 : (Lcom/android/volley/misc/DiskLruCache$Entry;Lcom/android/volley/misc/DiskLruCache$Editor;)Lcom/android/volley/misc/DiskLruCache$Editor;
    //   122: pop
    //   123: aload_0
    //   124: getfield journalWriter : Ljava/io/Writer;
    //   127: astore #6
    //   129: new java/lang/StringBuilder
    //   132: dup
    //   133: invokespecial <init> : ()V
    //   136: astore #8
    //   138: aload #8
    //   140: ldc_w 'DIRTY '
    //   143: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   146: pop
    //   147: aload #8
    //   149: aload_1
    //   150: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   153: pop
    //   154: aload #8
    //   156: bipush #10
    //   158: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   161: pop
    //   162: aload #6
    //   164: aload #8
    //   166: invokevirtual toString : ()Ljava/lang/String;
    //   169: invokevirtual write : (Ljava/lang/String;)V
    //   172: aload_0
    //   173: getfield journalWriter : Ljava/io/Writer;
    //   176: invokevirtual flush : ()V
    //   179: aload_0
    //   180: monitorexit
    //   181: aload #7
    //   183: areturn
    //   184: astore_1
    //   185: aload_0
    //   186: monitorexit
    //   187: aload_1
    //   188: athrow
    // Exception table:
    //   from	to	target	type
    //   2	24	184	finally
    //   37	44	184	finally
    //   60	83	184	finally
    //   86	93	184	finally
    //   102	179	184	finally }
  
  private static String inputStreamToString(InputStream paramInputStream) throws IOException { return Utils.readFully(new InputStreamReader(paramInputStream, Utils.UTF_8)); }
  
  private boolean journalRebuildRequired() {
    int i = this.redundantOpCount;
    return (i >= 2000 && i >= this.lruEntries.size());
  }
  
  public static DiskLruCache open(File paramFile, int paramInt1, int paramInt2, long paramLong) throws IOException {
    if (paramLong > 0L) {
      if (paramInt2 > 0) {
        File file = new File(paramFile, "journal.bkp");
        if (file.exists()) {
          File file1 = new File(paramFile, "journal");
          if (file1.exists()) {
            file.delete();
          } else {
            renameTo(file, file1, false);
          } 
        } 
        DiskLruCache diskLruCache2 = new DiskLruCache(paramFile, paramInt1, paramInt2, paramLong);
        if (diskLruCache2.journalFile.exists())
          try {
            diskLruCache2.readJournal();
            diskLruCache2.processJournal();
            diskLruCache2.journalWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(diskLruCache2.journalFile, true), Utils.US_ASCII));
            return diskLruCache2;
          } catch (IOException iOException) {
            PrintStream printStream = System.out;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("DiskLruCache ");
            stringBuilder.append(paramFile);
            stringBuilder.append(" is corrupt: ");
            stringBuilder.append(iOException.getMessage());
            stringBuilder.append(", removing");
            printStream.println(stringBuilder.toString());
            diskLruCache2.delete();
          }  
        paramFile.mkdirs();
        DiskLruCache diskLruCache1 = new DiskLruCache(paramFile, paramInt1, paramInt2, paramLong);
        diskLruCache1.rebuildJournal();
        return diskLruCache1;
      } 
      throw new IllegalArgumentException("valueCount <= 0");
    } 
    throw new IllegalArgumentException("maxSize <= 0");
  }
  
  private void processJournal() {
    deleteIfExists(this.journalFileTmp);
    Iterator iterator = this.lruEntries.values().iterator();
    while (iterator.hasNext()) {
      Entry entry;
      Editor editor = (entry = (Entry)iterator.next()).access$700(entry);
      byte b2 = 0;
      byte b1 = 0;
      if (editor == null) {
        while (b1 < this.valueCount) {
          this.size += Entry.access$1000(entry)[b1];
          b1++;
        } 
        continue;
      } 
      Entry.access$702(entry, null);
      for (b1 = b2; b1 < this.valueCount; b1++) {
        deleteIfExists(entry.getCleanFile(b1));
        deleteIfExists(entry.getDirtyFile(b1));
      } 
      iterator.remove();
    } 
  }
  
  private void readJournal() {
    strictLineReader = new StrictLineReader(new FileInputStream(this.journalFile), Utils.US_ASCII);
    try {
      str1 = strictLineReader.readLine();
      String str2 = strictLineReader.readLine();
      String str5 = strictLineReader.readLine();
      String str3 = strictLineReader.readLine();
      String str4 = strictLineReader.readLine();
      if ("libcore.io.DiskLruCache".equals(str1) && "1".equals(str2) && Integer.toString(this.appVersion).equals(str5) && Integer.toString(this.valueCount).equals(str3)) {
        boolean bool = "".equals(str4);
        if (bool) {
          int i = 0;
          try {
            while (true) {
              readJournalLine(strictLineReader.readLine());
              i++;
            } 
          } catch (EOFException str1) {
            this.redundantOpCount = i - this.lruEntries.size();
            return;
          } 
        } 
      } 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("unexpected journal header: [");
      stringBuilder.append(str1);
      stringBuilder.append(", ");
      stringBuilder.append(str2);
      stringBuilder.append(", ");
      stringBuilder.append(str3);
      stringBuilder.append(", ");
      stringBuilder.append(str4);
      stringBuilder.append("]");
      throw new IOException(stringBuilder.toString());
    } finally {
      Utils.closeQuietly(strictLineReader);
    } 
  }
  
  private void readJournalLine(String paramString) throws IOException {
    String[] arrayOfString;
    int i = paramString.indexOf(' ');
    if (i != -1) {
      String str;
      int j = i + 1;
      int k = paramString.indexOf(' ', j);
      if (k == -1) {
        String str1 = paramString.substring(j);
        str = str1;
        if (i == 6) {
          str = str1;
          if (paramString.startsWith("REMOVE")) {
            this.lruEntries.remove(str1);
            return;
          } 
        } 
      } else {
        str = paramString.substring(j, k);
      } 
      Entry entry2 = (Entry)this.lruEntries.get(str);
      Entry entry1 = entry2;
      if (entry2 == null) {
        entry1 = new Entry(this, str, null);
        this.lruEntries.put(str, entry1);
      } 
      if (k != -1 && i == 5 && paramString.startsWith("CLEAN")) {
        arrayOfString = paramString.substring(k + 1).split(" ");
        Entry.access$602(entry1, true);
        Entry.access$702(entry1, null);
        Entry.access$800(entry1, arrayOfString);
        return;
      } 
      if (k == -1 && i == 5 && arrayOfString.startsWith("DIRTY")) {
        Entry.access$702(entry1, new Editor(this, entry1, null));
        return;
      } 
      if (k == -1 && i == 4 && arrayOfString.startsWith("READ"))
        return; 
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("unexpected journal line: ");
      stringBuilder1.append(arrayOfString);
      throw new IOException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("unexpected journal line: ");
    stringBuilder.append(arrayOfString);
    throw new IOException(stringBuilder.toString());
  }
  
  private void rebuildJournal() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield journalWriter : Ljava/io/Writer;
    //   6: ifnull -> 16
    //   9: aload_0
    //   10: getfield journalWriter : Ljava/io/Writer;
    //   13: invokevirtual close : ()V
    //   16: new java/io/BufferedWriter
    //   19: dup
    //   20: new java/io/OutputStreamWriter
    //   23: dup
    //   24: new java/io/FileOutputStream
    //   27: dup
    //   28: aload_0
    //   29: getfield journalFileTmp : Ljava/io/File;
    //   32: invokespecial <init> : (Ljava/io/File;)V
    //   35: getstatic com/android/volley/misc/Utils.US_ASCII : Ljava/nio/charset/Charset;
    //   38: invokespecial <init> : (Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V
    //   41: invokespecial <init> : (Ljava/io/Writer;)V
    //   44: astore_1
    //   45: aload_1
    //   46: ldc 'libcore.io.DiskLruCache'
    //   48: invokevirtual write : (Ljava/lang/String;)V
    //   51: aload_1
    //   52: ldc_w '\\n'
    //   55: invokevirtual write : (Ljava/lang/String;)V
    //   58: aload_1
    //   59: ldc '1'
    //   61: invokevirtual write : (Ljava/lang/String;)V
    //   64: aload_1
    //   65: ldc_w '\\n'
    //   68: invokevirtual write : (Ljava/lang/String;)V
    //   71: aload_1
    //   72: aload_0
    //   73: getfield appVersion : I
    //   76: invokestatic toString : (I)Ljava/lang/String;
    //   79: invokevirtual write : (Ljava/lang/String;)V
    //   82: aload_1
    //   83: ldc_w '\\n'
    //   86: invokevirtual write : (Ljava/lang/String;)V
    //   89: aload_1
    //   90: aload_0
    //   91: getfield valueCount : I
    //   94: invokestatic toString : (I)Ljava/lang/String;
    //   97: invokevirtual write : (Ljava/lang/String;)V
    //   100: aload_1
    //   101: ldc_w '\\n'
    //   104: invokevirtual write : (Ljava/lang/String;)V
    //   107: aload_1
    //   108: ldc_w '\\n'
    //   111: invokevirtual write : (Ljava/lang/String;)V
    //   114: aload_0
    //   115: getfield lruEntries : Ljava/util/LinkedHashMap;
    //   118: invokevirtual values : ()Ljava/util/Collection;
    //   121: invokeinterface iterator : ()Ljava/util/Iterator;
    //   126: astore_2
    //   127: aload_2
    //   128: invokeinterface hasNext : ()Z
    //   133: ifeq -> 259
    //   136: aload_2
    //   137: invokeinterface next : ()Ljava/lang/Object;
    //   142: checkcast com/android/volley/misc/DiskLruCache$Entry
    //   145: astore_3
    //   146: aload_3
    //   147: invokestatic access$700 : (Lcom/android/volley/misc/DiskLruCache$Entry;)Lcom/android/volley/misc/DiskLruCache$Editor;
    //   150: ifnull -> 201
    //   153: new java/lang/StringBuilder
    //   156: dup
    //   157: invokespecial <init> : ()V
    //   160: astore #4
    //   162: aload #4
    //   164: ldc_w 'DIRTY '
    //   167: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   170: pop
    //   171: aload #4
    //   173: aload_3
    //   174: invokestatic access$1100 : (Lcom/android/volley/misc/DiskLruCache$Entry;)Ljava/lang/String;
    //   177: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   180: pop
    //   181: aload #4
    //   183: bipush #10
    //   185: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   188: pop
    //   189: aload_1
    //   190: aload #4
    //   192: invokevirtual toString : ()Ljava/lang/String;
    //   195: invokevirtual write : (Ljava/lang/String;)V
    //   198: goto -> 127
    //   201: new java/lang/StringBuilder
    //   204: dup
    //   205: invokespecial <init> : ()V
    //   208: astore #4
    //   210: aload #4
    //   212: ldc_w 'CLEAN '
    //   215: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   218: pop
    //   219: aload #4
    //   221: aload_3
    //   222: invokestatic access$1100 : (Lcom/android/volley/misc/DiskLruCache$Entry;)Ljava/lang/String;
    //   225: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   228: pop
    //   229: aload #4
    //   231: aload_3
    //   232: invokevirtual getLengths : ()Ljava/lang/String;
    //   235: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   238: pop
    //   239: aload #4
    //   241: bipush #10
    //   243: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   246: pop
    //   247: aload_1
    //   248: aload #4
    //   250: invokevirtual toString : ()Ljava/lang/String;
    //   253: invokevirtual write : (Ljava/lang/String;)V
    //   256: goto -> 127
    //   259: aload_1
    //   260: invokevirtual close : ()V
    //   263: aload_0
    //   264: getfield journalFile : Ljava/io/File;
    //   267: invokevirtual exists : ()Z
    //   270: ifeq -> 285
    //   273: aload_0
    //   274: getfield journalFile : Ljava/io/File;
    //   277: aload_0
    //   278: getfield journalFileBackup : Ljava/io/File;
    //   281: iconst_1
    //   282: invokestatic renameTo : (Ljava/io/File;Ljava/io/File;Z)V
    //   285: aload_0
    //   286: getfield journalFileTmp : Ljava/io/File;
    //   289: aload_0
    //   290: getfield journalFile : Ljava/io/File;
    //   293: iconst_0
    //   294: invokestatic renameTo : (Ljava/io/File;Ljava/io/File;Z)V
    //   297: aload_0
    //   298: getfield journalFileBackup : Ljava/io/File;
    //   301: invokevirtual delete : ()Z
    //   304: pop
    //   305: aload_0
    //   306: new java/io/BufferedWriter
    //   309: dup
    //   310: new java/io/OutputStreamWriter
    //   313: dup
    //   314: new java/io/FileOutputStream
    //   317: dup
    //   318: aload_0
    //   319: getfield journalFile : Ljava/io/File;
    //   322: iconst_1
    //   323: invokespecial <init> : (Ljava/io/File;Z)V
    //   326: getstatic com/android/volley/misc/Utils.US_ASCII : Ljava/nio/charset/Charset;
    //   329: invokespecial <init> : (Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V
    //   332: invokespecial <init> : (Ljava/io/Writer;)V
    //   335: putfield journalWriter : Ljava/io/Writer;
    //   338: aload_0
    //   339: monitorexit
    //   340: return
    //   341: astore_2
    //   342: aload_1
    //   343: invokevirtual close : ()V
    //   346: aload_2
    //   347: athrow
    //   348: astore_1
    //   349: aload_0
    //   350: monitorexit
    //   351: goto -> 356
    //   354: aload_1
    //   355: athrow
    //   356: goto -> 354
    // Exception table:
    //   from	to	target	type
    //   2	16	348	finally
    //   16	45	348	finally
    //   45	127	341	finally
    //   127	198	341	finally
    //   201	256	341	finally
    //   259	285	348	finally
    //   285	338	348	finally
    //   342	348	348	finally }
  
  private static void renameTo(File paramFile1, File paramFile2, boolean paramBoolean) throws IOException {
    if (paramBoolean)
      deleteIfExists(paramFile2); 
    if (paramFile1.renameTo(paramFile2))
      return; 
    throw new IOException();
  }
  
  private void trimToSize() {
    while (this.size > this.maxSize)
      remove((String)((Map.Entry)this.lruEntries.entrySet().iterator().next()).getKey()); 
  }
  
  private void validateKey(String paramString) throws IOException {
    if (LEGAL_KEY_PATTERN.matcher(paramString).matches())
      return; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("keys must match regex [a-z0-9_-]{1,64}: \"");
    stringBuilder.append(paramString);
    stringBuilder.append("\"");
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public void close() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield journalWriter : Ljava/io/Writer;
    //   6: astore_1
    //   7: aload_1
    //   8: ifnonnull -> 14
    //   11: aload_0
    //   12: monitorexit
    //   13: return
    //   14: new java/util/ArrayList
    //   17: dup
    //   18: aload_0
    //   19: getfield lruEntries : Ljava/util/LinkedHashMap;
    //   22: invokevirtual values : ()Ljava/util/Collection;
    //   25: invokespecial <init> : (Ljava/util/Collection;)V
    //   28: invokevirtual iterator : ()Ljava/util/Iterator;
    //   31: astore_1
    //   32: aload_1
    //   33: invokeinterface hasNext : ()Z
    //   38: ifeq -> 68
    //   41: aload_1
    //   42: invokeinterface next : ()Ljava/lang/Object;
    //   47: checkcast com/android/volley/misc/DiskLruCache$Entry
    //   50: astore_2
    //   51: aload_2
    //   52: invokestatic access$700 : (Lcom/android/volley/misc/DiskLruCache$Entry;)Lcom/android/volley/misc/DiskLruCache$Editor;
    //   55: ifnull -> 32
    //   58: aload_2
    //   59: invokestatic access$700 : (Lcom/android/volley/misc/DiskLruCache$Entry;)Lcom/android/volley/misc/DiskLruCache$Editor;
    //   62: invokevirtual abort : ()V
    //   65: goto -> 32
    //   68: aload_0
    //   69: invokespecial trimToSize : ()V
    //   72: aload_0
    //   73: getfield journalWriter : Ljava/io/Writer;
    //   76: invokevirtual close : ()V
    //   79: aload_0
    //   80: aconst_null
    //   81: putfield journalWriter : Ljava/io/Writer;
    //   84: aload_0
    //   85: monitorexit
    //   86: return
    //   87: astore_1
    //   88: aload_0
    //   89: monitorexit
    //   90: goto -> 95
    //   93: aload_1
    //   94: athrow
    //   95: goto -> 93
    // Exception table:
    //   from	to	target	type
    //   2	7	87	finally
    //   14	32	87	finally
    //   32	65	87	finally
    //   68	84	87	finally }
  
  public void delete() {
    close();
    Utils.deleteContents(this.directory);
  }
  
  public Editor edit(String paramString) throws IOException { return edit(paramString, -1L); }
  
  public void flush() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: invokespecial checkNotClosed : ()V
    //   6: aload_0
    //   7: invokespecial trimToSize : ()V
    //   10: aload_0
    //   11: getfield journalWriter : Ljava/io/Writer;
    //   14: invokevirtual flush : ()V
    //   17: aload_0
    //   18: monitorexit
    //   19: return
    //   20: astore_1
    //   21: aload_0
    //   22: monitorexit
    //   23: aload_1
    //   24: athrow
    // Exception table:
    //   from	to	target	type
    //   2	17	20	finally }
  
  public Snapshot get(String paramString) throws IOException { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: invokespecial checkNotClosed : ()V
    //   6: aload_0
    //   7: aload_1
    //   8: invokespecial validateKey : (Ljava/lang/String;)V
    //   11: aload_0
    //   12: getfield lruEntries : Ljava/util/LinkedHashMap;
    //   15: aload_1
    //   16: invokevirtual get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   19: checkcast com/android/volley/misc/DiskLruCache$Entry
    //   22: astore #6
    //   24: aload #6
    //   26: ifnonnull -> 33
    //   29: aload_0
    //   30: monitorexit
    //   31: aconst_null
    //   32: areturn
    //   33: aload #6
    //   35: invokestatic access$600 : (Lcom/android/volley/misc/DiskLruCache$Entry;)Z
    //   38: istore #4
    //   40: iload #4
    //   42: ifne -> 49
    //   45: aload_0
    //   46: monitorexit
    //   47: aconst_null
    //   48: areturn
    //   49: aload_0
    //   50: getfield valueCount : I
    //   53: anewarray java/io/InputStream
    //   56: astore #5
    //   58: iconst_0
    //   59: istore_3
    //   60: iconst_0
    //   61: istore_2
    //   62: iload_2
    //   63: aload_0
    //   64: getfield valueCount : I
    //   67: if_icmpge -> 94
    //   70: aload #5
    //   72: iload_2
    //   73: new java/io/FileInputStream
    //   76: dup
    //   77: aload #6
    //   79: iload_2
    //   80: invokevirtual getCleanFile : (I)Ljava/io/File;
    //   83: invokespecial <init> : (Ljava/io/File;)V
    //   86: aastore
    //   87: iload_2
    //   88: iconst_1
    //   89: iadd
    //   90: istore_2
    //   91: goto -> 62
    //   94: aload_0
    //   95: aload_0
    //   96: getfield redundantOpCount : I
    //   99: iconst_1
    //   100: iadd
    //   101: putfield redundantOpCount : I
    //   104: aload_0
    //   105: getfield journalWriter : Ljava/io/Writer;
    //   108: astore #7
    //   110: new java/lang/StringBuilder
    //   113: dup
    //   114: invokespecial <init> : ()V
    //   117: astore #8
    //   119: aload #8
    //   121: ldc_w 'READ '
    //   124: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   127: pop
    //   128: aload #8
    //   130: aload_1
    //   131: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   134: pop
    //   135: aload #8
    //   137: bipush #10
    //   139: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   142: pop
    //   143: aload #7
    //   145: aload #8
    //   147: invokevirtual toString : ()Ljava/lang/String;
    //   150: invokevirtual append : (Ljava/lang/CharSequence;)Ljava/io/Writer;
    //   153: pop
    //   154: aload_0
    //   155: invokespecial journalRebuildRequired : ()Z
    //   158: ifeq -> 173
    //   161: aload_0
    //   162: getfield executorService : Ljava/util/concurrent/ThreadPoolExecutor;
    //   165: aload_0
    //   166: getfield cleanupCallable : Ljava/util/concurrent/Callable;
    //   169: invokevirtual submit : (Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
    //   172: pop
    //   173: new com/android/volley/misc/DiskLruCache$Snapshot
    //   176: dup
    //   177: aload_0
    //   178: aload_1
    //   179: aload #6
    //   181: invokestatic access$1200 : (Lcom/android/volley/misc/DiskLruCache$Entry;)J
    //   184: aload #5
    //   186: aload #6
    //   188: invokestatic access$1000 : (Lcom/android/volley/misc/DiskLruCache$Entry;)[J
    //   191: aconst_null
    //   192: invokespecial <init> : (Lcom/android/volley/misc/DiskLruCache;Ljava/lang/String;J[Ljava/io/InputStream;[JLcom/android/volley/misc/DiskLruCache$1;)V
    //   195: astore_1
    //   196: aload_0
    //   197: monitorexit
    //   198: aload_1
    //   199: areturn
    //   200: iload_2
    //   201: aload_0
    //   202: getfield valueCount : I
    //   205: if_icmpge -> 229
    //   208: aload #5
    //   210: iload_2
    //   211: aaload
    //   212: ifnull -> 229
    //   215: aload #5
    //   217: iload_2
    //   218: aaload
    //   219: invokestatic closeQuietly : (Ljava/io/Closeable;)V
    //   222: iload_2
    //   223: iconst_1
    //   224: iadd
    //   225: istore_2
    //   226: goto -> 200
    //   229: aload_0
    //   230: monitorexit
    //   231: aconst_null
    //   232: areturn
    //   233: astore_1
    //   234: aload_0
    //   235: monitorexit
    //   236: goto -> 241
    //   239: aload_1
    //   240: athrow
    //   241: goto -> 239
    //   244: astore_1
    //   245: iload_3
    //   246: istore_2
    //   247: goto -> 200
    // Exception table:
    //   from	to	target	type
    //   2	24	233	finally
    //   33	40	233	finally
    //   49	58	233	finally
    //   62	87	244	java/io/FileNotFoundException
    //   62	87	233	finally
    //   94	173	233	finally
    //   173	196	233	finally
    //   200	208	233	finally
    //   215	222	233	finally }
  
  public File getDirectory() { return this.directory; }
  
  public long getMaxSize() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield maxSize : J
    //   6: lstore_1
    //   7: aload_0
    //   8: monitorexit
    //   9: lload_1
    //   10: lreturn
    //   11: astore_3
    //   12: aload_0
    //   13: monitorexit
    //   14: aload_3
    //   15: athrow
    // Exception table:
    //   from	to	target	type
    //   2	7	11	finally }
  
  public boolean isClosed() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield journalWriter : Ljava/io/Writer;
    //   6: astore_2
    //   7: aload_2
    //   8: ifnonnull -> 16
    //   11: iconst_1
    //   12: istore_1
    //   13: goto -> 18
    //   16: iconst_0
    //   17: istore_1
    //   18: aload_0
    //   19: monitorexit
    //   20: iload_1
    //   21: ireturn
    //   22: astore_2
    //   23: aload_0
    //   24: monitorexit
    //   25: aload_2
    //   26: athrow
    // Exception table:
    //   from	to	target	type
    //   2	7	22	finally }
  
  public boolean remove(String paramString) throws IOException { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: invokespecial checkNotClosed : ()V
    //   6: aload_0
    //   7: aload_1
    //   8: invokespecial validateKey : (Ljava/lang/String;)V
    //   11: aload_0
    //   12: getfield lruEntries : Ljava/util/LinkedHashMap;
    //   15: aload_1
    //   16: invokevirtual get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   19: checkcast com/android/volley/misc/DiskLruCache$Entry
    //   22: astore #4
    //   24: iconst_0
    //   25: istore_2
    //   26: aload #4
    //   28: ifnull -> 229
    //   31: aload #4
    //   33: invokestatic access$700 : (Lcom/android/volley/misc/DiskLruCache$Entry;)Lcom/android/volley/misc/DiskLruCache$Editor;
    //   36: ifnull -> 42
    //   39: goto -> 229
    //   42: iload_2
    //   43: aload_0
    //   44: getfield valueCount : I
    //   47: if_icmpge -> 139
    //   50: aload #4
    //   52: iload_2
    //   53: invokevirtual getCleanFile : (I)Ljava/io/File;
    //   56: astore_3
    //   57: aload_3
    //   58: invokevirtual exists : ()Z
    //   61: ifeq -> 108
    //   64: aload_3
    //   65: invokevirtual delete : ()Z
    //   68: ifeq -> 74
    //   71: goto -> 108
    //   74: new java/lang/StringBuilder
    //   77: dup
    //   78: invokespecial <init> : ()V
    //   81: astore_1
    //   82: aload_1
    //   83: ldc_w 'failed to delete '
    //   86: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   89: pop
    //   90: aload_1
    //   91: aload_3
    //   92: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   95: pop
    //   96: new java/io/IOException
    //   99: dup
    //   100: aload_1
    //   101: invokevirtual toString : ()Ljava/lang/String;
    //   104: invokespecial <init> : (Ljava/lang/String;)V
    //   107: athrow
    //   108: aload_0
    //   109: aload_0
    //   110: getfield size : J
    //   113: aload #4
    //   115: invokestatic access$1000 : (Lcom/android/volley/misc/DiskLruCache$Entry;)[J
    //   118: iload_2
    //   119: laload
    //   120: lsub
    //   121: putfield size : J
    //   124: aload #4
    //   126: invokestatic access$1000 : (Lcom/android/volley/misc/DiskLruCache$Entry;)[J
    //   129: iload_2
    //   130: lconst_0
    //   131: lastore
    //   132: iload_2
    //   133: iconst_1
    //   134: iadd
    //   135: istore_2
    //   136: goto -> 42
    //   139: aload_0
    //   140: aload_0
    //   141: getfield redundantOpCount : I
    //   144: iconst_1
    //   145: iadd
    //   146: putfield redundantOpCount : I
    //   149: aload_0
    //   150: getfield journalWriter : Ljava/io/Writer;
    //   153: astore_3
    //   154: new java/lang/StringBuilder
    //   157: dup
    //   158: invokespecial <init> : ()V
    //   161: astore #4
    //   163: aload #4
    //   165: ldc_w 'REMOVE '
    //   168: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   171: pop
    //   172: aload #4
    //   174: aload_1
    //   175: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   178: pop
    //   179: aload #4
    //   181: bipush #10
    //   183: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   186: pop
    //   187: aload_3
    //   188: aload #4
    //   190: invokevirtual toString : ()Ljava/lang/String;
    //   193: invokevirtual append : (Ljava/lang/CharSequence;)Ljava/io/Writer;
    //   196: pop
    //   197: aload_0
    //   198: getfield lruEntries : Ljava/util/LinkedHashMap;
    //   201: aload_1
    //   202: invokevirtual remove : (Ljava/lang/Object;)Ljava/lang/Object;
    //   205: pop
    //   206: aload_0
    //   207: invokespecial journalRebuildRequired : ()Z
    //   210: ifeq -> 225
    //   213: aload_0
    //   214: getfield executorService : Ljava/util/concurrent/ThreadPoolExecutor;
    //   217: aload_0
    //   218: getfield cleanupCallable : Ljava/util/concurrent/Callable;
    //   221: invokevirtual submit : (Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
    //   224: pop
    //   225: aload_0
    //   226: monitorexit
    //   227: iconst_1
    //   228: ireturn
    //   229: aload_0
    //   230: monitorexit
    //   231: iconst_0
    //   232: ireturn
    //   233: astore_1
    //   234: aload_0
    //   235: monitorexit
    //   236: goto -> 241
    //   239: aload_1
    //   240: athrow
    //   241: goto -> 239
    // Exception table:
    //   from	to	target	type
    //   2	24	233	finally
    //   31	39	233	finally
    //   42	71	233	finally
    //   74	108	233	finally
    //   108	132	233	finally
    //   139	225	233	finally }
  
  public void setMaxSize(long paramLong) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: lload_1
    //   4: putfield maxSize : J
    //   7: aload_0
    //   8: getfield executorService : Ljava/util/concurrent/ThreadPoolExecutor;
    //   11: aload_0
    //   12: getfield cleanupCallable : Ljava/util/concurrent/Callable;
    //   15: invokevirtual submit : (Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
    //   18: pop
    //   19: aload_0
    //   20: monitorexit
    //   21: return
    //   22: astore_3
    //   23: aload_0
    //   24: monitorexit
    //   25: aload_3
    //   26: athrow
    // Exception table:
    //   from	to	target	type
    //   2	19	22	finally }
  
  public long size() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield size : J
    //   6: lstore_1
    //   7: aload_0
    //   8: monitorexit
    //   9: lload_1
    //   10: lreturn
    //   11: astore_3
    //   12: aload_0
    //   13: monitorexit
    //   14: aload_3
    //   15: athrow
    // Exception table:
    //   from	to	target	type
    //   2	7	11	finally }
}
