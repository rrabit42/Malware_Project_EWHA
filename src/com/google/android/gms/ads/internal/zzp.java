package com.google.android.gms.ads.internal;

import android.os.Bundle;
import android.support.annotation.Nullable;
import com.google.android.gms.internal.ads.zzadh;
import com.google.android.gms.internal.ads.zzjj;
import com.google.android.gms.internal.ads.zzjn;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.TreeSet;
import javax.annotation.ParametersAreNonnullByDefault;

@zzadh
@ParametersAreNonnullByDefault
public final class zzp {
  private static String zza(@Nullable Bundle paramBundle) {
    if (paramBundle == null)
      return null; 
    StringBuilder stringBuilder = new StringBuilder();
    Iterator iterator = (new TreeSet(paramBundle.keySet())).iterator();
    while (iterator.hasNext()) {
      Object object = paramBundle.get((String)iterator.next());
      if (object == null) {
        object = "null";
      } else if (object instanceof Bundle) {
        object = zza((Bundle)object);
      } else {
        object = object.toString();
      } 
      stringBuilder.append(object);
    } 
    return stringBuilder.toString();
  }
  
  public static Object[] zza(String paramString1, zzjj paramzzjj, String paramString2, int paramInt, @Nullable zzjn paramzzjn) {
    HashSet hashSet = new HashSet(Arrays.asList(paramString1.split(",")));
    ArrayList arrayList = new ArrayList();
    arrayList.add(paramString1);
    arrayList.add(paramString2);
    if (hashSet.contains("formatString"))
      arrayList.add(null); 
    if (hashSet.contains("networkType"))
      arrayList.add(Integer.valueOf(paramInt)); 
    if (hashSet.contains("birthday"))
      arrayList.add(Long.valueOf(paramzzjj.zzapw)); 
    if (hashSet.contains("extras"))
      arrayList.add(zza(paramzzjj.extras)); 
    if (hashSet.contains("gender"))
      arrayList.add(Integer.valueOf(paramzzjj.zzapx)); 
    if (hashSet.contains("keywords"))
      if (paramzzjj.zzapy != null) {
        arrayList.add(paramzzjj.zzapy.toString());
      } else {
        arrayList.add(null);
      }  
    if (hashSet.contains("isTestDevice"))
      arrayList.add(Boolean.valueOf(paramzzjj.zzapz)); 
    if (hashSet.contains("tagForChildDirectedTreatment"))
      arrayList.add(Integer.valueOf(paramzzjj.zzaqa)); 
    if (hashSet.contains("manualImpressionsEnabled"))
      arrayList.add(Boolean.valueOf(paramzzjj.zzaqb)); 
    if (hashSet.contains("publisherProvidedId"))
      arrayList.add(paramzzjj.zzaqc); 
    if (hashSet.contains("location"))
      if (paramzzjj.zzaqe != null) {
        arrayList.add(paramzzjj.zzaqe.toString());
      } else {
        arrayList.add(null);
      }  
    if (hashSet.contains("contentUrl"))
      arrayList.add(paramzzjj.zzaqf); 
    if (hashSet.contains("networkExtras"))
      arrayList.add(zza(paramzzjj.zzaqg)); 
    if (hashSet.contains("customTargeting"))
      arrayList.add(zza(paramzzjj.zzaqh)); 
    if (hashSet.contains("categoryExclusions"))
      if (paramzzjj.zzaqi != null) {
        arrayList.add(paramzzjj.zzaqi.toString());
      } else {
        arrayList.add(null);
      }  
    if (hashSet.contains("requestAgent"))
      arrayList.add(paramzzjj.zzaqj); 
    if (hashSet.contains("requestPackage"))
      arrayList.add(paramzzjj.zzaqk); 
    if (hashSet.contains("isDesignedForFamilies"))
      arrayList.add(Boolean.valueOf(paramzzjj.zzaql)); 
    return arrayList.toArray();
  }
}
