package android.support.graphics.drawable;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.XmlResourceParser;
import android.os.Build;
import android.support.annotation.RestrictTo;
import android.support.v4.view.animation.FastOutLinearInInterpolator;
import android.support.v4.view.animation.FastOutSlowInInterpolator;
import android.support.v4.view.animation.LinearOutSlowInInterpolator;
import android.util.Xml;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.AnimationUtils;
import android.view.animation.AnticipateInterpolator;
import android.view.animation.AnticipateOvershootInterpolator;
import android.view.animation.BounceInterpolator;
import android.view.animation.CycleInterpolator;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.Interpolator;
import android.view.animation.LinearInterpolator;
import android.view.animation.OvershootInterpolator;
import java.io.IOException;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
public class AnimationUtilsCompat {
  private static Interpolator createInterpolatorFromXml(Context paramContext, Resources paramResources, Resources.Theme paramTheme, XmlPullParser paramXmlPullParser) throws XmlPullParserException, IOException {
    PathInterpolatorCompat pathInterpolatorCompat;
    int i = paramXmlPullParser.getDepth();
    paramResources = null;
    while (true) {
      int j = paramXmlPullParser.next();
      if ((j != 3 || paramXmlPullParser.getDepth() > i) && j != 1) {
        if (j != 2)
          continue; 
        pathInterpolatorCompat = Xml.asAttributeSet(paramXmlPullParser);
        String str = paramXmlPullParser.getName();
        if (str.equals("linearInterpolator")) {
          pathInterpolatorCompat = new LinearInterpolator();
          continue;
        } 
        if (str.equals("accelerateInterpolator")) {
          pathInterpolatorCompat = new AccelerateInterpolator(paramContext, pathInterpolatorCompat);
          continue;
        } 
        if (str.equals("decelerateInterpolator")) {
          DecelerateInterpolator decelerateInterpolator = new DecelerateInterpolator(paramContext, pathInterpolatorCompat);
          continue;
        } 
        if (str.equals("accelerateDecelerateInterpolator")) {
          pathInterpolatorCompat = new AccelerateDecelerateInterpolator();
          continue;
        } 
        if (str.equals("cycleInterpolator")) {
          pathInterpolatorCompat = new CycleInterpolator(paramContext, pathInterpolatorCompat);
          continue;
        } 
        if (str.equals("anticipateInterpolator")) {
          pathInterpolatorCompat = new AnticipateInterpolator(paramContext, pathInterpolatorCompat);
          continue;
        } 
        if (str.equals("overshootInterpolator")) {
          pathInterpolatorCompat = new OvershootInterpolator(paramContext, pathInterpolatorCompat);
          continue;
        } 
        if (str.equals("anticipateOvershootInterpolator")) {
          AnticipateOvershootInterpolator anticipateOvershootInterpolator = new AnticipateOvershootInterpolator(paramContext, pathInterpolatorCompat);
          continue;
        } 
        if (str.equals("bounceInterpolator")) {
          pathInterpolatorCompat = new BounceInterpolator();
          continue;
        } 
        if (str.equals("pathInterpolator")) {
          pathInterpolatorCompat = new PathInterpolatorCompat(paramContext, pathInterpolatorCompat, paramXmlPullParser);
          continue;
        } 
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Unknown interpolator name: ");
        stringBuilder.append(paramXmlPullParser.getName());
        throw new RuntimeException(stringBuilder.toString());
      } 
      break;
    } 
    return pathInterpolatorCompat;
  }
  
  public static Interpolator loadInterpolator(Context paramContext, int paramInt) throws Resources.NotFoundException {
    if (Build.VERSION.SDK_INT >= 21)
      return AnimationUtils.loadInterpolator(paramContext, paramInt); 
    StringBuilder stringBuilder1 = null;
    StringBuilder stringBuilder2 = null;
    Resources.NotFoundException notFoundException = null;
    if (paramInt == 17563663) {
      Resources.NotFoundException notFoundException1;
      try {
        return new FastOutLinearInInterpolator();
      } catch (XmlPullParserException paramContext) {
        notFoundException = stringBuilder2;
        stringBuilder1 = new StringBuilder();
        notFoundException = stringBuilder2;
        stringBuilder1.append("Can't load animation resource ID #0x");
        notFoundException = stringBuilder2;
        stringBuilder1.append(Integer.toHexString(paramInt));
        notFoundException = stringBuilder2;
        notFoundException1 = new Resources.NotFoundException(stringBuilder1.toString());
        notFoundException = stringBuilder2;
        notFoundException1.initCause(paramContext);
        notFoundException = stringBuilder2;
        throw notFoundException1;
      } catch (IOException paramContext) {
        notFoundException = notFoundException1;
        stringBuilder2 = new StringBuilder();
        notFoundException = notFoundException1;
        stringBuilder2.append("Can't load animation resource ID #0x");
        notFoundException = notFoundException1;
        stringBuilder2.append(Integer.toHexString(paramInt));
        notFoundException = notFoundException1;
        Resources.NotFoundException notFoundException2 = new Resources.NotFoundException(stringBuilder2.toString());
        notFoundException = notFoundException1;
        notFoundException2.initCause(paramContext);
        notFoundException = notFoundException1;
        throw notFoundException2;
      } finally {
        if (notFoundException != null)
          notFoundException.close(); 
      } 
    } 
    if (paramInt == 17563661)
      return new FastOutSlowInInterpolator(); 
    if (paramInt == 17563662)
      return new LinearOutSlowInInterpolator(); 
    XmlResourceParser xmlResourceParser4 = paramContext.getResources().getAnimation(paramInt);
    XmlResourceParser xmlResourceParser1 = xmlResourceParser4;
    XmlResourceParser xmlResourceParser2 = xmlResourceParser4;
    XmlResourceParser xmlResourceParser3 = xmlResourceParser4;
    Interpolator interpolator = createInterpolatorFromXml(paramContext, paramContext.getResources(), paramContext.getTheme(), xmlResourceParser4);
    if (xmlResourceParser4 != null)
      xmlResourceParser4.close(); 
    return interpolator;
  }
}
