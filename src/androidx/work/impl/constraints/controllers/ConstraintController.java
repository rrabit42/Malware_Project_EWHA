package androidx.work.impl.constraints.controllers;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import androidx.work.impl.constraints.ConstraintListener;
import androidx.work.impl.constraints.trackers.ConstraintTracker;
import androidx.work.impl.model.WorkSpec;
import java.util.ArrayList;
import java.util.List;

public abstract class ConstraintController<T> extends Object implements ConstraintListener<T> {
  private OnConstraintUpdatedCallback mCallback;
  
  private T mCurrentValue;
  
  private final List<String> mMatchingWorkSpecIds = new ArrayList();
  
  private ConstraintTracker<T> mTracker;
  
  ConstraintController(ConstraintTracker<T> paramConstraintTracker) { this.mTracker = paramConstraintTracker; }
  
  private void updateCallback() {
    if (!this.mMatchingWorkSpecIds.isEmpty()) {
      if (this.mCallback == null)
        return; 
      Object object = this.mCurrentValue;
      if (object == null || isConstrained(object)) {
        this.mCallback.onConstraintNotMet(this.mMatchingWorkSpecIds);
        return;
      } 
      this.mCallback.onConstraintMet(this.mMatchingWorkSpecIds);
      return;
    } 
  }
  
  abstract boolean hasConstraint(@NonNull WorkSpec paramWorkSpec);
  
  abstract boolean isConstrained(@NonNull T paramT);
  
  public boolean isWorkSpecConstrained(@NonNull String paramString) {
    Object object = this.mCurrentValue;
    return (object != null && isConstrained(object) && this.mMatchingWorkSpecIds.contains(paramString));
  }
  
  public void onConstraintChanged(@Nullable T paramT) {
    this.mCurrentValue = paramT;
    updateCallback();
  }
  
  public void replace(@NonNull List<WorkSpec> paramList) {
    this.mMatchingWorkSpecIds.clear();
    for (WorkSpec workSpec : paramList) {
      if (hasConstraint(workSpec))
        this.mMatchingWorkSpecIds.add(workSpec.id); 
    } 
    if (this.mMatchingWorkSpecIds.isEmpty()) {
      this.mTracker.removeListener(this);
    } else {
      this.mTracker.addListener(this);
    } 
    updateCallback();
  }
  
  public void reset() {
    if (!this.mMatchingWorkSpecIds.isEmpty()) {
      this.mMatchingWorkSpecIds.clear();
      this.mTracker.removeListener(this);
    } 
  }
  
  public void setCallback(OnConstraintUpdatedCallback paramOnConstraintUpdatedCallback) {
    if (this.mCallback != paramOnConstraintUpdatedCallback) {
      this.mCallback = paramOnConstraintUpdatedCallback;
      updateCallback();
    } 
  }
}
