package com.google.android.gms.internal.ads;

import android.support.annotation.Nullable;
import com.google.android.gms.ads.internal.zzbv;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.GuardedBy;

@zzadh
@ParametersAreNonnullByDefault
public class zzaoj<T> extends Object implements zzanz<T> {
  private final Object mLock = new Object();
  
  @GuardedBy("mLock")
  private T mValue;
  
  @GuardedBy("mLock")
  private boolean zzbuf;
  
  @GuardedBy("mLock")
  private Throwable zzcwf;
  
  @GuardedBy("mLock")
  private boolean zzcwg;
  
  private final zzaoa zzcwh = new zzaoa();
  
  @GuardedBy("mLock")
  private final boolean zzso() { return (this.zzcwf != null || this.zzcwg); }
  
  public boolean cancel(boolean paramBoolean) {
    if (!paramBoolean)
      return false; 
    synchronized (this.mLock) {
      if (zzso())
        return false; 
      this.zzbuf = true;
      this.zzcwg = true;
      this.mLock.notifyAll();
      this.zzcwh.zzsm();
      return true;
    } 
  }
  
  public T get() throws CancellationException, ExecutionException, InterruptedException {
    synchronized (this.mLock) {
      boolean bool = zzso();
      if (!bool)
        try {
          this.mLock.wait();
        } catch (InterruptedException interruptedException) {
          throw interruptedException;
        }  
      if (this.zzcwf == null) {
        if (!this.zzbuf) {
          Object object = this.mValue;
          return (T)object;
        } 
        throw new CancellationException("SettableFuture was cancelled.");
      } 
      throw new ExecutionException(this.zzcwf);
    } 
  }
  
  public T get(long paramLong, TimeUnit paramTimeUnit) throws CancellationException, ExecutionException, InterruptedException, TimeoutException {
    synchronized (this.mLock) {
      boolean bool = zzso();
      if (!bool)
        try {
          paramLong = paramTimeUnit.toMillis(paramLong);
          if (paramLong != 0L)
            this.mLock.wait(paramLong); 
        } catch (InterruptedException paramTimeUnit) {
          throw paramTimeUnit;
        }  
      if (this.zzcwf == null) {
        if (this.zzcwg) {
          if (!this.zzbuf) {
            Object object = this.mValue;
            return (T)object;
          } 
          throw new CancellationException("SettableFuture was cancelled.");
        } 
        throw new TimeoutException("SettableFuture timed out.");
      } 
      throw new ExecutionException(this.zzcwf);
    } 
  }
  
  public boolean isCancelled() {
    synchronized (this.mLock) {
      return this.zzbuf;
    } 
  }
  
  public boolean isDone() {
    synchronized (this.mLock) {
      return zzso();
    } 
  }
  
  public final void set(@Nullable T paramT) {
    synchronized (this.mLock) {
      if (this.zzbuf)
        return; 
      if (zzso()) {
        zzbv.zzeo().zzb(new IllegalStateException("Provided SettableFuture with multiple values."), "SettableFuture.set");
        return;
      } 
      this.zzcwg = true;
      this.mValue = paramT;
      this.mLock.notifyAll();
      this.zzcwh.zzsm();
      return;
    } 
  }
  
  public final void setException(Throwable paramThrowable) {
    synchronized (this.mLock) {
      if (this.zzbuf)
        return; 
      if (zzso()) {
        zzbv.zzeo().zzb(new IllegalStateException("Provided SettableFuture with multiple values."), "SettableFuture.setException");
        return;
      } 
      this.zzcwf = paramThrowable;
      this.mLock.notifyAll();
      this.zzcwh.zzsm();
      return;
    } 
  }
  
  public final void zza(Runnable paramRunnable, Executor paramExecutor) { this.zzcwh.zza(paramRunnable, paramExecutor); }
}
