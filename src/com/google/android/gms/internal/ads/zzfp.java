package com.google.android.gms.internal.ads;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.Application;
import android.app.KeyguardManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.IntentFilter;
import android.graphics.Rect;
import android.os.Bundle;
import android.os.PowerManager;
import android.support.annotation.Nullable;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.ViewTreeObserver;
import android.view.Window;
import android.view.WindowManager;
import com.google.android.gms.ads.internal.zzbv;
import com.google.android.gms.common.util.VisibleForTesting;
import java.lang.ref.WeakReference;
import java.util.HashSet;
import java.util.Iterator;

@zzadh
@TargetApi(14)
public final class zzfp implements Application.ActivityLifecycleCallbacks, View.OnAttachStateChangeListener, ViewTreeObserver.OnGlobalLayoutListener, ViewTreeObserver.OnScrollChangedListener {
  private static final long zzagc;
  
  private zzamj zzadz = new zzamj(zzagc);
  
  private final Context zzaeo;
  
  private final WindowManager zzaeu;
  
  private final PowerManager zzaev;
  
  private final KeyguardManager zzaew;
  
  private boolean zzafd = false;
  
  @Nullable
  @VisibleForTesting
  private BroadcastReceiver zzafe;
  
  private final Rect zzafh;
  
  private Application zzagd;
  
  private WeakReference<ViewTreeObserver> zzage;
  
  private WeakReference<View> zzagf;
  
  private zzfu zzagg;
  
  private int zzagh = -1;
  
  private final HashSet<zzft> zzagi = new HashSet();
  
  private final DisplayMetrics zzagj;
  
  static  {
    zzna zzna = zznk.zzazt;
    zzagc = ((Long)zzkb.zzik().zzd(zzna)).longValue();
  }
  
  public zzfp(Context paramContext, View paramView) {
    this.zzaeo = paramContext.getApplicationContext();
    this.zzaeu = (WindowManager)paramContext.getSystemService("window");
    this.zzaev = (PowerManager)this.zzaeo.getSystemService("power");
    this.zzaew = (KeyguardManager)paramContext.getSystemService("keyguard");
    Context context = this.zzaeo;
    if (context instanceof Application) {
      this.zzagd = (Application)context;
      this.zzagg = new zzfu((Application)context, this);
    } 
    this.zzagj = paramContext.getResources().getDisplayMetrics();
    this.zzafh = new Rect();
    this.zzafh.right = this.zzaeu.getDefaultDisplay().getWidth();
    this.zzafh.bottom = this.zzaeu.getDefaultDisplay().getHeight();
    WeakReference weakReference = this.zzagf;
    if (weakReference != null) {
      View view = (View)weakReference.get();
    } else {
      weakReference = null;
    } 
    if (weakReference != null) {
      weakReference.removeOnAttachStateChangeListener(this);
      zzf(weakReference);
    } 
    this.zzagf = new WeakReference(paramView);
    if (paramView != null) {
      if (zzbv.zzem().isAttachedToWindow(paramView))
        zze(paramView); 
      paramView.addOnAttachStateChangeListener(this);
    } 
  }
  
  private final Rect zza(Rect paramRect) { return new Rect(zzn(paramRect.left), zzn(paramRect.top), zzn(paramRect.right), zzn(paramRect.bottom)); }
  
  private final void zza(Activity paramActivity, int paramInt) {
    if (this.zzagf == null)
      return; 
    Window window = paramActivity.getWindow();
    if (window == null)
      return; 
    View view1 = window.peekDecorView();
    View view2 = (View)this.zzagf.get();
    if (view2 != null && view1 != null && view2.getRootView() == view1.getRootView())
      this.zzagh = paramInt; 
  }
  
  private final void zzao() {
    zzbv.zzek();
    zzakk.zzcrm.post(new zzfq(this));
  }
  
  private final void zze(View paramView) {
    ViewTreeObserver viewTreeObserver = paramView.getViewTreeObserver();
    if (viewTreeObserver.isAlive()) {
      this.zzage = new WeakReference(viewTreeObserver);
      viewTreeObserver.addOnScrollChangedListener(this);
      viewTreeObserver.addOnGlobalLayoutListener(this);
    } 
    if (this.zzafe == null) {
      IntentFilter intentFilter = new IntentFilter();
      intentFilter.addAction("android.intent.action.SCREEN_ON");
      intentFilter.addAction("android.intent.action.SCREEN_OFF");
      intentFilter.addAction("android.intent.action.USER_PRESENT");
      this.zzafe = new zzfr(this);
      zzbv.zzfk().zza(this.zzaeo, this.zzafe, intentFilter);
    } 
    application = this.zzagd;
    if (application != null)
      try {
        application.registerActivityLifecycleCallbacks(this.zzagg);
        return;
      } catch (Exception application) {
        zzakb.zzb("Error registering activity lifecycle callbacks.", application);
      }  
  }
  
  private final void zzf(View paramView) {
    try {
      if (this.zzage != null) {
        ViewTreeObserver viewTreeObserver = (ViewTreeObserver)this.zzage.get();
        if (viewTreeObserver != null && viewTreeObserver.isAlive()) {
          viewTreeObserver.removeOnScrollChangedListener(this);
          viewTreeObserver.removeGlobalOnLayoutListener(this);
        } 
        this.zzage = null;
      } 
    } catch (Exception exception) {
      zzakb.zzb("Error while unregistering listeners from the last ViewTreeObserver.", exception);
    } 
    try {
      ViewTreeObserver viewTreeObserver = paramView.getViewTreeObserver();
      if (viewTreeObserver.isAlive()) {
        viewTreeObserver.removeOnScrollChangedListener(this);
        viewTreeObserver.removeGlobalOnLayoutListener(this);
      } 
    } catch (Exception paramView) {
      zzakb.zzb("Error while unregistering listeners from the ViewTreeObserver.", paramView);
    } 
    if (this.zzafe != null) {
      try {
        zzbv.zzfk().zza(this.zzaeo, this.zzafe);
      } catch (IllegalStateException paramView) {
        zzakb.zzb("Failed trying to unregister the receiver", paramView);
      } catch (Exception paramView) {
        zzbv.zzeo().zza(paramView, "ActiveViewUnit.stopScreenStatusMonitoring");
      } 
      this.zzafe = null;
    } 
    application = this.zzagd;
    if (application != null)
      try {
        application.unregisterActivityLifecycleCallbacks(this.zzagg);
        return;
      } catch (Exception application) {
        zzakb.zzb("Error registering activity lifecycle callbacks.", application);
      }  
  }
  
  private final void zzm(int paramInt) {
    boolean bool6;
    boolean bool5;
    boolean bool4;
    boolean bool3;
    boolean bool2;
    boolean bool1;
    int i;
    if (this.zzagi.size() == 0)
      return; 
    WeakReference weakReference = this.zzagf;
    if (weakReference == null)
      return; 
    View view = (View)weakReference.get();
    if (paramInt == 1) {
      bool1 = true;
    } else {
      bool1 = false;
    } 
    if (view == null) {
      bool2 = true;
    } else {
      bool2 = false;
    } 
    Rect rect1 = new Rect();
    Rect rect2 = new Rect();
    Rect rect3 = new Rect();
    Rect rect4 = new Rect();
    int[] arrayOfInt1 = new int[2];
    arrayOfInt2 = new int[2];
    if (view != null) {
      bool3 = view.getGlobalVisibleRect(rect2);
      bool4 = view.getLocalVisibleRect(rect3);
      view.getHitRect(rect4);
      try {
        view.getLocationOnScreen(arrayOfInt1);
        view.getLocationInWindow(arrayOfInt2);
      } catch (Exception arrayOfInt2) {
        zzakb.zzb("Failure getting view location.", arrayOfInt2);
      } 
      rect1.left = arrayOfInt1[0];
      rect1.top = arrayOfInt1[1];
      rect1.right = rect1.left + view.getWidth();
      rect1.bottom = rect1.top + view.getHeight();
    } else {
      bool3 = false;
      bool4 = false;
    } 
    if (view != null) {
      i = view.getWindowVisibility();
    } else {
      i = 8;
    } 
    int j = this.zzagh;
    if (j != -1)
      i = j; 
    if (!bool2 && zzbv.zzek().zza(view, this.zzaev, this.zzaew) && bool3 && bool4 && i == 0) {
      bool5 = true;
    } else {
      bool5 = false;
    } 
    if (bool1 && !this.zzadz.tryAcquire() && bool5 == this.zzafd)
      return; 
    if (!bool5 && !this.zzafd && paramInt == 1)
      return; 
    long l = zzbv.zzer().elapsedRealtime();
    boolean bool7 = this.zzaev.isScreenOn();
    if (view != null) {
      bool6 = zzbv.zzem().isAttachedToWindow(view);
    } else {
      bool6 = false;
    } 
    if (view != null) {
      paramInt = view.getWindowVisibility();
    } else {
      paramInt = 8;
    } 
    zzfs zzfs = new zzfs(l, bool7, bool6, paramInt, zza(this.zzafh), zza(rect1), zza(rect2), bool3, zza(rect3), bool4, zza(rect4), this.zzagj.density, bool5);
    Iterator iterator = this.zzagi.iterator();
    while (iterator.hasNext())
      ((zzft)iterator.next()).zza(zzfs); 
    this.zzafd = bool5;
  }
  
  private final int zzn(int paramInt) {
    float f = this.zzagj.density;
    return (int)(paramInt / f);
  }
  
  public final void onActivityCreated(Activity paramActivity, Bundle paramBundle) {
    zza(paramActivity, 0);
    zzm(3);
    zzao();
  }
  
  public final void onActivityDestroyed(Activity paramActivity) {
    zzm(3);
    zzao();
  }
  
  public final void onActivityPaused(Activity paramActivity) {
    zza(paramActivity, 4);
    zzm(3);
    zzao();
  }
  
  public final void onActivityResumed(Activity paramActivity) {
    zza(paramActivity, 0);
    zzm(3);
    zzao();
  }
  
  public final void onActivitySaveInstanceState(Activity paramActivity, Bundle paramBundle) {
    zzm(3);
    zzao();
  }
  
  public final void onActivityStarted(Activity paramActivity) {
    zza(paramActivity, 0);
    zzm(3);
    zzao();
  }
  
  public final void onActivityStopped(Activity paramActivity) {
    zzm(3);
    zzao();
  }
  
  public final void onGlobalLayout() {
    zzm(2);
    zzao();
  }
  
  public final void onScrollChanged() { zzm(1); }
  
  public final void onViewAttachedToWindow(View paramView) {
    this.zzagh = -1;
    zze(paramView);
    zzm(3);
  }
  
  public final void onViewDetachedFromWindow(View paramView) {
    this.zzagh = -1;
    zzm(3);
    zzao();
    zzf(paramView);
  }
  
  public final void zza(zzft paramzzft) {
    this.zzagi.add(paramzzft);
    zzm(3);
  }
  
  public final void zzb(zzft paramzzft) { this.zzagi.remove(paramzzft); }
  
  public final void zzgm() { zzm(4); }
}
