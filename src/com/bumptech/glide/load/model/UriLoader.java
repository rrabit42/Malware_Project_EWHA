package com.bumptech.glide.load.model;

import android.content.Context;
import android.net.Uri;
import com.bumptech.glide.load.data.DataFetcher;

public abstract class UriLoader<T> extends Object implements ModelLoader<Uri, T> {
  private final Context context;
  
  private final ModelLoader<GlideUrl, T> urlLoader;
  
  public UriLoader(Context paramContext, ModelLoader<GlideUrl, T> paramModelLoader) {
    this.context = paramContext;
    this.urlLoader = paramModelLoader;
  }
  
  private static boolean isLocalUri(String paramString) { return ("file".equals(paramString) || "content".equals(paramString) || "android.resource".equals(paramString)); }
  
  protected abstract DataFetcher<T> getAssetPathFetcher(Context paramContext, String paramString);
  
  protected abstract DataFetcher<T> getLocalUriFetcher(Context paramContext, Uri paramUri);
  
  public final DataFetcher<T> getResourceFetcher(Uri paramUri, int paramInt1, int paramInt2) {
    String str1;
    String str2 = paramUri.getScheme();
    if (isLocalUri(str2)) {
      if (AssetUriParser.isAssetUri(paramUri)) {
        str1 = AssetUriParser.toAssetPath(paramUri);
        return getAssetPathFetcher(this.context, str1);
      } 
      return getLocalUriFetcher(this.context, str1);
    } 
    return (this.urlLoader != null && ("http".equals(str2) || "https".equals(str2))) ? this.urlLoader.getResourceFetcher(new GlideUrl(str1.toString()), paramInt1, paramInt2) : null;
  }
}
