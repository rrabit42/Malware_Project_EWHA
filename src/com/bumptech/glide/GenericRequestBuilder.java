package com.bumptech.glide;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.view.animation.Animation;
import android.widget.ImageView;
import com.bumptech.glide.load.Encoder;
import com.bumptech.glide.load.Key;
import com.bumptech.glide.load.MultiTransformation;
import com.bumptech.glide.load.ResourceDecoder;
import com.bumptech.glide.load.ResourceEncoder;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.load.resource.UnitTransformation;
import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
import com.bumptech.glide.manager.Lifecycle;
import com.bumptech.glide.manager.RequestTracker;
import com.bumptech.glide.provider.ChildLoadProvider;
import com.bumptech.glide.provider.LoadProvider;
import com.bumptech.glide.request.FutureTarget;
import com.bumptech.glide.request.GenericRequest;
import com.bumptech.glide.request.Request;
import com.bumptech.glide.request.RequestCoordinator;
import com.bumptech.glide.request.RequestFutureTarget;
import com.bumptech.glide.request.RequestListener;
import com.bumptech.glide.request.ThumbnailRequestCoordinator;
import com.bumptech.glide.request.animation.GlideAnimationFactory;
import com.bumptech.glide.request.animation.NoAnimation;
import com.bumptech.glide.request.animation.ViewAnimationFactory;
import com.bumptech.glide.request.animation.ViewPropertyAnimation;
import com.bumptech.glide.request.animation.ViewPropertyAnimationFactory;
import com.bumptech.glide.request.target.PreloadTarget;
import com.bumptech.glide.request.target.Target;
import com.bumptech.glide.signature.EmptySignature;
import com.bumptech.glide.util.Util;
import java.io.File;

public class GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> extends Object implements Cloneable {
  private GlideAnimationFactory<TranscodeType> animationFactory;
  
  protected final Context context;
  
  private DiskCacheStrategy diskCacheStrategy;
  
  private int errorId;
  
  private Drawable errorPlaceholder;
  
  private Drawable fallbackDrawable;
  
  private int fallbackResource;
  
  protected final Glide glide;
  
  private boolean isCacheable;
  
  private boolean isModelSet;
  
  private boolean isThumbnailBuilt;
  
  private boolean isTransformationSet;
  
  protected final Lifecycle lifecycle;
  
  private ChildLoadProvider<ModelType, DataType, ResourceType, TranscodeType> loadProvider;
  
  private ModelType model;
  
  protected final Class<ModelType> modelClass;
  
  private int overrideHeight;
  
  private int overrideWidth;
  
  private Drawable placeholderDrawable;
  
  private int placeholderId;
  
  private Priority priority;
  
  private RequestListener<? super ModelType, TranscodeType> requestListener;
  
  protected final RequestTracker requestTracker;
  
  private Key signature = EmptySignature.obtain();
  
  private Float sizeMultiplier = Float.valueOf(1.0F);
  
  private Float thumbSizeMultiplier;
  
  private GenericRequestBuilder<?, ?, ?, TranscodeType> thumbnailRequestBuilder;
  
  protected final Class<TranscodeType> transcodeClass;
  
  private Transformation<ResourceType> transformation;
  
  GenericRequestBuilder(Context paramContext, Class<ModelType> paramClass1, LoadProvider<ModelType, DataType, ResourceType, TranscodeType> paramLoadProvider, Class<TranscodeType> paramClass2, Glide paramGlide, RequestTracker paramRequestTracker, Lifecycle paramLifecycle) {
    Class<TranscodeType> clazz = null;
    this.priority = null;
    this.isCacheable = true;
    this.animationFactory = NoAnimation.getFactory();
    this.overrideHeight = -1;
    this.overrideWidth = -1;
    this.diskCacheStrategy = DiskCacheStrategy.RESULT;
    this.transformation = UnitTransformation.get();
    this.context = paramContext;
    this.modelClass = paramClass1;
    this.transcodeClass = paramClass2;
    this.glide = paramGlide;
    this.requestTracker = paramRequestTracker;
    this.lifecycle = paramLifecycle;
    paramClass2 = clazz;
    if (paramLoadProvider != null)
      childLoadProvider = new ChildLoadProvider(paramLoadProvider); 
    this.loadProvider = childLoadProvider;
    if (paramContext != null) {
      if (paramClass1 != null) {
        if (paramLoadProvider != null)
          return; 
        throw new NullPointerException("LoadProvider must not be null");
      } 
      return;
    } 
    throw new NullPointerException("Context can't be null");
  }
  
  GenericRequestBuilder(LoadProvider<ModelType, DataType, ResourceType, TranscodeType> paramLoadProvider, Class<TranscodeType> paramClass, GenericRequestBuilder<ModelType, ?, ?, ?> paramGenericRequestBuilder) {
    this(paramGenericRequestBuilder.context, paramGenericRequestBuilder.modelClass, paramLoadProvider, paramClass, paramGenericRequestBuilder.glide, paramGenericRequestBuilder.requestTracker, paramGenericRequestBuilder.lifecycle);
    this.model = paramGenericRequestBuilder.model;
    this.isModelSet = paramGenericRequestBuilder.isModelSet;
    this.signature = paramGenericRequestBuilder.signature;
    this.diskCacheStrategy = paramGenericRequestBuilder.diskCacheStrategy;
    this.isCacheable = paramGenericRequestBuilder.isCacheable;
  }
  
  private Request buildRequest(Target<TranscodeType> paramTarget) {
    if (this.priority == null)
      this.priority = Priority.NORMAL; 
    return buildRequestRecursive(paramTarget, null);
  }
  
  private Request buildRequestRecursive(Target<TranscodeType> paramTarget, ThumbnailRequestCoordinator paramThumbnailRequestCoordinator) {
    Request request;
    GenericRequestBuilder genericRequestBuilder = this.thumbnailRequestBuilder;
    if (genericRequestBuilder != null) {
      if (!this.isThumbnailBuilt) {
        if (genericRequestBuilder.animationFactory.equals(NoAnimation.getFactory()))
          this.thumbnailRequestBuilder.animationFactory = this.animationFactory; 
        genericRequestBuilder = this.thumbnailRequestBuilder;
        if (genericRequestBuilder.priority == null)
          genericRequestBuilder.priority = getThumbnailPriority(); 
        if (Util.isValidDimensions(this.overrideWidth, this.overrideHeight)) {
          genericRequestBuilder = this.thumbnailRequestBuilder;
          if (!Util.isValidDimensions(genericRequestBuilder.overrideWidth, genericRequestBuilder.overrideHeight))
            this.thumbnailRequestBuilder.override(this.overrideWidth, this.overrideHeight); 
        } 
        paramThumbnailRequestCoordinator = new ThumbnailRequestCoordinator(paramThumbnailRequestCoordinator);
        Request request1 = obtainRequest(paramTarget, this.sizeMultiplier.floatValue(), this.priority, paramThumbnailRequestCoordinator);
        this.isThumbnailBuilt = true;
        request = this.thumbnailRequestBuilder.buildRequestRecursive(paramTarget, paramThumbnailRequestCoordinator);
        this.isThumbnailBuilt = false;
        paramThumbnailRequestCoordinator.setRequests(request1, request);
        return paramThumbnailRequestCoordinator;
      } 
      throw new IllegalStateException("You cannot use a request as both the main request and a thumbnail, consider using clone() on the request(s) passed to thumbnail()");
    } 
    if (this.thumbSizeMultiplier != null) {
      paramThumbnailRequestCoordinator = new ThumbnailRequestCoordinator(paramThumbnailRequestCoordinator);
      paramThumbnailRequestCoordinator.setRequests(obtainRequest(request, this.sizeMultiplier.floatValue(), this.priority, paramThumbnailRequestCoordinator), obtainRequest(request, this.thumbSizeMultiplier.floatValue(), getThumbnailPriority(), paramThumbnailRequestCoordinator));
      return paramThumbnailRequestCoordinator;
    } 
    return obtainRequest(request, this.sizeMultiplier.floatValue(), this.priority, paramThumbnailRequestCoordinator);
  }
  
  private Priority getThumbnailPriority() { return (this.priority == Priority.LOW) ? Priority.NORMAL : ((this.priority == Priority.NORMAL) ? Priority.HIGH : Priority.IMMEDIATE); }
  
  private Request obtainRequest(Target<TranscodeType> paramTarget, float paramFloat, Priority paramPriority, RequestCoordinator paramRequestCoordinator) { return GenericRequest.obtain(this.loadProvider, this.model, this.signature, this.context, paramPriority, paramTarget, paramFloat, this.placeholderDrawable, this.placeholderId, this.errorPlaceholder, this.errorId, this.fallbackDrawable, this.fallbackResource, this.requestListener, paramRequestCoordinator, this.glide.getEngine(), this.transformation, this.transcodeClass, this.isCacheable, this.animationFactory, this.overrideWidth, this.overrideHeight, this.diskCacheStrategy); }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> animate(int paramInt) { return animate(new ViewAnimationFactory(this.context, paramInt)); }
  
  @Deprecated
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> animate(Animation paramAnimation) { return animate(new ViewAnimationFactory(paramAnimation)); }
  
  GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> animate(GlideAnimationFactory<TranscodeType> paramGlideAnimationFactory) {
    if (paramGlideAnimationFactory != null) {
      this.animationFactory = paramGlideAnimationFactory;
      return this;
    } 
    throw new NullPointerException("Animation factory must not be null!");
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> animate(ViewPropertyAnimation.Animator paramAnimator) { return animate(new ViewPropertyAnimationFactory(paramAnimator)); }
  
  void applyCenterCrop() {}
  
  void applyFitCenter() {}
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> cacheDecoder(ResourceDecoder<File, ResourceType> paramResourceDecoder) {
    ChildLoadProvider childLoadProvider = this.loadProvider;
    if (childLoadProvider != null)
      childLoadProvider.setCacheDecoder(paramResourceDecoder); 
    return this;
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> clone() {
    GenericRequestBuilder genericRequestBuilder;
    try {
      genericRequestBuilder = (GenericRequestBuilder)super.clone();
      if (this.loadProvider != null) {
        ChildLoadProvider childLoadProvider = this.loadProvider.clone();
        genericRequestBuilder.loadProvider = childLoadProvider;
        return genericRequestBuilder;
      } 
    } catch (CloneNotSupportedException cloneNotSupportedException) {
      throw new RuntimeException(cloneNotSupportedException);
    } 
    Object object = null;
    genericRequestBuilder.loadProvider = object;
    return genericRequestBuilder;
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> decoder(ResourceDecoder<DataType, ResourceType> paramResourceDecoder) {
    ChildLoadProvider childLoadProvider = this.loadProvider;
    if (childLoadProvider != null)
      childLoadProvider.setSourceDecoder(paramResourceDecoder); 
    return this;
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> diskCacheStrategy(DiskCacheStrategy paramDiskCacheStrategy) {
    this.diskCacheStrategy = paramDiskCacheStrategy;
    return this;
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> dontAnimate() { return animate(NoAnimation.getFactory()); }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> dontTransform() { return transform(new Transformation[] { UnitTransformation.get() }); }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> encoder(ResourceEncoder<ResourceType> paramResourceEncoder) {
    ChildLoadProvider childLoadProvider = this.loadProvider;
    if (childLoadProvider != null)
      childLoadProvider.setEncoder(paramResourceEncoder); 
    return this;
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> error(int paramInt) {
    this.errorId = paramInt;
    return this;
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> error(Drawable paramDrawable) {
    this.errorPlaceholder = paramDrawable;
    return this;
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> fallback(int paramInt) {
    this.fallbackResource = paramInt;
    return this;
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> fallback(Drawable paramDrawable) {
    this.fallbackDrawable = paramDrawable;
    return this;
  }
  
  public FutureTarget<TranscodeType> into(int paramInt1, int paramInt2) {
    RequestFutureTarget requestFutureTarget = new RequestFutureTarget(this.glide.getMainHandler(), paramInt1, paramInt2);
    this.glide.getMainHandler().post(new Object(this, requestFutureTarget));
    return requestFutureTarget;
  }
  
  public Target<TranscodeType> into(ImageView paramImageView) {
    Util.assertMainThread();
    if (paramImageView != null) {
      if (!this.isTransformationSet && paramImageView.getScaleType() != null) {
        int i = null.$SwitchMap$android$widget$ImageView$ScaleType[paramImageView.getScaleType().ordinal()];
        if (i != 1) {
          if (i == 2 || i == 3 || i == 4)
            applyFitCenter(); 
        } else {
          applyCenterCrop();
        } 
      } 
      return into(this.glide.buildImageViewTarget(paramImageView, this.transcodeClass));
    } 
    throw new IllegalArgumentException("You must pass in a non null View");
  }
  
  public <Y extends Target<TranscodeType>> Y into(Y paramY) {
    Util.assertMainThread();
    if (paramY != null) {
      if (this.isModelSet) {
        Request request = paramY.getRequest();
        if (request != null) {
          request.clear();
          this.requestTracker.removeRequest(request);
          request.recycle();
        } 
        request = buildRequest(paramY);
        paramY.setRequest(request);
        this.lifecycle.addListener(paramY);
        this.requestTracker.runRequest(request);
        return paramY;
      } 
      throw new IllegalArgumentException("You must first set a model (try #load())");
    } 
    throw new IllegalArgumentException("You must pass in a non null Target");
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> listener(RequestListener<? super ModelType, TranscodeType> paramRequestListener) {
    this.requestListener = paramRequestListener;
    return this;
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> load(ModelType paramModelType) {
    this.model = paramModelType;
    this.isModelSet = true;
    return this;
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> override(int paramInt1, int paramInt2) {
    if (Util.isValidDimensions(paramInt1, paramInt2)) {
      this.overrideWidth = paramInt1;
      this.overrideHeight = paramInt2;
      return this;
    } 
    throw new IllegalArgumentException("Width and height must be Target#SIZE_ORIGINAL or > 0");
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> placeholder(int paramInt) {
    this.placeholderId = paramInt;
    return this;
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> placeholder(Drawable paramDrawable) {
    this.placeholderDrawable = paramDrawable;
    return this;
  }
  
  public Target<TranscodeType> preload() { return preload(-2147483648, -2147483648); }
  
  public Target<TranscodeType> preload(int paramInt1, int paramInt2) { return into(PreloadTarget.obtain(paramInt1, paramInt2)); }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> priority(Priority paramPriority) {
    this.priority = paramPriority;
    return this;
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> signature(Key paramKey) {
    if (paramKey != null) {
      this.signature = paramKey;
      return this;
    } 
    throw new NullPointerException("Signature must not be null");
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> sizeMultiplier(float paramFloat) {
    if (paramFloat >= 0.0F && paramFloat <= 1.0F) {
      this.sizeMultiplier = Float.valueOf(paramFloat);
      return this;
    } 
    throw new IllegalArgumentException("sizeMultiplier must be between 0 and 1");
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> skipMemoryCache(boolean paramBoolean) {
    this.isCacheable = paramBoolean ^ true;
    return this;
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> sourceEncoder(Encoder<DataType> paramEncoder) {
    ChildLoadProvider childLoadProvider = this.loadProvider;
    if (childLoadProvider != null)
      childLoadProvider.setSourceEncoder(paramEncoder); 
    return this;
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> thumbnail(float paramFloat) {
    if (paramFloat >= 0.0F && paramFloat <= 1.0F) {
      this.thumbSizeMultiplier = Float.valueOf(paramFloat);
      return this;
    } 
    throw new IllegalArgumentException("sizeMultiplier must be between 0 and 1");
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> thumbnail(GenericRequestBuilder<?, ?, ?, TranscodeType> paramGenericRequestBuilder) {
    if (!equals(paramGenericRequestBuilder)) {
      this.thumbnailRequestBuilder = paramGenericRequestBuilder;
      return this;
    } 
    throw new IllegalArgumentException("You cannot set a request as a thumbnail for itself. Consider using clone() on the request you are passing to thumbnail()");
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> transcoder(ResourceTranscoder<ResourceType, TranscodeType> paramResourceTranscoder) {
    ChildLoadProvider childLoadProvider = this.loadProvider;
    if (childLoadProvider != null)
      childLoadProvider.setTranscoder(paramResourceTranscoder); 
    return this;
  }
  
  public GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> transform(Transformation<ResourceType>... paramVarArgs) {
    this.isTransformationSet = true;
    if (paramVarArgs.length == 1) {
      this.transformation = paramVarArgs[0];
      return this;
    } 
    this.transformation = new MultiTransformation(paramVarArgs);
    return this;
  }
}
