package com.bumptech.glide.load.data;

import android.text.TextUtils;
import android.util.Log;
import com.bumptech.glide.Priority;
import com.bumptech.glide.load.model.GlideUrl;
import com.bumptech.glide.util.ContentLengthInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Map;

public class HttpUrlFetcher extends Object implements DataFetcher<InputStream> {
  private static final HttpUrlConnectionFactory DEFAULT_CONNECTION_FACTORY = new DefaultHttpUrlConnectionFactory(null);
  
  private static final int MAXIMUM_REDIRECTS = 5;
  
  private static final String TAG = "HttpUrlFetcher";
  
  private final HttpUrlConnectionFactory connectionFactory;
  
  private final GlideUrl glideUrl;
  
  private InputStream stream;
  
  private HttpURLConnection urlConnection;
  
  public HttpUrlFetcher(GlideUrl paramGlideUrl) { this(paramGlideUrl, DEFAULT_CONNECTION_FACTORY); }
  
  HttpUrlFetcher(GlideUrl paramGlideUrl, HttpUrlConnectionFactory paramHttpUrlConnectionFactory) {
    this.glideUrl = paramGlideUrl;
    this.connectionFactory = paramHttpUrlConnectionFactory;
  }
  
  private InputStream getStreamForSuccessfulRequest(HttpURLConnection paramHttpURLConnection) throws IOException {
    if (TextUtils.isEmpty(paramHttpURLConnection.getContentEncoding())) {
      int i = paramHttpURLConnection.getContentLength();
      this.stream = ContentLengthInputStream.obtain(paramHttpURLConnection.getInputStream(), i);
    } else {
      if (Log.isLoggable("HttpUrlFetcher", 3)) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Got non empty content encoding: ");
        stringBuilder.append(paramHttpURLConnection.getContentEncoding());
        Log.d("HttpUrlFetcher", stringBuilder.toString());
      } 
      this.stream = paramHttpURLConnection.getInputStream();
    } 
    return this.stream;
  }
  
  private InputStream loadDataWithRedirects(URL paramURL1, int paramInt, URL paramURL2, Map<String, String> paramMap) throws IOException {
    if (paramInt < 5) {
      if (paramURL2 != null)
        try {
          if (paramURL1.toURI().equals(paramURL2.toURI()))
            throw new IOException("In re-direct loop"); 
        } catch (URISyntaxException paramURL2) {} 
      this.urlConnection = this.connectionFactory.build(paramURL1);
      for (Map.Entry entry : paramMap.entrySet())
        this.urlConnection.addRequestProperty((String)entry.getKey(), (String)entry.getValue()); 
      this.urlConnection.setConnectTimeout(2500);
      this.urlConnection.setReadTimeout(2500);
      this.urlConnection.setUseCaches(false);
      this.urlConnection.setDoInput(true);
      this.urlConnection.connect();
      if (this.isCancelled)
        return null; 
      int i = this.urlConnection.getResponseCode();
      int j = i / 100;
      if (j == 2)
        return getStreamForSuccessfulRequest(this.urlConnection); 
      if (j == 3) {
        String str = this.urlConnection.getHeaderField("Location");
        if (!TextUtils.isEmpty(str))
          return loadDataWithRedirects(new URL(paramURL1, str), paramInt + 1, paramURL1, paramMap); 
        throw new IOException("Received empty or null redirect url");
      } 
      if (i == -1)
        throw new IOException("Unable to retrieve response code from HttpUrlConnection."); 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Request failed ");
      stringBuilder.append(i);
      stringBuilder.append(": ");
      stringBuilder.append(this.urlConnection.getResponseMessage());
      throw new IOException(stringBuilder.toString());
    } 
    IOException iOException = new IOException("Too many (> 5) redirects!");
    throw iOException;
  }
  
  public void cancel() { this.isCancelled = true; }
  
  public void cleanup() {
    inputStream = this.stream;
    if (inputStream != null)
      try {
        inputStream.close();
      } catch (IOException inputStream) {} 
    HttpURLConnection httpURLConnection = this.urlConnection;
    if (httpURLConnection != null)
      httpURLConnection.disconnect(); 
  }
  
  public String getId() { return this.glideUrl.getCacheKey(); }
  
  public InputStream loadData(Priority paramPriority) throws Exception { return loadDataWithRedirects(this.glideUrl.toURL(), 0, null, this.glideUrl.getHeaders()); }
}
