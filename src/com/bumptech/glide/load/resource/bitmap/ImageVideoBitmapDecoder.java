package com.bumptech.glide.load.resource.bitmap;

import android.graphics.Bitmap;
import android.os.ParcelFileDescriptor;
import android.util.Log;
import com.bumptech.glide.load.ResourceDecoder;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.model.ImageVideoWrapper;
import java.io.IOException;
import java.io.InputStream;

public class ImageVideoBitmapDecoder extends Object implements ResourceDecoder<ImageVideoWrapper, Bitmap> {
  private static final String TAG = "ImageVideoDecoder";
  
  private final ResourceDecoder<ParcelFileDescriptor, Bitmap> fileDescriptorDecoder;
  
  private final ResourceDecoder<InputStream, Bitmap> streamDecoder;
  
  public ImageVideoBitmapDecoder(ResourceDecoder<InputStream, Bitmap> paramResourceDecoder1, ResourceDecoder<ParcelFileDescriptor, Bitmap> paramResourceDecoder2) {
    this.streamDecoder = paramResourceDecoder1;
    this.fileDescriptorDecoder = paramResourceDecoder2;
  }
  
  public Resource<Bitmap> decode(ImageVideoWrapper paramImageVideoWrapper, int paramInt1, int paramInt2) throws IOException {
    inputStream = paramImageVideoWrapper.getStream();
    if (inputStream != null) {
      try {
        Resource resource1 = this.streamDecoder.decode(inputStream, paramInt1, paramInt2);
      } catch (IOException inputStream) {
        if (Log.isLoggable("ImageVideoDecoder", 2))
          Log.v("ImageVideoDecoder", "Failed to load image from stream, trying FileDescriptor", inputStream); 
        inputStream = null;
      } 
      Resource resource = inputStream;
      if (inputStream == null) {
        ParcelFileDescriptor parcelFileDescriptor = paramImageVideoWrapper.getFileDescriptor();
        resource = inputStream;
        if (parcelFileDescriptor != null)
          resource = this.fileDescriptorDecoder.decode(parcelFileDescriptor, paramInt1, paramInt2); 
      } 
      return resource;
    } 
    inputStream = null;
  }
  
  public String getId() { return "ImageVideoBitmapDecoder.com.bumptech.glide.load.resource.bitmap"; }
}
