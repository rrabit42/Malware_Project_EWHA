package com.bumptech.glide.load.engine.cache;

import android.util.Log;
import com.bumptech.glide.disklrucache.DiskLruCache;
import com.bumptech.glide.load.Key;
import java.io.File;
import java.io.IOException;

public class DiskLruCacheWrapper implements DiskCache {
  private static final int APP_VERSION = 1;
  
  private static final String TAG = "DiskLruCacheWrapper";
  
  private static final int VALUE_COUNT = 1;
  
  private static DiskLruCacheWrapper wrapper;
  
  private final File directory;
  
  private DiskLruCache diskLruCache;
  
  private final int maxSize;
  
  private final SafeKeyGenerator safeKeyGenerator;
  
  private final DiskCacheWriteLocker writeLocker = new DiskCacheWriteLocker();
  
  static  {
  
  }
  
  protected DiskLruCacheWrapper(File paramFile, int paramInt) {
    this.directory = paramFile;
    this.maxSize = paramInt;
    this.safeKeyGenerator = new SafeKeyGenerator();
  }
  
  public static DiskCache get(File paramFile, int paramInt) { // Byte code:
    //   0: ldc com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper
    //   2: monitorenter
    //   3: getstatic com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.wrapper : Lcom/bumptech/glide/load/engine/cache/DiskLruCacheWrapper;
    //   6: ifnonnull -> 21
    //   9: new com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper
    //   12: dup
    //   13: aload_0
    //   14: iload_1
    //   15: invokespecial <init> : (Ljava/io/File;I)V
    //   18: putstatic com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.wrapper : Lcom/bumptech/glide/load/engine/cache/DiskLruCacheWrapper;
    //   21: getstatic com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper.wrapper : Lcom/bumptech/glide/load/engine/cache/DiskLruCacheWrapper;
    //   24: astore_0
    //   25: ldc com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper
    //   27: monitorexit
    //   28: aload_0
    //   29: areturn
    //   30: astore_0
    //   31: ldc com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper
    //   33: monitorexit
    //   34: aload_0
    //   35: athrow
    // Exception table:
    //   from	to	target	type
    //   3	21	30	finally
    //   21	25	30	finally }
  
  private DiskLruCache getDiskCache() throws IOException { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield diskLruCache : Lcom/bumptech/glide/disklrucache/DiskLruCache;
    //   6: ifnonnull -> 27
    //   9: aload_0
    //   10: aload_0
    //   11: getfield directory : Ljava/io/File;
    //   14: iconst_1
    //   15: iconst_1
    //   16: aload_0
    //   17: getfield maxSize : I
    //   20: i2l
    //   21: invokestatic open : (Ljava/io/File;IIJ)Lcom/bumptech/glide/disklrucache/DiskLruCache;
    //   24: putfield diskLruCache : Lcom/bumptech/glide/disklrucache/DiskLruCache;
    //   27: aload_0
    //   28: getfield diskLruCache : Lcom/bumptech/glide/disklrucache/DiskLruCache;
    //   31: astore_1
    //   32: aload_0
    //   33: monitorexit
    //   34: aload_1
    //   35: areturn
    //   36: astore_1
    //   37: aload_0
    //   38: monitorexit
    //   39: aload_1
    //   40: athrow
    // Exception table:
    //   from	to	target	type
    //   2	27	36	finally
    //   27	32	36	finally }
  
  private void resetDiskCache() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: aconst_null
    //   4: putfield diskLruCache : Lcom/bumptech/glide/disklrucache/DiskLruCache;
    //   7: aload_0
    //   8: monitorexit
    //   9: return
    //   10: astore_1
    //   11: aload_0
    //   12: monitorexit
    //   13: aload_1
    //   14: athrow
    // Exception table:
    //   from	to	target	type
    //   2	7	10	finally }
  
  public void clear() {
    /* monitor enter ThisExpression{ObjectType{com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper}} */
    try {
      getDiskCache().delete();
      resetDiskCache();
    } catch (IOException iOException) {
      if (Log.isLoggable("DiskLruCacheWrapper", 5))
        Log.w("DiskLruCacheWrapper", "Unable to clear disk cache", iOException); 
    } finally {
      File file;
    } 
    /* monitor exit ThisExpression{ObjectType{com/bumptech/glide/load/engine/cache/DiskLruCacheWrapper}} */
  }
  
  public void delete(Key paramKey) {
    str = this.safeKeyGenerator.getSafeKey(paramKey);
    try {
      getDiskCache().remove(str);
      return;
    } catch (IOException str) {
      if (Log.isLoggable("DiskLruCacheWrapper", 5))
        Log.w("DiskLruCacheWrapper", "Unable to delete from disk cache", str); 
      return;
    } 
  }
  
  public File get(Key paramKey) {
    str = this.safeKeyGenerator.getSafeKey(paramKey);
    try {
      DiskLruCache.Value value = getDiskCache().get(str);
      if (value != null)
        return value.getFile(0); 
    } catch (IOException str) {
      if (Log.isLoggable("DiskLruCacheWrapper", 5))
        Log.w("DiskLruCacheWrapper", "Unable to get from disk cache", str); 
    } 
    return null;
  }
  
  public void put(Key paramKey, DiskCache.Writer paramWriter) {
    String str = this.safeKeyGenerator.getSafeKey(paramKey);
    this.writeLocker.acquire(paramKey);
    try {
      editor = getDiskCache().edit(str);
      if (editor != null)
        try {
          if (paramWriter.write(editor.getFile(0)))
            editor.commit(); 
        } finally {
          editor.abortUnlessCommitted();
        }  
    } catch (IOException paramWriter) {
    
    } finally {}
    this.writeLocker.release(paramKey);
  }
}
