package com.google.firebase.auth.internal;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.util.ArrayMap;
import android.text.TextUtils;
import android.util.Log;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.logging.Logger;
import com.google.android.gms.common.util.Base64Utils;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.internal.firebase_auth.zzaf;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

final class zzab {
  private static final Logger zzgg = new Logger("JSONParser", new String[0]);
  
  @VisibleForTesting
  private static List<Object> zza(JSONArray paramJSONArray) throws JSONException {
    ArrayList arrayList = new ArrayList();
    for (byte b = 0; b < paramJSONArray.length(); b++) {
      Object object1;
      Object object2 = paramJSONArray.get(b);
      if (object2 instanceof JSONArray) {
        object1 = zza((JSONArray)object2);
      } else {
        object1 = object2;
        if (object2 instanceof JSONObject)
          object1 = zzb((JSONObject)object2); 
      } 
      arrayList.add(object1);
    } 
    return arrayList;
  }
  
  @VisibleForTesting
  private static Map<String, Object> zzb(JSONObject paramJSONObject) throws JSONException {
    ArrayMap arrayMap = new ArrayMap();
    Iterator iterator = paramJSONObject.keys();
    while (iterator.hasNext()) {
      Object object1;
      String str = (String)iterator.next();
      Object object2 = paramJSONObject.get(str);
      if (object2 instanceof JSONArray) {
        object1 = zza((JSONArray)object2);
      } else {
        object1 = object2;
        if (object2 instanceof JSONObject)
          object1 = zzb((JSONObject)object2); 
      } 
      arrayMap.put(str, object1);
    } 
    return arrayMap;
  }
  
  @NonNull
  public static Map<String, Object> zzcw(@NonNull String paramString) {
    Preconditions.checkNotEmpty(paramString);
    Logger logger2 = paramString.split("\\.");
    if (logger2.length < 2) {
      logger2 = zzgg;
      paramString = String.valueOf(paramString);
      if (paramString.length() != 0) {
        paramString = "Invalid idToken ".concat(paramString);
      } else {
        paramString = new String("Invalid idToken ");
      } 
      logger2.e(paramString, new Object[0]);
      return Collections.EMPTY_MAP;
    } 
    logger1 = logger2[1];
    try {
      Map map2 = zzcx(new String(Base64Utils.decodeUrlSafeNoPadding(logger1), "UTF-8"));
      Map map1 = map2;
      if (map2 == null)
        map1 = Collections.EMPTY_MAP; 
      return map1;
    } catch (UnsupportedEncodingException logger1) {
      zzgg.e("Unable to decode token", logger1, new Object[0]);
      return Collections.EMPTY_MAP;
    } 
  }
  
  @Nullable
  public static Map<String, Object> zzcx(String paramString) {
    if (TextUtils.isEmpty(paramString))
      return null; 
    try {
      JSONObject jSONObject = new JSONObject(paramString);
      return (jSONObject != JSONObject.NULL) ? zzb(jSONObject) : null;
    } catch (Exception paramString) {
      Log.d("JSONParser", "Failed to parse JSONObject into Map.");
      throw new zzaf(paramString);
    } 
  }
}
