package com.gaon.joyfultalk.common;

import android.os.Parcel;
import android.os.Parcelable;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class Dictionary implements Parcelable {
  public static final Parcelable.Creator CREATOR = new Object();
  
  public static final int DATA_ARRAYLIST_DIC = 2;
  
  public static final int DATA_INTEGER = 1;
  
  public static final int DATA_STRING = 0;
  
  private Map<String, Integer> dataTypeMap;
  
  private Map<String, Object> map;
  
  public Dictionary() {
    this.map = new HashMap();
    this.dataTypeMap = new HashMap();
  }
  
  public Dictionary(Parcel paramParcel) { readFromParcel(paramParcel); }
  
  public Dictionary(String paramString) {
    if (paramString != null && paramString.length() > 0) {
      paramString = paramString.substring(paramString.indexOf("/") + 2);
      this.map = new HashMap();
      this.dataTypeMap = new HashMap();
      String[] arrayOfString = paramString.split("&");
      for (byte b = 0; b < arrayOfString.length; b++) {
        if (arrayOfString[b] != null) {
          int i = arrayOfString[b].length();
          if (i > 0) {
            int j = arrayOfString[b].indexOf("=");
            if (j > -1) {
              String str = arrayOfString[b].substring(0, j).trim();
              if (i == ++j) {
                paramString = "";
              } else {
                paramString = arrayOfString[b].substring(j).trim();
              } 
              this.map.put(str, paramString);
              this.dataTypeMap.put(str, Integer.valueOf(0));
            } 
          } 
        } 
      } 
    } 
  }
  
  public Dictionary(String[] paramArrayOfString, Integer[] paramArrayOfInteger) {
    this.map = new HashMap();
    this.dataTypeMap = new HashMap();
    for (byte b = 0; b < paramArrayOfString.length; b++) {
      this.map.put(paramArrayOfString[b], paramArrayOfInteger[b]);
      this.dataTypeMap.put(paramArrayOfString[b], Integer.valueOf(1));
    } 
  }
  
  public Dictionary(String[] paramArrayOfString, Object[] paramArrayOfObject, int[] paramArrayOfInt) {
    this.map = new HashMap();
    this.dataTypeMap = new HashMap();
    byte b;
    for (b = 0; b < paramArrayOfString.length; b++) {
      this.map.put(paramArrayOfString[b], paramArrayOfObject[b]);
      this.dataTypeMap.put(paramArrayOfString[b], Integer.valueOf(paramArrayOfInt[b]));
    } 
  }
  
  public Dictionary(String[] paramArrayOfString1, String[] paramArrayOfString2) {
    this.map = new HashMap();
    this.dataTypeMap = new HashMap();
    for (byte b = 0; b < paramArrayOfString1.length; b++) {
      this.map.put(paramArrayOfString1[b], paramArrayOfString2[b]);
      this.dataTypeMap.put(paramArrayOfString1[b], Integer.valueOf(0));
    } 
  }
  
  private void readFromParcel(Parcel paramParcel) { this.map = paramParcel.readHashMap((ClassLoader)this.map); }
  
  public void addInt(String paramString, int paramInt) { this.map.put(paramString, Integer.valueOf(paramInt)); }
  
  public void addObject(String paramString, Object paramObject) { this.map.put(paramString, paramObject); }
  
  public void addString(String paramString1, String paramString2) { this.map.put(paramString1, paramString2); }
  
  public int describeContents() { return 0; }
  
  public int getInt(String paramString) {
    paramString = (String)this.map.get(paramString);
    return (paramString != null) ? Integer.parseInt(paramString) : -1;
  }
  
  public String[] getKeys() {
    String[] arrayOfString = new String[this.map.size()];
    Iterator iterator = this.map.keySet().iterator();
    for (byte b = 0; iterator.hasNext(); b++)
      arrayOfString[b] = (String)iterator.next(); 
    return arrayOfString;
  }
  
  public Object getObject(String paramString) { return this.map.get(paramString); }
  
  public int getSize() {
    Map map1 = this.map;
    return (map1 != null) ? map1.size() : 0;
  }
  
  public String getString(String paramString) { return (String)this.map.get(paramString); }
  
  public int getType(String paramString) { return ((Integer)this.dataTypeMap.get(paramString)).intValue(); }
  
  public boolean isEmpty() {
    Map map1 = this.map;
    return (map1 != null) ? map1.isEmpty() : 1;
  }
  
  public void setInt(String paramString, int paramInt) { this.map.put(paramString, Integer.valueOf(paramInt)); }
  
  public void setString(String paramString1, String paramString2) { this.map.put(paramString1, paramString2); }
  
  public void setType(String paramString, int paramInt) { this.dataTypeMap.put(paramString, Integer.valueOf(paramInt)); }
  
  public void writeToParcel(Parcel paramParcel, int paramInt) { paramParcel.writeMap(this.map); }
}
