package com.google.firebase.analytics;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.support.annotation.Keep;
import android.support.annotation.MainThread;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresPermission;
import android.support.annotation.Size;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.measurement.internal.zzbw;
import com.google.android.gms.measurement.internal.zzn;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.Tasks;
import com.google.firebase.iid.FirebaseInstanceId;

public final class FirebaseAnalytics {
  private final zzbw zzada;
  
  private String zzbsl;
  
  private long zzbsm;
  
  private final Object zzbsn;
  
  private FirebaseAnalytics(zzbw paramzzbw) {
    Preconditions.checkNotNull(paramzzbw);
    this.zzada = paramzzbw;
    this.zzbsn = new Object();
  }
  
  @Keep
  @NonNull
  @RequiresPermission(allOf = {"android.permission.INTERNET", "android.permission.ACCESS_NETWORK_STATE", "android.permission.WAKE_LOCK"})
  public static FirebaseAnalytics getInstance(@NonNull Context paramContext) { // Byte code:
    //   0: getstatic com/google/firebase/analytics/FirebaseAnalytics.zzbsk : Lcom/google/firebase/analytics/FirebaseAnalytics;
    //   3: ifnonnull -> 42
    //   6: ldc com/google/firebase/analytics/FirebaseAnalytics
    //   8: monitorenter
    //   9: getstatic com/google/firebase/analytics/FirebaseAnalytics.zzbsk : Lcom/google/firebase/analytics/FirebaseAnalytics;
    //   12: ifnonnull -> 30
    //   15: new com/google/firebase/analytics/FirebaseAnalytics
    //   18: dup
    //   19: aload_0
    //   20: aconst_null
    //   21: invokestatic zza : (Landroid/content/Context;Lcom/google/android/gms/measurement/internal/zzan;)Lcom/google/android/gms/measurement/internal/zzbw;
    //   24: invokespecial <init> : (Lcom/google/android/gms/measurement/internal/zzbw;)V
    //   27: putstatic com/google/firebase/analytics/FirebaseAnalytics.zzbsk : Lcom/google/firebase/analytics/FirebaseAnalytics;
    //   30: ldc com/google/firebase/analytics/FirebaseAnalytics
    //   32: monitorexit
    //   33: goto -> 42
    //   36: astore_0
    //   37: ldc com/google/firebase/analytics/FirebaseAnalytics
    //   39: monitorexit
    //   40: aload_0
    //   41: athrow
    //   42: getstatic com/google/firebase/analytics/FirebaseAnalytics.zzbsk : Lcom/google/firebase/analytics/FirebaseAnalytics;
    //   45: areturn
    // Exception table:
    //   from	to	target	type
    //   9	30	36	finally
    //   30	33	36	finally
    //   37	40	36	finally }
  
  private final void zzcp(String paramString) {
    synchronized (this.zzbsn) {
      this.zzbsl = paramString;
      this.zzbsm = this.zzada.zzbx().elapsedRealtime();
      return;
    } 
  }
  
  private final String zzgc() {
    synchronized (this.zzbsn) {
      if (Math.abs(this.zzada.zzbx().elapsedRealtime() - this.zzbsm) < 1000L)
        return this.zzbsl; 
      return null;
    } 
  }
  
  @NonNull
  public final Task<String> getAppInstanceId() {
    try {
      String str = zzgc();
      return (str != null) ? Tasks.forResult(str) : Tasks.call(this.zzada.zzgs().zzkg(), new zza(this));
    } catch (Exception exception) {
      this.zzada.zzgt().zzjj().zzby("Failed to schedule task for getAppInstanceId");
      return Tasks.forException(exception);
    } 
  }
  
  @Keep
  public final String getFirebaseInstanceId() { return FirebaseInstanceId.getInstance().getId(); }
  
  public final void logEvent(@NonNull @Size(max = 40L, min = 1L) String paramString, @Nullable Bundle paramBundle) { this.zzada.zzkm().logEvent(paramString, paramBundle); }
  
  public final void resetAnalyticsData() {
    zzcp(null);
    this.zzada.zzgj().resetAnalyticsData(this.zzada.zzbx().currentTimeMillis());
  }
  
  public final void setAnalyticsCollectionEnabled(boolean paramBoolean) { this.zzada.zzkm().setMeasurementEnabled(paramBoolean); }
  
  @Keep
  @MainThread
  public final void setCurrentScreen(@NonNull Activity paramActivity, @Nullable @Size(max = 36L, min = 1L) String paramString1, @Nullable @Size(max = 36L, min = 1L) String paramString2) {
    if (!zzn.isMainThread()) {
      this.zzada.zzgt().zzjj().zzby("setCurrentScreen must be called from the main thread");
      return;
    } 
    this.zzada.zzgm().setCurrentScreen(paramActivity, paramString1, paramString2);
  }
  
  public final void setMinimumSessionDuration(long paramLong) { this.zzada.zzkm().setMinimumSessionDuration(paramLong); }
  
  public final void setSessionTimeoutDuration(long paramLong) { this.zzada.zzkm().setSessionTimeoutDuration(paramLong); }
  
  public final void setUserId(@Nullable String paramString) { this.zzada.zzkm().setUserPropertyInternal("app", "_id", paramString); }
  
  public final void setUserProperty(@NonNull @Size(max = 24L, min = 1L) String paramString1, @Nullable @Size(max = 36L) String paramString2) { this.zzada.zzkm().setUserProperty(paramString1, paramString2); }
}
