package androidx.work;

import android.annotation.SuppressLint;
import android.content.Context;
import android.net.Network;
import android.net.Uri;
import android.support.annotation.Keep;
import android.support.annotation.MainThread;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresApi;
import android.support.annotation.RestrictTo;
import androidx.work.impl.utils.taskexecutor.TaskExecutor;
import com.google.common.util.concurrent.ListenableFuture;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.Executor;

public abstract class ListenableWorker {
  @NonNull
  private Context mAppContext;
  
  private boolean mUsed;
  
  @NonNull
  private WorkerParameters mWorkerParams;
  
  @SuppressLint({"BanKeepAnnotation"})
  @Keep
  public ListenableWorker(@NonNull Context paramContext, @NonNull WorkerParameters paramWorkerParameters) {
    if (paramContext != null) {
      if (paramWorkerParameters != null) {
        this.mAppContext = paramContext;
        this.mWorkerParams = paramWorkerParameters;
        return;
      } 
      throw new IllegalArgumentException("WorkerParameters is null");
    } 
    throw new IllegalArgumentException("Application Context is null");
  }
  
  @NonNull
  public final Context getApplicationContext() { return this.mAppContext; }
  
  @NonNull
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public Executor getBackgroundExecutor() { return this.mWorkerParams.getBackgroundExecutor(); }
  
  @NonNull
  public final UUID getId() { return this.mWorkerParams.getId(); }
  
  @NonNull
  public final Data getInputData() { return this.mWorkerParams.getInputData(); }
  
  @Nullable
  @RequiresApi(28)
  public final Network getNetwork() { return this.mWorkerParams.getNetwork(); }
  
  public final int getRunAttemptCount() { return this.mWorkerParams.getRunAttemptCount(); }
  
  @NonNull
  public final Set<String> getTags() { return this.mWorkerParams.getTags(); }
  
  @NonNull
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public TaskExecutor getTaskExecutor() { return this.mWorkerParams.getTaskExecutor(); }
  
  @NonNull
  @RequiresApi(24)
  public final List<String> getTriggeredContentAuthorities() { return this.mWorkerParams.getTriggeredContentAuthorities(); }
  
  @NonNull
  @RequiresApi(24)
  public final List<Uri> getTriggeredContentUris() { return this.mWorkerParams.getTriggeredContentUris(); }
  
  @NonNull
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public WorkerFactory getWorkerFactory() { return this.mWorkerParams.getWorkerFactory(); }
  
  public final boolean isStopped() { return this.mStopped; }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public final boolean isUsed() { return this.mUsed; }
  
  public void onStopped() {}
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public final void setUsed() { this.mUsed = true; }
  
  @MainThread
  @NonNull
  public abstract ListenableFuture<Result> startWork();
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public final void stop() {
    this.mStopped = true;
    onStopped();
  }
}
