package com.bumptech.glide;

import android.content.Context;
import android.os.ParcelFileDescriptor;
import com.bumptech.glide.load.model.ImageVideoModelLoader;
import com.bumptech.glide.load.model.ImageVideoWrapper;
import com.bumptech.glide.load.model.ModelLoader;
import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
import com.bumptech.glide.manager.Lifecycle;
import com.bumptech.glide.manager.RequestTracker;
import com.bumptech.glide.provider.DataLoadProvider;
import com.bumptech.glide.provider.FixedLoadProvider;
import com.bumptech.glide.request.FutureTarget;
import java.io.File;
import java.io.InputStream;

public class DrawableTypeRequest<ModelType> extends DrawableRequestBuilder<ModelType> implements DownloadOptions {
  private final ModelLoader<ModelType, ParcelFileDescriptor> fileDescriptorModelLoader;
  
  private final RequestManager.OptionsApplier optionsApplier;
  
  private final ModelLoader<ModelType, InputStream> streamModelLoader;
  
  DrawableTypeRequest(Class<ModelType> paramClass, ModelLoader<ModelType, InputStream> paramModelLoader1, ModelLoader<ModelType, ParcelFileDescriptor> paramModelLoader2, Context paramContext, Glide paramGlide, RequestTracker paramRequestTracker, Lifecycle paramLifecycle, RequestManager.OptionsApplier paramOptionsApplier) {
    super(paramContext, paramClass, buildProvider(paramGlide, paramModelLoader1, paramModelLoader2, com.bumptech.glide.load.resource.gifbitmap.GifBitmapWrapper.class, com.bumptech.glide.load.resource.drawable.GlideDrawable.class, null), paramGlide, paramRequestTracker, paramLifecycle);
    this.streamModelLoader = paramModelLoader1;
    this.fileDescriptorModelLoader = paramModelLoader2;
    this.optionsApplier = paramOptionsApplier;
  }
  
  private static <A, Z, R> FixedLoadProvider<A, ImageVideoWrapper, Z, R> buildProvider(Glide paramGlide, ModelLoader<A, InputStream> paramModelLoader1, ModelLoader<A, ParcelFileDescriptor> paramModelLoader2, Class<Z> paramClass1, Class<R> paramClass2, ResourceTranscoder<Z, R> paramResourceTranscoder) {
    if (paramModelLoader1 == null && paramModelLoader2 == null)
      return null; 
    ResourceTranscoder<Z, R> resourceTranscoder = paramResourceTranscoder;
    if (paramResourceTranscoder == null)
      resourceTranscoder = paramGlide.buildTranscoder(paramClass1, paramClass2); 
    DataLoadProvider dataLoadProvider = paramGlide.buildDataProvider(ImageVideoWrapper.class, paramClass1);
    return new FixedLoadProvider(new ImageVideoModelLoader(paramModelLoader1, paramModelLoader2), resourceTranscoder, dataLoadProvider);
  }
  
  private GenericTranscodeRequest<ModelType, InputStream, File> getDownloadOnlyRequest() {
    RequestManager.OptionsApplier optionsApplier1 = this.optionsApplier;
    return (GenericTranscodeRequest)optionsApplier1.apply(new GenericTranscodeRequest(File.class, this, this.streamModelLoader, InputStream.class, File.class, optionsApplier1));
  }
  
  public BitmapTypeRequest<ModelType> asBitmap() {
    RequestManager.OptionsApplier optionsApplier1 = this.optionsApplier;
    return (BitmapTypeRequest)optionsApplier1.apply(new BitmapTypeRequest(this, this.streamModelLoader, this.fileDescriptorModelLoader, optionsApplier1));
  }
  
  public GifTypeRequest<ModelType> asGif() {
    RequestManager.OptionsApplier optionsApplier1 = this.optionsApplier;
    return (GifTypeRequest)optionsApplier1.apply(new GifTypeRequest(this, this.streamModelLoader, optionsApplier1));
  }
  
  public FutureTarget<File> downloadOnly(int paramInt1, int paramInt2) { return getDownloadOnlyRequest().downloadOnly(paramInt1, paramInt2); }
  
  public <Y extends com.bumptech.glide.request.target.Target<File>> Y downloadOnly(Y paramY) { return (Y)getDownloadOnlyRequest().downloadOnly(paramY); }
}
