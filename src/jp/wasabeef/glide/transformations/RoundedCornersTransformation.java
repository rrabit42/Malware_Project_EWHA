package jp.wasabeef.glide.transformations;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.RectF;
import android.graphics.Shader;
import com.bumptech.glide.Glide;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.resource.bitmap.BitmapResource;

public class RoundedCornersTransformation extends Object implements Transformation<Bitmap> {
  private BitmapPool mBitmapPool;
  
  private CornerType mCornerType;
  
  private int mDiameter;
  
  private int mMargin;
  
  private int mRadius;
  
  public RoundedCornersTransformation(Context paramContext, int paramInt1, int paramInt2) { this(paramContext, paramInt1, paramInt2, CornerType.ALL); }
  
  public RoundedCornersTransformation(Context paramContext, int paramInt1, int paramInt2, CornerType paramCornerType) { this(Glide.get(paramContext).getBitmapPool(), paramInt1, paramInt2, paramCornerType); }
  
  public RoundedCornersTransformation(BitmapPool paramBitmapPool, int paramInt1, int paramInt2) { this(paramBitmapPool, paramInt1, paramInt2, CornerType.ALL); }
  
  public RoundedCornersTransformation(BitmapPool paramBitmapPool, int paramInt1, int paramInt2, CornerType paramCornerType) {
    this.mBitmapPool = paramBitmapPool;
    this.mRadius = paramInt1;
    this.mDiameter = this.mRadius * 2;
    this.mMargin = paramInt2;
    this.mCornerType = paramCornerType;
  }
  
  private void drawBottomLeftRoundRect(Canvas paramCanvas, Paint paramPaint, float paramFloat1, float paramFloat2) {
    int i = this.mMargin;
    float f = i;
    int j = this.mDiameter;
    RectF rectF = new RectF(f, paramFloat2 - j, (i + j), paramFloat2);
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mMargin;
    paramCanvas.drawRect(new RectF(i, i, (i + this.mDiameter), paramFloat2 - this.mRadius), paramPaint);
    i = this.mMargin;
    paramCanvas.drawRect(new RectF((this.mRadius + i), i, paramFloat1, paramFloat2), paramPaint);
  }
  
  private void drawBottomRightRoundRect(Canvas paramCanvas, Paint paramPaint, float paramFloat1, float paramFloat2) {
    int i = this.mDiameter;
    RectF rectF = new RectF(paramFloat1 - i, paramFloat2 - i, paramFloat1, paramFloat2);
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mMargin;
    paramCanvas.drawRect(new RectF(i, i, paramFloat1 - this.mRadius, paramFloat2), paramPaint);
    i = this.mRadius;
    paramCanvas.drawRect(new RectF(paramFloat1 - i, this.mMargin, paramFloat1, paramFloat2 - i), paramPaint);
  }
  
  private void drawBottomRoundRect(Canvas paramCanvas, Paint paramPaint, float paramFloat1, float paramFloat2) {
    RectF rectF = new RectF(this.mMargin, paramFloat2 - this.mDiameter, paramFloat1, paramFloat2);
    int i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mMargin;
    paramCanvas.drawRect(new RectF(i, i, paramFloat1, paramFloat2 - this.mRadius), paramPaint);
  }
  
  private void drawDiagonalFromTopLeftRoundRect(Canvas paramCanvas, Paint paramPaint, float paramFloat1, float paramFloat2) {
    int i = this.mMargin;
    float f1 = i;
    float f2 = i;
    int j = this.mDiameter;
    RectF rectF = new RectF(f1, f2, (i + j), (i + j));
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mDiameter;
    rectF = new RectF(paramFloat1 - i, paramFloat2 - i, paramFloat1, paramFloat2);
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mMargin;
    paramCanvas.drawRect(new RectF(i, (i + this.mRadius), paramFloat1 - this.mDiameter, paramFloat2), paramPaint);
    i = this.mMargin;
    paramCanvas.drawRect(new RectF((this.mDiameter + i), i, paramFloat1, paramFloat2 - this.mRadius), paramPaint);
  }
  
  private void drawDiagonalFromTopRightRoundRect(Canvas paramCanvas, Paint paramPaint, float paramFloat1, float paramFloat2) {
    int i = this.mDiameter;
    float f1 = i;
    int j = this.mMargin;
    RectF rectF = new RectF(paramFloat1 - f1, j, paramFloat1, (j + i));
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mMargin;
    f1 = i;
    j = this.mDiameter;
    rectF = new RectF(f1, paramFloat2 - j, (i + j), paramFloat2);
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mMargin;
    f1 = i;
    float f2 = i;
    i = this.mRadius;
    paramCanvas.drawRect(new RectF(f1, f2, paramFloat1 - i, paramFloat2 - i), paramPaint);
    i = this.mMargin;
    j = this.mRadius;
    paramCanvas.drawRect(new RectF((i + j), (i + j), paramFloat1, paramFloat2), paramPaint);
  }
  
  private void drawLeftRoundRect(Canvas paramCanvas, Paint paramPaint, float paramFloat1, float paramFloat2) {
    int i = this.mMargin;
    RectF rectF = new RectF(i, i, (i + this.mDiameter), paramFloat2);
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mMargin;
    paramCanvas.drawRect(new RectF((this.mRadius + i), i, paramFloat1, paramFloat2), paramPaint);
  }
  
  private void drawOtherBottomLeftRoundRect(Canvas paramCanvas, Paint paramPaint, float paramFloat1, float paramFloat2) {
    int i = this.mMargin;
    RectF rectF = new RectF(i, i, paramFloat1, (i + this.mDiameter));
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    rectF = new RectF(paramFloat1 - this.mDiameter, this.mMargin, paramFloat1, paramFloat2);
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mMargin;
    float f = i;
    int j = this.mRadius;
    paramCanvas.drawRect(new RectF(f, (i + j), paramFloat1 - j, paramFloat2), paramPaint);
  }
  
  private void drawOtherBottomRightRoundRect(Canvas paramCanvas, Paint paramPaint, float paramFloat1, float paramFloat2) {
    int i = this.mMargin;
    RectF rectF = new RectF(i, i, paramFloat1, (i + this.mDiameter));
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mMargin;
    rectF = new RectF(i, i, (i + this.mDiameter), paramFloat2);
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mMargin;
    int j = this.mRadius;
    paramCanvas.drawRect(new RectF((i + j), (i + j), paramFloat1, paramFloat2), paramPaint);
  }
  
  private void drawOtherTopLeftRoundRect(Canvas paramCanvas, Paint paramPaint, float paramFloat1, float paramFloat2) {
    RectF rectF = new RectF(this.mMargin, paramFloat2 - this.mDiameter, paramFloat1, paramFloat2);
    int i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    rectF = new RectF(paramFloat1 - this.mDiameter, this.mMargin, paramFloat1, paramFloat2);
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mMargin;
    float f1 = i;
    float f2 = i;
    i = this.mRadius;
    paramCanvas.drawRect(new RectF(f1, f2, paramFloat1 - i, paramFloat2 - i), paramPaint);
  }
  
  private void drawOtherTopRightRoundRect(Canvas paramCanvas, Paint paramPaint, float paramFloat1, float paramFloat2) {
    int i = this.mMargin;
    RectF rectF = new RectF(i, i, (i + this.mDiameter), paramFloat2);
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    rectF = new RectF(this.mMargin, paramFloat2 - this.mDiameter, paramFloat1, paramFloat2);
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mMargin;
    int j = this.mRadius;
    paramCanvas.drawRect(new RectF((i + j), i, paramFloat1, paramFloat2 - j), paramPaint);
  }
  
  private void drawRightRoundRect(Canvas paramCanvas, Paint paramPaint, float paramFloat1, float paramFloat2) {
    RectF rectF = new RectF(paramFloat1 - this.mDiameter, this.mMargin, paramFloat1, paramFloat2);
    int i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mMargin;
    paramCanvas.drawRect(new RectF(i, i, paramFloat1 - this.mRadius, paramFloat2), paramPaint);
  }
  
  private void drawRoundRect(Canvas paramCanvas, Paint paramPaint, float paramFloat1, float paramFloat2) {
    int i = this.mMargin;
    paramFloat1 -= i;
    paramFloat2 -= i;
    switch (null.$SwitchMap$jp$wasabeef$glide$transformations$RoundedCornersTransformation$CornerType[this.mCornerType.ordinal()]) {
      default:
        i = this.mMargin;
        rectF = new RectF(i, i, paramFloat1, paramFloat2);
        i = this.mRadius;
        paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
        return;
      case 15:
        drawDiagonalFromTopRightRoundRect(paramCanvas, paramPaint, paramFloat1, paramFloat2);
        return;
      case 14:
        drawDiagonalFromTopLeftRoundRect(paramCanvas, paramPaint, paramFloat1, paramFloat2);
        return;
      case 13:
        drawOtherBottomRightRoundRect(paramCanvas, paramPaint, paramFloat1, paramFloat2);
        return;
      case 12:
        drawOtherBottomLeftRoundRect(paramCanvas, paramPaint, paramFloat1, paramFloat2);
        return;
      case 11:
        drawOtherTopRightRoundRect(paramCanvas, paramPaint, paramFloat1, paramFloat2);
        return;
      case 10:
        drawOtherTopLeftRoundRect(paramCanvas, paramPaint, paramFloat1, paramFloat2);
        return;
      case 9:
        drawRightRoundRect(paramCanvas, paramPaint, paramFloat1, paramFloat2);
        return;
      case 8:
        drawLeftRoundRect(paramCanvas, paramPaint, paramFloat1, paramFloat2);
        return;
      case 7:
        drawBottomRoundRect(paramCanvas, paramPaint, paramFloat1, paramFloat2);
        return;
      case 6:
        drawTopRoundRect(paramCanvas, paramPaint, paramFloat1, paramFloat2);
        return;
      case 5:
        drawBottomRightRoundRect(paramCanvas, paramPaint, paramFloat1, paramFloat2);
        return;
      case 4:
        drawBottomLeftRoundRect(paramCanvas, paramPaint, paramFloat1, paramFloat2);
        return;
      case 3:
        drawTopRightRoundRect(paramCanvas, paramPaint, paramFloat1, paramFloat2);
        return;
      case 2:
        drawTopLeftRoundRect(paramCanvas, paramPaint, paramFloat1, paramFloat2);
        return;
      case 1:
        break;
    } 
    i = this.mMargin;
    RectF rectF = new RectF(i, i, paramFloat1, paramFloat2);
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
  }
  
  private void drawTopLeftRoundRect(Canvas paramCanvas, Paint paramPaint, float paramFloat1, float paramFloat2) {
    int i = this.mMargin;
    float f1 = i;
    float f2 = i;
    int j = this.mDiameter;
    RectF rectF = new RectF(f1, f2, (i + j), (i + j));
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mMargin;
    f1 = i;
    j = this.mRadius;
    paramCanvas.drawRect(new RectF(f1, (i + j), (i + j), paramFloat2), paramPaint);
    i = this.mMargin;
    paramCanvas.drawRect(new RectF((this.mRadius + i), i, paramFloat1, paramFloat2), paramPaint);
  }
  
  private void drawTopRightRoundRect(Canvas paramCanvas, Paint paramPaint, float paramFloat1, float paramFloat2) {
    int i = this.mDiameter;
    float f = i;
    int j = this.mMargin;
    RectF rectF = new RectF(paramFloat1 - f, j, paramFloat1, (j + i));
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mMargin;
    paramCanvas.drawRect(new RectF(i, i, paramFloat1 - this.mRadius, paramFloat2), paramPaint);
    i = this.mRadius;
    paramCanvas.drawRect(new RectF(paramFloat1 - i, (this.mMargin + i), paramFloat1, paramFloat2), paramPaint);
  }
  
  private void drawTopRoundRect(Canvas paramCanvas, Paint paramPaint, float paramFloat1, float paramFloat2) {
    int i = this.mMargin;
    RectF rectF = new RectF(i, i, paramFloat1, (i + this.mDiameter));
    i = this.mRadius;
    paramCanvas.drawRoundRect(rectF, i, i, paramPaint);
    i = this.mMargin;
    paramCanvas.drawRect(new RectF(i, (i + this.mRadius), paramFloat1, paramFloat2), paramPaint);
  }
  
  public String getId() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("RoundedTransformation(radius=");
    stringBuilder.append(this.mRadius);
    stringBuilder.append(", margin=");
    stringBuilder.append(this.mMargin);
    stringBuilder.append(", diameter=");
    stringBuilder.append(this.mDiameter);
    stringBuilder.append(", cornerType=");
    stringBuilder.append(this.mCornerType.name());
    stringBuilder.append(")");
    return stringBuilder.toString();
  }
  
  public Resource<Bitmap> transform(Resource<Bitmap> paramResource, int paramInt1, int paramInt2) {
    Bitmap bitmap3 = (Bitmap)paramResource.get();
    paramInt1 = bitmap3.getWidth();
    paramInt2 = bitmap3.getHeight();
    Bitmap bitmap2 = this.mBitmapPool.get(paramInt1, paramInt2, Bitmap.Config.ARGB_8888);
    Bitmap bitmap1 = bitmap2;
    if (bitmap2 == null)
      bitmap1 = Bitmap.createBitmap(paramInt1, paramInt2, Bitmap.Config.ARGB_8888); 
    Canvas canvas = new Canvas(bitmap1);
    Paint paint = new Paint();
    paint.setAntiAlias(true);
    paint.setShader(new BitmapShader(bitmap3, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));
    drawRoundRect(canvas, paint, paramInt1, paramInt2);
    return BitmapResource.obtain(bitmap1, this.mBitmapPool);
  }
}
