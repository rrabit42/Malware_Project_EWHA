package jp.wasabeef.glide.transformations.gpu;

import android.content.Context;
import android.graphics.Bitmap;
import com.bumptech.glide.Glide;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.resource.bitmap.BitmapResource;
import jp.co.cyberagent.android.gpuimage.GPUImage;
import jp.co.cyberagent.android.gpuimage.GPUImageFilter;

public class GPUFilterTransformation extends Object implements Transformation<Bitmap> {
  private BitmapPool mBitmapPool;
  
  private Context mContext;
  
  private GPUImageFilter mFilter;
  
  public GPUFilterTransformation(Context paramContext, BitmapPool paramBitmapPool, GPUImageFilter paramGPUImageFilter) {
    this.mContext = paramContext.getApplicationContext();
    this.mBitmapPool = paramBitmapPool;
    this.mFilter = paramGPUImageFilter;
  }
  
  public GPUFilterTransformation(Context paramContext, GPUImageFilter paramGPUImageFilter) { this(paramContext, Glide.get(paramContext).getBitmapPool(), paramGPUImageFilter); }
  
  public <T> T getFilter() { return (T)this.mFilter; }
  
  public String getId() { return getClass().getSimpleName(); }
  
  public Resource<Bitmap> transform(Resource<Bitmap> paramResource, int paramInt1, int paramInt2) {
    Bitmap bitmap = (Bitmap)paramResource.get();
    GPUImage gPUImage = new GPUImage(this.mContext);
    gPUImage.setImage(bitmap);
    gPUImage.setFilter(this.mFilter);
    return BitmapResource.obtain(gPUImage.getBitmapWithFilterApplied(), this.mBitmapPool);
  }
}
