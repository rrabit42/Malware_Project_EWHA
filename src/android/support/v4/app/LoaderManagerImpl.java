package android.support.v4.app;

import android.arch.lifecycle.LifecycleOwner;
import android.arch.lifecycle.ViewModelStore;
import android.os.Bundle;
import android.os.Looper;
import android.support.annotation.MainThread;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.content.Loader;
import android.support.v4.util.DebugUtils;
import android.util.Log;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.lang.reflect.Modifier;

class LoaderManagerImpl extends LoaderManager {
  static boolean DEBUG = false;
  
  static final String TAG = "LoaderManager";
  
  @NonNull
  private final LifecycleOwner mLifecycleOwner;
  
  @NonNull
  private final LoaderViewModel mLoaderViewModel;
  
  static  {
  
  }
  
  LoaderManagerImpl(@NonNull LifecycleOwner paramLifecycleOwner, @NonNull ViewModelStore paramViewModelStore) {
    this.mLifecycleOwner = paramLifecycleOwner;
    this.mLoaderViewModel = LoaderViewModel.getInstance(paramViewModelStore);
  }
  
  @MainThread
  @NonNull
  private <D> Loader<D> createAndInstallLoader(int paramInt, @Nullable Bundle paramBundle, @NonNull LoaderManager.LoaderCallbacks<D> paramLoaderCallbacks, @Nullable Loader<D> paramLoader) {
    try {
      this.mLoaderViewModel.startCreatingLoader();
      Loader loader = paramLoaderCallbacks.onCreateLoader(paramInt, paramBundle);
      if (loader != null) {
        if (!loader.getClass().isMemberClass() || Modifier.isStatic(loader.getClass().getModifiers())) {
          loaderInfo = new LoaderInfo(paramInt, paramBundle, loader, paramLoader);
          if (DEBUG) {
            StringBuilder stringBuilder1 = new StringBuilder();
            stringBuilder1.append("  Created new loader ");
            stringBuilder1.append(loaderInfo);
            Log.v("LoaderManager", stringBuilder1.toString());
          } 
          this.mLoaderViewModel.putLoader(paramInt, loaderInfo);
          return loaderInfo.setCallback(this.mLifecycleOwner, paramLoaderCallbacks);
        } 
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Object returned from onCreateLoader must not be a non-static inner member class: ");
        stringBuilder.append(loader);
        throw new IllegalArgumentException(stringBuilder.toString());
      } 
      throw new IllegalArgumentException("Object returned from onCreateLoader must not be null");
    } finally {
      this.mLoaderViewModel.finishCreatingLoader();
    } 
  }
  
  @MainThread
  public void destroyLoader(int paramInt) {
    if (!this.mLoaderViewModel.isCreatingLoader()) {
      if (Looper.getMainLooper() == Looper.myLooper()) {
        if (DEBUG) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("destroyLoader in ");
          stringBuilder.append(this);
          stringBuilder.append(" of ");
          stringBuilder.append(paramInt);
          Log.v("LoaderManager", stringBuilder.toString());
        } 
        LoaderInfo loaderInfo = this.mLoaderViewModel.getLoader(paramInt);
        if (loaderInfo != null) {
          loaderInfo.destroy(true);
          this.mLoaderViewModel.removeLoader(paramInt);
        } 
        return;
      } 
      throw new IllegalStateException("destroyLoader must be called on the main thread");
    } 
    throw new IllegalStateException("Called while creating a loader");
  }
  
  @Deprecated
  public void dump(String paramString, FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString) { this.mLoaderViewModel.dump(paramString, paramFileDescriptor, paramPrintWriter, paramArrayOfString); }
  
  @Nullable
  public <D> Loader<D> getLoader(int paramInt) {
    if (!this.mLoaderViewModel.isCreatingLoader()) {
      LoaderInfo loaderInfo = this.mLoaderViewModel.getLoader(paramInt);
      return (loaderInfo != null) ? loaderInfo.getLoader() : null;
    } 
    throw new IllegalStateException("Called while creating a loader");
  }
  
  public boolean hasRunningLoaders() { return this.mLoaderViewModel.hasRunningLoaders(); }
  
  @MainThread
  @NonNull
  public <D> Loader<D> initLoader(int paramInt, @Nullable Bundle paramBundle, @NonNull LoaderManager.LoaderCallbacks<D> paramLoaderCallbacks) {
    if (!this.mLoaderViewModel.isCreatingLoader()) {
      if (Looper.getMainLooper() == Looper.myLooper()) {
        LoaderInfo loaderInfo = this.mLoaderViewModel.getLoader(paramInt);
        if (DEBUG) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("initLoader in ");
          stringBuilder.append(this);
          stringBuilder.append(": args=");
          stringBuilder.append(paramBundle);
          Log.v("LoaderManager", stringBuilder.toString());
        } 
        if (loaderInfo == null)
          return createAndInstallLoader(paramInt, paramBundle, paramLoaderCallbacks, null); 
        if (DEBUG) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("  Re-using existing loader ");
          stringBuilder.append(loaderInfo);
          Log.v("LoaderManager", stringBuilder.toString());
        } 
        return loaderInfo.setCallback(this.mLifecycleOwner, paramLoaderCallbacks);
      } 
      throw new IllegalStateException("initLoader must be called on the main thread");
    } 
    throw new IllegalStateException("Called while creating a loader");
  }
  
  public void markForRedelivery() { this.mLoaderViewModel.markForRedelivery(); }
  
  @MainThread
  @NonNull
  public <D> Loader<D> restartLoader(int paramInt, @Nullable Bundle paramBundle, @NonNull LoaderManager.LoaderCallbacks<D> paramLoaderCallbacks) {
    if (!this.mLoaderViewModel.isCreatingLoader()) {
      if (Looper.getMainLooper() == Looper.myLooper()) {
        if (DEBUG) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("restartLoader in ");
          stringBuilder.append(this);
          stringBuilder.append(": args=");
          stringBuilder.append(paramBundle);
          Log.v("LoaderManager", stringBuilder.toString());
        } 
        LoaderInfo loaderInfo = this.mLoaderViewModel.getLoader(paramInt);
        Loader loader = null;
        if (loaderInfo != null)
          loader = loaderInfo.destroy(false); 
        return createAndInstallLoader(paramInt, paramBundle, paramLoaderCallbacks, loader);
      } 
      throw new IllegalStateException("restartLoader must be called on the main thread");
    } 
    throw new IllegalStateException("Called while creating a loader");
  }
  
  public String toString() {
    StringBuilder stringBuilder = new StringBuilder(128);
    stringBuilder.append("LoaderManager{");
    stringBuilder.append(Integer.toHexString(System.identityHashCode(this)));
    stringBuilder.append(" in ");
    DebugUtils.buildShortClassTag(this.mLifecycleOwner, stringBuilder);
    stringBuilder.append("}}");
    return stringBuilder.toString();
  }
}
