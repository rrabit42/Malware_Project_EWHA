package android.support.v4.graphics.drawable;

import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.graphics.Outline;
import android.graphics.PorterDuff;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.support.annotation.NonNull;
import android.support.annotation.RequiresApi;
import android.util.Log;
import java.lang.reflect.Method;

@RequiresApi(21)
class WrappedDrawableApi21 extends WrappedDrawableApi14 {
  private static final String TAG = "WrappedDrawableApi21";
  
  private static Method sIsProjectedDrawableMethod;
  
  WrappedDrawableApi21(Drawable paramDrawable) {
    super(paramDrawable);
    findAndCacheIsProjectedDrawableMethod();
  }
  
  WrappedDrawableApi21(WrappedDrawableApi14.DrawableWrapperState paramDrawableWrapperState, Resources paramResources) {
    super(paramDrawableWrapperState, paramResources);
    findAndCacheIsProjectedDrawableMethod();
  }
  
  private void findAndCacheIsProjectedDrawableMethod() {
    if (sIsProjectedDrawableMethod == null)
      try {
        sIsProjectedDrawableMethod = Drawable.class.getDeclaredMethod("isProjected", new Class[0]);
        return;
      } catch (Exception exception) {
        Log.w("WrappedDrawableApi21", "Failed to retrieve Drawable#isProjected() method", exception);
      }  
  }
  
  @NonNull
  public Rect getDirtyBounds() { return this.mDrawable.getDirtyBounds(); }
  
  public void getOutline(@NonNull Outline paramOutline) { this.mDrawable.getOutline(paramOutline); }
  
  protected boolean isCompatTintEnabled() {
    int i = Build.VERSION.SDK_INT;
    byte b = 0;
    int j = b;
    if (i == 21) {
      Drawable drawable = this.mDrawable;
      if (!(drawable instanceof android.graphics.drawable.GradientDrawable) && !(drawable instanceof android.graphics.drawable.DrawableContainer) && !(drawable instanceof android.graphics.drawable.InsetDrawable)) {
        j = b;
        return (drawable instanceof android.graphics.drawable.RippleDrawable) ? true : j;
      } 
    } else {
      return j;
    } 
    return true;
  }
  
  public boolean isProjected() {
    if (this.mDrawable != null) {
      method = sIsProjectedDrawableMethod;
      if (method != null)
        try {
          return ((Boolean)method.invoke(this.mDrawable, new Object[0])).booleanValue();
        } catch (Exception method) {
          Log.w("WrappedDrawableApi21", "Error calling Drawable#isProjected() method", method);
        }  
    } 
    return false;
  }
  
  @NonNull
  WrappedDrawableApi14.DrawableWrapperState mutateConstantState() { return new DrawableWrapperStateLollipop(this.mState, null); }
  
  public void setHotspot(float paramFloat1, float paramFloat2) { this.mDrawable.setHotspot(paramFloat1, paramFloat2); }
  
  public void setHotspotBounds(int paramInt1, int paramInt2, int paramInt3, int paramInt4) { this.mDrawable.setHotspotBounds(paramInt1, paramInt2, paramInt3, paramInt4); }
  
  public boolean setState(@NonNull int[] paramArrayOfInt) {
    if (super.setState(paramArrayOfInt)) {
      invalidateSelf();
      return true;
    } 
    return false;
  }
  
  public void setTint(int paramInt) {
    if (isCompatTintEnabled()) {
      super.setTint(paramInt);
      return;
    } 
    this.mDrawable.setTint(paramInt);
  }
  
  public void setTintList(ColorStateList paramColorStateList) {
    if (isCompatTintEnabled()) {
      super.setTintList(paramColorStateList);
      return;
    } 
    this.mDrawable.setTintList(paramColorStateList);
  }
  
  public void setTintMode(PorterDuff.Mode paramMode) {
    if (isCompatTintEnabled()) {
      super.setTintMode(paramMode);
      return;
    } 
    this.mDrawable.setTintMode(paramMode);
  }
}
