package com.google.android.gms.common;

import android.annotation.TargetApi;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.os.Bundle;
import android.os.UserManager;
import android.util.Log;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.internal.HideFirstParty;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.ShowFirstParty;
import com.google.android.gms.common.internal.zzp;
import com.google.android.gms.common.util.ClientLibraryUtils;
import com.google.android.gms.common.util.DeviceProperties;
import com.google.android.gms.common.util.PlatformVersion;
import com.google.android.gms.common.util.UidVerifier;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.common.wrappers.Wrappers;
import java.util.concurrent.atomic.AtomicBoolean;

@KeepForSdk
@ShowFirstParty
public class GooglePlayServicesUtilLight {
  @KeepForSdk
  static final int GMS_AVAILABILITY_NOTIFICATION_ID = 10436;
  
  @KeepForSdk
  static final int GMS_GENERAL_ERROR_NOTIFICATION_ID = 39789;
  
  @KeepForSdk
  public static final String GOOGLE_PLAY_GAMES_PACKAGE = "com.google.android.play.games";
  
  @Deprecated
  @KeepForSdk
  public static final String GOOGLE_PLAY_SERVICES_PACKAGE = "com.google.android.gms";
  
  @Deprecated
  @KeepForSdk
  public static final int GOOGLE_PLAY_SERVICES_VERSION_CODE = 12451000;
  
  @KeepForSdk
  public static final String GOOGLE_PLAY_STORE_PACKAGE = "com.android.vending";
  
  @KeepForSdk
  @VisibleForTesting
  static final AtomicBoolean sCanceledAvailabilityNotification = new AtomicBoolean();
  
  @VisibleForTesting
  private static boolean zzah = false;
  
  @VisibleForTesting
  private static boolean zzai = false;
  
  private static boolean zzaj = false;
  
  @VisibleForTesting
  private static boolean zzak = false;
  
  private static final AtomicBoolean zzal = new AtomicBoolean();
  
  @Deprecated
  @KeepForSdk
  public static void cancelAvailabilityErrorNotifications(Context paramContext) {
    if (sCanceledAvailabilityNotification.getAndSet(true))
      return; 
    try {
      NotificationManager notificationManager = (NotificationManager)paramContext.getSystemService("notification");
      if (notificationManager != null)
        notificationManager.cancel(10436); 
      return;
    } catch (SecurityException paramContext) {
      return;
    } 
  }
  
  @KeepForSdk
  @ShowFirstParty
  public static void enableUsingApkIndependentContext() { zzal.set(true); }
  
  @Deprecated
  @KeepForSdk
  public static void ensurePlayServicesAvailable(Context paramContext, int paramInt) throws GooglePlayServicesRepairableException, GooglePlayServicesNotAvailableException {
    paramInt = GoogleApiAvailabilityLight.getInstance().isGooglePlayServicesAvailable(paramContext, paramInt);
    if (paramInt != 0) {
      Intent intent = GoogleApiAvailabilityLight.getInstance().getErrorResolutionIntent(paramContext, paramInt, "e");
      StringBuilder stringBuilder = new StringBuilder(57);
      stringBuilder.append("GooglePlayServices not available due to error ");
      stringBuilder.append(paramInt);
      Log.e("GooglePlayServicesUtil", stringBuilder.toString());
      if (intent == null)
        throw new GooglePlayServicesNotAvailableException(paramInt); 
      throw new GooglePlayServicesRepairableException(paramInt, "Google Play Services not available", intent);
    } 
  }
  
  @Deprecated
  @KeepForSdk
  @ShowFirstParty
  public static int getApkVersion(Context paramContext) {
    try {
      PackageInfo packageInfo = paramContext.getPackageManager().getPackageInfo("com.google.android.gms", 0);
      return packageInfo.versionCode;
    } catch (android.content.pm.PackageManager.NameNotFoundException paramContext) {
      Log.w("GooglePlayServicesUtil", "Google Play services is missing.");
      return 0;
    } 
  }
  
  @Deprecated
  @KeepForSdk
  @ShowFirstParty
  public static int getClientVersion(Context paramContext) {
    Preconditions.checkState(true);
    return ClientLibraryUtils.getClientVersion(paramContext, paramContext.getPackageName());
  }
  
  @Deprecated
  @KeepForSdk
  public static PendingIntent getErrorPendingIntent(int paramInt1, Context paramContext, int paramInt2) { return GoogleApiAvailabilityLight.getInstance().getErrorResolutionPendingIntent(paramContext, paramInt1, paramInt2); }
  
  @Deprecated
  @KeepForSdk
  @VisibleForTesting
  public static String getErrorString(int paramInt) { return ConnectionResult.zza(paramInt); }
  
  @Deprecated
  @KeepForSdk
  @ShowFirstParty
  public static Intent getGooglePlayServicesAvailabilityRecoveryIntent(int paramInt) { return GoogleApiAvailabilityLight.getInstance().getErrorResolutionIntent(null, paramInt, null); }
  
  @KeepForSdk
  public static Context getRemoteContext(Context paramContext) {
    try {
      return paramContext.createPackageContext("com.google.android.gms", 3);
    } catch (android.content.pm.PackageManager.NameNotFoundException paramContext) {
      return null;
    } 
  }
  
  @KeepForSdk
  public static Resources getRemoteResource(Context paramContext) {
    try {
      return paramContext.getPackageManager().getResourcesForApplication("com.google.android.gms");
    } catch (android.content.pm.PackageManager.NameNotFoundException paramContext) {
      return null;
    } 
  }
  
  @KeepForSdk
  @ShowFirstParty
  public static boolean honorsDebugCertificates(Context paramContext) {
    if (!zzak)
      try {
        PackageInfo packageInfo = Wrappers.packageManager(paramContext).getPackageInfo("com.google.android.gms", 64);
        if (packageInfo != null && !GoogleSignatureVerifier.getInstance(paramContext).zza(packageInfo, false) && GoogleSignatureVerifier.zza(packageInfo, true)) {
          zzaj = true;
        } else {
          zzaj = false;
        } 
        zzak = true;
      } catch (android.content.pm.PackageManager.NameNotFoundException paramContext) {
        Log.w("GooglePlayServicesUtil", "Cannot find Google Play services package name.", paramContext);
        zzak = true;
      } finally {} 
    return !zzaj ? (!DeviceProperties.isUserBuild()) : true;
  }
  
  @Deprecated
  @KeepForSdk
  @HideFirstParty
  public static int isGooglePlayServicesAvailable(Context paramContext) { return isGooglePlayServicesAvailable(paramContext, GOOGLE_PLAY_SERVICES_VERSION_CODE); }
  
  @Deprecated
  @KeepForSdk
  public static int isGooglePlayServicesAvailable(Context paramContext, int paramInt) {
    boolean bool;
    StringBuilder stringBuilder;
    try {
      paramContext.getResources().getString(R.string.common_google_play_services_unknown_issue);
    } catch (Throwable throwable) {
      Log.e("GooglePlayServicesUtil", "The Google Play services resources were not found. Check your project configuration to ensure that the resources are included.");
    } 
    if (!"com.google.android.gms".equals(paramContext.getPackageName()) && !zzal.get()) {
      int i = zzp.zzd(paramContext);
      if (i != 0) {
        int j = GOOGLE_PLAY_SERVICES_VERSION_CODE;
        if (i != j) {
          stringBuilder = new StringBuilder(320);
          stringBuilder.append("The meta-data tag in your app's AndroidManifest.xml does not have the right value.  Expected ");
          stringBuilder.append(j);
          stringBuilder.append(" but found ");
          stringBuilder.append(i);
          stringBuilder.append(".  You must have the following declaration within the <application> element:     <meta-data android:name=\"com.google.android.gms.version\" android:value=\"@integer/google_play_services_version\" />");
          throw new IllegalStateException(stringBuilder.toString());
        } 
      } else {
        throw new IllegalStateException("A required meta-data tag in your app's AndroidManifest.xml does not exist.  You must have the following declaration within the <application> element:     <meta-data android:name=\"com.google.android.gms.version\" android:value=\"@integer/google_play_services_version\" />");
      } 
    } 
    if (!DeviceProperties.isWearableWithoutPlayStore(stringBuilder) && !DeviceProperties.zzf(stringBuilder)) {
      bool = true;
    } else {
      bool = false;
    } 
    return zza(stringBuilder, bool, paramInt);
  }
  
  @Deprecated
  @KeepForSdk
  public static boolean isGooglePlayServicesUid(Context paramContext, int paramInt) { return UidVerifier.isGooglePlayServicesUid(paramContext, paramInt); }
  
  @Deprecated
  @KeepForSdk
  @ShowFirstParty
  public static boolean isPlayServicesPossiblyUpdating(Context paramContext, int paramInt) { return (paramInt == 18) ? true : ((paramInt == 1) ? isUninstalledAppPossiblyUpdating(paramContext, "com.google.android.gms") : 0); }
  
  @Deprecated
  @KeepForSdk
  @ShowFirstParty
  public static boolean isPlayStorePossiblyUpdating(Context paramContext, int paramInt) { return (paramInt == 9) ? isUninstalledAppPossiblyUpdating(paramContext, "com.android.vending") : 0; }
  
  @TargetApi(18)
  @KeepForSdk
  public static boolean isRestrictedUserProfile(Context paramContext) {
    if (PlatformVersion.isAtLeastJellyBeanMR2()) {
      Bundle bundle = ((UserManager)paramContext.getSystemService("user")).getApplicationRestrictions(paramContext.getPackageName());
      if (bundle != null && "true".equals(bundle.getString("restricted_profile")))
        return true; 
    } 
    return false;
  }
  
  @Deprecated
  @KeepForSdk
  @ShowFirstParty
  @VisibleForTesting
  public static boolean isSidewinderDevice(Context paramContext) { return DeviceProperties.isSidewinder(paramContext); }
  
  @TargetApi(21)
  static boolean isUninstalledAppPossiblyUpdating(Context paramContext, String paramString) { // Byte code:
    //   0: aload_1
    //   1: ldc 'com.google.android.gms'
    //   3: invokevirtual equals : (Ljava/lang/Object;)Z
    //   6: istore_2
    //   7: invokestatic isAtLeastLollipop : ()Z
    //   10: ifeq -> 61
    //   13: aload_0
    //   14: invokevirtual getPackageManager : ()Landroid/content/pm/PackageManager;
    //   17: invokevirtual getPackageInstaller : ()Landroid/content/pm/PackageInstaller;
    //   20: invokevirtual getAllSessions : ()Ljava/util/List;
    //   23: astore_3
    //   24: aload_3
    //   25: invokeinterface iterator : ()Ljava/util/Iterator;
    //   30: astore_3
    //   31: aload_3
    //   32: invokeinterface hasNext : ()Z
    //   37: ifeq -> 61
    //   40: aload_1
    //   41: aload_3
    //   42: invokeinterface next : ()Ljava/lang/Object;
    //   47: checkcast android/content/pm/PackageInstaller$SessionInfo
    //   50: invokevirtual getAppPackageName : ()Ljava/lang/String;
    //   53: invokevirtual equals : (Ljava/lang/Object;)Z
    //   56: ifeq -> 31
    //   59: iconst_1
    //   60: ireturn
    //   61: aload_0
    //   62: invokevirtual getPackageManager : ()Landroid/content/pm/PackageManager;
    //   65: astore_3
    //   66: aload_3
    //   67: aload_1
    //   68: sipush #8192
    //   71: invokevirtual getApplicationInfo : (Ljava/lang/String;I)Landroid/content/pm/ApplicationInfo;
    //   74: astore_1
    //   75: iload_2
    //   76: ifeq -> 84
    //   79: aload_1
    //   80: getfield enabled : Z
    //   83: ireturn
    //   84: aload_1
    //   85: getfield enabled : Z
    //   88: ifeq -> 102
    //   91: aload_0
    //   92: invokestatic isRestrictedUserProfile : (Landroid/content/Context;)Z
    //   95: istore_2
    //   96: iload_2
    //   97: ifne -> 102
    //   100: iconst_1
    //   101: ireturn
    //   102: iconst_0
    //   103: ireturn
    //   104: astore_0
    //   105: iconst_0
    //   106: ireturn
    //   107: astore_0
    //   108: iconst_0
    //   109: ireturn
    // Exception table:
    //   from	to	target	type
    //   13	24	104	java/lang/Exception
    //   66	75	107	android/content/pm/PackageManager$NameNotFoundException
    //   79	84	107	android/content/pm/PackageManager$NameNotFoundException
    //   84	96	107	android/content/pm/PackageManager$NameNotFoundException }
  
  @Deprecated
  @KeepForSdk
  public static boolean isUserRecoverableError(int paramInt) { return !(paramInt != 1 && paramInt != 2 && paramInt != 3 && paramInt != 9); }
  
  @Deprecated
  @TargetApi(19)
  @KeepForSdk
  public static boolean uidHasPackageName(Context paramContext, int paramInt, String paramString) { return UidVerifier.uidHasPackageName(paramContext, paramInt, paramString); }
  
  @VisibleForTesting
  private static int zza(Context paramContext, boolean paramBoolean, int paramInt) { // Byte code:
    //   0: iload_2
    //   1: iflt -> 10
    //   4: iconst_1
    //   5: istore #4
    //   7: goto -> 13
    //   10: iconst_0
    //   11: istore #4
    //   13: iload #4
    //   15: invokestatic checkArgument : (Z)V
    //   18: aload_0
    //   19: invokevirtual getPackageManager : ()Landroid/content/pm/PackageManager;
    //   22: astore #6
    //   24: aconst_null
    //   25: astore #5
    //   27: iload_1
    //   28: ifeq -> 58
    //   31: aload #6
    //   33: ldc 'com.android.vending'
    //   35: sipush #8256
    //   38: invokevirtual getPackageInfo : (Ljava/lang/String;I)Landroid/content/pm/PackageInfo;
    //   41: astore #5
    //   43: goto -> 58
    //   46: ldc 'GooglePlayServicesUtil'
    //   48: ldc_w 'Google Play Store is missing.'
    //   51: invokestatic w : (Ljava/lang/String;Ljava/lang/String;)I
    //   54: pop
    //   55: bipush #9
    //   57: ireturn
    //   58: aload #6
    //   60: ldc 'com.google.android.gms'
    //   62: bipush #64
    //   64: invokevirtual getPackageInfo : (Ljava/lang/String;I)Landroid/content/pm/PackageInfo;
    //   67: astore #7
    //   69: aload_0
    //   70: invokestatic getInstance : (Landroid/content/Context;)Lcom/google/android/gms/common/GoogleSignatureVerifier;
    //   73: pop
    //   74: aload #7
    //   76: iconst_1
    //   77: invokestatic zza : (Landroid/content/pm/PackageInfo;Z)Z
    //   80: ifne -> 95
    //   83: ldc 'GooglePlayServicesUtil'
    //   85: ldc_w 'Google Play services signature invalid.'
    //   88: invokestatic w : (Ljava/lang/String;Ljava/lang/String;)I
    //   91: pop
    //   92: bipush #9
    //   94: ireturn
    //   95: iload_1
    //   96: ifeq -> 140
    //   99: aload #5
    //   101: iconst_1
    //   102: invokestatic zza : (Landroid/content/pm/PackageInfo;Z)Z
    //   105: ifeq -> 128
    //   108: aload #5
    //   110: getfield signatures : [Landroid/content/pm/Signature;
    //   113: iconst_0
    //   114: aaload
    //   115: aload #7
    //   117: getfield signatures : [Landroid/content/pm/Signature;
    //   120: iconst_0
    //   121: aaload
    //   122: invokevirtual equals : (Ljava/lang/Object;)Z
    //   125: ifne -> 140
    //   128: ldc 'GooglePlayServicesUtil'
    //   130: ldc_w 'Google Play Store signature invalid.'
    //   133: invokestatic w : (Ljava/lang/String;Ljava/lang/String;)I
    //   136: pop
    //   137: bipush #9
    //   139: ireturn
    //   140: aload #7
    //   142: getfield versionCode : I
    //   145: invokestatic zzc : (I)I
    //   148: iload_2
    //   149: invokestatic zzc : (I)I
    //   152: if_icmpge -> 211
    //   155: aload #7
    //   157: getfield versionCode : I
    //   160: istore_3
    //   161: new java/lang/StringBuilder
    //   164: dup
    //   165: bipush #77
    //   167: invokespecial <init> : (I)V
    //   170: astore_0
    //   171: aload_0
    //   172: ldc_w 'Google Play services out of date.  Requires '
    //   175: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   178: pop
    //   179: aload_0
    //   180: iload_2
    //   181: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   184: pop
    //   185: aload_0
    //   186: ldc_w ' but found '
    //   189: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   192: pop
    //   193: aload_0
    //   194: iload_3
    //   195: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   198: pop
    //   199: ldc 'GooglePlayServicesUtil'
    //   201: aload_0
    //   202: invokevirtual toString : ()Ljava/lang/String;
    //   205: invokestatic w : (Ljava/lang/String;Ljava/lang/String;)I
    //   208: pop
    //   209: iconst_2
    //   210: ireturn
    //   211: aload #7
    //   213: getfield applicationInfo : Landroid/content/pm/ApplicationInfo;
    //   216: astore #5
    //   218: aload #5
    //   220: astore_0
    //   221: aload #5
    //   223: ifnonnull -> 251
    //   226: aload #6
    //   228: ldc 'com.google.android.gms'
    //   230: iconst_0
    //   231: invokevirtual getApplicationInfo : (Ljava/lang/String;I)Landroid/content/pm/ApplicationInfo;
    //   234: astore_0
    //   235: goto -> 251
    //   238: astore_0
    //   239: ldc 'GooglePlayServicesUtil'
    //   241: ldc_w 'Google Play services missing when getting application info.'
    //   244: aload_0
    //   245: invokestatic wtf : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   248: pop
    //   249: iconst_1
    //   250: ireturn
    //   251: aload_0
    //   252: getfield enabled : Z
    //   255: ifne -> 260
    //   258: iconst_3
    //   259: ireturn
    //   260: iconst_0
    //   261: ireturn
    //   262: ldc 'GooglePlayServicesUtil'
    //   264: ldc 'Google Play services is missing.'
    //   266: invokestatic w : (Ljava/lang/String;Ljava/lang/String;)I
    //   269: pop
    //   270: iconst_1
    //   271: ireturn
    //   272: astore_0
    //   273: goto -> 46
    //   276: astore_0
    //   277: goto -> 262
    // Exception table:
    //   from	to	target	type
    //   31	43	272	android/content/pm/PackageManager$NameNotFoundException
    //   58	69	276	android/content/pm/PackageManager$NameNotFoundException
    //   226	235	238	android/content/pm/PackageManager$NameNotFoundException }
}
