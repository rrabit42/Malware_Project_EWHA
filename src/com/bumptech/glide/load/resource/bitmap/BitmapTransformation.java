package com.bumptech.glide.load.resource.bitmap;

import android.content.Context;
import android.graphics.Bitmap;
import com.bumptech.glide.Glide;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.util.Util;

public abstract class BitmapTransformation extends Object implements Transformation<Bitmap> {
  private BitmapPool bitmapPool;
  
  public BitmapTransformation(Context paramContext) { this(Glide.get(paramContext).getBitmapPool()); }
  
  public BitmapTransformation(BitmapPool paramBitmapPool) { this.bitmapPool = paramBitmapPool; }
  
  protected abstract Bitmap transform(BitmapPool paramBitmapPool, Bitmap paramBitmap, int paramInt1, int paramInt2);
  
  public final Resource<Bitmap> transform(Resource<Bitmap> paramResource, int paramInt1, int paramInt2) {
    if (Util.isValidDimensions(paramInt1, paramInt2)) {
      Bitmap bitmap1 = (Bitmap)paramResource.get();
      int i = paramInt1;
      if (paramInt1 == Integer.MIN_VALUE)
        i = bitmap1.getWidth(); 
      paramInt1 = paramInt2;
      if (paramInt2 == Integer.MIN_VALUE)
        paramInt1 = bitmap1.getHeight(); 
      Bitmap bitmap2 = transform(this.bitmapPool, bitmap1, i, paramInt1);
      return bitmap1.equals(bitmap2) ? paramResource : BitmapResource.obtain(bitmap2, this.bitmapPool);
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Cannot apply transformation on width: ");
    stringBuilder.append(paramInt1);
    stringBuilder.append(" or height: ");
    stringBuilder.append(paramInt2);
    stringBuilder.append(" less than or equal to zero and not Target.SIZE_ORIGINAL");
    throw new IllegalArgumentException(stringBuilder.toString());
  }
}
