package com.google.android.gms.internal.measurement;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.ServiceConfigurationError;
import java.util.ServiceLoader;
import java.util.logging.Level;
import java.util.logging.Logger;

abstract class zzum<T extends zzub> extends Object {
  private static final Logger logger = Logger.getLogger(zztv.class.getName());
  
  private static String zzbyb = "com.google.protobuf.BlazeGeneratedExtensionRegistryLiteLoader";
  
  static <T extends zzub> T zzd(Class<T> paramClass) {
    ClassLoader classLoader = zzum.class.getClassLoader();
    if (paramClass.equals(zzub.class)) {
      str = zzbyb;
    } else if (paramClass.getPackage().equals(zzum.class.getPackage())) {
      str = String.format("%s.BlazeGenerated%sLoader", new Object[] { paramClass.getPackage().getName(), paramClass.getSimpleName() });
    } else {
      illegalArgumentException = new IllegalArgumentException(paramClass.getName());
      throw illegalArgumentException;
    } 
    try {
      clazz = Class.forName(str, true, classLoader);
      try {
        zzum zzum1 = (zzum)clazz.getConstructor(new Class[0]).newInstance(new Object[0]);
        return (T)(zzub)illegalArgumentException.cast(zzum1.zzwd());
      } catch (NoSuchMethodException clazz) {
        throw new IllegalStateException(clazz);
      } catch (InstantiationException clazz) {
        throw new IllegalStateException(clazz);
      } catch (IllegalAccessException clazz) {
        throw new IllegalStateException(clazz);
      } catch (InvocationTargetException clazz) {
        throw new IllegalStateException(clazz);
      } 
    } catch (ClassNotFoundException str) {
      Iterator iterator = ServiceLoader.load(zzum.class, classLoader).iterator();
      ArrayList arrayList = new ArrayList();
      while (iterator.hasNext()) {
        try {
          arrayList.add((zzub)illegalArgumentException.cast(((zzum)iterator.next()).zzwd()));
        } catch (ServiceConfigurationError serviceConfigurationError) {
          Logger logger1 = logger;
          Level level = Level.SEVERE;
          str = String.valueOf(illegalArgumentException.getSimpleName());
          if (str.length() != 0) {
            str = "Unable to load ".concat(str);
          } else {
            str = new String("Unable to load ");
          } 
          logger1.logp(level, "com.google.protobuf.GeneratedExtensionRegistryLoader", "load", str, serviceConfigurationError);
        } 
      } 
      if (arrayList.size() == 1)
        return (T)(zzub)arrayList.get(0); 
      if (arrayList.size() == 0)
        return null; 
      try {
        return (T)(zzub)illegalArgumentException.getMethod("combine", new Class[] { java.util.Collection.class }).invoke(null, new Object[] { arrayList });
      } catch (NoSuchMethodException illegalArgumentException) {
        throw new IllegalStateException(illegalArgumentException);
      } catch (IllegalAccessException illegalArgumentException) {
        throw new IllegalStateException(illegalArgumentException);
      } catch (InvocationTargetException illegalArgumentException) {
        throw new IllegalStateException(illegalArgumentException);
      } 
    } 
  }
  
  protected abstract T zzwd();
}
