package jp.wasabeef.glide.transformations;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.RectF;
import com.bumptech.glide.Glide;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.resource.bitmap.BitmapResource;

public class CropTransformation extends Object implements Transformation<Bitmap> {
  private BitmapPool mBitmapPool;
  
  private CropType mCropType = CropType.CENTER;
  
  private int mHeight;
  
  private int mWidth;
  
  public CropTransformation(Context paramContext) { this(Glide.get(paramContext).getBitmapPool()); }
  
  public CropTransformation(Context paramContext, int paramInt1, int paramInt2) { this(Glide.get(paramContext).getBitmapPool(), paramInt1, paramInt2); }
  
  public CropTransformation(Context paramContext, int paramInt1, int paramInt2, CropType paramCropType) { this(Glide.get(paramContext).getBitmapPool(), paramInt1, paramInt2, paramCropType); }
  
  public CropTransformation(BitmapPool paramBitmapPool) { this(paramBitmapPool, 0, 0); }
  
  public CropTransformation(BitmapPool paramBitmapPool, int paramInt1, int paramInt2) { this(paramBitmapPool, paramInt1, paramInt2, CropType.CENTER); }
  
  public CropTransformation(BitmapPool paramBitmapPool, int paramInt1, int paramInt2, CropType paramCropType) {
    this.mBitmapPool = paramBitmapPool;
    this.mWidth = paramInt1;
    this.mHeight = paramInt2;
    this.mCropType = paramCropType;
  }
  
  private float getTop(float paramFloat) {
    int i = null.$SwitchMap$jp$wasabeef$glide$transformations$CropTransformation$CropType[this.mCropType.ordinal()];
    return (i != 1) ? ((i != 2) ? ((i != 3) ? 0.0F : (this.mHeight - paramFloat)) : ((this.mHeight - paramFloat) / 2.0F)) : 0.0F;
  }
  
  public String getId() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("CropTransformation(width=");
    stringBuilder.append(this.mWidth);
    stringBuilder.append(", height=");
    stringBuilder.append(this.mHeight);
    stringBuilder.append(", cropType=");
    stringBuilder.append(this.mCropType);
    stringBuilder.append(")");
    return stringBuilder.toString();
  }
  
  public Resource<Bitmap> transform(Resource<Bitmap> paramResource, int paramInt1, int paramInt2) {
    Bitmap.Config config;
    Bitmap bitmap3 = (Bitmap)paramResource.get();
    paramInt2 = this.mWidth;
    paramInt1 = paramInt2;
    if (paramInt2 == 0)
      paramInt1 = bitmap3.getWidth(); 
    this.mWidth = paramInt1;
    paramInt2 = this.mHeight;
    paramInt1 = paramInt2;
    if (paramInt2 == 0)
      paramInt1 = bitmap3.getHeight(); 
    this.mHeight = paramInt1;
    if (bitmap3.getConfig() != null) {
      config = bitmap3.getConfig();
    } else {
      config = Bitmap.Config.ARGB_8888;
    } 
    Bitmap bitmap2 = this.mBitmapPool.get(this.mWidth, this.mHeight, config);
    Bitmap bitmap1 = bitmap2;
    if (bitmap2 == null)
      bitmap1 = Bitmap.createBitmap(this.mWidth, this.mHeight, config); 
    float f2 = Math.max(this.mWidth / bitmap3.getWidth(), this.mHeight / bitmap3.getHeight());
    float f1 = bitmap3.getWidth() * f2;
    f2 *= bitmap3.getHeight();
    float f3 = (this.mWidth - f1) / 2.0F;
    float f4 = getTop(f2);
    RectF rectF = new RectF(f3, f4, f1 + f3, f2 + f4);
    (new Canvas(bitmap1)).drawBitmap(bitmap3, null, rectF, null);
    return BitmapResource.obtain(bitmap1, this.mBitmapPool);
  }
}
