package com.google.android.gms.tasks;

import android.app.Activity;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import com.google.android.gms.common.internal.Preconditions;
import java.util.concurrent.CancellationException;
import java.util.concurrent.Executor;
import javax.annotation.concurrent.GuardedBy;

final class zzu<TResult> extends Task<TResult> {
  private final Object mLock = new Object();
  
  @GuardedBy("mLock")
  private TResult zzaa;
  
  @GuardedBy("mLock")
  private Exception zzab;
  
  private final zzr<TResult> zzx = new zzr();
  
  @GuardedBy("mLock")
  private boolean zzy;
  
  @GuardedBy("mLock")
  private final void zzb() { Preconditions.checkState(this.zzy, "Task is not yet complete"); }
  
  @GuardedBy("mLock")
  private final void zzc() { Preconditions.checkState(this.zzy ^ true, "Task is already complete"); }
  
  @GuardedBy("mLock")
  private final void zzd() {
    if (!this.zzz)
      return; 
    throw new CancellationException("Task is already canceled.");
  }
  
  private final void zze() {
    synchronized (this.mLock) {
      if (!this.zzy)
        return; 
      this.zzx.zza(this);
      return;
    } 
  }
  
  @NonNull
  public final Task<TResult> addOnCanceledListener(@NonNull Activity paramActivity, @NonNull OnCanceledListener paramOnCanceledListener) {
    zzg zzg = new zzg(TaskExecutors.MAIN_THREAD, paramOnCanceledListener);
    this.zzx.zza(zzg);
    zza.zza(paramActivity).zzb(zzg);
    zze();
    return this;
  }
  
  @NonNull
  public final Task<TResult> addOnCanceledListener(@NonNull OnCanceledListener paramOnCanceledListener) { return super.addOnCanceledListener(TaskExecutors.MAIN_THREAD, paramOnCanceledListener); }
  
  @NonNull
  public final Task<TResult> addOnCanceledListener(@NonNull Executor paramExecutor, @NonNull OnCanceledListener paramOnCanceledListener) {
    this.zzx.zza(new zzg(paramExecutor, paramOnCanceledListener));
    zze();
    return this;
  }
  
  @NonNull
  public final Task<TResult> addOnCompleteListener(@NonNull Activity paramActivity, @NonNull OnCompleteListener<TResult> paramOnCompleteListener) {
    zzi zzi = new zzi(TaskExecutors.MAIN_THREAD, paramOnCompleteListener);
    this.zzx.zza(zzi);
    zza.zza(paramActivity).zzb(zzi);
    zze();
    return this;
  }
  
  @NonNull
  public final Task<TResult> addOnCompleteListener(@NonNull OnCompleteListener<TResult> paramOnCompleteListener) { return super.addOnCompleteListener(TaskExecutors.MAIN_THREAD, paramOnCompleteListener); }
  
  @NonNull
  public final Task<TResult> addOnCompleteListener(@NonNull Executor paramExecutor, @NonNull OnCompleteListener<TResult> paramOnCompleteListener) {
    this.zzx.zza(new zzi(paramExecutor, paramOnCompleteListener));
    zze();
    return this;
  }
  
  @NonNull
  public final Task<TResult> addOnFailureListener(@NonNull Activity paramActivity, @NonNull OnFailureListener paramOnFailureListener) {
    zzk zzk = new zzk(TaskExecutors.MAIN_THREAD, paramOnFailureListener);
    this.zzx.zza(zzk);
    zza.zza(paramActivity).zzb(zzk);
    zze();
    return this;
  }
  
  @NonNull
  public final Task<TResult> addOnFailureListener(@NonNull OnFailureListener paramOnFailureListener) { return super.addOnFailureListener(TaskExecutors.MAIN_THREAD, paramOnFailureListener); }
  
  @NonNull
  public final Task<TResult> addOnFailureListener(@NonNull Executor paramExecutor, @NonNull OnFailureListener paramOnFailureListener) {
    this.zzx.zza(new zzk(paramExecutor, paramOnFailureListener));
    zze();
    return this;
  }
  
  @NonNull
  public final Task<TResult> addOnSuccessListener(@NonNull Activity paramActivity, @NonNull OnSuccessListener<? super TResult> paramOnSuccessListener) {
    zzm zzm = new zzm(TaskExecutors.MAIN_THREAD, paramOnSuccessListener);
    this.zzx.zza(zzm);
    zza.zza(paramActivity).zzb(zzm);
    zze();
    return this;
  }
  
  @NonNull
  public final Task<TResult> addOnSuccessListener(@NonNull OnSuccessListener<? super TResult> paramOnSuccessListener) { return super.addOnSuccessListener(TaskExecutors.MAIN_THREAD, paramOnSuccessListener); }
  
  @NonNull
  public final Task<TResult> addOnSuccessListener(@NonNull Executor paramExecutor, @NonNull OnSuccessListener<? super TResult> paramOnSuccessListener) {
    this.zzx.zza(new zzm(paramExecutor, paramOnSuccessListener));
    zze();
    return this;
  }
  
  @NonNull
  public final <TContinuationResult> Task<TContinuationResult> continueWith(@NonNull Continuation<TResult, TContinuationResult> paramContinuation) { return super.continueWith(TaskExecutors.MAIN_THREAD, paramContinuation); }
  
  @NonNull
  public final <TContinuationResult> Task<TContinuationResult> continueWith(@NonNull Executor paramExecutor, @NonNull Continuation<TResult, TContinuationResult> paramContinuation) {
    zzu zzu1 = new zzu();
    this.zzx.zza(new zzc(paramExecutor, paramContinuation, zzu1));
    zze();
    return zzu1;
  }
  
  @NonNull
  public final <TContinuationResult> Task<TContinuationResult> continueWithTask(@NonNull Continuation<TResult, Task<TContinuationResult>> paramContinuation) { return super.continueWithTask(TaskExecutors.MAIN_THREAD, paramContinuation); }
  
  @NonNull
  public final <TContinuationResult> Task<TContinuationResult> continueWithTask(@NonNull Executor paramExecutor, @NonNull Continuation<TResult, Task<TContinuationResult>> paramContinuation) {
    zzu zzu1 = new zzu();
    this.zzx.zza(new zze(paramExecutor, paramContinuation, zzu1));
    zze();
    return zzu1;
  }
  
  @Nullable
  public final Exception getException() {
    synchronized (this.mLock) {
      return this.zzab;
    } 
  }
  
  public final TResult getResult() {
    synchronized (this.mLock) {
      zzb();
      zzd();
      if (this.zzab == null) {
        Object object = this.zzaa;
        return (TResult)object;
      } 
      throw new RuntimeExecutionException(this.zzab);
    } 
  }
  
  public final <X extends Throwable> TResult getResult(@NonNull Class<X> paramClass) throws X {
    synchronized (this.mLock) {
      Object object;
      zzb();
      zzd();
      if (!paramClass.isInstance(this.zzab)) {
        if (this.zzab == null) {
          object = this.zzaa;
          return (TResult)object;
        } 
        throw new RuntimeExecutionException(this.zzab);
      } 
      throw (Throwable)object.cast(this.zzab);
    } 
  }
  
  public final boolean isCanceled() { return this.zzz; }
  
  public final boolean isComplete() {
    synchronized (this.mLock) {
      return this.zzy;
    } 
  }
  
  public final boolean isSuccessful() {
    synchronized (this.mLock) {
      if (this.zzy && !this.zzz && this.zzab == null)
        return true; 
    } 
    boolean bool = false;
    /* monitor exit ClassFileLocalVariableReferenceExpression{type=ObjectType{java/lang/Object}, name=SYNTHETIC_LOCAL_VARIABLE_2} */
    return bool;
  }
  
  @NonNull
  public final <TContinuationResult> Task<TContinuationResult> onSuccessTask(@NonNull SuccessContinuation<TResult, TContinuationResult> paramSuccessContinuation) { return super.onSuccessTask(TaskExecutors.MAIN_THREAD, paramSuccessContinuation); }
  
  @NonNull
  public final <TContinuationResult> Task<TContinuationResult> onSuccessTask(Executor paramExecutor, SuccessContinuation<TResult, TContinuationResult> paramSuccessContinuation) {
    zzu zzu1 = new zzu();
    this.zzx.zza(new zzo(paramExecutor, paramSuccessContinuation, zzu1));
    zze();
    return zzu1;
  }
  
  public final void setException(@NonNull Exception paramException) {
    Preconditions.checkNotNull(paramException, "Exception must not be null");
    synchronized (this.mLock) {
      zzc();
      this.zzy = true;
      this.zzab = paramException;
      this.zzx.zza(this);
      return;
    } 
  }
  
  public final void setResult(TResult paramTResult) {
    synchronized (this.mLock) {
      zzc();
      this.zzy = true;
      this.zzaa = paramTResult;
      this.zzx.zza(this);
      return;
    } 
  }
  
  public final boolean trySetException(@NonNull Exception paramException) {
    Preconditions.checkNotNull(paramException, "Exception must not be null");
    synchronized (this.mLock) {
      if (this.zzy)
        return false; 
      this.zzy = true;
      this.zzab = paramException;
      this.zzx.zza(this);
      return true;
    } 
  }
  
  public final boolean trySetResult(TResult paramTResult) {
    synchronized (this.mLock) {
      if (this.zzy)
        return false; 
      this.zzy = true;
      this.zzaa = paramTResult;
      this.zzx.zza(this);
      return true;
    } 
  }
  
  public final boolean zza() {
    synchronized (this.mLock) {
      if (this.zzy)
        return false; 
      this.zzy = true;
      this.zzz = true;
      this.zzx.zza(this);
      return true;
    } 
  }
}
