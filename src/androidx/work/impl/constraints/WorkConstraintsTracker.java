package androidx.work.impl.constraints;

import android.content.Context;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.VisibleForTesting;
import androidx.work.Logger;
import androidx.work.impl.constraints.controllers.BatteryChargingController;
import androidx.work.impl.constraints.controllers.BatteryNotLowController;
import androidx.work.impl.constraints.controllers.ConstraintController;
import androidx.work.impl.constraints.controllers.NetworkConnectedController;
import androidx.work.impl.constraints.controllers.NetworkMeteredController;
import androidx.work.impl.constraints.controllers.NetworkNotRoamingController;
import androidx.work.impl.constraints.controllers.NetworkUnmeteredController;
import androidx.work.impl.constraints.controllers.StorageNotLowController;
import androidx.work.impl.model.WorkSpec;
import java.util.ArrayList;
import java.util.List;

public class WorkConstraintsTracker implements ConstraintController.OnConstraintUpdatedCallback {
  private static final String TAG = Logger.tagWithPrefix("WorkConstraintsTracker");
  
  @Nullable
  private final WorkConstraintsCallback mCallback;
  
  private final ConstraintController[] mConstraintControllers;
  
  private final Object mLock;
  
  public WorkConstraintsTracker(Context paramContext, @Nullable WorkConstraintsCallback paramWorkConstraintsCallback) {
    paramContext = paramContext.getApplicationContext();
    this.mCallback = paramWorkConstraintsCallback;
    this.mConstraintControllers = new ConstraintController[] { new BatteryChargingController(paramContext), new BatteryNotLowController(paramContext), new StorageNotLowController(paramContext), new NetworkConnectedController(paramContext), new NetworkUnmeteredController(paramContext), new NetworkNotRoamingController(paramContext), new NetworkMeteredController(paramContext) };
    this.mLock = new Object();
  }
  
  @VisibleForTesting
  WorkConstraintsTracker(@Nullable WorkConstraintsCallback paramWorkConstraintsCallback, ConstraintController[] paramArrayOfConstraintController) {
    this.mCallback = paramWorkConstraintsCallback;
    this.mConstraintControllers = paramArrayOfConstraintController;
    this.mLock = new Object();
  }
  
  public boolean areAllConstraintsMet(@NonNull String paramString) {
    synchronized (this.mLock) {
      ConstraintController[] arrayOfConstraintController = this.mConstraintControllers;
      int i = arrayOfConstraintController.length;
      for (byte b = 0;; b++) {
        if (b < i) {
          ConstraintController constraintController = arrayOfConstraintController[b];
          if (constraintController.isWorkSpecConstrained(paramString)) {
            Logger.get().debug(TAG, String.format("Work %s constrained by %s", new Object[] { paramString, constraintController.getClass().getSimpleName() }), new Throwable[0]);
            return false;
          } 
        } else {
          return true;
        } 
      } 
    } 
  }
  
  public void onConstraintMet(@NonNull List<String> paramList) {
    synchronized (this.mLock) {
      ArrayList arrayList = new ArrayList();
      for (String str : paramList) {
        if (areAllConstraintsMet(str)) {
          Logger.get().debug(TAG, String.format("Constraints met for %s", new Object[] { str }), new Throwable[0]);
          arrayList.add(str);
        } 
      } 
      if (this.mCallback != null)
        this.mCallback.onAllConstraintsMet(arrayList); 
      return;
    } 
  }
  
  public void onConstraintNotMet(@NonNull List<String> paramList) {
    synchronized (this.mLock) {
      if (this.mCallback != null)
        this.mCallback.onAllConstraintsNotMet(paramList); 
      return;
    } 
  }
  
  public void replace(@NonNull List<WorkSpec> paramList) {
    synchronized (this.mLock) {
      ConstraintController[] arrayOfConstraintController2 = this.mConstraintControllers;
      int i = arrayOfConstraintController2.length;
      byte b2 = 0;
      byte b1;
      for (b1 = 0; b1 < i; b1++)
        arrayOfConstraintController2[b1].setCallback(null); 
      arrayOfConstraintController2 = this.mConstraintControllers;
      i = arrayOfConstraintController2.length;
      for (b1 = 0; b1 < i; b1++)
        arrayOfConstraintController2[b1].replace(paramList); 
      ConstraintController[] arrayOfConstraintController1 = this.mConstraintControllers;
      i = arrayOfConstraintController1.length;
      for (b1 = b2; b1 < i; b1++)
        arrayOfConstraintController1[b1].setCallback(this); 
      return;
    } 
  }
  
  public void reset() {
    synchronized (this.mLock) {
      ConstraintController[] arrayOfConstraintController = this.mConstraintControllers;
      int i = arrayOfConstraintController.length;
      for (byte b = 0; b < i; b++)
        arrayOfConstraintController[b].reset(); 
      return;
    } 
  }
}
