package com.bumptech.glide.load.resource.bitmap;

import android.util.Log;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteOrder;

public class ImageHeaderParser {
  private static final int[] BYTES_PER_FORMAT = { 
      0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 
      8, 4, 8 };
  
  private static final int EXIF_MAGIC_NUMBER = 65496;
  
  private static final int EXIF_SEGMENT_TYPE = 225;
  
  private static final int GIF_HEADER = 4671814;
  
  private static final int INTEL_TIFF_MAGIC_NUMBER = 18761;
  
  private static final String JPEG_EXIF_SEGMENT_PREAMBLE = "Exif\000\000";
  
  private static final byte[] JPEG_EXIF_SEGMENT_PREAMBLE_BYTES;
  
  private static final int MARKER_EOI = 217;
  
  private static final int MOTOROLA_TIFF_MAGIC_NUMBER = 19789;
  
  private static final int ORIENTATION_TAG_TYPE = 274;
  
  private static final int PNG_HEADER = -1991225785;
  
  private static final int SEGMENT_SOS = 218;
  
  private static final int SEGMENT_START_ID = 255;
  
  private static final String TAG = "ImageHeaderParser";
  
  private final StreamReader streamReader;
  
  static  {
    byte[] arrayOfByte = new byte[0];
    try {
      byte[] arrayOfByte1 = "Exif\000\000".getBytes("UTF-8");
      arrayOfByte = arrayOfByte1;
    } catch (UnsupportedEncodingException unsupportedEncodingException) {}
    JPEG_EXIF_SEGMENT_PREAMBLE_BYTES = arrayOfByte;
  }
  
  public ImageHeaderParser(InputStream paramInputStream) { this.streamReader = new StreamReader(paramInputStream); }
  
  private static int calcTagOffset(int paramInt1, int paramInt2) { return paramInt1 + 2 + paramInt2 * 12; }
  
  private byte[] getExifSegment() throws IOException {
    int i;
    short s;
    while (true) {
      s = this.streamReader.getUInt8();
      if (s != 255) {
        if (Log.isLoggable("ImageHeaderParser", 3)) {
          StringBuilder stringBuilder1 = new StringBuilder();
          stringBuilder1.append("Unknown segmentId=");
          stringBuilder1.append(s);
          Log.d("ImageHeaderParser", stringBuilder1.toString());
        } 
        return null;
      } 
      s = this.streamReader.getUInt8();
      if (s == 218)
        return null; 
      if (s == 217) {
        if (Log.isLoggable("ImageHeaderParser", 3))
          Log.d("ImageHeaderParser", "Found MARKER_EOI in exif segment"); 
        return null;
      } 
      i = this.streamReader.getUInt16() - 2;
      if (s != 225) {
        StreamReader streamReader1 = this.streamReader;
        long l1 = i;
        long l2 = streamReader1.skip(l1);
        if (l2 != l1) {
          if (Log.isLoggable("ImageHeaderParser", 3)) {
            StringBuilder stringBuilder1 = new StringBuilder();
            stringBuilder1.append("Unable to skip enough data, type: ");
            stringBuilder1.append(s);
            stringBuilder1.append(", wanted to skip: ");
            stringBuilder1.append(i);
            stringBuilder1.append(", but actually skipped: ");
            stringBuilder1.append(l2);
            Log.d("ImageHeaderParser", stringBuilder1.toString());
          } 
          return null;
        } 
        continue;
      } 
      break;
    } 
    StringBuilder stringBuilder = new byte[i];
    int j = this.streamReader.read(stringBuilder);
    if (j != i) {
      if (Log.isLoggable("ImageHeaderParser", 3)) {
        stringBuilder = new StringBuilder();
        stringBuilder.append("Unable to read segment data, type: ");
        stringBuilder.append(s);
        stringBuilder.append(", length: ");
        stringBuilder.append(i);
        stringBuilder.append(", actually read: ");
        stringBuilder.append(j);
        Log.d("ImageHeaderParser", stringBuilder.toString());
      } 
      return null;
    } 
    return stringBuilder;
  }
  
  private static boolean handles(int paramInt) { return ((paramInt & 0xFFD8) == 65496 || paramInt == 19789 || paramInt == 18761); }
  
  private static int parseExifSegment(RandomAccessReader paramRandomAccessReader) {
    ByteOrder byteOrder;
    short s1 = paramRandomAccessReader.getInt16(6);
    if (s1 == 19789) {
      byteOrder = ByteOrder.BIG_ENDIAN;
    } else if (s1 == 18761) {
      byteOrder = ByteOrder.LITTLE_ENDIAN;
    } else {
      if (Log.isLoggable("ImageHeaderParser", 3)) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Unknown endianness = ");
        stringBuilder.append(s1);
        Log.d("ImageHeaderParser", stringBuilder.toString());
      } 
      byteOrder = ByteOrder.BIG_ENDIAN;
    } 
    paramRandomAccessReader.order(byteOrder);
    int i = paramRandomAccessReader.getInt32(10) + 6;
    short s2 = paramRandomAccessReader.getInt16(i);
    for (s1 = 0; s1 < s2; s1++) {
      int j = calcTagOffset(i, s1);
      short s = paramRandomAccessReader.getInt16(j);
      if (s == 274) {
        short s3 = paramRandomAccessReader.getInt16(j + 2);
        if (s3 < 1 || s3 > 12) {
          if (Log.isLoggable("ImageHeaderParser", 3)) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Got invalid format code=");
            stringBuilder.append(s3);
            Log.d("ImageHeaderParser", stringBuilder.toString());
          } 
        } else {
          int k = paramRandomAccessReader.getInt32(j + 4);
          if (k < 0) {
            if (Log.isLoggable("ImageHeaderParser", 3))
              Log.d("ImageHeaderParser", "Negative tiff component count"); 
          } else {
            if (Log.isLoggable("ImageHeaderParser", 3)) {
              StringBuilder stringBuilder = new StringBuilder();
              stringBuilder.append("Got tagIndex=");
              stringBuilder.append(s1);
              stringBuilder.append(" tagType=");
              stringBuilder.append(s);
              stringBuilder.append(" formatCode=");
              stringBuilder.append(s3);
              stringBuilder.append(" componentCount=");
              stringBuilder.append(k);
              Log.d("ImageHeaderParser", stringBuilder.toString());
            } 
            k += BYTES_PER_FORMAT[s3];
            if (k > 4) {
              if (Log.isLoggable("ImageHeaderParser", 3)) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("Got byte count > 4, not orientation, continuing, formatCode=");
                stringBuilder.append(s3);
                Log.d("ImageHeaderParser", stringBuilder.toString());
              } 
            } else {
              j += 8;
              if (j < 0 || j > paramRandomAccessReader.length()) {
                if (Log.isLoggable("ImageHeaderParser", 3)) {
                  StringBuilder stringBuilder = new StringBuilder();
                  stringBuilder.append("Illegal tagValueOffset=");
                  stringBuilder.append(j);
                  stringBuilder.append(" tagType=");
                  stringBuilder.append(s);
                  Log.d("ImageHeaderParser", stringBuilder.toString());
                } 
              } else if (k < 0 || k + j > paramRandomAccessReader.length()) {
                if (Log.isLoggable("ImageHeaderParser", 3)) {
                  StringBuilder stringBuilder = new StringBuilder();
                  stringBuilder.append("Illegal number of bytes for TI tag data tagType=");
                  stringBuilder.append(s);
                  Log.d("ImageHeaderParser", stringBuilder.toString());
                } 
              } else {
                return paramRandomAccessReader.getInt16(j);
              } 
            } 
          } 
        } 
      } 
    } 
    return -1;
  }
  
  public int getOrientation() throws IOException {
    byte b1;
    if (!handles(this.streamReader.getUInt16()))
      return -1; 
    byte[] arrayOfByte = getExifSegment();
    byte b2 = 0;
    if (arrayOfByte != null && arrayOfByte.length > JPEG_EXIF_SEGMENT_PREAMBLE_BYTES.length) {
      b1 = 1;
    } else {
      b1 = 0;
    } 
    if (b1) {
      byte b = 0;
      while (true) {
        byte[] arrayOfByte1 = JPEG_EXIF_SEGMENT_PREAMBLE_BYTES;
        if (b < arrayOfByte1.length) {
          if (arrayOfByte[b] != arrayOfByte1[b]) {
            b1 = b2;
            break;
          } 
          b++;
          continue;
        } 
        break;
      } 
    } 
    return (b1 != 0) ? parseExifSegment(new RandomAccessReader(arrayOfByte)) : -1;
  }
  
  public ImageType getType() throws IOException {
    int i = this.streamReader.getUInt16();
    if (i == 65496)
      return ImageType.JPEG; 
    i = i << 16 & 0xFFFF0000 | this.streamReader.getUInt16() & 0xFFFF;
    if (i == -1991225785) {
      this.streamReader.skip(21L);
      return (this.streamReader.getByte() >= 3) ? ImageType.PNG_A : ImageType.PNG;
    } 
    return (i >> 8 == 4671814) ? ImageType.GIF : ImageType.UNKNOWN;
  }
  
  public boolean hasAlpha() throws IOException { return getType().hasAlpha(); }
}
