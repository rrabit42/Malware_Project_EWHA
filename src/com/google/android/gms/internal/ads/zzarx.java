package com.google.android.gms.internal.ads;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import java.util.regex.Pattern;
import org.json.JSONException;
import org.json.JSONObject;

@zzadh
public final class zzarx {
  private static final Pattern zzdeo;
  
  private static final Pattern zzdep = (zzdeo = Pattern.compile("^\\uFEFF?\\s*(\\s*<!--([^-]|(?!-->))*-->)*\\s*<!DOCTYPE(\\s)+html(|(\\s)+[^>]*)>", 2)).compile("^\\uFEFF?\\s*(\\s*<!--([^-]|(?!-->))*-->)*?\\s*<!DOCTYPE[^>]*>", 2);
  
  public static String zzb(@NonNull String paramString, @Nullable String... paramVarArgs) {
    if (paramVarArgs.length == 0)
      return paramString; 
    StringBuilder stringBuilder = new StringBuilder();
    String str = zzdeo.matcher(paramString);
    boolean bool = str.find();
    int j = 0;
    int i = 0;
    if (bool) {
      j = str.end();
      stringBuilder.append(paramString.substring(0, j));
      int k = paramVarArgs.length;
      while (i < k) {
        String str2 = paramVarArgs[i];
        if (str2 != null)
          stringBuilder.append(str2); 
        i++;
      } 
      String str1 = paramString.substring(j);
    } else {
      str = paramString;
      if (!zzdep.matcher(paramString).find()) {
        int k = paramVarArgs.length;
        i = j;
        while (true) {
          str = paramString;
          if (i < k) {
            str = paramVarArgs[i];
            if (str != null)
              stringBuilder.append(str); 
            i++;
            continue;
          } 
          break;
        } 
      } 
    } 
    stringBuilder.append(str);
    return stringBuilder.toString();
  }
  
  public static String zzvp() {
    zzna zzna = zznk.zzawf;
    String str = (String)zzkb.zzik().zzd(zzna);
    jSONObject = new JSONObject();
    try {
      jSONObject.put("version", str);
      jSONObject.put("sdk", "Google Mobile Ads");
      jSONObject.put("sdkVersion", "12.4.51-000");
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("<script>");
      stringBuilder.append("Object.defineProperty(window,'MRAID_ENV',{get:function(){return ");
      stringBuilder.append(jSONObject.toString());
      stringBuilder.append("}});");
      stringBuilder.append("</script>");
      return stringBuilder.toString();
    } catch (JSONException jSONObject) {
      zzakb.zzc("Unable to build MRAID_ENV", jSONObject);
      return null;
    } 
  }
}
