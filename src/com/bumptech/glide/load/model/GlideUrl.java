package com.bumptech.glide.load.model;

import android.net.Uri;
import android.text.TextUtils;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Map;

public class GlideUrl {
  private static final String ALLOWED_URI_CHARS = "@#&=*+-_.,:!?()/~'%";
  
  private final Headers headers;
  
  private String safeStringUrl;
  
  private URL safeUrl;
  
  private final String stringUrl;
  
  private final URL url;
  
  public GlideUrl(String paramString) { this(paramString, Headers.DEFAULT); }
  
  public GlideUrl(String paramString, Headers paramHeaders) {
    if (!TextUtils.isEmpty(paramString)) {
      if (paramHeaders != null) {
        this.stringUrl = paramString;
        this.url = null;
        this.headers = paramHeaders;
        return;
      } 
      throw new IllegalArgumentException("Headers must not be null");
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("String url must not be empty or null: ");
    stringBuilder.append(paramString);
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public GlideUrl(URL paramURL) { this(paramURL, Headers.DEFAULT); }
  
  public GlideUrl(URL paramURL, Headers paramHeaders) {
    if (paramURL != null) {
      if (paramHeaders != null) {
        this.url = paramURL;
        this.stringUrl = null;
        this.headers = paramHeaders;
        return;
      } 
      throw new IllegalArgumentException("Headers must not be null");
    } 
    throw new IllegalArgumentException("URL must not be null!");
  }
  
  private String getSafeStringUrl() {
    if (TextUtils.isEmpty(this.safeStringUrl)) {
      String str2 = this.stringUrl;
      String str1 = str2;
      if (TextUtils.isEmpty(str2))
        str1 = this.url.toString(); 
      this.safeStringUrl = Uri.encode(str1, "@#&=*+-_.,:!?()/~'%");
    } 
    return this.safeStringUrl;
  }
  
  private URL getSafeUrl() throws MalformedURLException {
    if (this.safeUrl == null)
      this.safeUrl = new URL(getSafeStringUrl()); 
    return this.safeUrl;
  }
  
  public boolean equals(Object paramObject) {
    boolean bool = paramObject instanceof GlideUrl;
    byte b = 0;
    int i = b;
    if (bool) {
      paramObject = (GlideUrl)paramObject;
      i = b;
      if (getCacheKey().equals(paramObject.getCacheKey())) {
        i = b;
        if (this.headers.equals(paramObject.headers))
          i = 1; 
      } 
    } 
    return i;
  }
  
  public String getCacheKey() {
    String str = this.stringUrl;
    return (str != null) ? str : this.url.toString();
  }
  
  public Map<String, String> getHeaders() { return this.headers.getHeaders(); }
  
  public int hashCode() { return getCacheKey().hashCode() * 31 + this.headers.hashCode(); }
  
  public String toString() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(getCacheKey());
    stringBuilder.append('\n');
    stringBuilder.append(this.headers.toString());
    return stringBuilder.toString();
  }
  
  public String toStringUrl() { return getSafeStringUrl(); }
  
  public URL toURL() throws MalformedURLException { return getSafeUrl(); }
}
