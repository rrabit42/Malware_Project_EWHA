package androidx.work;

import android.os.Build;
import android.support.annotation.IntRange;
import android.support.annotation.NonNull;
import android.support.annotation.RestrictTo;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

public final class Configuration {
  public static final int MIN_SCHEDULER_LIMIT = 20;
  
  @NonNull
  private final Executor mExecutor;
  
  private final int mLoggingLevel;
  
  private final int mMaxJobSchedulerId;
  
  private final int mMaxSchedulerLimit;
  
  private final int mMinJobSchedulerId;
  
  @NonNull
  private final WorkerFactory mWorkerFactory;
  
  Configuration(@NonNull Builder paramBuilder) {
    if (paramBuilder.mExecutor == null) {
      this.mExecutor = createDefaultExecutor();
    } else {
      this.mExecutor = paramBuilder.mExecutor;
    } 
    if (paramBuilder.mWorkerFactory == null) {
      this.mWorkerFactory = WorkerFactory.getDefaultWorkerFactory();
    } else {
      this.mWorkerFactory = paramBuilder.mWorkerFactory;
    } 
    this.mLoggingLevel = paramBuilder.mLoggingLevel;
    this.mMinJobSchedulerId = paramBuilder.mMinJobSchedulerId;
    this.mMaxJobSchedulerId = paramBuilder.mMaxJobSchedulerId;
    this.mMaxSchedulerLimit = paramBuilder.mMaxSchedulerLimit;
  }
  
  @NonNull
  private Executor createDefaultExecutor() { return Executors.newFixedThreadPool(Math.max(2, Math.min(Runtime.getRuntime().availableProcessors() - 1, 4))); }
  
  @NonNull
  public Executor getExecutor() { return this.mExecutor; }
  
  public int getMaxJobSchedulerId() { return this.mMaxJobSchedulerId; }
  
  @IntRange(from = 20L, to = 50L)
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public int getMaxSchedulerLimit() { return (Build.VERSION.SDK_INT == 23) ? (this.mMaxSchedulerLimit / 2) : this.mMaxSchedulerLimit; }
  
  public int getMinJobSchedulerId() { return this.mMinJobSchedulerId; }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public int getMinimumLoggingLevel() { return this.mLoggingLevel; }
  
  @NonNull
  public WorkerFactory getWorkerFactory() { return this.mWorkerFactory; }
}
