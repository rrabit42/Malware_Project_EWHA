package android.support.design.widget;

import android.animation.ValueAnimator;
import android.content.Context;
import android.content.res.TypedArray;
import android.os.Build;
import android.os.Handler;
import android.os.Looper;
import android.support.annotation.LayoutRes;
import android.support.annotation.NonNull;
import android.support.design.R;
import android.support.design.animation.AnimationUtils;
import android.support.design.internal.ThemeEnforcement;
import android.support.design.snackbar.ContentViewCallback;
import android.support.v4.view.ViewCompat;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.accessibility.AccessibilityManager;
import java.util.ArrayList;
import java.util.List;

public abstract class BaseTransientBottomBar<B extends BaseTransientBottomBar<B>> extends Object {
  static final int ANIMATION_DURATION = 250;
  
  static final int ANIMATION_FADE_DURATION = 180;
  
  public static final int LENGTH_INDEFINITE = -2;
  
  public static final int LENGTH_LONG = 0;
  
  public static final int LENGTH_SHORT = -1;
  
  static final int MSG_DISMISS = 1;
  
  static final int MSG_SHOW = 0;
  
  private static final int[] SNACKBAR_STYLE_ATTR;
  
  private static final boolean USE_OFFSET_API;
  
  static final Handler handler;
  
  private final AccessibilityManager accessibilityManager;
  
  private Behavior behavior;
  
  private List<BaseCallback<B>> callbacks;
  
  private final ContentViewCallback contentViewCallback;
  
  private final Context context;
  
  private int duration;
  
  final SnackbarManager.Callback managerCallback = new Object(this);
  
  private final ViewGroup targetParent;
  
  protected final SnackbarBaseLayout view;
  
  static  {
    boolean bool;
    if (Build.VERSION.SDK_INT >= 16 && Build.VERSION.SDK_INT <= 19) {
      bool = true;
    } else {
      bool = false;
    } 
    USE_OFFSET_API = bool;
    SNACKBAR_STYLE_ATTR = new int[] { R.attr.snackbarStyle };
    handler = new Handler(Looper.getMainLooper(), new Object());
  }
  
  protected BaseTransientBottomBar(@NonNull ViewGroup paramViewGroup, @NonNull View paramView, @NonNull ContentViewCallback paramContentViewCallback) {
    if (paramViewGroup != null) {
      if (paramView != null) {
        if (paramContentViewCallback != null) {
          this.targetParent = paramViewGroup;
          this.contentViewCallback = paramContentViewCallback;
          this.context = paramViewGroup.getContext();
          ThemeEnforcement.checkAppCompatTheme(this.context);
          this.view = (SnackbarBaseLayout)LayoutInflater.from(this.context).inflate(getSnackbarBaseLayoutResId(), this.targetParent, false);
          this.view.addView(paramView);
          ViewCompat.setAccessibilityLiveRegion(this.view, 1);
          ViewCompat.setImportantForAccessibility(this.view, 1);
          ViewCompat.setFitsSystemWindows(this.view, true);
          ViewCompat.setOnApplyWindowInsetsListener(this.view, new Object(this));
          ViewCompat.setAccessibilityDelegate(this.view, new Object(this));
          this.accessibilityManager = (AccessibilityManager)this.context.getSystemService("accessibility");
          return;
        } 
        throw new IllegalArgumentException("Transient bottom bar must have non-null callback");
      } 
      throw new IllegalArgumentException("Transient bottom bar must have non-null content");
    } 
    throw new IllegalArgumentException("Transient bottom bar must have non-null parent");
  }
  
  private void animateViewOut(int paramInt) {
    ValueAnimator valueAnimator = new ValueAnimator();
    valueAnimator.setIntValues(new int[] { 0, getTranslationYBottom() });
    valueAnimator.setInterpolator(AnimationUtils.FAST_OUT_SLOW_IN_INTERPOLATOR);
    valueAnimator.setDuration(250L);
    valueAnimator.addListener(new Object(this, paramInt));
    valueAnimator.addUpdateListener(new Object(this));
    valueAnimator.start();
  }
  
  private int getTranslationYBottom() {
    int j = this.view.getHeight();
    ViewGroup.LayoutParams layoutParams = this.view.getLayoutParams();
    int i = j;
    if (layoutParams instanceof ViewGroup.MarginLayoutParams)
      i = j + ((ViewGroup.MarginLayoutParams)layoutParams).bottomMargin; 
    return i;
  }
  
  @NonNull
  public B addCallback(@NonNull BaseCallback<B> paramBaseCallback) {
    if (paramBaseCallback == null)
      return (B)this; 
    if (this.callbacks == null)
      this.callbacks = new ArrayList(); 
    this.callbacks.add(paramBaseCallback);
    return (B)this;
  }
  
  void animateViewIn() {
    int i = getTranslationYBottom();
    if (USE_OFFSET_API) {
      ViewCompat.offsetTopAndBottom(this.view, i);
    } else {
      this.view.setTranslationY(i);
    } 
    ValueAnimator valueAnimator = new ValueAnimator();
    valueAnimator.setIntValues(new int[] { i, 0 });
    valueAnimator.setInterpolator(AnimationUtils.FAST_OUT_SLOW_IN_INTERPOLATOR);
    valueAnimator.setDuration(250L);
    valueAnimator.addListener(new Object(this));
    valueAnimator.addUpdateListener(new Object(this, i));
    valueAnimator.start();
  }
  
  public void dismiss() { dispatchDismiss(3); }
  
  protected void dispatchDismiss(int paramInt) { SnackbarManager.getInstance().dismiss(this.managerCallback, paramInt); }
  
  public Behavior getBehavior() { return this.behavior; }
  
  @NonNull
  public Context getContext() { return this.context; }
  
  public int getDuration() { return this.duration; }
  
  protected SwipeDismissBehavior<? extends View> getNewBehavior() { return new Behavior(); }
  
  @LayoutRes
  protected int getSnackbarBaseLayoutResId() { return hasSnackbarStyleAttr() ? R.layout.mtrl_layout_snackbar : R.layout.design_layout_snackbar; }
  
  @NonNull
  public View getView() { return this.view; }
  
  protected boolean hasSnackbarStyleAttr() {
    TypedArray typedArray = this.context.obtainStyledAttributes(SNACKBAR_STYLE_ATTR);
    boolean bool = false;
    int i = typedArray.getResourceId(0, -1);
    typedArray.recycle();
    if (i != -1)
      bool = true; 
    return bool;
  }
  
  final void hideView(int paramInt) {
    if (shouldAnimate() && this.view.getVisibility() == 0) {
      animateViewOut(paramInt);
      return;
    } 
    onViewHidden(paramInt);
  }
  
  public boolean isShown() { return SnackbarManager.getInstance().isCurrent(this.managerCallback); }
  
  public boolean isShownOrQueued() { return SnackbarManager.getInstance().isCurrentOrNext(this.managerCallback); }
  
  void onViewHidden(int paramInt) {
    SnackbarManager.getInstance().onDismissed(this.managerCallback);
    List list = this.callbacks;
    if (list != null)
      for (int i = list.size() - 1; i >= 0; i--)
        ((BaseCallback)this.callbacks.get(i)).onDismissed(this, paramInt);  
    ViewParent viewParent = this.view.getParent();
    if (viewParent instanceof ViewGroup)
      ((ViewGroup)viewParent).removeView(this.view); 
  }
  
  void onViewShown() {
    SnackbarManager.getInstance().onShown(this.managerCallback);
    List list = this.callbacks;
    if (list != null)
      for (int i = list.size() - 1; i >= 0; i--)
        ((BaseCallback)this.callbacks.get(i)).onShown(this);  
  }
  
  @NonNull
  public B removeCallback(@NonNull BaseCallback<B> paramBaseCallback) {
    if (paramBaseCallback == null)
      return (B)this; 
    List list = this.callbacks;
    if (list == null)
      return (B)this; 
    list.remove(paramBaseCallback);
    return (B)this;
  }
  
  public B setBehavior(Behavior paramBehavior) {
    this.behavior = paramBehavior;
    return (B)this;
  }
  
  @NonNull
  public B setDuration(int paramInt) {
    this.duration = paramInt;
    return (B)this;
  }
  
  boolean shouldAnimate() {
    List list = this.accessibilityManager.getEnabledAccessibilityServiceList(1);
    return (list != null && list.isEmpty());
  }
  
  public void show() { SnackbarManager.getInstance().show(getDuration(), this.managerCallback); }
  
  final void showView() {
    if (this.view.getParent() == null) {
      ViewGroup.LayoutParams layoutParams = this.view.getLayoutParams();
      if (layoutParams instanceof CoordinatorLayout.LayoutParams) {
        CoordinatorLayout.LayoutParams layoutParams1 = (CoordinatorLayout.LayoutParams)layoutParams;
        Behavior behavior1 = this.behavior;
        SwipeDismissBehavior swipeDismissBehavior = behavior1;
        if (behavior1 == null)
          swipeDismissBehavior = getNewBehavior(); 
        if (swipeDismissBehavior instanceof Behavior)
          Behavior.access$000((Behavior)swipeDismissBehavior, this); 
        swipeDismissBehavior.setListener(new Object(this));
        layoutParams1.setBehavior(swipeDismissBehavior);
        layoutParams1.insetEdge = 80;
      } 
      this.targetParent.addView(this.view);
    } 
    this.view.setOnAttachStateChangeListener(new Object(this));
    if (ViewCompat.isLaidOut(this.view)) {
      if (shouldAnimate()) {
        animateViewIn();
        return;
      } 
      onViewShown();
      return;
    } 
    this.view.setOnLayoutChangeListener(new Object(this));
  }
}
