package androidx.work.impl.constraints.trackers;

import android.content.Context;
import android.support.annotation.RestrictTo;
import androidx.work.Logger;
import androidx.work.impl.constraints.ConstraintListener;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.Set;

@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
public abstract class ConstraintTracker<T> extends Object {
  private static final String TAG = Logger.tagWithPrefix("ConstraintTracker");
  
  protected final Context mAppContext;
  
  private T mCurrentState;
  
  private final Set<ConstraintListener<T>> mListeners = new LinkedHashSet();
  
  private final Object mLock = new Object();
  
  ConstraintTracker(Context paramContext) { this.mAppContext = paramContext.getApplicationContext(); }
  
  public void addListener(ConstraintListener<T> paramConstraintListener) {
    synchronized (this.mLock) {
      if (this.mListeners.add(paramConstraintListener)) {
        if (this.mListeners.size() == 1) {
          this.mCurrentState = getInitialState();
          Logger.get().debug(TAG, String.format("%s: initial state = %s", new Object[] { getClass().getSimpleName(), this.mCurrentState }), new Throwable[0]);
          startTracking();
        } 
        paramConstraintListener.onConstraintChanged(this.mCurrentState);
      } 
      return;
    } 
  }
  
  public abstract T getInitialState();
  
  public void removeListener(ConstraintListener<T> paramConstraintListener) {
    synchronized (this.mLock) {
      if (this.mListeners.remove(paramConstraintListener) && this.mListeners.isEmpty())
        stopTracking(); 
      return;
    } 
  }
  
  public void setState(T paramT) {
    synchronized (this.mLock) {
      if (this.mCurrentState == paramT || (this.mCurrentState != null && this.mCurrentState.equals(paramT)))
        return; 
      this.mCurrentState = paramT;
      paramT = (T)(new ArrayList(this.mListeners)).iterator();
      while (paramT.hasNext())
        ((ConstraintListener)paramT.next()).onConstraintChanged(this.mCurrentState); 
      return;
    } 
  }
  
  public abstract void startTracking();
  
  public abstract void stopTracking();
}
