package com.bumptech.glide.gifencoder;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.util.Log;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

public class AnimatedGifEncoder {
  private static final double MIN_TRANSPARENT_PERCENTAGE = 4.0D;
  
  private static final String TAG = "AnimatedGifEncoder";
  
  private boolean closeStream = false;
  
  private int colorDepth;
  
  private byte[] colorTab;
  
  private int delay = 0;
  
  private int dispose = -1;
  
  private boolean firstFrame = true;
  
  private boolean hasTransparentPixels;
  
  private int height;
  
  private Bitmap image;
  
  private byte[] indexedPixels;
  
  private OutputStream out;
  
  private int palSize = 7;
  
  private byte[] pixels;
  
  private int repeat = -1;
  
  private int sample = 10;
  
  private boolean sizeSet = false;
  
  private boolean started = false;
  
  private int transIndex;
  
  private Integer transparent = null;
  
  private boolean[] usedEntry = new boolean[256];
  
  private int width;
  
  private void analyzePixels() {
    byte[] arrayOfByte = this.pixels;
    int i = arrayOfByte.length;
    int j = i / 3;
    this.indexedPixels = new byte[j];
    NeuQuant neuQuant = new NeuQuant(arrayOfByte, i, this.sample);
    this.colorTab = neuQuant.process();
    i = 0;
    while (true) {
      byte[] arrayOfByte1 = this.colorTab;
      if (i < arrayOfByte1.length) {
        byte b1 = arrayOfByte1[i];
        int k = i + 2;
        arrayOfByte1[i] = arrayOfByte1[k];
        arrayOfByte1[k] = b1;
        this.usedEntry[i / 3] = false;
        i += 3;
        continue;
      } 
      break;
    } 
    i = 0;
    for (byte b = 0; i < j; b++) {
      byte[] arrayOfByte1 = this.pixels;
      int k = b + true;
      byte b1 = arrayOfByte1[b];
      b = k + true;
      k = neuQuant.map(b1 & 0xFF, arrayOfByte1[k] & 0xFF, arrayOfByte1[b] & 0xFF);
      this.usedEntry[k] = true;
      this.indexedPixels[i] = (byte)k;
      i++;
    } 
    this.pixels = null;
    this.colorDepth = 8;
    this.palSize = 7;
    Integer integer = this.transparent;
    if (integer != null) {
      this.transIndex = findClosest(integer.intValue());
      return;
    } 
    if (this.hasTransparentPixels)
      this.transIndex = findClosest(0); 
  }
  
  private int findClosest(int paramInt) {
    if (this.colorTab == null)
      return -1; 
    int k = Color.red(paramInt);
    int m = Color.green(paramInt);
    int n = Color.blue(paramInt);
    int i1 = this.colorTab.length;
    int j = 0;
    int i = 0;
    for (paramInt = 16777216; j < i1; paramInt = i2) {
      byte[] arrayOfByte = this.colorTab;
      int i3 = j + true;
      int i2 = k - (arrayOfByte[j] & 0xFF);
      boolean bool = i3 + true;
      j = m - (arrayOfByte[i3] & 0xFF);
      i3 = n - (arrayOfByte[bool] & 0xFF);
      int i4 = i2 * i2 + j * j + i3 * i3;
      i3 = bool / 3;
      j = i;
      i2 = paramInt;
      if (this.usedEntry[i3]) {
        j = i;
        i2 = paramInt;
        if (i4 < paramInt) {
          i2 = i4;
          j = i3;
        } 
      } 
      paramInt = bool + true;
      i = j;
      j = paramInt;
    } 
    return i;
  }
  
  private void getImagePixels() {
    int i = this.image.getWidth();
    int j = this.image.getHeight();
    if (i != this.width || j != this.height) {
      Bitmap bitmap = Bitmap.createBitmap(this.width, this.height, Bitmap.Config.ARGB_8888);
      (new Canvas(bitmap)).drawBitmap(bitmap, 0.0F, 0.0F, null);
      this.image = bitmap;
    } 
    int[] arrayOfInt = new int[i * j];
    this.image.getPixels(arrayOfInt, 0, i, 0, 0, i, j);
    this.pixels = new byte[arrayOfInt.length * 3];
    boolean bool = false;
    this.hasTransparentPixels = false;
    int m = arrayOfInt.length;
    i = 0;
    int k = 0;
    j = 0;
    while (i < m) {
      int i1 = arrayOfInt[i];
      int n = k;
      if (i1 == 0)
        n = k + true; 
      byte[] arrayOfByte = this.pixels;
      k = j + 1;
      arrayOfByte[j] = (byte)(i1 & 0xFF);
      j = k + 1;
      arrayOfByte[k] = (byte)(i1 >> 8 & 0xFF);
      arrayOfByte[j] = (byte)(i1 >> 16 & 0xFF);
      i++;
      j++;
      k = n;
    } 
    double d1 = (k * 100);
    double d2 = arrayOfInt.length;
    Double.isNaN(d1);
    Double.isNaN(d2);
    d1 /= d2;
    if (d1 > 4.0D)
      bool = true; 
    this.hasTransparentPixels = bool;
    if (Log.isLoggable("AnimatedGifEncoder", 3)) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("got pixels for frame with ");
      stringBuilder.append(d1);
      stringBuilder.append("% transparent pixels");
      Log.d("AnimatedGifEncoder", stringBuilder.toString());
    } 
  }
  
  private void writeGraphicCtrlExt() {
    int j;
    int i;
    this.out.write(33);
    this.out.write(249);
    this.out.write(4);
    if (this.transparent == null && !this.hasTransparentPixels) {
      j = 0;
      i = 0;
    } else {
      j = 1;
      i = 2;
    } 
    int k = this.dispose;
    if (k >= 0)
      i = k & 0x7; 
    this.out.write(j | i << 2 | false | false);
    writeShort(this.delay);
    this.out.write(this.transIndex);
    this.out.write(0);
  }
  
  private void writeImageDesc() {
    this.out.write(44);
    writeShort(0);
    writeShort(0);
    writeShort(this.width);
    writeShort(this.height);
    if (this.firstFrame) {
      this.out.write(0);
      return;
    } 
    this.out.write(this.palSize | 0x80);
  }
  
  private void writeLSD() {
    writeShort(this.width);
    writeShort(this.height);
    this.out.write(this.palSize | 0xF0);
    this.out.write(0);
    this.out.write(0);
  }
  
  private void writeNetscapeExt() {
    this.out.write(33);
    this.out.write(255);
    this.out.write(11);
    writeString("NETSCAPE2.0");
    this.out.write(3);
    this.out.write(1);
    writeShort(this.repeat);
    this.out.write(0);
  }
  
  private void writePalette() {
    OutputStream outputStream = this.out;
    byte[] arrayOfByte = this.colorTab;
    outputStream.write(arrayOfByte, 0, arrayOfByte.length);
    int i = this.colorTab.length;
    for (byte b = 0; b < 768 - i; b++)
      this.out.write(0); 
  }
  
  private void writePixels() { (new LZWEncoder(this.width, this.height, this.indexedPixels, this.colorDepth)).encode(this.out); }
  
  private void writeShort(int paramInt) throws IOException {
    this.out.write(paramInt & 0xFF);
    this.out.write(paramInt >> 8 & 0xFF);
  }
  
  private void writeString(String paramString) throws IOException {
    for (byte b = 0; b < paramString.length(); b++)
      this.out.write((byte)paramString.charAt(b)); 
  }
  
  public boolean addFrame(Bitmap paramBitmap) {
    boolean bool = false;
    if (paramBitmap != null) {
      if (!this.started)
        return false; 
      try {
        if (!this.sizeSet)
          setSize(paramBitmap.getWidth(), paramBitmap.getHeight()); 
        this.image = paramBitmap;
        getImagePixels();
        analyzePixels();
        if (this.firstFrame) {
          writeLSD();
          writePalette();
          if (this.repeat >= 0)
            writeNetscapeExt(); 
        } 
        writeGraphicCtrlExt();
        writeImageDesc();
        if (!this.firstFrame)
          writePalette(); 
        writePixels();
        this.firstFrame = false;
        return true;
      } catch (IOException paramBitmap) {
        return false;
      } 
    } 
    return bool;
  }
  
  public boolean finish() {
    boolean bool;
    if (!this.started)
      return false; 
    this.started = false;
    try {
      this.out.write(59);
      this.out.flush();
      if (this.closeStream)
        this.out.close(); 
      bool = true;
    } catch (IOException iOException) {
      bool = false;
    } 
    this.transIndex = 0;
    this.out = null;
    this.image = null;
    this.pixels = null;
    this.indexedPixels = null;
    this.colorTab = null;
    this.closeStream = false;
    this.firstFrame = true;
    return bool;
  }
  
  public void setDelay(int paramInt) throws IOException { this.delay = Math.round(paramInt / 10.0F); }
  
  public void setDispose(int paramInt) throws IOException {
    if (paramInt >= 0)
      this.dispose = paramInt; 
  }
  
  public void setFrameRate(float paramFloat) {
    if (paramFloat != 0.0F)
      this.delay = Math.round(100.0F / paramFloat); 
  }
  
  public void setQuality(int paramInt) throws IOException {
    int i = paramInt;
    if (paramInt < 1)
      i = 1; 
    this.sample = i;
  }
  
  public void setRepeat(int paramInt) throws IOException {
    if (paramInt >= 0)
      this.repeat = paramInt; 
  }
  
  public void setSize(int paramInt1, int paramInt2) {
    if (this.started && !this.firstFrame)
      return; 
    this.width = paramInt1;
    this.height = paramInt2;
    if (this.width < 1)
      this.width = 320; 
    if (this.height < 1)
      this.height = 240; 
    this.sizeSet = true;
  }
  
  public void setTransparent(int paramInt) throws IOException { this.transparent = Integer.valueOf(paramInt); }
  
  public boolean start(OutputStream paramOutputStream) {
    boolean bool = false;
    if (paramOutputStream == null)
      return false; 
    this.closeStream = false;
    this.out = paramOutputStream;
    try {
      writeString("GIF89a");
      bool = true;
    } catch (IOException paramOutputStream) {}
    this.started = bool;
    return bool;
  }
  
  public boolean start(String paramString) {
    boolean bool;
    try {
      this.out = new BufferedOutputStream(new FileOutputStream(paramString));
      bool = start(this.out);
      this.closeStream = true;
    } catch (IOException paramString) {
      bool = false;
    } 
    this.started = bool;
    return bool;
  }
}
