package com.getbase.floatingactionbutton;

import android.animation.AnimatorSet;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Rect;
import android.os.Parcelable;
import android.support.annotation.ColorRes;
import android.util.AttributeSet;
import android.view.ContextThemeWrapper;
import android.view.TouchDelegate;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.Interpolator;
import android.view.animation.OvershootInterpolator;
import android.widget.TextView;

public class FloatingActionsMenu extends ViewGroup {
  private static final int ANIMATION_DURATION = 300;
  
  private static final float COLLAPSED_PLUS_ROTATION = 0.0F;
  
  private static final float EXPANDED_PLUS_ROTATION = 135.0F;
  
  public static final int EXPAND_DOWN = 1;
  
  public static final int EXPAND_LEFT = 2;
  
  public static final int EXPAND_RIGHT = 3;
  
  public static final int EXPAND_UP = 0;
  
  public static final int LABELS_ON_LEFT_SIDE = 0;
  
  public static final int LABELS_ON_RIGHT_SIDE = 1;
  
  private static Interpolator sAlphaExpandInterpolator;
  
  private static Interpolator sCollapseInterpolator;
  
  private static Interpolator sExpandInterpolator = new OvershootInterpolator();
  
  private AddFloatingActionButton mAddButton;
  
  private int mAddButtonColorNormal;
  
  private int mAddButtonColorPressed;
  
  private int mAddButtonPlusColor;
  
  private int mAddButtonSize;
  
  private boolean mAddButtonStrokeVisible;
  
  private int mButtonSpacing;
  
  private int mButtonsCount;
  
  private AnimatorSet mCollapseAnimation = (new AnimatorSet()).setDuration(300L);
  
  private AnimatorSet mExpandAnimation = (new AnimatorSet()).setDuration(300L);
  
  private int mExpandDirection;
  
  private boolean mExpanded;
  
  private int mLabelsMargin;
  
  private int mLabelsPosition;
  
  private int mLabelsStyle;
  
  private int mLabelsVerticalOffset;
  
  private OnFloatingActionsMenuUpdateListener mListener;
  
  private int mMaxButtonHeight;
  
  private int mMaxButtonWidth;
  
  private RotatingDrawable mRotatingDrawable;
  
  private TouchDelegateGroup mTouchDelegateGroup;
  
  static  {
    sCollapseInterpolator = new DecelerateInterpolator(3.0F);
    sAlphaExpandInterpolator = new DecelerateInterpolator();
  }
  
  public FloatingActionsMenu(Context paramContext) { this(paramContext, null); }
  
  public FloatingActionsMenu(Context paramContext, AttributeSet paramAttributeSet) {
    super(paramContext, paramAttributeSet);
    init(paramContext, paramAttributeSet);
  }
  
  public FloatingActionsMenu(Context paramContext, AttributeSet paramAttributeSet, int paramInt) {
    super(paramContext, paramAttributeSet, paramInt);
    init(paramContext, paramAttributeSet);
  }
  
  private int adjustForOvershoot(int paramInt) { return paramInt * 12 / 10; }
  
  private void collapse(boolean paramBoolean) {
    if (this.mExpanded) {
      long l;
      this.mExpanded = false;
      this.mTouchDelegateGroup.setEnabled(false);
      AnimatorSet animatorSet = this.mCollapseAnimation;
      if (paramBoolean) {
        l = 0L;
      } else {
        l = 300L;
      } 
      animatorSet.setDuration(l);
      this.mCollapseAnimation.start();
      this.mExpandAnimation.cancel();
      OnFloatingActionsMenuUpdateListener onFloatingActionsMenuUpdateListener = this.mListener;
      if (onFloatingActionsMenuUpdateListener != null)
        onFloatingActionsMenuUpdateListener.onMenuCollapsed(); 
    } 
  }
  
  private void createAddButton(Context paramContext) {
    this.mAddButton = new Object(this, paramContext);
    this.mAddButton.setId(R.id.fab_expand_menu_button);
    this.mAddButton.setSize(this.mAddButtonSize);
    this.mAddButton.setOnClickListener(new Object(this));
    addView(this.mAddButton, super.generateDefaultLayoutParams());
    this.mButtonsCount++;
  }
  
  private void createLabels() {
    ContextThemeWrapper contextThemeWrapper = new ContextThemeWrapper(getContext(), this.mLabelsStyle);
    for (byte b = 0; b < this.mButtonsCount; b++) {
      FloatingActionButton floatingActionButton = (FloatingActionButton)getChildAt(b);
      String str = floatingActionButton.getTitle();
      if (floatingActionButton != this.mAddButton && str != null && floatingActionButton.getTag(R.id.fab_label) == null) {
        TextView textView = new TextView(contextThemeWrapper);
        textView.setTextAppearance(getContext(), this.mLabelsStyle);
        textView.setText(floatingActionButton.getTitle());
        addView(textView);
        floatingActionButton.setTag(R.id.fab_label, textView);
      } 
    } 
  }
  
  private boolean expandsHorizontally() {
    int i = this.mExpandDirection;
    return (i == 2 || i == 3);
  }
  
  private int getColor(@ColorRes int paramInt) { return getResources().getColor(paramInt); }
  
  private void init(Context paramContext, AttributeSet paramAttributeSet) {
    this.mButtonSpacing = (int)(getResources().getDimension(R.dimen.fab_actions_spacing) - getResources().getDimension(R.dimen.fab_shadow_radius) - getResources().getDimension(R.dimen.fab_shadow_offset));
    this.mLabelsMargin = getResources().getDimensionPixelSize(R.dimen.fab_labels_margin);
    this.mLabelsVerticalOffset = getResources().getDimensionPixelSize(R.dimen.fab_shadow_offset);
    this.mTouchDelegateGroup = new TouchDelegateGroup(this);
    setTouchDelegate(this.mTouchDelegateGroup);
    TypedArray typedArray = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.FloatingActionsMenu, 0, 0);
    this.mAddButtonPlusColor = typedArray.getColor(R.styleable.FloatingActionsMenu_fab_addButtonPlusIconColor, getColor(17170443));
    this.mAddButtonColorNormal = typedArray.getColor(R.styleable.FloatingActionsMenu_fab_addButtonColorNormal, getColor(17170451));
    this.mAddButtonColorPressed = typedArray.getColor(R.styleable.FloatingActionsMenu_fab_addButtonColorPressed, getColor(17170450));
    this.mAddButtonSize = typedArray.getInt(R.styleable.FloatingActionsMenu_fab_addButtonSize, 0);
    this.mAddButtonStrokeVisible = typedArray.getBoolean(R.styleable.FloatingActionsMenu_fab_addButtonStrokeVisible, true);
    this.mExpandDirection = typedArray.getInt(R.styleable.FloatingActionsMenu_fab_expandDirection, 0);
    this.mLabelsStyle = typedArray.getResourceId(R.styleable.FloatingActionsMenu_fab_labelStyle, 0);
    this.mLabelsPosition = typedArray.getInt(R.styleable.FloatingActionsMenu_fab_labelsPosition, 0);
    typedArray.recycle();
    if (this.mLabelsStyle == 0 || !expandsHorizontally()) {
      createAddButton(paramContext);
      return;
    } 
    throw new IllegalStateException("Action labels in horizontal expand orientation is not supported.");
  }
  
  public void addButton(FloatingActionButton paramFloatingActionButton) {
    addView(paramFloatingActionButton, this.mButtonsCount - 1);
    this.mButtonsCount++;
    if (this.mLabelsStyle != 0)
      createLabels(); 
  }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams) { return super.checkLayoutParams(paramLayoutParams); }
  
  public void collapse() { collapse(false); }
  
  public void collapseImmediately() { collapse(true); }
  
  public void expand() {
    if (!this.mExpanded) {
      this.mExpanded = true;
      this.mTouchDelegateGroup.setEnabled(true);
      this.mCollapseAnimation.cancel();
      this.mExpandAnimation.start();
      OnFloatingActionsMenuUpdateListener onFloatingActionsMenuUpdateListener = this.mListener;
      if (onFloatingActionsMenuUpdateListener != null)
        onFloatingActionsMenuUpdateListener.onMenuExpanded(); 
    } 
  }
  
  protected ViewGroup.LayoutParams generateDefaultLayoutParams() { return new LayoutParams(this, super.generateDefaultLayoutParams()); }
  
  public ViewGroup.LayoutParams generateLayoutParams(AttributeSet paramAttributeSet) { return new LayoutParams(this, super.generateLayoutParams(paramAttributeSet)); }
  
  protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams) { return new LayoutParams(this, super.generateLayoutParams(paramLayoutParams)); }
  
  public boolean isExpanded() { return this.mExpanded; }
  
  protected void onFinishInflate() {
    super.onFinishInflate();
    bringChildToFront(this.mAddButton);
    this.mButtonsCount = getChildCount();
    if (this.mLabelsStyle != 0)
      createLabels(); 
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    int i = this.mExpandDirection;
    if (i != 0 && i != 1) {
      if (i != 2 && i != 3)
        return; 
      if (this.mExpandDirection == 2) {
        i = 1;
      } else {
        i = 0;
      } 
      if (i != 0) {
        paramInt3 = paramInt3 - paramInt1 - this.mAddButton.getMeasuredWidth();
      } else {
        paramInt3 = 0;
      } 
      paramInt1 = this.mMaxButtonHeight;
      int j = paramInt4 - paramInt2 - paramInt1 + (paramInt1 - this.mAddButton.getMeasuredHeight()) / 2;
      AddFloatingActionButton addFloatingActionButton = this.mAddButton;
      addFloatingActionButton.layout(paramInt3, j, addFloatingActionButton.getMeasuredWidth() + paramInt3, this.mAddButton.getMeasuredHeight() + j);
      if (i != 0) {
        paramInt1 = paramInt3 - this.mButtonSpacing;
      } else {
        paramInt1 = this.mAddButton.getMeasuredWidth() + paramInt3 + this.mButtonSpacing;
      } 
      paramInt4 = this.mButtonsCount - 1;
      while (paramInt4 >= 0) {
        View view = getChildAt(paramInt4);
        paramInt2 = paramInt1;
        if (view != this.mAddButton)
          if (view.getVisibility() == 8) {
            paramInt2 = paramInt1;
          } else {
            float f1;
            paramInt2 = paramInt1;
            if (i != 0)
              paramInt2 = paramInt1 - view.getMeasuredWidth(); 
            paramInt1 = (this.mAddButton.getMeasuredHeight() - view.getMeasuredHeight()) / 2 + j;
            view.layout(paramInt2, paramInt1, view.getMeasuredWidth() + paramInt2, view.getMeasuredHeight() + paramInt1);
            float f2 = (paramInt3 - paramInt2);
            if (this.mExpanded) {
              f1 = 0.0F;
            } else {
              f1 = f2;
            } 
            view.setTranslationX(f1);
            if (this.mExpanded) {
              f1 = 1.0F;
            } else {
              f1 = 0.0F;
            } 
            view.setAlpha(f1);
            LayoutParams layoutParams;
            (layoutParams = (LayoutParams)view.getLayoutParams()).access$700(layoutParams).setFloatValues(new float[] { 0.0F, f2 });
            LayoutParams.access$800(layoutParams).setFloatValues(new float[] { f2, 0.0F });
            layoutParams.setAnimationsTarget(view);
            if (i != 0) {
              paramInt2 -= this.mButtonSpacing;
            } else {
              paramInt2 = paramInt2 + view.getMeasuredWidth() + this.mButtonSpacing;
            } 
          }  
        paramInt4--;
        paramInt1 = paramInt2;
      } 
    } else {
      if (this.mExpandDirection == 0) {
        i = 1;
      } else {
        i = 0;
      } 
      if (paramBoolean)
        this.mTouchDelegateGroup.clearTouchDelegates(); 
      if (i != 0) {
        paramInt2 = paramInt4 - paramInt2 - this.mAddButton.getMeasuredHeight();
      } else {
        paramInt2 = 0;
      } 
      if (this.mLabelsPosition == 0) {
        paramInt4 = paramInt3 - paramInt1 - this.mMaxButtonWidth / 2;
      } else {
        paramInt4 = this.mMaxButtonWidth / 2;
      } 
      paramInt1 = paramInt4 - this.mAddButton.getMeasuredWidth() / 2;
      AddFloatingActionButton addFloatingActionButton = this.mAddButton;
      addFloatingActionButton.layout(paramInt1, paramInt2, addFloatingActionButton.getMeasuredWidth() + paramInt1, this.mAddButton.getMeasuredHeight() + paramInt2);
      paramInt1 = this.mMaxButtonWidth / 2 + this.mLabelsMargin;
      if (this.mLabelsPosition == 0) {
        paramInt1 = paramInt4 - paramInt1;
      } else {
        paramInt1 += paramInt4;
      } 
      if (i != 0) {
        paramInt3 = paramInt2 - this.mButtonSpacing;
      } else {
        paramInt3 = this.mAddButton.getMeasuredHeight() + paramInt2 + this.mButtonSpacing;
      } 
      int j = this.mButtonsCount - 1;
      int k = paramInt2;
      while (j >= 0) {
        View view = getChildAt(j);
        if (view != this.mAddButton && view.getVisibility() != 8) {
          float f2;
          int n = paramInt4 - view.getMeasuredWidth() / 2;
          int m = paramInt3;
          if (i != 0)
            m = paramInt3 - view.getMeasuredHeight(); 
          view.layout(n, m, view.getMeasuredWidth() + n, view.getMeasuredHeight() + m);
          float f1 = (k - m);
          if (this.mExpanded) {
            f2 = 0.0F;
          } else {
            f2 = f1;
          } 
          view.setTranslationY(f2);
          if (this.mExpanded) {
            f2 = 1.0F;
          } else {
            f2 = 0.0F;
          } 
          view.setAlpha(f2);
          LayoutParams layoutParams;
          (layoutParams = (LayoutParams)view.getLayoutParams()).access$700(layoutParams).setFloatValues(new float[] { 0.0F, f1 });
          LayoutParams.access$800(layoutParams).setFloatValues(new float[] { f1, 0.0F });
          layoutParams.setAnimationsTarget(view);
          View view1 = (View)view.getTag(R.id.fab_label);
          if (view1 != null) {
            if (this.mLabelsPosition == 0) {
              paramInt2 = paramInt1 - view1.getMeasuredWidth();
            } else {
              paramInt2 = view1.getMeasuredWidth() + paramInt1;
            } 
            if (this.mLabelsPosition == 0) {
              paramInt3 = paramInt2;
            } else {
              paramInt3 = paramInt1;
            } 
            if (this.mLabelsPosition == 0)
              paramInt2 = paramInt1; 
            int i1 = m - this.mLabelsVerticalOffset + (view.getMeasuredHeight() - view1.getMeasuredHeight()) / 2;
            view1.layout(paramInt3, i1, paramInt2, i1 + view1.getMeasuredHeight());
            Rect rect = new Rect(Math.min(n, paramInt3), m - this.mButtonSpacing / 2, Math.max(n + view.getMeasuredWidth(), paramInt2), view.getMeasuredHeight() + m + this.mButtonSpacing / 2);
            this.mTouchDelegateGroup.addTouchDelegate(new TouchDelegate(rect, view));
            if (this.mExpanded) {
              f2 = 0.0F;
            } else {
              f2 = f1;
            } 
            view1.setTranslationY(f2);
            if (this.mExpanded) {
              f2 = 1.0F;
            } else {
              f2 = 0.0F;
            } 
            view1.setAlpha(f2);
            LayoutParams layoutParams1;
            (layoutParams1 = (LayoutParams)view1.getLayoutParams()).access$700(layoutParams1).setFloatValues(new float[] { 0.0F, f1 });
            LayoutParams.access$800(layoutParams1).setFloatValues(new float[] { f1, 0.0F });
            layoutParams1.setAnimationsTarget(view1);
          } 
          if (i != 0) {
            paramInt3 = m - this.mButtonSpacing;
          } else {
            paramInt3 = m + view.getMeasuredHeight() + this.mButtonSpacing;
          } 
        } 
        j--;
      } 
    } 
  }
  
  protected void onMeasure(int paramInt1, int paramInt2) {
    measureChildren(paramInt1, paramInt2);
    int k = 0;
    this.mMaxButtonWidth = 0;
    this.mMaxButtonHeight = 0;
    int i = 0;
    int j = 0;
    paramInt1 = 0;
    for (paramInt2 = 0; i < this.mButtonsCount; paramInt2 = i1) {
      int i1;
      int n;
      int m;
      View view = getChildAt(i);
      if (view.getVisibility() == 8) {
        m = j;
        n = paramInt1;
        i1 = paramInt2;
      } else {
        m = this.mExpandDirection;
        if (m != 0 && m != 1) {
          if (m == 2 || m == 3) {
            paramInt2 += view.getMeasuredWidth();
            this.mMaxButtonHeight = Math.max(this.mMaxButtonHeight, view.getMeasuredHeight());
          } 
        } else {
          this.mMaxButtonWidth = Math.max(this.mMaxButtonWidth, view.getMeasuredWidth());
          paramInt1 += view.getMeasuredHeight();
        } 
        m = j;
        n = paramInt1;
        i1 = paramInt2;
        if (!expandsHorizontally()) {
          TextView textView = (TextView)view.getTag(R.id.fab_label);
          m = j;
          n = paramInt1;
          i1 = paramInt2;
          if (textView != null) {
            m = Math.max(j, textView.getMeasuredWidth());
            i1 = paramInt2;
            n = paramInt1;
          } 
        } 
      } 
      i++;
      j = m;
      paramInt1 = n;
    } 
    if (!expandsHorizontally()) {
      i = this.mMaxButtonWidth;
      paramInt2 = k;
      if (j > 0)
        paramInt2 = this.mLabelsMargin + j; 
      paramInt2 = i + paramInt2;
    } else {
      paramInt1 = this.mMaxButtonHeight;
    } 
    i = this.mExpandDirection;
    if (i != 0 && i != 1) {
      if (i == 2 || i == 3)
        paramInt2 = adjustForOvershoot(paramInt2 + this.mButtonSpacing * (this.mButtonsCount - 1)); 
    } else {
      paramInt1 = adjustForOvershoot(paramInt1 + this.mButtonSpacing * (this.mButtonsCount - 1));
    } 
    setMeasuredDimension(paramInt2, paramInt1);
  }
  
  public void onRestoreInstanceState(Parcelable paramParcelable) {
    SavedState savedState;
    if (paramParcelable instanceof SavedState) {
      savedState = (SavedState)paramParcelable;
      this.mExpanded = savedState.mExpanded;
      this.mTouchDelegateGroup.setEnabled(this.mExpanded);
      RotatingDrawable rotatingDrawable = this.mRotatingDrawable;
      if (rotatingDrawable != null) {
        float f;
        if (this.mExpanded) {
          f = 135.0F;
        } else {
          f = 0.0F;
        } 
        rotatingDrawable.setRotation(f);
      } 
      super.onRestoreInstanceState(savedState.getSuperState());
      return;
    } 
    super.onRestoreInstanceState(savedState);
  }
  
  public Parcelable onSaveInstanceState() {
    SavedState savedState = new SavedState(super.onSaveInstanceState());
    savedState.mExpanded = this.mExpanded;
    return savedState;
  }
  
  public void removeButton(FloatingActionButton paramFloatingActionButton) {
    removeView(paramFloatingActionButton.getLabelView());
    removeView(paramFloatingActionButton);
    paramFloatingActionButton.setTag(R.id.fab_label, null);
    this.mButtonsCount--;
  }
  
  public void setEnabled(boolean paramBoolean) {
    super.setEnabled(paramBoolean);
    this.mAddButton.setEnabled(paramBoolean);
  }
  
  public void setOnFloatingActionsMenuUpdateListener(OnFloatingActionsMenuUpdateListener paramOnFloatingActionsMenuUpdateListener) { this.mListener = paramOnFloatingActionsMenuUpdateListener; }
  
  public void toggle() {
    if (this.mExpanded) {
      collapse();
      return;
    } 
    expand();
  }
}
