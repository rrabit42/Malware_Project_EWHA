package android.support.v4.widget;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Parcelable;
import android.support.annotation.ColorInt;
import android.support.annotation.DrawableRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.Px;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.ViewCompat;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;

public class SlidingPaneLayout extends ViewGroup {
  private static final int DEFAULT_FADE_COLOR = -858993460;
  
  private static final int DEFAULT_OVERHANG_SIZE = 32;
  
  private static final int MIN_FLING_VELOCITY = 400;
  
  private static final String TAG = "SlidingPaneLayout";
  
  private boolean mCanSlide;
  
  private int mCoveredFadeColor;
  
  private boolean mDisplayListReflectionLoaded;
  
  final ViewDragHelper mDragHelper;
  
  private boolean mFirstLayout = true;
  
  private Method mGetDisplayList;
  
  private float mInitialMotionX;
  
  private float mInitialMotionY;
  
  boolean mIsUnableToDrag;
  
  private final int mOverhangSize;
  
  private PanelSlideListener mPanelSlideListener;
  
  private int mParallaxBy;
  
  private float mParallaxOffset;
  
  final ArrayList<DisableLayerRunnable> mPostedRunnables = new ArrayList();
  
  boolean mPreservedOpenState;
  
  private Field mRecreateDisplayList;
  
  private Drawable mShadowDrawableLeft;
  
  private Drawable mShadowDrawableRight;
  
  float mSlideOffset;
  
  int mSlideRange;
  
  View mSlideableView;
  
  private int mSliderFadeColor = -858993460;
  
  private final Rect mTmpRect = new Rect();
  
  public SlidingPaneLayout(@NonNull Context paramContext) { this(paramContext, null); }
  
  public SlidingPaneLayout(@NonNull Context paramContext, @Nullable AttributeSet paramAttributeSet) { this(paramContext, paramAttributeSet, 0); }
  
  public SlidingPaneLayout(@NonNull Context paramContext, @Nullable AttributeSet paramAttributeSet, int paramInt) {
    super(paramContext, paramAttributeSet, paramInt);
    float f = (paramContext.getResources().getDisplayMetrics()).density;
    this.mOverhangSize = (int)(32.0F * f + 0.5F);
    setWillNotDraw(false);
    ViewCompat.setAccessibilityDelegate(this, new AccessibilityDelegate(this));
    ViewCompat.setImportantForAccessibility(this, 1);
    this.mDragHelper = ViewDragHelper.create(this, 0.5F, new DragHelperCallback(this));
    this.mDragHelper.setMinVelocity(f * 400.0F);
  }
  
  private boolean closePane(View paramView, int paramInt) {
    if (this.mFirstLayout || smoothSlideTo(0.0F, paramInt)) {
      this.mPreservedOpenState = false;
      return true;
    } 
    return false;
  }
  
  private void dimChildView(View paramView, float paramFloat, int paramInt) {
    LayoutParams layoutParams = (LayoutParams)paramView.getLayoutParams();
    if (paramFloat > 0.0F && paramInt != 0) {
      int i = (int)(((0xFF000000 & paramInt) >>> 24) * paramFloat);
      if (layoutParams.dimPaint == null)
        layoutParams.dimPaint = new Paint(); 
      layoutParams.dimPaint.setColorFilter(new PorterDuffColorFilter(i << 24 | paramInt & 0xFFFFFF, PorterDuff.Mode.SRC_OVER));
      if (paramView.getLayerType() != 2)
        paramView.setLayerType(2, layoutParams.dimPaint); 
      invalidateChildRegion(paramView);
      return;
    } 
    if (paramView.getLayerType() != 0) {
      if (layoutParams.dimPaint != null)
        layoutParams.dimPaint.setColorFilter(null); 
      DisableLayerRunnable disableLayerRunnable = new DisableLayerRunnable(this, paramView);
      this.mPostedRunnables.add(disableLayerRunnable);
      ViewCompat.postOnAnimation(this, disableLayerRunnable);
    } 
  }
  
  private boolean openPane(View paramView, int paramInt) {
    if (this.mFirstLayout || smoothSlideTo(1.0F, paramInt)) {
      this.mPreservedOpenState = true;
      return true;
    } 
    return false;
  }
  
  private void parallaxOtherViews(float paramFloat) { // Byte code:
    //   0: aload_0
    //   1: invokevirtual isLayoutRtlSupport : ()Z
    //   4: istore #8
    //   6: aload_0
    //   7: getfield mSlideableView : Landroid/view/View;
    //   10: invokevirtual getLayoutParams : ()Landroid/view/ViewGroup$LayoutParams;
    //   13: checkcast android/support/v4/widget/SlidingPaneLayout$LayoutParams
    //   16: astore #10
    //   18: aload #10
    //   20: getfield dimWhenOffset : Z
    //   23: istore #9
    //   25: iconst_0
    //   26: istore #4
    //   28: iload #9
    //   30: ifeq -> 62
    //   33: iload #8
    //   35: ifeq -> 47
    //   38: aload #10
    //   40: getfield rightMargin : I
    //   43: istore_3
    //   44: goto -> 53
    //   47: aload #10
    //   49: getfield leftMargin : I
    //   52: istore_3
    //   53: iload_3
    //   54: ifgt -> 62
    //   57: iconst_1
    //   58: istore_3
    //   59: goto -> 64
    //   62: iconst_0
    //   63: istore_3
    //   64: aload_0
    //   65: invokevirtual getChildCount : ()I
    //   68: istore #7
    //   70: iload #4
    //   72: iload #7
    //   74: if_icmpge -> 203
    //   77: aload_0
    //   78: iload #4
    //   80: invokevirtual getChildAt : (I)Landroid/view/View;
    //   83: astore #10
    //   85: aload #10
    //   87: aload_0
    //   88: getfield mSlideableView : Landroid/view/View;
    //   91: if_acmpne -> 97
    //   94: goto -> 194
    //   97: aload_0
    //   98: getfield mParallaxOffset : F
    //   101: fstore_2
    //   102: aload_0
    //   103: getfield mParallaxBy : I
    //   106: istore #5
    //   108: fconst_1
    //   109: fload_2
    //   110: fsub
    //   111: iload #5
    //   113: i2f
    //   114: fmul
    //   115: f2i
    //   116: istore #6
    //   118: aload_0
    //   119: fload_1
    //   120: putfield mParallaxOffset : F
    //   123: iload #6
    //   125: fconst_1
    //   126: fload_1
    //   127: fsub
    //   128: iload #5
    //   130: i2f
    //   131: fmul
    //   132: f2i
    //   133: isub
    //   134: istore #6
    //   136: iload #6
    //   138: istore #5
    //   140: iload #8
    //   142: ifeq -> 150
    //   145: iload #6
    //   147: ineg
    //   148: istore #5
    //   150: aload #10
    //   152: iload #5
    //   154: invokevirtual offsetLeftAndRight : (I)V
    //   157: iload_3
    //   158: ifeq -> 194
    //   161: iload #8
    //   163: ifeq -> 176
    //   166: aload_0
    //   167: getfield mParallaxOffset : F
    //   170: fconst_1
    //   171: fsub
    //   172: fstore_2
    //   173: goto -> 183
    //   176: fconst_1
    //   177: aload_0
    //   178: getfield mParallaxOffset : F
    //   181: fsub
    //   182: fstore_2
    //   183: aload_0
    //   184: aload #10
    //   186: fload_2
    //   187: aload_0
    //   188: getfield mCoveredFadeColor : I
    //   191: invokespecial dimChildView : (Landroid/view/View;FI)V
    //   194: iload #4
    //   196: iconst_1
    //   197: iadd
    //   198: istore #4
    //   200: goto -> 70
    //   203: return }
  
  private static boolean viewIsOpaque(View paramView) {
    if (paramView.isOpaque())
      return true; 
    if (Build.VERSION.SDK_INT >= 18)
      return false; 
    Drawable drawable = paramView.getBackground();
    return (drawable != null) ? ((drawable.getOpacity() == -1)) : false;
  }
  
  protected boolean canScroll(View paramView, boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3) {
    if (paramView instanceof ViewGroup) {
      ViewGroup viewGroup = (ViewGroup)paramView;
      int j = paramView.getScrollX();
      int k = paramView.getScrollY();
      int i;
      for (i = viewGroup.getChildCount() - 1; i >= 0; i--) {
        View view = viewGroup.getChildAt(i);
        int m = paramInt2 + j;
        if (m >= view.getLeft() && m < view.getRight()) {
          int n = paramInt3 + k;
          if (n >= view.getTop() && n < view.getBottom() && canScroll(view, true, paramInt1, m - view.getLeft(), n - view.getTop()))
            return true; 
        } 
      } 
    } 
    if (paramBoolean) {
      if (!isLayoutRtlSupport())
        paramInt1 = -paramInt1; 
      if (paramView.canScrollHorizontally(paramInt1))
        return true; 
    } 
    return false;
  }
  
  @Deprecated
  public boolean canSlide() { return this.mCanSlide; }
  
  protected boolean checkLayoutParams(ViewGroup.LayoutParams paramLayoutParams) { return (paramLayoutParams instanceof LayoutParams && super.checkLayoutParams(paramLayoutParams)); }
  
  public boolean closePane() { return closePane(this.mSlideableView, 0); }
  
  public void computeScroll() {
    if (this.mDragHelper.continueSettling(true)) {
      if (!this.mCanSlide) {
        this.mDragHelper.abort();
        return;
      } 
      ViewCompat.postInvalidateOnAnimation(this);
    } 
  }
  
  void dispatchOnPanelClosed(View paramView) {
    PanelSlideListener panelSlideListener = this.mPanelSlideListener;
    if (panelSlideListener != null)
      panelSlideListener.onPanelClosed(paramView); 
    sendAccessibilityEvent(32);
  }
  
  void dispatchOnPanelOpened(View paramView) {
    PanelSlideListener panelSlideListener = this.mPanelSlideListener;
    if (panelSlideListener != null)
      panelSlideListener.onPanelOpened(paramView); 
    sendAccessibilityEvent(32);
  }
  
  void dispatchOnPanelSlide(View paramView) {
    PanelSlideListener panelSlideListener = this.mPanelSlideListener;
    if (panelSlideListener != null)
      panelSlideListener.onPanelSlide(paramView, this.mSlideOffset); 
  }
  
  public void draw(Canvas paramCanvas) {
    Object object;
    Drawable drawable;
    super.draw(paramCanvas);
    if (isLayoutRtlSupport()) {
      drawable = this.mShadowDrawableRight;
    } else {
      drawable = this.mShadowDrawableLeft;
    } 
    if (getChildCount() > 1) {
      object = getChildAt(1);
    } else {
      object = null;
    } 
    if (object != null) {
      int j;
      int i;
      if (drawable == null)
        return; 
      int m = object.getTop();
      int n = object.getBottom();
      int k = drawable.getIntrinsicWidth();
      if (isLayoutRtlSupport()) {
        i = object.getRight();
        j = k + i;
      } else {
        j = object.getLeft();
        i = j;
        k = j - k;
        j = i;
        i = k;
      } 
      drawable.setBounds(i, m, j, n);
      drawable.draw(paramCanvas);
    } 
  }
  
  protected boolean drawChild(Canvas paramCanvas, View paramView, long paramLong) {
    LayoutParams layoutParams = (LayoutParams)paramView.getLayoutParams();
    int i = paramCanvas.save();
    if (this.mCanSlide && !layoutParams.slideable && this.mSlideableView != null) {
      paramCanvas.getClipBounds(this.mTmpRect);
      if (isLayoutRtlSupport()) {
        Rect rect = this.mTmpRect;
        rect.left = Math.max(rect.left, this.mSlideableView.getRight());
      } else {
        Rect rect = this.mTmpRect;
        rect.right = Math.min(rect.right, this.mSlideableView.getLeft());
      } 
      paramCanvas.clipRect(this.mTmpRect);
    } 
    boolean bool = super.drawChild(paramCanvas, paramView, paramLong);
    paramCanvas.restoreToCount(i);
    return bool;
  }
  
  protected ViewGroup.LayoutParams generateDefaultLayoutParams() { return new LayoutParams(); }
  
  public ViewGroup.LayoutParams generateLayoutParams(AttributeSet paramAttributeSet) { return new LayoutParams(getContext(), paramAttributeSet); }
  
  protected ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams paramLayoutParams) { return (paramLayoutParams instanceof ViewGroup.MarginLayoutParams) ? new LayoutParams((ViewGroup.MarginLayoutParams)paramLayoutParams) : new LayoutParams(paramLayoutParams); }
  
  @ColorInt
  public int getCoveredFadeColor() { return this.mCoveredFadeColor; }
  
  @Px
  public int getParallaxDistance() { return this.mParallaxBy; }
  
  @ColorInt
  public int getSliderFadeColor() { return this.mSliderFadeColor; }
  
  void invalidateChildRegion(View paramView) { // Byte code:
    //   0: getstatic android/os/Build$VERSION.SDK_INT : I
    //   3: bipush #17
    //   5: if_icmplt -> 23
    //   8: aload_1
    //   9: aload_1
    //   10: invokevirtual getLayoutParams : ()Landroid/view/ViewGroup$LayoutParams;
    //   13: checkcast android/support/v4/widget/SlidingPaneLayout$LayoutParams
    //   16: getfield dimPaint : Landroid/graphics/Paint;
    //   19: invokestatic setLayerPaint : (Landroid/view/View;Landroid/graphics/Paint;)V
    //   22: return
    //   23: getstatic android/os/Build$VERSION.SDK_INT : I
    //   26: bipush #16
    //   28: if_icmplt -> 167
    //   31: aload_0
    //   32: getfield mDisplayListReflectionLoaded : Z
    //   35: ifne -> 107
    //   38: aload_0
    //   39: ldc android/view/View
    //   41: ldc_w 'getDisplayList'
    //   44: aconst_null
    //   45: checkcast [Ljava/lang/Class;
    //   48: invokevirtual getDeclaredMethod : (Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
    //   51: putfield mGetDisplayList : Ljava/lang/reflect/Method;
    //   54: goto -> 68
    //   57: astore_2
    //   58: ldc 'SlidingPaneLayout'
    //   60: ldc_w 'Couldn't fetch getDisplayList method; dimming won't work right.'
    //   63: aload_2
    //   64: invokestatic e : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   67: pop
    //   68: aload_0
    //   69: ldc android/view/View
    //   71: ldc_w 'mRecreateDisplayList'
    //   74: invokevirtual getDeclaredField : (Ljava/lang/String;)Ljava/lang/reflect/Field;
    //   77: putfield mRecreateDisplayList : Ljava/lang/reflect/Field;
    //   80: aload_0
    //   81: getfield mRecreateDisplayList : Ljava/lang/reflect/Field;
    //   84: iconst_1
    //   85: invokevirtual setAccessible : (Z)V
    //   88: goto -> 102
    //   91: astore_2
    //   92: ldc 'SlidingPaneLayout'
    //   94: ldc_w 'Couldn't fetch mRecreateDisplayList field; dimming will be slow.'
    //   97: aload_2
    //   98: invokestatic e : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   101: pop
    //   102: aload_0
    //   103: iconst_1
    //   104: putfield mDisplayListReflectionLoaded : Z
    //   107: aload_0
    //   108: getfield mGetDisplayList : Ljava/lang/reflect/Method;
    //   111: ifnull -> 162
    //   114: aload_0
    //   115: getfield mRecreateDisplayList : Ljava/lang/reflect/Field;
    //   118: astore_2
    //   119: aload_2
    //   120: ifnonnull -> 126
    //   123: goto -> 162
    //   126: aload_2
    //   127: aload_1
    //   128: iconst_1
    //   129: invokevirtual setBoolean : (Ljava/lang/Object;Z)V
    //   132: aload_0
    //   133: getfield mGetDisplayList : Ljava/lang/reflect/Method;
    //   136: aload_1
    //   137: aconst_null
    //   138: checkcast [Ljava/lang/Object;
    //   141: invokevirtual invoke : (Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
    //   144: pop
    //   145: goto -> 167
    //   148: astore_2
    //   149: ldc 'SlidingPaneLayout'
    //   151: ldc_w 'Error refreshing display list state'
    //   154: aload_2
    //   155: invokestatic e : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   158: pop
    //   159: goto -> 167
    //   162: aload_1
    //   163: invokevirtual invalidate : ()V
    //   166: return
    //   167: aload_0
    //   168: aload_1
    //   169: invokevirtual getLeft : ()I
    //   172: aload_1
    //   173: invokevirtual getTop : ()I
    //   176: aload_1
    //   177: invokevirtual getRight : ()I
    //   180: aload_1
    //   181: invokevirtual getBottom : ()I
    //   184: invokestatic postInvalidateOnAnimation : (Landroid/view/View;IIII)V
    //   187: return
    // Exception table:
    //   from	to	target	type
    //   38	54	57	java/lang/NoSuchMethodException
    //   68	88	91	java/lang/NoSuchFieldException
    //   126	145	148	java/lang/Exception }
  
  boolean isDimmed(View paramView) {
    byte b = 0;
    if (paramView == null)
      return false; 
    LayoutParams layoutParams = (LayoutParams)paramView.getLayoutParams();
    int i = b;
    if (this.mCanSlide) {
      i = b;
      if (layoutParams.dimWhenOffset) {
        i = b;
        if (this.mSlideOffset > 0.0F)
          i = 1; 
      } 
    } 
    return i;
  }
  
  boolean isLayoutRtlSupport() { return (ViewCompat.getLayoutDirection(this) == 1); }
  
  public boolean isOpen() { return (!this.mCanSlide || this.mSlideOffset == 1.0F); }
  
  public boolean isSlideable() { return this.mCanSlide; }
  
  protected void onAttachedToWindow() {
    super.onAttachedToWindow();
    this.mFirstLayout = true;
  }
  
  protected void onDetachedFromWindow() {
    super.onDetachedFromWindow();
    this.mFirstLayout = true;
    int i = this.mPostedRunnables.size();
    for (byte b = 0; b < i; b++)
      ((DisableLayerRunnable)this.mPostedRunnables.get(b)).run(); 
    this.mPostedRunnables.clear();
  }
  
  public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent) { // Byte code:
    //   0: aload_1
    //   1: invokevirtual getActionMasked : ()I
    //   4: istore #4
    //   6: aload_0
    //   7: getfield mCanSlide : Z
    //   10: istore #6
    //   12: iconst_1
    //   13: istore #5
    //   15: iload #6
    //   17: ifne -> 70
    //   20: iload #4
    //   22: ifne -> 70
    //   25: aload_0
    //   26: invokevirtual getChildCount : ()I
    //   29: iconst_1
    //   30: if_icmple -> 70
    //   33: aload_0
    //   34: iconst_1
    //   35: invokevirtual getChildAt : (I)Landroid/view/View;
    //   38: astore #7
    //   40: aload #7
    //   42: ifnull -> 70
    //   45: aload_0
    //   46: aload_0
    //   47: getfield mDragHelper : Landroid/support/v4/widget/ViewDragHelper;
    //   50: aload #7
    //   52: aload_1
    //   53: invokevirtual getX : ()F
    //   56: f2i
    //   57: aload_1
    //   58: invokevirtual getY : ()F
    //   61: f2i
    //   62: invokevirtual isViewUnder : (Landroid/view/View;II)Z
    //   65: iconst_1
    //   66: ixor
    //   67: putfield mPreservedOpenState : Z
    //   70: aload_0
    //   71: getfield mCanSlide : Z
    //   74: ifeq -> 280
    //   77: aload_0
    //   78: getfield mIsUnableToDrag : Z
    //   81: ifeq -> 92
    //   84: iload #4
    //   86: ifeq -> 92
    //   89: goto -> 280
    //   92: iload #4
    //   94: iconst_3
    //   95: if_icmpeq -> 271
    //   98: iload #4
    //   100: iconst_1
    //   101: if_icmpne -> 107
    //   104: goto -> 271
    //   107: iload #4
    //   109: ifeq -> 184
    //   112: iload #4
    //   114: iconst_2
    //   115: if_icmpeq -> 121
    //   118: goto -> 244
    //   121: aload_1
    //   122: invokevirtual getX : ()F
    //   125: fstore_3
    //   126: aload_1
    //   127: invokevirtual getY : ()F
    //   130: fstore_2
    //   131: fload_3
    //   132: aload_0
    //   133: getfield mInitialMotionX : F
    //   136: fsub
    //   137: invokestatic abs : (F)F
    //   140: fstore_3
    //   141: fload_2
    //   142: aload_0
    //   143: getfield mInitialMotionY : F
    //   146: fsub
    //   147: invokestatic abs : (F)F
    //   150: fstore_2
    //   151: fload_3
    //   152: aload_0
    //   153: getfield mDragHelper : Landroid/support/v4/widget/ViewDragHelper;
    //   156: invokevirtual getTouchSlop : ()I
    //   159: i2f
    //   160: fcmpl
    //   161: ifle -> 244
    //   164: fload_2
    //   165: fload_3
    //   166: fcmpl
    //   167: ifle -> 244
    //   170: aload_0
    //   171: getfield mDragHelper : Landroid/support/v4/widget/ViewDragHelper;
    //   174: invokevirtual cancel : ()V
    //   177: aload_0
    //   178: iconst_1
    //   179: putfield mIsUnableToDrag : Z
    //   182: iconst_0
    //   183: ireturn
    //   184: aload_0
    //   185: iconst_0
    //   186: putfield mIsUnableToDrag : Z
    //   189: aload_1
    //   190: invokevirtual getX : ()F
    //   193: fstore_2
    //   194: aload_1
    //   195: invokevirtual getY : ()F
    //   198: fstore_3
    //   199: aload_0
    //   200: fload_2
    //   201: putfield mInitialMotionX : F
    //   204: aload_0
    //   205: fload_3
    //   206: putfield mInitialMotionY : F
    //   209: aload_0
    //   210: getfield mDragHelper : Landroid/support/v4/widget/ViewDragHelper;
    //   213: aload_0
    //   214: getfield mSlideableView : Landroid/view/View;
    //   217: fload_2
    //   218: f2i
    //   219: fload_3
    //   220: f2i
    //   221: invokevirtual isViewUnder : (Landroid/view/View;II)Z
    //   224: ifeq -> 244
    //   227: aload_0
    //   228: aload_0
    //   229: getfield mSlideableView : Landroid/view/View;
    //   232: invokevirtual isDimmed : (Landroid/view/View;)Z
    //   235: ifeq -> 244
    //   238: iconst_1
    //   239: istore #4
    //   241: goto -> 247
    //   244: iconst_0
    //   245: istore #4
    //   247: aload_0
    //   248: getfield mDragHelper : Landroid/support/v4/widget/ViewDragHelper;
    //   251: aload_1
    //   252: invokevirtual shouldInterceptTouchEvent : (Landroid/view/MotionEvent;)Z
    //   255: ifne -> 268
    //   258: iload #4
    //   260: ifeq -> 265
    //   263: iconst_1
    //   264: ireturn
    //   265: iconst_0
    //   266: istore #5
    //   268: iload #5
    //   270: ireturn
    //   271: aload_0
    //   272: getfield mDragHelper : Landroid/support/v4/widget/ViewDragHelper;
    //   275: invokevirtual cancel : ()V
    //   278: iconst_0
    //   279: ireturn
    //   280: aload_0
    //   281: getfield mDragHelper : Landroid/support/v4/widget/ViewDragHelper;
    //   284: invokevirtual cancel : ()V
    //   287: aload_0
    //   288: aload_1
    //   289: invokespecial onInterceptTouchEvent : (Landroid/view/MotionEvent;)Z
    //   292: ireturn }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4) { // Byte code:
    //   0: aload_0
    //   1: invokevirtual isLayoutRtlSupport : ()Z
    //   4: istore #14
    //   6: iload #14
    //   8: ifeq -> 22
    //   11: aload_0
    //   12: getfield mDragHelper : Landroid/support/v4/widget/ViewDragHelper;
    //   15: iconst_2
    //   16: invokevirtual setEdgeTrackingEnabled : (I)V
    //   19: goto -> 30
    //   22: aload_0
    //   23: getfield mDragHelper : Landroid/support/v4/widget/ViewDragHelper;
    //   26: iconst_1
    //   27: invokevirtual setEdgeTrackingEnabled : (I)V
    //   30: iload #4
    //   32: iload_2
    //   33: isub
    //   34: istore #9
    //   36: iload #14
    //   38: ifeq -> 49
    //   41: aload_0
    //   42: invokevirtual getPaddingRight : ()I
    //   45: istore_2
    //   46: goto -> 54
    //   49: aload_0
    //   50: invokevirtual getPaddingLeft : ()I
    //   53: istore_2
    //   54: iload #14
    //   56: ifeq -> 68
    //   59: aload_0
    //   60: invokevirtual getPaddingLeft : ()I
    //   63: istore #5
    //   65: goto -> 74
    //   68: aload_0
    //   69: invokevirtual getPaddingRight : ()I
    //   72: istore #5
    //   74: aload_0
    //   75: invokevirtual getPaddingTop : ()I
    //   78: istore #11
    //   80: aload_0
    //   81: invokevirtual getChildCount : ()I
    //   84: istore #10
    //   86: aload_0
    //   87: getfield mFirstLayout : Z
    //   90: ifeq -> 122
    //   93: aload_0
    //   94: getfield mCanSlide : Z
    //   97: ifeq -> 113
    //   100: aload_0
    //   101: getfield mPreservedOpenState : Z
    //   104: ifeq -> 113
    //   107: fconst_1
    //   108: fstore #6
    //   110: goto -> 116
    //   113: fconst_0
    //   114: fstore #6
    //   116: aload_0
    //   117: fload #6
    //   119: putfield mSlideOffset : F
    //   122: iload_2
    //   123: istore_3
    //   124: iconst_0
    //   125: istore #7
    //   127: iload #7
    //   129: iload #10
    //   131: if_icmpge -> 429
    //   134: aload_0
    //   135: iload #7
    //   137: invokevirtual getChildAt : (I)Landroid/view/View;
    //   140: astore #15
    //   142: aload #15
    //   144: invokevirtual getVisibility : ()I
    //   147: bipush #8
    //   149: if_icmpne -> 155
    //   152: goto -> 420
    //   155: aload #15
    //   157: invokevirtual getLayoutParams : ()Landroid/view/ViewGroup$LayoutParams;
    //   160: checkcast android/support/v4/widget/SlidingPaneLayout$LayoutParams
    //   163: astore #16
    //   165: aload #15
    //   167: invokevirtual getMeasuredWidth : ()I
    //   170: istore #12
    //   172: aload #16
    //   174: getfield slideable : Z
    //   177: ifeq -> 318
    //   180: aload #16
    //   182: getfield leftMargin : I
    //   185: istore #4
    //   187: aload #16
    //   189: getfield rightMargin : I
    //   192: istore #13
    //   194: iload #9
    //   196: iload #5
    //   198: isub
    //   199: istore #8
    //   201: iload_2
    //   202: iload #8
    //   204: aload_0
    //   205: getfield mOverhangSize : I
    //   208: isub
    //   209: invokestatic min : (II)I
    //   212: iload_3
    //   213: isub
    //   214: iload #4
    //   216: iload #13
    //   218: iadd
    //   219: isub
    //   220: istore #13
    //   222: aload_0
    //   223: iload #13
    //   225: putfield mSlideRange : I
    //   228: iload #14
    //   230: ifeq -> 243
    //   233: aload #16
    //   235: getfield rightMargin : I
    //   238: istore #4
    //   240: goto -> 250
    //   243: aload #16
    //   245: getfield leftMargin : I
    //   248: istore #4
    //   250: iload_3
    //   251: iload #4
    //   253: iadd
    //   254: iload #13
    //   256: iadd
    //   257: iload #12
    //   259: iconst_2
    //   260: idiv
    //   261: iadd
    //   262: iload #8
    //   264: if_icmple -> 272
    //   267: iconst_1
    //   268: istore_1
    //   269: goto -> 274
    //   272: iconst_0
    //   273: istore_1
    //   274: aload #16
    //   276: iload_1
    //   277: putfield dimWhenOffset : Z
    //   280: iload #13
    //   282: i2f
    //   283: aload_0
    //   284: getfield mSlideOffset : F
    //   287: fmul
    //   288: f2i
    //   289: istore #8
    //   291: iload #4
    //   293: iload #8
    //   295: iadd
    //   296: iload_3
    //   297: iadd
    //   298: istore_3
    //   299: aload_0
    //   300: iload #8
    //   302: i2f
    //   303: aload_0
    //   304: getfield mSlideRange : I
    //   307: i2f
    //   308: fdiv
    //   309: putfield mSlideOffset : F
    //   312: iconst_0
    //   313: istore #4
    //   315: goto -> 356
    //   318: aload_0
    //   319: getfield mCanSlide : Z
    //   322: ifeq -> 351
    //   325: aload_0
    //   326: getfield mParallaxBy : I
    //   329: istore_3
    //   330: iload_3
    //   331: ifeq -> 351
    //   334: fconst_1
    //   335: aload_0
    //   336: getfield mSlideOffset : F
    //   339: fsub
    //   340: iload_3
    //   341: i2f
    //   342: fmul
    //   343: f2i
    //   344: istore #4
    //   346: iload_2
    //   347: istore_3
    //   348: goto -> 356
    //   351: iload_2
    //   352: istore_3
    //   353: iconst_0
    //   354: istore #4
    //   356: iload #14
    //   358: ifeq -> 380
    //   361: iload #9
    //   363: iload_3
    //   364: isub
    //   365: iload #4
    //   367: iadd
    //   368: istore #8
    //   370: iload #8
    //   372: iload #12
    //   374: isub
    //   375: istore #4
    //   377: goto -> 393
    //   380: iload_3
    //   381: iload #4
    //   383: isub
    //   384: istore #4
    //   386: iload #4
    //   388: iload #12
    //   390: iadd
    //   391: istore #8
    //   393: aload #15
    //   395: iload #4
    //   397: iload #11
    //   399: iload #8
    //   401: aload #15
    //   403: invokevirtual getMeasuredHeight : ()I
    //   406: iload #11
    //   408: iadd
    //   409: invokevirtual layout : (IIII)V
    //   412: iload_2
    //   413: aload #15
    //   415: invokevirtual getWidth : ()I
    //   418: iadd
    //   419: istore_2
    //   420: iload #7
    //   422: iconst_1
    //   423: iadd
    //   424: istore #7
    //   426: goto -> 127
    //   429: aload_0
    //   430: getfield mFirstLayout : Z
    //   433: ifeq -> 530
    //   436: aload_0
    //   437: getfield mCanSlide : Z
    //   440: ifeq -> 493
    //   443: aload_0
    //   444: getfield mParallaxBy : I
    //   447: ifeq -> 458
    //   450: aload_0
    //   451: aload_0
    //   452: getfield mSlideOffset : F
    //   455: invokespecial parallaxOtherViews : (F)V
    //   458: aload_0
    //   459: getfield mSlideableView : Landroid/view/View;
    //   462: invokevirtual getLayoutParams : ()Landroid/view/ViewGroup$LayoutParams;
    //   465: checkcast android/support/v4/widget/SlidingPaneLayout$LayoutParams
    //   468: getfield dimWhenOffset : Z
    //   471: ifeq -> 522
    //   474: aload_0
    //   475: aload_0
    //   476: getfield mSlideableView : Landroid/view/View;
    //   479: aload_0
    //   480: getfield mSlideOffset : F
    //   483: aload_0
    //   484: getfield mSliderFadeColor : I
    //   487: invokespecial dimChildView : (Landroid/view/View;FI)V
    //   490: goto -> 522
    //   493: iconst_0
    //   494: istore_2
    //   495: iload_2
    //   496: iload #10
    //   498: if_icmpge -> 522
    //   501: aload_0
    //   502: aload_0
    //   503: iload_2
    //   504: invokevirtual getChildAt : (I)Landroid/view/View;
    //   507: fconst_0
    //   508: aload_0
    //   509: getfield mSliderFadeColor : I
    //   512: invokespecial dimChildView : (Landroid/view/View;FI)V
    //   515: iload_2
    //   516: iconst_1
    //   517: iadd
    //   518: istore_2
    //   519: goto -> 495
    //   522: aload_0
    //   523: aload_0
    //   524: getfield mSlideableView : Landroid/view/View;
    //   527: invokevirtual updateObscuredViewsVisibility : (Landroid/view/View;)V
    //   530: aload_0
    //   531: iconst_0
    //   532: putfield mFirstLayout : Z
    //   535: return }
  
  protected void onMeasure(int paramInt1, int paramInt2) { // Byte code:
    //   0: iload_1
    //   1: invokestatic getMode : (I)I
    //   4: istore #8
    //   6: iload_1
    //   7: invokestatic getSize : (I)I
    //   10: istore #5
    //   12: iload_2
    //   13: invokestatic getMode : (I)I
    //   16: istore #6
    //   18: iload_2
    //   19: invokestatic getSize : (I)I
    //   22: istore_2
    //   23: iload #8
    //   25: ldc_w 1073741824
    //   28: if_icmpeq -> 99
    //   31: aload_0
    //   32: invokevirtual isInEditMode : ()Z
    //   35: ifeq -> 88
    //   38: iload #8
    //   40: ldc_w -2147483648
    //   43: if_icmpne -> 59
    //   46: iload #5
    //   48: istore #7
    //   50: iload #6
    //   52: istore #9
    //   54: iload_2
    //   55: istore_1
    //   56: goto -> 163
    //   59: iload #5
    //   61: istore #7
    //   63: iload #6
    //   65: istore #9
    //   67: iload_2
    //   68: istore_1
    //   69: iload #8
    //   71: ifne -> 163
    //   74: sipush #300
    //   77: istore #7
    //   79: iload #6
    //   81: istore #9
    //   83: iload_2
    //   84: istore_1
    //   85: goto -> 163
    //   88: new java/lang/IllegalStateException
    //   91: dup
    //   92: ldc_w 'Width must have an exact value or MATCH_PARENT'
    //   95: invokespecial <init> : (Ljava/lang/String;)V
    //   98: athrow
    //   99: iload #5
    //   101: istore #7
    //   103: iload #6
    //   105: istore #9
    //   107: iload_2
    //   108: istore_1
    //   109: iload #6
    //   111: ifne -> 163
    //   114: aload_0
    //   115: invokevirtual isInEditMode : ()Z
    //   118: ifeq -> 152
    //   121: iload #5
    //   123: istore #7
    //   125: iload #6
    //   127: istore #9
    //   129: iload_2
    //   130: istore_1
    //   131: iload #6
    //   133: ifne -> 163
    //   136: ldc_w -2147483648
    //   139: istore #9
    //   141: sipush #300
    //   144: istore_1
    //   145: iload #5
    //   147: istore #7
    //   149: goto -> 163
    //   152: new java/lang/IllegalStateException
    //   155: dup
    //   156: ldc_w 'Height must not be UNSPECIFIED'
    //   159: invokespecial <init> : (Ljava/lang/String;)V
    //   162: athrow
    //   163: iload #9
    //   165: ldc_w -2147483648
    //   168: if_icmpeq -> 203
    //   171: iload #9
    //   173: ldc_w 1073741824
    //   176: if_icmpeq -> 186
    //   179: iconst_0
    //   180: istore_1
    //   181: iconst_0
    //   182: istore_2
    //   183: goto -> 217
    //   186: iload_1
    //   187: aload_0
    //   188: invokevirtual getPaddingTop : ()I
    //   191: isub
    //   192: aload_0
    //   193: invokevirtual getPaddingBottom : ()I
    //   196: isub
    //   197: istore_1
    //   198: iload_1
    //   199: istore_2
    //   200: goto -> 217
    //   203: iload_1
    //   204: aload_0
    //   205: invokevirtual getPaddingTop : ()I
    //   208: isub
    //   209: aload_0
    //   210: invokevirtual getPaddingBottom : ()I
    //   213: isub
    //   214: istore_2
    //   215: iconst_0
    //   216: istore_1
    //   217: iload #7
    //   219: aload_0
    //   220: invokevirtual getPaddingLeft : ()I
    //   223: isub
    //   224: aload_0
    //   225: invokevirtual getPaddingRight : ()I
    //   228: isub
    //   229: istore #11
    //   231: aload_0
    //   232: invokevirtual getChildCount : ()I
    //   235: istore #12
    //   237: iload #12
    //   239: iconst_2
    //   240: if_icmple -> 252
    //   243: ldc 'SlidingPaneLayout'
    //   245: ldc_w 'onMeasure: More than two child views are not supported.'
    //   248: invokestatic e : (Ljava/lang/String;Ljava/lang/String;)I
    //   251: pop
    //   252: aload_0
    //   253: aconst_null
    //   254: putfield mSlideableView : Landroid/view/View;
    //   257: iload #11
    //   259: istore #8
    //   261: iconst_0
    //   262: istore #10
    //   264: iconst_0
    //   265: istore #15
    //   267: fconst_0
    //   268: fstore #4
    //   270: iload_1
    //   271: istore #5
    //   273: iload #10
    //   275: iload #12
    //   277: if_icmpge -> 607
    //   280: aload_0
    //   281: iload #10
    //   283: invokevirtual getChildAt : (I)Landroid/view/View;
    //   286: astore #17
    //   288: aload #17
    //   290: invokevirtual getLayoutParams : ()Landroid/view/ViewGroup$LayoutParams;
    //   293: checkcast android/support/v4/widget/SlidingPaneLayout$LayoutParams
    //   296: astore #18
    //   298: aload #17
    //   300: invokevirtual getVisibility : ()I
    //   303: bipush #8
    //   305: if_icmpne -> 323
    //   308: aload #18
    //   310: iconst_0
    //   311: putfield dimWhenOffset : Z
    //   314: fload #4
    //   316: fstore_3
    //   317: iload #5
    //   319: istore_1
    //   320: goto -> 592
    //   323: fload #4
    //   325: fstore_3
    //   326: aload #18
    //   328: getfield weight : F
    //   331: fconst_0
    //   332: fcmpl
    //   333: ifle -> 366
    //   336: fload #4
    //   338: aload #18
    //   340: getfield weight : F
    //   343: fadd
    //   344: fstore #4
    //   346: fload #4
    //   348: fstore_3
    //   349: aload #18
    //   351: getfield width : I
    //   354: ifne -> 366
    //   357: fload #4
    //   359: fstore_3
    //   360: iload #5
    //   362: istore_1
    //   363: goto -> 592
    //   366: aload #18
    //   368: getfield leftMargin : I
    //   371: aload #18
    //   373: getfield rightMargin : I
    //   376: iadd
    //   377: istore_1
    //   378: aload #18
    //   380: getfield width : I
    //   383: bipush #-2
    //   385: if_icmpne -> 402
    //   388: iload #11
    //   390: iload_1
    //   391: isub
    //   392: ldc_w -2147483648
    //   395: invokestatic makeMeasureSpec : (II)I
    //   398: istore_1
    //   399: goto -> 437
    //   402: aload #18
    //   404: getfield width : I
    //   407: iconst_m1
    //   408: if_icmpne -> 425
    //   411: iload #11
    //   413: iload_1
    //   414: isub
    //   415: ldc_w 1073741824
    //   418: invokestatic makeMeasureSpec : (II)I
    //   421: istore_1
    //   422: goto -> 437
    //   425: aload #18
    //   427: getfield width : I
    //   430: ldc_w 1073741824
    //   433: invokestatic makeMeasureSpec : (II)I
    //   436: istore_1
    //   437: aload #18
    //   439: getfield height : I
    //   442: bipush #-2
    //   444: if_icmpne -> 459
    //   447: iload_2
    //   448: ldc_w -2147483648
    //   451: invokestatic makeMeasureSpec : (II)I
    //   454: istore #6
    //   456: goto -> 493
    //   459: aload #18
    //   461: getfield height : I
    //   464: iconst_m1
    //   465: if_icmpne -> 480
    //   468: iload_2
    //   469: ldc_w 1073741824
    //   472: invokestatic makeMeasureSpec : (II)I
    //   475: istore #6
    //   477: goto -> 493
    //   480: aload #18
    //   482: getfield height : I
    //   485: ldc_w 1073741824
    //   488: invokestatic makeMeasureSpec : (II)I
    //   491: istore #6
    //   493: aload #17
    //   495: iload_1
    //   496: iload #6
    //   498: invokevirtual measure : (II)V
    //   501: aload #17
    //   503: invokevirtual getMeasuredWidth : ()I
    //   506: istore #6
    //   508: aload #17
    //   510: invokevirtual getMeasuredHeight : ()I
    //   513: istore #13
    //   515: iload #5
    //   517: istore_1
    //   518: iload #9
    //   520: ldc_w -2147483648
    //   523: if_icmpne -> 543
    //   526: iload #5
    //   528: istore_1
    //   529: iload #13
    //   531: iload #5
    //   533: if_icmple -> 543
    //   536: iload #13
    //   538: iload_2
    //   539: invokestatic min : (II)I
    //   542: istore_1
    //   543: iload #8
    //   545: iload #6
    //   547: isub
    //   548: istore #8
    //   550: iload #8
    //   552: ifge -> 561
    //   555: iconst_1
    //   556: istore #16
    //   558: goto -> 564
    //   561: iconst_0
    //   562: istore #16
    //   564: aload #18
    //   566: iload #16
    //   568: putfield slideable : Z
    //   571: aload #18
    //   573: getfield slideable : Z
    //   576: ifeq -> 585
    //   579: aload_0
    //   580: aload #17
    //   582: putfield mSlideableView : Landroid/view/View;
    //   585: iload #16
    //   587: iload #15
    //   589: ior
    //   590: istore #15
    //   592: iload #10
    //   594: iconst_1
    //   595: iadd
    //   596: istore #10
    //   598: fload_3
    //   599: fstore #4
    //   601: iload_1
    //   602: istore #5
    //   604: goto -> 273
    //   607: iload #15
    //   609: ifne -> 619
    //   612: fload #4
    //   614: fconst_0
    //   615: fcmpl
    //   616: ifle -> 1032
    //   619: iload #11
    //   621: aload_0
    //   622: getfield mOverhangSize : I
    //   625: isub
    //   626: istore #6
    //   628: iconst_0
    //   629: istore #9
    //   631: iload #9
    //   633: iload #12
    //   635: if_icmpge -> 1032
    //   638: aload_0
    //   639: iload #9
    //   641: invokevirtual getChildAt : (I)Landroid/view/View;
    //   644: astore #17
    //   646: aload #17
    //   648: invokevirtual getVisibility : ()I
    //   651: bipush #8
    //   653: if_icmpne -> 659
    //   656: goto -> 1023
    //   659: aload #17
    //   661: invokevirtual getLayoutParams : ()Landroid/view/ViewGroup$LayoutParams;
    //   664: checkcast android/support/v4/widget/SlidingPaneLayout$LayoutParams
    //   667: astore #18
    //   669: aload #17
    //   671: invokevirtual getVisibility : ()I
    //   674: bipush #8
    //   676: if_icmpne -> 682
    //   679: goto -> 656
    //   682: aload #18
    //   684: getfield width : I
    //   687: ifne -> 705
    //   690: aload #18
    //   692: getfield weight : F
    //   695: fconst_0
    //   696: fcmpl
    //   697: ifle -> 705
    //   700: iconst_1
    //   701: istore_1
    //   702: goto -> 707
    //   705: iconst_0
    //   706: istore_1
    //   707: iload_1
    //   708: ifeq -> 717
    //   711: iconst_0
    //   712: istore #10
    //   714: goto -> 724
    //   717: aload #17
    //   719: invokevirtual getMeasuredWidth : ()I
    //   722: istore #10
    //   724: iload #15
    //   726: ifeq -> 852
    //   729: aload #17
    //   731: aload_0
    //   732: getfield mSlideableView : Landroid/view/View;
    //   735: if_acmpeq -> 852
    //   738: aload #18
    //   740: getfield width : I
    //   743: ifge -> 656
    //   746: iload #10
    //   748: iload #6
    //   750: if_icmpgt -> 763
    //   753: aload #18
    //   755: getfield weight : F
    //   758: fconst_0
    //   759: fcmpl
    //   760: ifle -> 656
    //   763: iload_1
    //   764: ifeq -> 823
    //   767: aload #18
    //   769: getfield height : I
    //   772: bipush #-2
    //   774: if_icmpne -> 788
    //   777: iload_2
    //   778: ldc_w -2147483648
    //   781: invokestatic makeMeasureSpec : (II)I
    //   784: istore_1
    //   785: goto -> 835
    //   788: aload #18
    //   790: getfield height : I
    //   793: iconst_m1
    //   794: if_icmpne -> 808
    //   797: iload_2
    //   798: ldc_w 1073741824
    //   801: invokestatic makeMeasureSpec : (II)I
    //   804: istore_1
    //   805: goto -> 835
    //   808: aload #18
    //   810: getfield height : I
    //   813: ldc_w 1073741824
    //   816: invokestatic makeMeasureSpec : (II)I
    //   819: istore_1
    //   820: goto -> 835
    //   823: aload #17
    //   825: invokevirtual getMeasuredHeight : ()I
    //   828: ldc_w 1073741824
    //   831: invokestatic makeMeasureSpec : (II)I
    //   834: istore_1
    //   835: aload #17
    //   837: iload #6
    //   839: ldc_w 1073741824
    //   842: invokestatic makeMeasureSpec : (II)I
    //   845: iload_1
    //   846: invokevirtual measure : (II)V
    //   849: goto -> 656
    //   852: aload #18
    //   854: getfield weight : F
    //   857: fconst_0
    //   858: fcmpl
    //   859: ifle -> 656
    //   862: aload #18
    //   864: getfield width : I
    //   867: ifne -> 926
    //   870: aload #18
    //   872: getfield height : I
    //   875: bipush #-2
    //   877: if_icmpne -> 891
    //   880: iload_2
    //   881: ldc_w -2147483648
    //   884: invokestatic makeMeasureSpec : (II)I
    //   887: istore_1
    //   888: goto -> 938
    //   891: aload #18
    //   893: getfield height : I
    //   896: iconst_m1
    //   897: if_icmpne -> 911
    //   900: iload_2
    //   901: ldc_w 1073741824
    //   904: invokestatic makeMeasureSpec : (II)I
    //   907: istore_1
    //   908: goto -> 938
    //   911: aload #18
    //   913: getfield height : I
    //   916: ldc_w 1073741824
    //   919: invokestatic makeMeasureSpec : (II)I
    //   922: istore_1
    //   923: goto -> 938
    //   926: aload #17
    //   928: invokevirtual getMeasuredHeight : ()I
    //   931: ldc_w 1073741824
    //   934: invokestatic makeMeasureSpec : (II)I
    //   937: istore_1
    //   938: iload #15
    //   940: ifeq -> 987
    //   943: iload #11
    //   945: aload #18
    //   947: getfield leftMargin : I
    //   950: aload #18
    //   952: getfield rightMargin : I
    //   955: iadd
    //   956: isub
    //   957: istore #13
    //   959: iload #13
    //   961: ldc_w 1073741824
    //   964: invokestatic makeMeasureSpec : (II)I
    //   967: istore #14
    //   969: iload #10
    //   971: iload #13
    //   973: if_icmpeq -> 656
    //   976: aload #17
    //   978: iload #14
    //   980: iload_1
    //   981: invokevirtual measure : (II)V
    //   984: goto -> 656
    //   987: iconst_0
    //   988: iload #8
    //   990: invokestatic max : (II)I
    //   993: istore #13
    //   995: aload #17
    //   997: iload #10
    //   999: aload #18
    //   1001: getfield weight : F
    //   1004: iload #13
    //   1006: i2f
    //   1007: fmul
    //   1008: fload #4
    //   1010: fdiv
    //   1011: f2i
    //   1012: iadd
    //   1013: ldc_w 1073741824
    //   1016: invokestatic makeMeasureSpec : (II)I
    //   1019: iload_1
    //   1020: invokevirtual measure : (II)V
    //   1023: iload #9
    //   1025: iconst_1
    //   1026: iadd
    //   1027: istore #9
    //   1029: goto -> 631
    //   1032: aload_0
    //   1033: iload #7
    //   1035: iload #5
    //   1037: aload_0
    //   1038: invokevirtual getPaddingTop : ()I
    //   1041: iadd
    //   1042: aload_0
    //   1043: invokevirtual getPaddingBottom : ()I
    //   1046: iadd
    //   1047: invokevirtual setMeasuredDimension : (II)V
    //   1050: aload_0
    //   1051: iload #15
    //   1053: putfield mCanSlide : Z
    //   1056: aload_0
    //   1057: getfield mDragHelper : Landroid/support/v4/widget/ViewDragHelper;
    //   1060: invokevirtual getViewDragState : ()I
    //   1063: ifeq -> 1078
    //   1066: iload #15
    //   1068: ifne -> 1078
    //   1071: aload_0
    //   1072: getfield mDragHelper : Landroid/support/v4/widget/ViewDragHelper;
    //   1075: invokevirtual abort : ()V
    //   1078: return }
  
  void onPanelDragged(int paramInt) {
    if (this.mSlideableView == null) {
      this.mSlideOffset = 0.0F;
      return;
    } 
    boolean bool = isLayoutRtlSupport();
    LayoutParams layoutParams = (LayoutParams)this.mSlideableView.getLayoutParams();
    int j = this.mSlideableView.getWidth();
    int i = paramInt;
    if (bool)
      i = getWidth() - paramInt - j; 
    if (bool) {
      paramInt = getPaddingRight();
    } else {
      paramInt = getPaddingLeft();
    } 
    if (bool) {
      j = layoutParams.rightMargin;
    } else {
      j = layoutParams.leftMargin;
    } 
    this.mSlideOffset = (i - paramInt + j) / this.mSlideRange;
    if (this.mParallaxBy != 0)
      parallaxOtherViews(this.mSlideOffset); 
    if (layoutParams.dimWhenOffset)
      dimChildView(this.mSlideableView, this.mSlideOffset, this.mSliderFadeColor); 
    dispatchOnPanelSlide(this.mSlideableView);
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable) {
    if (!(paramParcelable instanceof SavedState)) {
      super.onRestoreInstanceState(paramParcelable);
      return;
    } 
    SavedState savedState = (SavedState)paramParcelable;
    super.onRestoreInstanceState(savedState.getSuperState());
    if (savedState.isOpen) {
      openPane();
    } else {
      closePane();
    } 
    this.mPreservedOpenState = savedState.isOpen;
  }
  
  protected Parcelable onSaveInstanceState() {
    boolean bool;
    SavedState savedState = new SavedState(super.onSaveInstanceState());
    if (isSlideable()) {
      bool = isOpen();
    } else {
      bool = this.mPreservedOpenState;
    } 
    savedState.isOpen = bool;
    return savedState;
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    super.onSizeChanged(paramInt1, paramInt2, paramInt3, paramInt4);
    if (paramInt1 != paramInt3)
      this.mFirstLayout = true; 
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent) {
    if (!this.mCanSlide)
      return super.onTouchEvent(paramMotionEvent); 
    this.mDragHelper.processTouchEvent(paramMotionEvent);
    int i = paramMotionEvent.getActionMasked();
    if (i != 0) {
      if (i != 1)
        return true; 
      if (isDimmed(this.mSlideableView)) {
        float f1 = paramMotionEvent.getX();
        float f2 = paramMotionEvent.getY();
        float f3 = f1 - this.mInitialMotionX;
        float f4 = f2 - this.mInitialMotionY;
        i = this.mDragHelper.getTouchSlop();
        if (f3 * f3 + f4 * f4 < (i * i) && this.mDragHelper.isViewUnder(this.mSlideableView, (int)f1, (int)f2)) {
          closePane(this.mSlideableView, 0);
          return true;
        } 
      } 
    } else {
      float f1 = paramMotionEvent.getX();
      float f2 = paramMotionEvent.getY();
      this.mInitialMotionX = f1;
      this.mInitialMotionY = f2;
    } 
    return true;
  }
  
  public boolean openPane() { return openPane(this.mSlideableView, 0); }
  
  public void requestChildFocus(View paramView1, View paramView2) {
    super.requestChildFocus(paramView1, paramView2);
    if (!isInTouchMode() && !this.mCanSlide) {
      boolean bool;
      if (paramView1 == this.mSlideableView) {
        bool = true;
      } else {
        bool = false;
      } 
      this.mPreservedOpenState = bool;
    } 
  }
  
  void setAllChildrenVisible() {
    int i = getChildCount();
    for (byte b = 0; b < i; b++) {
      View view = getChildAt(b);
      if (view.getVisibility() == 4)
        view.setVisibility(0); 
    } 
  }
  
  public void setCoveredFadeColor(@ColorInt int paramInt) { this.mCoveredFadeColor = paramInt; }
  
  public void setPanelSlideListener(@Nullable PanelSlideListener paramPanelSlideListener) { this.mPanelSlideListener = paramPanelSlideListener; }
  
  public void setParallaxDistance(@Px int paramInt) {
    this.mParallaxBy = paramInt;
    requestLayout();
  }
  
  @Deprecated
  public void setShadowDrawable(Drawable paramDrawable) { setShadowDrawableLeft(paramDrawable); }
  
  public void setShadowDrawableLeft(@Nullable Drawable paramDrawable) { this.mShadowDrawableLeft = paramDrawable; }
  
  public void setShadowDrawableRight(@Nullable Drawable paramDrawable) { this.mShadowDrawableRight = paramDrawable; }
  
  @Deprecated
  public void setShadowResource(@DrawableRes int paramInt) { setShadowDrawable(getResources().getDrawable(paramInt)); }
  
  public void setShadowResourceLeft(int paramInt) { setShadowDrawableLeft(ContextCompat.getDrawable(getContext(), paramInt)); }
  
  public void setShadowResourceRight(int paramInt) { setShadowDrawableRight(ContextCompat.getDrawable(getContext(), paramInt)); }
  
  public void setSliderFadeColor(@ColorInt int paramInt) { this.mSliderFadeColor = paramInt; }
  
  @Deprecated
  public void smoothSlideClosed() { closePane(); }
  
  @Deprecated
  public void smoothSlideOpen() { openPane(); }
  
  boolean smoothSlideTo(float paramFloat, int paramInt) {
    if (!this.mCanSlide)
      return false; 
    boolean bool = isLayoutRtlSupport();
    LayoutParams layoutParams = (LayoutParams)this.mSlideableView.getLayoutParams();
    if (bool) {
      paramInt = getPaddingRight();
      int i = layoutParams.rightMargin;
      int j = this.mSlideableView.getWidth();
      paramInt = (int)(getWidth() - (paramInt + i) + paramFloat * this.mSlideRange + j);
    } else {
      paramInt = (int)((getPaddingLeft() + layoutParams.leftMargin) + paramFloat * this.mSlideRange);
    } 
    ViewDragHelper viewDragHelper = this.mDragHelper;
    View view = this.mSlideableView;
    if (viewDragHelper.smoothSlideViewTo(view, paramInt, view.getTop())) {
      setAllChildrenVisible();
      ViewCompat.postInvalidateOnAnimation(this);
      return true;
    } 
    return false;
  }
  
  void updateObscuredViewsVisibility(View paramView) {
    boolean bool4;
    boolean bool3;
    boolean bool2;
    boolean bool1;
    int j;
    int i;
    boolean bool = isLayoutRtlSupport();
    if (bool) {
      i = getWidth() - getPaddingRight();
    } else {
      i = getPaddingLeft();
    } 
    if (bool) {
      j = getPaddingLeft();
    } else {
      j = getWidth() - getPaddingRight();
    } 
    int k = getPaddingTop();
    int m = getHeight();
    int n = getPaddingBottom();
    if (paramView != null && viewIsOpaque(paramView)) {
      bool1 = paramView.getLeft();
      bool2 = paramView.getRight();
      bool3 = paramView.getTop();
      bool4 = paramView.getBottom();
    } else {
      bool1 = false;
      bool2 = false;
      bool3 = false;
      bool4 = false;
    } 
    int i1 = getChildCount();
    byte b;
    for (b = 0; b < i1; b++) {
      View view = getChildAt(b);
      if (view == paramView)
        return; 
      if (view.getVisibility() != 8) {
        if (bool) {
          i2 = j;
        } else {
          i2 = i;
        } 
        int i3 = Math.max(i2, view.getLeft());
        int i4 = Math.max(k, view.getTop());
        if (bool) {
          i2 = i;
        } else {
          i2 = j;
        } 
        int i2 = Math.min(i2, view.getRight());
        int i5 = Math.min(m - n, view.getBottom());
        if (i3 >= bool1 && i4 >= bool3 && i2 <= bool2 && i5 <= bool4) {
          i2 = 4;
        } else {
          i2 = 0;
        } 
        view.setVisibility(i2);
      } 
    } 
  }
}
