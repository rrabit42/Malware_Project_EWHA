package com.bumptech.glide.manager;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.Fragment;
import android.os.Build;
import com.bumptech.glide.RequestManager;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

@TargetApi(11)
public class RequestManagerFragment extends Fragment {
  private final HashSet<RequestManagerFragment> childRequestManagerFragments = new HashSet();
  
  private final ActivityFragmentLifecycle lifecycle;
  
  private RequestManager requestManager;
  
  private final RequestManagerTreeNode requestManagerTreeNode = new FragmentRequestManagerTreeNode(this, null);
  
  private RequestManagerFragment rootRequestManagerFragment;
  
  public RequestManagerFragment() { this(new ActivityFragmentLifecycle()); }
  
  @SuppressLint({"ValidFragment"})
  RequestManagerFragment(ActivityFragmentLifecycle paramActivityFragmentLifecycle) { this.lifecycle = paramActivityFragmentLifecycle; }
  
  private void addChildRequestManagerFragment(RequestManagerFragment paramRequestManagerFragment) { this.childRequestManagerFragments.add(paramRequestManagerFragment); }
  
  @TargetApi(17)
  private boolean isDescendant(Fragment paramFragment) {
    Fragment fragment = getParentFragment();
    while (paramFragment.getParentFragment() != null) {
      if (paramFragment.getParentFragment() == fragment)
        return true; 
      paramFragment = paramFragment.getParentFragment();
    } 
    return false;
  }
  
  private void removeChildRequestManagerFragment(RequestManagerFragment paramRequestManagerFragment) { this.childRequestManagerFragments.remove(paramRequestManagerFragment); }
  
  @TargetApi(17)
  public Set<RequestManagerFragment> getDescendantRequestManagerFragments() {
    RequestManagerFragment requestManagerFragment = this.rootRequestManagerFragment;
    if (requestManagerFragment == this)
      return Collections.unmodifiableSet(this.childRequestManagerFragments); 
    if (requestManagerFragment == null || Build.VERSION.SDK_INT < 17)
      return Collections.emptySet(); 
    HashSet hashSet = new HashSet();
    for (RequestManagerFragment requestManagerFragment1 : this.rootRequestManagerFragment.getDescendantRequestManagerFragments()) {
      if (isDescendant(requestManagerFragment1.getParentFragment()))
        hashSet.add(requestManagerFragment1); 
    } 
    return Collections.unmodifiableSet(hashSet);
  }
  
  ActivityFragmentLifecycle getLifecycle() { return this.lifecycle; }
  
  public RequestManager getRequestManager() { return this.requestManager; }
  
  public RequestManagerTreeNode getRequestManagerTreeNode() { return this.requestManagerTreeNode; }
  
  public void onAttach(Activity paramActivity) {
    super.onAttach(paramActivity);
    this.rootRequestManagerFragment = RequestManagerRetriever.get().getRequestManagerFragment(getActivity().getFragmentManager());
    RequestManagerFragment requestManagerFragment = this.rootRequestManagerFragment;
    if (requestManagerFragment != this)
      requestManagerFragment.addChildRequestManagerFragment(this); 
  }
  
  public void onDestroy() {
    super.onDestroy();
    this.lifecycle.onDestroy();
  }
  
  public void onDetach() {
    super.onDetach();
    RequestManagerFragment requestManagerFragment = this.rootRequestManagerFragment;
    if (requestManagerFragment != null) {
      requestManagerFragment.removeChildRequestManagerFragment(this);
      this.rootRequestManagerFragment = null;
    } 
  }
  
  public void onLowMemory() {
    RequestManager requestManager1 = this.requestManager;
    if (requestManager1 != null)
      requestManager1.onLowMemory(); 
  }
  
  public void onStart() {
    super.onStart();
    this.lifecycle.onStart();
  }
  
  public void onStop() {
    super.onStop();
    this.lifecycle.onStop();
  }
  
  public void onTrimMemory(int paramInt) {
    RequestManager requestManager1 = this.requestManager;
    if (requestManager1 != null)
      requestManager1.onTrimMemory(paramInt); 
  }
  
  public void setRequestManager(RequestManager paramRequestManager) { this.requestManager = paramRequestManager; }
}
