package androidx.work.impl;

import android.arch.lifecycle.LiveData;
import android.arch.lifecycle.MutableLiveData;
import android.support.annotation.NonNull;
import android.support.annotation.RestrictTo;
import androidx.work.Operation;
import androidx.work.impl.utils.futures.SettableFuture;
import com.google.common.util.concurrent.ListenableFuture;

@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
public class OperationImpl implements Operation {
  private final SettableFuture<Operation.State.SUCCESS> mOperationFuture = SettableFuture.create();
  
  private final MutableLiveData<Operation.State> mOperationState = new MutableLiveData();
  
  public OperationImpl() { setState(Operation.IN_PROGRESS); }
  
  @NonNull
  public ListenableFuture<Operation.State.SUCCESS> getResult() { return this.mOperationFuture; }
  
  @NonNull
  public LiveData<Operation.State> getState() { return this.mOperationState; }
  
  public void setState(@NonNull Operation.State paramState) {
    this.mOperationState.postValue(paramState);
    if (paramState instanceof Operation.State.SUCCESS) {
      this.mOperationFuture.set((Operation.State.SUCCESS)paramState);
      return;
    } 
    if (paramState instanceof Operation.State.FAILURE) {
      Operation.State.FAILURE fAILURE = (Operation.State.FAILURE)paramState;
      this.mOperationFuture.setException(fAILURE.getThrowable());
    } 
  }
}
