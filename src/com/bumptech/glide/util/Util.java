package com.bumptech.glide.util;

import android.annotation.TargetApi;
import android.graphics.Bitmap;
import android.os.Build;
import android.os.Looper;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Queue;

public final class Util {
  private static final char[] HEX_CHAR_ARRAY = "0123456789abcdef".toCharArray();
  
  private static final char[] SHA_1_CHARS;
  
  private static final char[] SHA_256_CHARS = new char[64];
  
  static  {
    SHA_1_CHARS = new char[40];
  }
  
  public static void assertBackgroundThread() {
    if (isOnBackgroundThread())
      return; 
    throw new IllegalArgumentException("YOu must call this method on a background thread");
  }
  
  public static void assertMainThread() {
    if (isOnMainThread())
      return; 
    throw new IllegalArgumentException("You must call this method on the main thread");
  }
  
  private static String bytesToHex(byte[] paramArrayOfByte, char[] paramArrayOfChar) {
    for (byte b = 0; b < paramArrayOfByte.length; b++) {
      byte b1 = paramArrayOfByte[b] & 0xFF;
      byte b2 = b * 2;
      char[] arrayOfChar = HEX_CHAR_ARRAY;
      paramArrayOfChar[b2] = arrayOfChar[b1 >>> 4];
      paramArrayOfChar[b2 + 1] = arrayOfChar[b1 & 0xF];
    } 
    return new String(paramArrayOfChar);
  }
  
  public static <T> Queue<T> createQueue(int paramInt) { return new ArrayDeque(paramInt); }
  
  public static int getBitmapByteSize(int paramInt1, int paramInt2, Bitmap.Config paramConfig) { return paramInt1 * paramInt2 * getBytesPerPixel(paramConfig); }
  
  @TargetApi(19)
  public static int getBitmapByteSize(Bitmap paramBitmap) {
    if (Build.VERSION.SDK_INT >= 19)
      try {
        return paramBitmap.getAllocationByteCount();
      } catch (NullPointerException nullPointerException) {} 
    return paramBitmap.getHeight() * paramBitmap.getRowBytes();
  }
  
  private static int getBytesPerPixel(Bitmap.Config paramConfig) {
    byte b1;
    Bitmap.Config config = paramConfig;
    if (paramConfig == null)
      config = Bitmap.Config.ARGB_8888; 
    int i = null.$SwitchMap$android$graphics$Bitmap$Config[config.ordinal()];
    byte b2 = 2;
    if (i != 1) {
      b1 = b2;
      if (i != 2) {
        b1 = b2;
        if (i != 3)
          return 4; 
      } 
    } else {
      b1 = 1;
    } 
    return b1;
  }
  
  @Deprecated
  public static int getSize(Bitmap paramBitmap) { return getBitmapByteSize(paramBitmap); }
  
  public static <T> List<T> getSnapshot(Collection<T> paramCollection) {
    ArrayList arrayList = new ArrayList(paramCollection.size());
    Iterator iterator = paramCollection.iterator();
    while (iterator.hasNext())
      arrayList.add(iterator.next()); 
    return arrayList;
  }
  
  public static boolean isOnBackgroundThread() { return isOnMainThread() ^ true; }
  
  public static boolean isOnMainThread() { return (Looper.myLooper() == Looper.getMainLooper()); }
  
  private static boolean isValidDimension(int paramInt) { return (paramInt > 0 || paramInt == Integer.MIN_VALUE); }
  
  public static boolean isValidDimensions(int paramInt1, int paramInt2) { return (isValidDimension(paramInt1) && isValidDimension(paramInt2)); }
  
  public static String sha1BytesToHex(byte[] paramArrayOfByte) {
    synchronized (SHA_1_CHARS) {
      return bytesToHex(paramArrayOfByte, SHA_1_CHARS);
    } 
  }
  
  public static String sha256BytesToHex(byte[] paramArrayOfByte) {
    synchronized (SHA_256_CHARS) {
      return bytesToHex(paramArrayOfByte, SHA_256_CHARS);
    } 
  }
}
