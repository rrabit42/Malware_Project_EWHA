package android.support.graphics.drawable;

import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.Matrix;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import android.graphics.Rect;
import android.graphics.Region;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.support.annotation.DrawableRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RestrictTo;
import android.support.v4.content.res.ResourcesCompat;
import android.support.v4.content.res.TypedArrayUtils;
import android.support.v4.graphics.drawable.DrawableCompat;
import android.util.AttributeSet;
import android.util.Log;
import android.util.Xml;
import java.io.IOException;
import java.util.ArrayDeque;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

public class VectorDrawableCompat extends VectorDrawableCommon {
  private static final boolean DBG_VECTOR_DRAWABLE = false;
  
  static final PorterDuff.Mode DEFAULT_TINT_MODE = PorterDuff.Mode.SRC_IN;
  
  private static final int LINECAP_BUTT = 0;
  
  private static final int LINECAP_ROUND = 1;
  
  private static final int LINECAP_SQUARE = 2;
  
  private static final int LINEJOIN_BEVEL = 2;
  
  private static final int LINEJOIN_MITER = 0;
  
  private static final int LINEJOIN_ROUND = 1;
  
  static final String LOGTAG = "VectorDrawableCompat";
  
  private static final int MAX_CACHED_BITMAP_SIZE = 2048;
  
  private static final String SHAPE_CLIP_PATH = "clip-path";
  
  private static final String SHAPE_GROUP = "group";
  
  private static final String SHAPE_PATH = "path";
  
  private static final String SHAPE_VECTOR = "vector";
  
  private boolean mAllowCaching = true;
  
  private Drawable.ConstantState mCachedConstantStateDelegate;
  
  private ColorFilter mColorFilter;
  
  private boolean mMutated;
  
  private PorterDuffColorFilter mTintFilter;
  
  private final Rect mTmpBounds = new Rect();
  
  private final float[] mTmpFloats = new float[9];
  
  private final Matrix mTmpMatrix = new Matrix();
  
  private VectorDrawableCompatState mVectorState = new VectorDrawableCompatState();
  
  VectorDrawableCompat() {}
  
  VectorDrawableCompat(@NonNull VectorDrawableCompatState paramVectorDrawableCompatState) { this.mTintFilter = updateTintFilter(this.mTintFilter, paramVectorDrawableCompatState.mTint, paramVectorDrawableCompatState.mTintMode); }
  
  static int applyAlpha(int paramInt, float paramFloat) { return paramInt & 0xFFFFFF | (int)(Color.alpha(paramInt) * paramFloat) << 24; }
  
  @Nullable
  public static VectorDrawableCompat create(@NonNull Resources paramResources, @DrawableRes int paramInt, @Nullable Resources.Theme paramTheme) {
    if (Build.VERSION.SDK_INT >= 24) {
      VectorDrawableCompat vectorDrawableCompat = new VectorDrawableCompat();
      vectorDrawableCompat.mDelegateDrawable = ResourcesCompat.getDrawable(paramResources, paramInt, paramTheme);
      vectorDrawableCompat.mCachedConstantStateDelegate = new VectorDrawableDelegateState(vectorDrawableCompat.mDelegateDrawable.getConstantState());
      return vectorDrawableCompat;
    } 
    try {
      XmlResourceParser xmlResourceParser = paramResources.getXml(paramInt);
      AttributeSet attributeSet = Xml.asAttributeSet(xmlResourceParser);
      while (true) {
        paramInt = xmlResourceParser.next();
        if (paramInt != 2 && paramInt != 1)
          continue; 
        break;
      } 
      if (paramInt == 2)
        return createFromXmlInner(paramResources, xmlResourceParser, attributeSet, paramTheme); 
      throw new XmlPullParserException("No start tag found");
    } catch (XmlPullParserException paramResources) {
      Log.e("VectorDrawableCompat", "parser error", paramResources);
    } catch (IOException paramResources) {
      Log.e("VectorDrawableCompat", "parser error", paramResources);
    } 
    return null;
  }
  
  public static VectorDrawableCompat createFromXmlInner(Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme) throws XmlPullParserException, IOException {
    VectorDrawableCompat vectorDrawableCompat = new VectorDrawableCompat();
    vectorDrawableCompat.inflate(paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
    return vectorDrawableCompat;
  }
  
  private void inflateInternal(Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme) throws XmlPullParserException, IOException {
    VectorDrawableCompatState vectorDrawableCompatState = this.mVectorState;
    VPathRenderer vPathRenderer = vectorDrawableCompatState.mVPathRenderer;
    ArrayDeque arrayDeque = new ArrayDeque();
    arrayDeque.push(vPathRenderer.mRootGroup);
    int j = paramXmlPullParser.getEventType();
    int k = paramXmlPullParser.getDepth();
    int i;
    for (i = 1; j != 1 && (paramXmlPullParser.getDepth() >= k + 1 || j != 3); i = m) {
      int m;
      if (j == 2) {
        VFullPath vFullPath = paramXmlPullParser.getName();
        VGroup vGroup = (VGroup)arrayDeque.peek();
        if ("path".equals(vFullPath)) {
          vFullPath = new VFullPath();
          vFullPath.inflate(paramResources, paramAttributeSet, paramTheme, paramXmlPullParser);
          vGroup.mChildren.add(vFullPath);
          if (vFullPath.getPathName() != null)
            vPathRenderer.mVGTargetsMap.put(vFullPath.getPathName(), vFullPath); 
          m = 0;
          i = vectorDrawableCompatState.mChangingConfigurations;
          vectorDrawableCompatState.mChangingConfigurations = vFullPath.mChangingConfigurations | i;
        } else {
          VClipPath vClipPath;
          if ("clip-path".equals(vFullPath)) {
            vClipPath = new VClipPath();
            vClipPath.inflate(paramResources, paramAttributeSet, paramTheme, paramXmlPullParser);
            vGroup.mChildren.add(vClipPath);
            if (vClipPath.getPathName() != null)
              vPathRenderer.mVGTargetsMap.put(vClipPath.getPathName(), vClipPath); 
            m = vectorDrawableCompatState.mChangingConfigurations;
            vectorDrawableCompatState.mChangingConfigurations = vClipPath.mChangingConfigurations | m;
            m = i;
          } else {
            m = i;
            if ("group".equals(vClipPath)) {
              VGroup vGroup1 = new VGroup();
              vGroup1.inflate(paramResources, paramAttributeSet, paramTheme, paramXmlPullParser);
              vGroup.mChildren.add(vGroup1);
              arrayDeque.push(vGroup1);
              if (vGroup1.getGroupName() != null)
                vPathRenderer.mVGTargetsMap.put(vGroup1.getGroupName(), vGroup1); 
              m = vectorDrawableCompatState.mChangingConfigurations;
              vectorDrawableCompatState.mChangingConfigurations = vGroup1.mChangingConfigurations | m;
              m = i;
            } 
          } 
        } 
      } else {
        m = i;
        if (j == 3) {
          m = i;
          if ("group".equals(paramXmlPullParser.getName())) {
            arrayDeque.pop();
            m = i;
          } 
        } 
      } 
      j = paramXmlPullParser.next();
    } 
    if (i == 0)
      return; 
    XmlPullParserException xmlPullParserException = new XmlPullParserException("no path defined");
    throw xmlPullParserException;
  }
  
  private boolean needMirroring() {
    int i = Build.VERSION.SDK_INT;
    byte b = 0;
    int j = b;
    if (i >= 17) {
      j = b;
      if (isAutoMirrored()) {
        j = b;
        if (DrawableCompat.getLayoutDirection(this) == 1)
          j = 1; 
      } 
    } 
    return j;
  }
  
  private static PorterDuff.Mode parseTintModeCompat(int paramInt, PorterDuff.Mode paramMode) {
    if (paramInt != 3) {
      if (paramInt != 5) {
        if (paramInt != 9) {
          switch (paramInt) {
            default:
              return paramMode;
            case 16:
              return PorterDuff.Mode.ADD;
            case 15:
              return PorterDuff.Mode.SCREEN;
            case 14:
              break;
          } 
          return PorterDuff.Mode.MULTIPLY;
        } 
        return PorterDuff.Mode.SRC_ATOP;
      } 
      return PorterDuff.Mode.SRC_IN;
    } 
    return PorterDuff.Mode.SRC_OVER;
  }
  
  private void printGroupTree(VGroup paramVGroup, int paramInt) {
    byte b2 = 0;
    String str = "";
    byte b1;
    for (b1 = 0; b1 < paramInt; b1++) {
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append(str);
      stringBuilder1.append("    ");
      str = stringBuilder1.toString();
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(str);
    stringBuilder.append("current group is :");
    stringBuilder.append(paramVGroup.getGroupName());
    stringBuilder.append(" rotation is ");
    stringBuilder.append(paramVGroup.mRotate);
    Log.v("VectorDrawableCompat", stringBuilder.toString());
    stringBuilder = new StringBuilder();
    stringBuilder.append(str);
    stringBuilder.append("matrix is :");
    stringBuilder.append(paramVGroup.getLocalMatrix().toString());
    Log.v("VectorDrawableCompat", stringBuilder.toString());
    for (b1 = b2; b1 < paramVGroup.mChildren.size(); b1++) {
      VObject vObject = (VObject)paramVGroup.mChildren.get(b1);
      if (vObject instanceof VGroup) {
        printGroupTree((VGroup)vObject, paramInt + 1);
      } else {
        ((VPath)vObject).printVPath(paramInt + 1);
      } 
    } 
  }
  
  private void updateStateFromTypedArray(TypedArray paramTypedArray, XmlPullParser paramXmlPullParser) throws XmlPullParserException {
    String str;
    VectorDrawableCompatState vectorDrawableCompatState = this.mVectorState;
    VPathRenderer vPathRenderer = vectorDrawableCompatState.mVPathRenderer;
    vectorDrawableCompatState.mTintMode = parseTintModeCompat(TypedArrayUtils.getNamedInt(paramTypedArray, paramXmlPullParser, "tintMode", 6, -1), PorterDuff.Mode.SRC_IN);
    ColorStateList colorStateList = paramTypedArray.getColorStateList(1);
    if (colorStateList != null)
      vectorDrawableCompatState.mTint = colorStateList; 
    vectorDrawableCompatState.mAutoMirrored = TypedArrayUtils.getNamedBoolean(paramTypedArray, paramXmlPullParser, "autoMirrored", 5, vectorDrawableCompatState.mAutoMirrored);
    vPathRenderer.mViewportWidth = TypedArrayUtils.getNamedFloat(paramTypedArray, paramXmlPullParser, "viewportWidth", 7, vPathRenderer.mViewportWidth);
    vPathRenderer.mViewportHeight = TypedArrayUtils.getNamedFloat(paramTypedArray, paramXmlPullParser, "viewportHeight", 8, vPathRenderer.mViewportHeight);
    if (vPathRenderer.mViewportWidth > 0.0F) {
      if (vPathRenderer.mViewportHeight > 0.0F) {
        vPathRenderer.mBaseWidth = paramTypedArray.getDimension(3, vPathRenderer.mBaseWidth);
        vPathRenderer.mBaseHeight = paramTypedArray.getDimension(2, vPathRenderer.mBaseHeight);
        if (vPathRenderer.mBaseWidth > 0.0F) {
          if (vPathRenderer.mBaseHeight > 0.0F) {
            vPathRenderer.setAlpha(TypedArrayUtils.getNamedFloat(paramTypedArray, paramXmlPullParser, "alpha", 4, vPathRenderer.getAlpha()));
            str = paramTypedArray.getString(0);
            if (str != null) {
              vPathRenderer.mRootName = str;
              vPathRenderer.mVGTargetsMap.put(str, vPathRenderer);
            } 
            return;
          } 
          StringBuilder stringBuilder3 = new StringBuilder();
          stringBuilder3.append(str.getPositionDescription());
          stringBuilder3.append("<vector> tag requires height > 0");
          throw new XmlPullParserException(stringBuilder3.toString());
        } 
        StringBuilder stringBuilder2 = new StringBuilder();
        stringBuilder2.append(str.getPositionDescription());
        stringBuilder2.append("<vector> tag requires width > 0");
        throw new XmlPullParserException(stringBuilder2.toString());
      } 
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append(str.getPositionDescription());
      stringBuilder1.append("<vector> tag requires viewportHeight > 0");
      throw new XmlPullParserException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(str.getPositionDescription());
    stringBuilder.append("<vector> tag requires viewportWidth > 0");
    throw new XmlPullParserException(stringBuilder.toString());
  }
  
  public boolean canApplyTheme() {
    if (this.mDelegateDrawable != null)
      DrawableCompat.canApplyTheme(this.mDelegateDrawable); 
    return false;
  }
  
  public void draw(Canvas paramCanvas) {
    if (this.mDelegateDrawable != null) {
      this.mDelegateDrawable.draw(paramCanvas);
      return;
    } 
    copyBounds(this.mTmpBounds);
    if (this.mTmpBounds.width() > 0) {
      if (this.mTmpBounds.height() <= 0)
        return; 
      ColorFilter colorFilter = this.mColorFilter;
      PorterDuffColorFilter porterDuffColorFilter = colorFilter;
      if (colorFilter == null)
        porterDuffColorFilter = this.mTintFilter; 
      paramCanvas.getMatrix(this.mTmpMatrix);
      this.mTmpMatrix.getValues(this.mTmpFloats);
      float f1 = Math.abs(this.mTmpFloats[0]);
      float f2 = Math.abs(this.mTmpFloats[4]);
      float f4 = Math.abs(this.mTmpFloats[1]);
      float f3 = Math.abs(this.mTmpFloats[3]);
      if (f4 != 0.0F || f3 != 0.0F) {
        f1 = 1.0F;
        f2 = 1.0F;
      } 
      int i = (int)(this.mTmpBounds.width() * f1);
      int j = (int)(this.mTmpBounds.height() * f2);
      i = Math.min(2048, i);
      j = Math.min(2048, j);
      if (i > 0) {
        if (j <= 0)
          return; 
        int k = paramCanvas.save();
        paramCanvas.translate(this.mTmpBounds.left, this.mTmpBounds.top);
        if (needMirroring()) {
          paramCanvas.translate(this.mTmpBounds.width(), 0.0F);
          paramCanvas.scale(-1.0F, 1.0F);
        } 
        this.mTmpBounds.offsetTo(0, 0);
        this.mVectorState.createCachedBitmapIfNeeded(i, j);
        if (!this.mAllowCaching) {
          this.mVectorState.updateCachedBitmap(i, j);
        } else if (!this.mVectorState.canReuseCache()) {
          this.mVectorState.updateCachedBitmap(i, j);
          this.mVectorState.updateCacheStates();
        } 
        this.mVectorState.drawCachedBitmapWithRootAlpha(paramCanvas, porterDuffColorFilter, this.mTmpBounds);
        paramCanvas.restoreToCount(k);
      } 
    } 
  }
  
  public int getAlpha() { return (this.mDelegateDrawable != null) ? DrawableCompat.getAlpha(this.mDelegateDrawable) : this.mVectorState.mVPathRenderer.getRootAlpha(); }
  
  public int getChangingConfigurations() { return (this.mDelegateDrawable != null) ? this.mDelegateDrawable.getChangingConfigurations() : (super.getChangingConfigurations() | this.mVectorState.getChangingConfigurations()); }
  
  public Drawable.ConstantState getConstantState() {
    if (this.mDelegateDrawable != null && Build.VERSION.SDK_INT >= 24)
      return new VectorDrawableDelegateState(this.mDelegateDrawable.getConstantState()); 
    this.mVectorState.mChangingConfigurations = getChangingConfigurations();
    return this.mVectorState;
  }
  
  public int getIntrinsicHeight() { return (this.mDelegateDrawable != null) ? this.mDelegateDrawable.getIntrinsicHeight() : (int)this.mVectorState.mVPathRenderer.mBaseHeight; }
  
  public int getIntrinsicWidth() { return (this.mDelegateDrawable != null) ? this.mDelegateDrawable.getIntrinsicWidth() : (int)this.mVectorState.mVPathRenderer.mBaseWidth; }
  
  public int getOpacity() { return (this.mDelegateDrawable != null) ? this.mDelegateDrawable.getOpacity() : -3; }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public float getPixelSize() {
    VectorDrawableCompatState vectorDrawableCompatState = this.mVectorState;
    if (vectorDrawableCompatState == null || vectorDrawableCompatState.mVPathRenderer == null || this.mVectorState.mVPathRenderer.mBaseWidth == 0.0F || this.mVectorState.mVPathRenderer.mBaseHeight == 0.0F || this.mVectorState.mVPathRenderer.mViewportHeight == 0.0F || this.mVectorState.mVPathRenderer.mViewportWidth == 0.0F)
      return 1.0F; 
    float f1 = this.mVectorState.mVPathRenderer.mBaseWidth;
    float f2 = this.mVectorState.mVPathRenderer.mBaseHeight;
    float f3 = this.mVectorState.mVPathRenderer.mViewportWidth;
    float f4 = this.mVectorState.mVPathRenderer.mViewportHeight;
    return Math.min(f3 / f1, f4 / f2);
  }
  
  Object getTargetByName(String paramString) { return this.mVectorState.mVPathRenderer.mVGTargetsMap.get(paramString); }
  
  public void inflate(Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet) throws XmlPullParserException, IOException {
    if (this.mDelegateDrawable != null) {
      this.mDelegateDrawable.inflate(paramResources, paramXmlPullParser, paramAttributeSet);
      return;
    } 
    inflate(paramResources, paramXmlPullParser, paramAttributeSet, null);
  }
  
  public void inflate(Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme) throws XmlPullParserException, IOException {
    if (this.mDelegateDrawable != null) {
      DrawableCompat.inflate(this.mDelegateDrawable, paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
      return;
    } 
    VectorDrawableCompatState vectorDrawableCompatState = this.mVectorState;
    vectorDrawableCompatState.mVPathRenderer = new VPathRenderer();
    TypedArray typedArray = TypedArrayUtils.obtainAttributes(paramResources, paramTheme, paramAttributeSet, AndroidResources.STYLEABLE_VECTOR_DRAWABLE_TYPE_ARRAY);
    updateStateFromTypedArray(typedArray, paramXmlPullParser);
    typedArray.recycle();
    vectorDrawableCompatState.mChangingConfigurations = getChangingConfigurations();
    vectorDrawableCompatState.mCacheDirty = true;
    inflateInternal(paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
    this.mTintFilter = updateTintFilter(this.mTintFilter, vectorDrawableCompatState.mTint, vectorDrawableCompatState.mTintMode);
  }
  
  public void invalidateSelf() {
    if (this.mDelegateDrawable != null) {
      this.mDelegateDrawable.invalidateSelf();
      return;
    } 
    super.invalidateSelf();
  }
  
  public boolean isAutoMirrored() { return (this.mDelegateDrawable != null) ? DrawableCompat.isAutoMirrored(this.mDelegateDrawable) : this.mVectorState.mAutoMirrored; }
  
  public boolean isStateful() {
    if (this.mDelegateDrawable != null)
      return this.mDelegateDrawable.isStateful(); 
    if (!super.isStateful()) {
      VectorDrawableCompatState vectorDrawableCompatState = this.mVectorState;
      if (vectorDrawableCompatState == null || (!vectorDrawableCompatState.isStateful() && (this.mVectorState.mTint == null || !this.mVectorState.mTint.isStateful())))
        return false; 
    } 
    return true;
  }
  
  public Drawable mutate() {
    if (this.mDelegateDrawable != null) {
      this.mDelegateDrawable.mutate();
      return this;
    } 
    if (!this.mMutated && super.mutate() == this) {
      this.mVectorState = new VectorDrawableCompatState(this.mVectorState);
      this.mMutated = true;
    } 
    return this;
  }
  
  protected void onBoundsChange(Rect paramRect) {
    if (this.mDelegateDrawable != null)
      this.mDelegateDrawable.setBounds(paramRect); 
  }
  
  protected boolean onStateChange(int[] paramArrayOfInt) {
    if (this.mDelegateDrawable != null)
      return this.mDelegateDrawable.setState(paramArrayOfInt); 
    int i = 0;
    VectorDrawableCompatState vectorDrawableCompatState = this.mVectorState;
    byte b = i;
    if (vectorDrawableCompatState.mTint != null) {
      b = i;
      if (vectorDrawableCompatState.mTintMode != null) {
        this.mTintFilter = updateTintFilter(this.mTintFilter, vectorDrawableCompatState.mTint, vectorDrawableCompatState.mTintMode);
        invalidateSelf();
        b = 1;
      } 
    } 
    i = b;
    if (vectorDrawableCompatState.isStateful()) {
      i = b;
      if (vectorDrawableCompatState.onStateChanged(paramArrayOfInt)) {
        invalidateSelf();
        i = 1;
      } 
    } 
    return i;
  }
  
  public void scheduleSelf(Runnable paramRunnable, long paramLong) {
    if (this.mDelegateDrawable != null) {
      this.mDelegateDrawable.scheduleSelf(paramRunnable, paramLong);
      return;
    } 
    super.scheduleSelf(paramRunnable, paramLong);
  }
  
  void setAllowCaching(boolean paramBoolean) { this.mAllowCaching = paramBoolean; }
  
  public void setAlpha(int paramInt) {
    if (this.mDelegateDrawable != null) {
      this.mDelegateDrawable.setAlpha(paramInt);
      return;
    } 
    if (this.mVectorState.mVPathRenderer.getRootAlpha() != paramInt) {
      this.mVectorState.mVPathRenderer.setRootAlpha(paramInt);
      invalidateSelf();
    } 
  }
  
  public void setAutoMirrored(boolean paramBoolean) {
    if (this.mDelegateDrawable != null) {
      DrawableCompat.setAutoMirrored(this.mDelegateDrawable, paramBoolean);
      return;
    } 
    this.mVectorState.mAutoMirrored = paramBoolean;
  }
  
  public void setColorFilter(ColorFilter paramColorFilter) {
    if (this.mDelegateDrawable != null) {
      this.mDelegateDrawable.setColorFilter(paramColorFilter);
      return;
    } 
    this.mColorFilter = paramColorFilter;
    invalidateSelf();
  }
  
  public void setTint(int paramInt) {
    if (this.mDelegateDrawable != null) {
      DrawableCompat.setTint(this.mDelegateDrawable, paramInt);
      return;
    } 
    setTintList(ColorStateList.valueOf(paramInt));
  }
  
  public void setTintList(ColorStateList paramColorStateList) {
    if (this.mDelegateDrawable != null) {
      DrawableCompat.setTintList(this.mDelegateDrawable, paramColorStateList);
      return;
    } 
    VectorDrawableCompatState vectorDrawableCompatState = this.mVectorState;
    if (vectorDrawableCompatState.mTint != paramColorStateList) {
      vectorDrawableCompatState.mTint = paramColorStateList;
      this.mTintFilter = updateTintFilter(this.mTintFilter, paramColorStateList, vectorDrawableCompatState.mTintMode);
      invalidateSelf();
    } 
  }
  
  public void setTintMode(PorterDuff.Mode paramMode) {
    if (this.mDelegateDrawable != null) {
      DrawableCompat.setTintMode(this.mDelegateDrawable, paramMode);
      return;
    } 
    VectorDrawableCompatState vectorDrawableCompatState = this.mVectorState;
    if (vectorDrawableCompatState.mTintMode != paramMode) {
      vectorDrawableCompatState.mTintMode = paramMode;
      this.mTintFilter = updateTintFilter(this.mTintFilter, vectorDrawableCompatState.mTint, paramMode);
      invalidateSelf();
    } 
  }
  
  public boolean setVisible(boolean paramBoolean1, boolean paramBoolean2) { return (this.mDelegateDrawable != null) ? this.mDelegateDrawable.setVisible(paramBoolean1, paramBoolean2) : super.setVisible(paramBoolean1, paramBoolean2); }
  
  public void unscheduleSelf(Runnable paramRunnable) {
    if (this.mDelegateDrawable != null) {
      this.mDelegateDrawable.unscheduleSelf(paramRunnable);
      return;
    } 
    super.unscheduleSelf(paramRunnable);
  }
  
  PorterDuffColorFilter updateTintFilter(PorterDuffColorFilter paramPorterDuffColorFilter, ColorStateList paramColorStateList, PorterDuff.Mode paramMode) { return (paramColorStateList == null || paramMode == null) ? null : new PorterDuffColorFilter(paramColorStateList.getColorForState(getState(), 0), paramMode); }
}
