package com.bumptech.glide.gifdecoder;

import android.annotation.TargetApi;
import android.graphics.Bitmap;
import android.os.Build;
import android.util.Log;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.Arrays;
import java.util.Iterator;

public class GifDecoder {
  private static final Bitmap.Config BITMAP_CONFIG = Bitmap.Config.ARGB_8888;
  
  private static final int DISPOSAL_BACKGROUND = 2;
  
  private static final int DISPOSAL_NONE = 1;
  
  private static final int DISPOSAL_PREVIOUS = 3;
  
  private static final int DISPOSAL_UNSPECIFIED = 0;
  
  private static final int INITIAL_FRAME_POINTER = -1;
  
  private static final int MAX_STACK_SIZE = 4096;
  
  private static final int NULL_CODE = -1;
  
  public static final int STATUS_FORMAT_ERROR = 1;
  
  public static final int STATUS_OK = 0;
  
  public static final int STATUS_OPEN_ERROR = 2;
  
  public static final int STATUS_PARTIAL_DECODE = 3;
  
  private static final String TAG = "GifDecoder";
  
  private int[] act;
  
  private BitmapProvider bitmapProvider;
  
  private final byte[] block = new byte[256];
  
  private byte[] data;
  
  private int framePointer;
  
  private GifHeader header;
  
  private byte[] mainPixels;
  
  private int[] mainScratch;
  
  private GifHeaderParser parser;
  
  private byte[] pixelStack;
  
  private short[] prefix;
  
  private Bitmap previousImage;
  
  private ByteBuffer rawData;
  
  private boolean savePrevious;
  
  private int status;
  
  private byte[] suffix;
  
  public GifDecoder(BitmapProvider paramBitmapProvider) {
    this.bitmapProvider = paramBitmapProvider;
    this.header = new GifHeader();
  }
  
  private void decodeBitmapData(GifFrame paramGifFrame) { // Byte code:
    //   0: aload_1
    //   1: ifnull -> 16
    //   4: aload_0
    //   5: getfield rawData : Ljava/nio/ByteBuffer;
    //   8: aload_1
    //   9: getfield bufferFrameStart : I
    //   12: invokevirtual position : (I)Ljava/nio/Buffer;
    //   15: pop
    //   16: aload_1
    //   17: ifnonnull -> 40
    //   20: aload_0
    //   21: getfield header : Lcom/bumptech/glide/gifdecoder/GifHeader;
    //   24: getfield width : I
    //   27: aload_0
    //   28: getfield header : Lcom/bumptech/glide/gifdecoder/GifHeader;
    //   31: getfield height : I
    //   34: imul
    //   35: istore #18
    //   37: goto -> 53
    //   40: aload_1
    //   41: getfield iw : I
    //   44: istore_3
    //   45: aload_1
    //   46: getfield ih : I
    //   49: iload_3
    //   50: imul
    //   51: istore #18
    //   53: aload_0
    //   54: getfield mainPixels : [B
    //   57: astore_1
    //   58: aload_1
    //   59: ifnull -> 69
    //   62: aload_1
    //   63: arraylength
    //   64: iload #18
    //   66: if_icmpge -> 77
    //   69: aload_0
    //   70: iload #18
    //   72: newarray byte
    //   74: putfield mainPixels : [B
    //   77: aload_0
    //   78: getfield prefix : [S
    //   81: ifnonnull -> 93
    //   84: aload_0
    //   85: sipush #4096
    //   88: newarray short
    //   90: putfield prefix : [S
    //   93: aload_0
    //   94: getfield suffix : [B
    //   97: ifnonnull -> 109
    //   100: aload_0
    //   101: sipush #4096
    //   104: newarray byte
    //   106: putfield suffix : [B
    //   109: aload_0
    //   110: getfield pixelStack : [B
    //   113: ifnonnull -> 125
    //   116: aload_0
    //   117: sipush #4097
    //   120: newarray byte
    //   122: putfield pixelStack : [B
    //   125: aload_0
    //   126: invokespecial read : ()I
    //   129: istore_3
    //   130: iconst_1
    //   131: iload_3
    //   132: ishl
    //   133: istore #22
    //   135: iload #22
    //   137: iconst_1
    //   138: iadd
    //   139: istore #21
    //   141: iload #22
    //   143: iconst_2
    //   144: iadd
    //   145: istore #19
    //   147: iload_3
    //   148: iconst_1
    //   149: iadd
    //   150: istore #14
    //   152: iconst_1
    //   153: iload #14
    //   155: ishl
    //   156: iconst_1
    //   157: isub
    //   158: istore #20
    //   160: iconst_0
    //   161: istore_3
    //   162: iload_3
    //   163: iload #22
    //   165: if_icmpge -> 190
    //   168: aload_0
    //   169: getfield prefix : [S
    //   172: iload_3
    //   173: iconst_0
    //   174: sastore
    //   175: aload_0
    //   176: getfield suffix : [B
    //   179: iload_3
    //   180: iload_3
    //   181: i2b
    //   182: bastore
    //   183: iload_3
    //   184: iconst_1
    //   185: iadd
    //   186: istore_3
    //   187: goto -> 162
    //   190: iconst_m1
    //   191: istore #9
    //   193: iload #14
    //   195: istore #8
    //   197: iload #19
    //   199: istore #5
    //   201: iload #20
    //   203: istore #10
    //   205: iconst_0
    //   206: istore #7
    //   208: iconst_0
    //   209: istore #12
    //   211: iconst_0
    //   212: istore #16
    //   214: iconst_0
    //   215: istore #13
    //   217: iconst_0
    //   218: istore #17
    //   220: iconst_0
    //   221: istore_3
    //   222: iconst_0
    //   223: istore #11
    //   225: iconst_0
    //   226: istore #4
    //   228: iconst_m1
    //   229: istore #6
    //   231: iload #7
    //   233: iload #18
    //   235: if_icmpge -> 806
    //   238: iconst_3
    //   239: istore #26
    //   241: iload #12
    //   243: istore #15
    //   245: iload #12
    //   247: ifne -> 272
    //   250: aload_0
    //   251: invokespecial readBlock : ()I
    //   254: istore #15
    //   256: iload #15
    //   258: ifgt -> 269
    //   261: aload_0
    //   262: iconst_3
    //   263: putfield status : I
    //   266: goto -> 806
    //   269: iconst_0
    //   270: istore #13
    //   272: iload #16
    //   274: aload_0
    //   275: getfield block : [B
    //   278: iload #13
    //   280: baload
    //   281: sipush #255
    //   284: iand
    //   285: iload #17
    //   287: ishl
    //   288: iadd
    //   289: istore #16
    //   291: iload #17
    //   293: bipush #8
    //   295: iadd
    //   296: istore #17
    //   298: iload #13
    //   300: iconst_1
    //   301: iadd
    //   302: istore #24
    //   304: iload #15
    //   306: iload #9
    //   308: iadd
    //   309: istore #25
    //   311: iload #8
    //   313: istore #23
    //   315: iload #7
    //   317: istore #12
    //   319: iload #5
    //   321: istore #7
    //   323: iload #11
    //   325: istore #8
    //   327: iload #4
    //   329: istore #5
    //   331: iload_3
    //   332: istore #11
    //   334: iload #7
    //   336: istore #4
    //   338: iload #26
    //   340: istore #15
    //   342: iload #22
    //   344: istore #13
    //   346: iload #23
    //   348: istore #7
    //   350: iload #14
    //   352: istore_3
    //   353: iload #17
    //   355: iload #7
    //   357: if_icmplt -> 753
    //   360: iload #16
    //   362: iload #10
    //   364: iand
    //   365: istore #9
    //   367: iload #16
    //   369: iload #7
    //   371: ishr
    //   372: istore #16
    //   374: iload #17
    //   376: iload #7
    //   378: isub
    //   379: istore #17
    //   381: iload #9
    //   383: iload #13
    //   385: if_icmpne -> 408
    //   388: iload_3
    //   389: istore #7
    //   391: iload #19
    //   393: istore #4
    //   395: iload #20
    //   397: istore #10
    //   399: iconst_m1
    //   400: istore #6
    //   402: iconst_m1
    //   403: istore #9
    //   405: goto -> 353
    //   408: iload #9
    //   410: iload #4
    //   412: if_icmple -> 424
    //   415: aload_0
    //   416: iload #15
    //   418: putfield status : I
    //   421: goto -> 431
    //   424: iload #9
    //   426: iload #21
    //   428: if_icmpne -> 437
    //   431: iconst_m1
    //   432: istore #9
    //   434: goto -> 753
    //   437: iload #6
    //   439: iconst_m1
    //   440: if_icmpne -> 477
    //   443: aload_0
    //   444: getfield pixelStack : [B
    //   447: iload #5
    //   449: aload_0
    //   450: getfield suffix : [B
    //   453: iload #9
    //   455: baload
    //   456: bastore
    //   457: iload #9
    //   459: istore #6
    //   461: iload #6
    //   463: istore #8
    //   465: iload #5
    //   467: iconst_1
    //   468: iadd
    //   469: istore #5
    //   471: iconst_3
    //   472: istore #15
    //   474: goto -> 402
    //   477: iload #9
    //   479: iload #4
    //   481: if_icmplt -> 507
    //   484: aload_0
    //   485: getfield pixelStack : [B
    //   488: iload #5
    //   490: iload #8
    //   492: i2b
    //   493: bastore
    //   494: iload #6
    //   496: istore #8
    //   498: iload #5
    //   500: iconst_1
    //   501: iadd
    //   502: istore #5
    //   504: goto -> 511
    //   507: iload #9
    //   509: istore #8
    //   511: iload #8
    //   513: iload #13
    //   515: if_icmplt -> 550
    //   518: aload_0
    //   519: getfield pixelStack : [B
    //   522: iload #5
    //   524: aload_0
    //   525: getfield suffix : [B
    //   528: iload #8
    //   530: baload
    //   531: bastore
    //   532: aload_0
    //   533: getfield prefix : [S
    //   536: iload #8
    //   538: saload
    //   539: istore #8
    //   541: iload #5
    //   543: iconst_1
    //   544: iadd
    //   545: istore #5
    //   547: goto -> 511
    //   550: aload_0
    //   551: getfield suffix : [B
    //   554: astore_1
    //   555: aload_1
    //   556: iload #8
    //   558: baload
    //   559: sipush #255
    //   562: iand
    //   563: istore #22
    //   565: aload_0
    //   566: getfield pixelStack : [B
    //   569: astore #27
    //   571: iload #22
    //   573: i2b
    //   574: istore_2
    //   575: aload #27
    //   577: iload #5
    //   579: iload_2
    //   580: bastore
    //   581: iload #4
    //   583: istore #8
    //   585: iload #4
    //   587: sipush #4096
    //   590: if_icmpge -> 666
    //   593: aload_0
    //   594: getfield prefix : [S
    //   597: iload #4
    //   599: iload #6
    //   601: i2s
    //   602: sastore
    //   603: aload_1
    //   604: iload #4
    //   606: iload_2
    //   607: bastore
    //   608: iload #4
    //   610: iconst_1
    //   611: iadd
    //   612: istore #15
    //   614: iload #15
    //   616: istore #8
    //   618: iload #15
    //   620: iload #10
    //   622: iand
    //   623: ifne -> 666
    //   626: iload #7
    //   628: istore #6
    //   630: iload #15
    //   632: istore #4
    //   634: iload #10
    //   636: istore #14
    //   638: iload #15
    //   640: sipush #4096
    //   643: if_icmpge -> 678
    //   646: iload #7
    //   648: iconst_1
    //   649: iadd
    //   650: istore #6
    //   652: iload #10
    //   654: iload #15
    //   656: iadd
    //   657: istore #14
    //   659: iload #15
    //   661: istore #4
    //   663: goto -> 678
    //   666: iload #10
    //   668: istore #14
    //   670: iload #8
    //   672: istore #4
    //   674: iload #7
    //   676: istore #6
    //   678: iload #5
    //   680: iconst_1
    //   681: iadd
    //   682: istore #5
    //   684: iload #5
    //   686: ifle -> 724
    //   689: iload #5
    //   691: iconst_1
    //   692: isub
    //   693: istore #5
    //   695: aload_0
    //   696: getfield mainPixels : [B
    //   699: iload #11
    //   701: aload_0
    //   702: getfield pixelStack : [B
    //   705: iload #5
    //   707: baload
    //   708: bastore
    //   709: iload #12
    //   711: iconst_1
    //   712: iadd
    //   713: istore #12
    //   715: iload #11
    //   717: iconst_1
    //   718: iadd
    //   719: istore #11
    //   721: goto -> 684
    //   724: iconst_3
    //   725: istore #15
    //   727: iconst_m1
    //   728: istore #10
    //   730: iload #22
    //   732: istore #8
    //   734: iload #6
    //   736: istore #7
    //   738: iload #9
    //   740: istore #6
    //   742: iload #10
    //   744: istore #9
    //   746: iload #14
    //   748: istore #10
    //   750: goto -> 353
    //   753: iload #7
    //   755: istore #15
    //   757: iload #8
    //   759: istore #23
    //   761: iload #4
    //   763: istore #8
    //   765: iload #12
    //   767: istore #7
    //   769: iload #5
    //   771: istore #4
    //   773: iload_3
    //   774: istore #14
    //   776: iload #13
    //   778: istore #22
    //   780: iload #25
    //   782: istore #12
    //   784: iload #24
    //   786: istore #13
    //   788: iload #11
    //   790: istore_3
    //   791: iload #23
    //   793: istore #11
    //   795: iload #8
    //   797: istore #5
    //   799: iload #15
    //   801: istore #8
    //   803: goto -> 231
    //   806: iload_3
    //   807: iload #18
    //   809: if_icmpge -> 826
    //   812: aload_0
    //   813: getfield mainPixels : [B
    //   816: iload_3
    //   817: iconst_0
    //   818: bastore
    //   819: iload_3
    //   820: iconst_1
    //   821: iadd
    //   822: istore_3
    //   823: goto -> 806
    //   826: return }
  
  private GifHeaderParser getHeaderParser() {
    if (this.parser == null)
      this.parser = new GifHeaderParser(); 
    return this.parser;
  }
  
  private Bitmap getNextBitmap() {
    Bitmap bitmap2 = this.bitmapProvider.obtain(this.header.width, this.header.height, BITMAP_CONFIG);
    Bitmap bitmap1 = bitmap2;
    if (bitmap2 == null)
      bitmap1 = Bitmap.createBitmap(this.header.width, this.header.height, BITMAP_CONFIG); 
    setAlpha(bitmap1);
    return bitmap1;
  }
  
  private int read() {
    try {
      byte b = this.rawData.get();
      return b & 0xFF;
    } catch (Exception exception) {
      this.status = 1;
      return 0;
    } 
  }
  
  private int readBlock() {
    int k = read();
    int j = 0;
    int i = 0;
    if (k > 0)
      while (true) {
        j = i;
        if (i < k) {
          j = k - i;
          try {
            this.rawData.get(this.block, i, j);
            i += j;
            continue;
          } catch (Exception exception) {
            Log.w(TAG, "Error Reading Block", exception);
            this.status = 1;
            j = i;
            break;
          } 
        } 
        break;
      }  
    return j;
  }
  
  @TargetApi(12)
  private static void setAlpha(Bitmap paramBitmap) {
    if (Build.VERSION.SDK_INT >= 12)
      paramBitmap.setHasAlpha(true); 
  }
  
  private Bitmap setPixels(GifFrame paramGifFrame1, GifFrame paramGifFrame2) {
    int m = this.header.width;
    int n = this.header.height;
    int[] arrayOfInt = this.mainScratch;
    int j = 0;
    if (paramGifFrame2 != null && paramGifFrame2.dispose > 0)
      if (paramGifFrame2.dispose == 2) {
        byte b1;
        if (!paramGifFrame1.transparency) {
          b1 = this.header.bgColor;
        } else {
          b1 = 0;
        } 
        Arrays.fill(arrayOfInt, b1);
      } else if (paramGifFrame2.dispose == 3) {
        Bitmap bitmap1 = this.previousImage;
        if (bitmap1 != null)
          bitmap1.getPixels(arrayOfInt, 0, m, 0, 0, m, n); 
      }  
    decodeBitmapData(paramGifFrame1);
    int i = 0;
    byte b = 1;
    int k;
    for (k = 8; j < paramGifFrame1.ih; k = i2) {
      int i2;
      int i1;
      if (paramGifFrame1.interlace) {
        i1 = i;
        byte b1 = b;
        i2 = k;
        if (i >= paramGifFrame1.ih) {
          b1 = b + true;
          if (b1 != 2) {
            if (b1 != 3) {
              if (b1 != 4) {
                i1 = i;
                i2 = k;
              } else {
                i1 = 1;
                i2 = 2;
              } 
            } else {
              i1 = 2;
              i2 = 4;
            } 
          } else {
            i1 = 4;
            i2 = k;
          } 
        } 
        k = i1 + i2;
        i = i1;
        b = b1;
        i1 = k;
      } else {
        i1 = i;
        i = j;
        i2 = k;
      } 
      i += paramGifFrame1.iy;
      if (i < this.header.height) {
        int i4 = i * this.header.width;
        int i3 = paramGifFrame1.ix + i4;
        k = paramGifFrame1.iw + i3;
        i = k;
        if (this.header.width + i4 < k)
          i = this.header.width + i4; 
        for (k = paramGifFrame1.iw * j; i3 < i; k++) {
          i4 = this.mainPixels[k];
          i4 = this.act[i4 & 0xFF];
          if (i4 != 0)
            arrayOfInt[i3] = i4; 
          i3++;
        } 
      } 
      j++;
      i = i1;
    } 
    if (this.savePrevious && (paramGifFrame1.dispose == 0 || paramGifFrame1.dispose == 1)) {
      if (this.previousImage == null)
        this.previousImage = getNextBitmap(); 
      this.previousImage.setPixels(arrayOfInt, 0, m, 0, 0, m, n);
    } 
    Bitmap bitmap = getNextBitmap();
    bitmap.setPixels(arrayOfInt, 0, m, 0, 0, m, n);
    return bitmap;
  }
  
  public void advance() { this.framePointer = (this.framePointer + 1) % this.header.frameCount; }
  
  public void clear() {
    this.header = null;
    this.data = null;
    this.mainPixels = null;
    this.mainScratch = null;
    Bitmap bitmap = this.previousImage;
    if (bitmap != null)
      this.bitmapProvider.release(bitmap); 
    this.previousImage = null;
    this.rawData = null;
  }
  
  public int getCurrentFrameIndex() { return this.framePointer; }
  
  public byte[] getData() { return this.data; }
  
  public int getDelay(int paramInt) { return (paramInt >= 0 && paramInt < this.header.frameCount) ? ((GifFrame)this.header.frames.get(paramInt)).delay : -1; }
  
  public int getFrameCount() { return this.header.frameCount; }
  
  public int getHeight() { return this.header.height; }
  
  public int getLoopCount() { return this.header.loopCount; }
  
  public int getNextDelay() {
    if (this.header.frameCount > 0) {
      int i = this.framePointer;
      if (i >= 0)
        return getDelay(i); 
    } 
    return -1;
  }
  
  public Bitmap getNextFrame() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield header : Lcom/bumptech/glide/gifdecoder/GifHeader;
    //   6: getfield frameCount : I
    //   9: ifle -> 19
    //   12: aload_0
    //   13: getfield framePointer : I
    //   16: ifge -> 98
    //   19: getstatic com/bumptech/glide/gifdecoder/GifDecoder.TAG : Ljava/lang/String;
    //   22: iconst_3
    //   23: invokestatic isLoggable : (Ljava/lang/String;I)Z
    //   26: ifeq -> 93
    //   29: getstatic com/bumptech/glide/gifdecoder/GifDecoder.TAG : Ljava/lang/String;
    //   32: astore_3
    //   33: new java/lang/StringBuilder
    //   36: dup
    //   37: invokespecial <init> : ()V
    //   40: astore #4
    //   42: aload #4
    //   44: ldc_w 'unable to decode frame, frameCount='
    //   47: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   50: pop
    //   51: aload #4
    //   53: aload_0
    //   54: getfield header : Lcom/bumptech/glide/gifdecoder/GifHeader;
    //   57: getfield frameCount : I
    //   60: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   63: pop
    //   64: aload #4
    //   66: ldc_w ' framePointer='
    //   69: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   72: pop
    //   73: aload #4
    //   75: aload_0
    //   76: getfield framePointer : I
    //   79: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   82: pop
    //   83: aload_3
    //   84: aload #4
    //   86: invokevirtual toString : ()Ljava/lang/String;
    //   89: invokestatic d : (Ljava/lang/String;Ljava/lang/String;)I
    //   92: pop
    //   93: aload_0
    //   94: iconst_1
    //   95: putfield status : I
    //   98: aload_0
    //   99: getfield status : I
    //   102: iconst_1
    //   103: if_icmpeq -> 327
    //   106: aload_0
    //   107: getfield status : I
    //   110: iconst_2
    //   111: if_icmpne -> 117
    //   114: goto -> 327
    //   117: iconst_0
    //   118: istore_1
    //   119: aload_0
    //   120: iconst_0
    //   121: putfield status : I
    //   124: aload_0
    //   125: getfield header : Lcom/bumptech/glide/gifdecoder/GifHeader;
    //   128: getfield frames : Ljava/util/List;
    //   131: aload_0
    //   132: getfield framePointer : I
    //   135: invokeinterface get : (I)Ljava/lang/Object;
    //   140: checkcast com/bumptech/glide/gifdecoder/GifFrame
    //   143: astore #4
    //   145: aload_0
    //   146: getfield framePointer : I
    //   149: iconst_1
    //   150: isub
    //   151: istore_2
    //   152: iload_2
    //   153: iflt -> 388
    //   156: aload_0
    //   157: getfield header : Lcom/bumptech/glide/gifdecoder/GifHeader;
    //   160: getfield frames : Ljava/util/List;
    //   163: iload_2
    //   164: invokeinterface get : (I)Ljava/lang/Object;
    //   169: checkcast com/bumptech/glide/gifdecoder/GifFrame
    //   172: astore_3
    //   173: goto -> 176
    //   176: aload #4
    //   178: getfield lct : [I
    //   181: ifnonnull -> 198
    //   184: aload_0
    //   185: aload_0
    //   186: getfield header : Lcom/bumptech/glide/gifdecoder/GifHeader;
    //   189: getfield gct : [I
    //   192: putfield act : [I
    //   195: goto -> 230
    //   198: aload_0
    //   199: aload #4
    //   201: getfield lct : [I
    //   204: putfield act : [I
    //   207: aload_0
    //   208: getfield header : Lcom/bumptech/glide/gifdecoder/GifHeader;
    //   211: getfield bgIndex : I
    //   214: aload #4
    //   216: getfield transIndex : I
    //   219: if_icmpne -> 230
    //   222: aload_0
    //   223: getfield header : Lcom/bumptech/glide/gifdecoder/GifHeader;
    //   226: iconst_0
    //   227: putfield bgColor : I
    //   230: aload #4
    //   232: getfield transparency : Z
    //   235: ifeq -> 260
    //   238: aload_0
    //   239: getfield act : [I
    //   242: aload #4
    //   244: getfield transIndex : I
    //   247: iaload
    //   248: istore_1
    //   249: aload_0
    //   250: getfield act : [I
    //   253: aload #4
    //   255: getfield transIndex : I
    //   258: iconst_0
    //   259: iastore
    //   260: aload_0
    //   261: getfield act : [I
    //   264: ifnonnull -> 296
    //   267: getstatic com/bumptech/glide/gifdecoder/GifDecoder.TAG : Ljava/lang/String;
    //   270: iconst_3
    //   271: invokestatic isLoggable : (Ljava/lang/String;I)Z
    //   274: ifeq -> 287
    //   277: getstatic com/bumptech/glide/gifdecoder/GifDecoder.TAG : Ljava/lang/String;
    //   280: ldc_w 'No Valid Color Table'
    //   283: invokestatic d : (Ljava/lang/String;Ljava/lang/String;)I
    //   286: pop
    //   287: aload_0
    //   288: iconst_1
    //   289: putfield status : I
    //   292: aload_0
    //   293: monitorexit
    //   294: aconst_null
    //   295: areturn
    //   296: aload_0
    //   297: aload #4
    //   299: aload_3
    //   300: invokespecial setPixels : (Lcom/bumptech/glide/gifdecoder/GifFrame;Lcom/bumptech/glide/gifdecoder/GifFrame;)Landroid/graphics/Bitmap;
    //   303: astore_3
    //   304: aload #4
    //   306: getfield transparency : Z
    //   309: ifeq -> 323
    //   312: aload_0
    //   313: getfield act : [I
    //   316: aload #4
    //   318: getfield transIndex : I
    //   321: iload_1
    //   322: iastore
    //   323: aload_0
    //   324: monitorexit
    //   325: aload_3
    //   326: areturn
    //   327: getstatic com/bumptech/glide/gifdecoder/GifDecoder.TAG : Ljava/lang/String;
    //   330: iconst_3
    //   331: invokestatic isLoggable : (Ljava/lang/String;I)Z
    //   334: ifeq -> 379
    //   337: getstatic com/bumptech/glide/gifdecoder/GifDecoder.TAG : Ljava/lang/String;
    //   340: astore_3
    //   341: new java/lang/StringBuilder
    //   344: dup
    //   345: invokespecial <init> : ()V
    //   348: astore #4
    //   350: aload #4
    //   352: ldc_w 'Unable to decode frame, status='
    //   355: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   358: pop
    //   359: aload #4
    //   361: aload_0
    //   362: getfield status : I
    //   365: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   368: pop
    //   369: aload_3
    //   370: aload #4
    //   372: invokevirtual toString : ()Ljava/lang/String;
    //   375: invokestatic d : (Ljava/lang/String;Ljava/lang/String;)I
    //   378: pop
    //   379: aload_0
    //   380: monitorexit
    //   381: aconst_null
    //   382: areturn
    //   383: astore_3
    //   384: aload_0
    //   385: monitorexit
    //   386: aload_3
    //   387: athrow
    //   388: aconst_null
    //   389: astore_3
    //   390: goto -> 176
    // Exception table:
    //   from	to	target	type
    //   2	19	383	finally
    //   19	93	383	finally
    //   93	98	383	finally
    //   98	114	383	finally
    //   119	152	383	finally
    //   156	173	383	finally
    //   176	195	383	finally
    //   198	230	383	finally
    //   230	260	383	finally
    //   260	287	383	finally
    //   287	292	383	finally
    //   296	323	383	finally
    //   327	379	383	finally }
  
  public int getStatus() { return this.status; }
  
  public int getWidth() { return this.header.width; }
  
  public int read(InputStream paramInputStream, int paramInt) {
    if (paramInputStream != null) {
      if (paramInt > 0) {
        paramInt += 4096;
      } else {
        paramInt = 16384;
      } 
      try {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(paramInt);
        byte[] arrayOfByte = new byte[16384];
        while (true) {
          paramInt = paramInputStream.read(arrayOfByte, 0, arrayOfByte.length);
          if (paramInt != -1) {
            byteArrayOutputStream.write(arrayOfByte, 0, paramInt);
            continue;
          } 
          break;
        } 
        byteArrayOutputStream.flush();
        read(byteArrayOutputStream.toByteArray());
      } catch (IOException iOException) {
        Log.w(TAG, "Error reading data from stream", iOException);
      } 
    } else {
      this.status = 2;
    } 
    if (paramInputStream != null)
      try {
        paramInputStream.close();
      } catch (IOException paramInputStream) {
        Log.w(TAG, "Error closing stream", paramInputStream);
      }  
    return this.status;
  }
  
  public int read(byte[] paramArrayOfByte) {
    this.data = paramArrayOfByte;
    this.header = getHeaderParser().setData(paramArrayOfByte).parseHeader();
    if (paramArrayOfByte != null) {
      this.rawData = ByteBuffer.wrap(paramArrayOfByte);
      this.rawData.rewind();
      this.rawData.order(ByteOrder.LITTLE_ENDIAN);
      this.mainPixels = new byte[this.header.width * this.header.height];
      this.mainScratch = new int[this.header.width * this.header.height];
      this.savePrevious = false;
      Iterator iterator = this.header.frames.iterator();
      while (iterator.hasNext()) {
        if (((GifFrame)iterator.next()).dispose == 3) {
          this.savePrevious = true;
          break;
        } 
      } 
    } 
    return this.status;
  }
  
  public void resetFrameIndex() { this.framePointer = -1; }
  
  public void setData(GifHeader paramGifHeader, byte[] paramArrayOfByte) {
    this.header = paramGifHeader;
    this.data = paramArrayOfByte;
    this.status = 0;
    this.framePointer = -1;
    this.rawData = ByteBuffer.wrap(paramArrayOfByte);
    this.rawData.rewind();
    this.rawData.order(ByteOrder.LITTLE_ENDIAN);
    this.savePrevious = false;
    Iterator iterator = paramGifHeader.frames.iterator();
    while (iterator.hasNext()) {
      if (((GifFrame)iterator.next()).dispose == 3) {
        this.savePrevious = true;
        break;
      } 
    } 
    this.mainPixels = new byte[paramGifHeader.width * paramGifHeader.height];
    this.mainScratch = new int[paramGifHeader.width * paramGifHeader.height];
  }
}
