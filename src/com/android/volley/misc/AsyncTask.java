package com.android.volley.misc;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.FutureTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class AsyncTask<Params, Progress, Result> extends Object {
  private static final int CORE_POOL_SIZE = 5;
  
  public static final Executor DUAL_THREAD_EXECUTOR;
  
  private static final int KEEP_ALIVE = 1;
  
  private static final String LOG_TAG = "AsyncTask";
  
  private static final int MAXIMUM_POOL_SIZE = 128;
  
  private static final int MESSAGE_POST_PROGRESS = 2;
  
  private static final int MESSAGE_POST_RESULT = 1;
  
  public static final Executor SERIAL_EXECUTOR;
  
  public static final Executor THREAD_POOL_EXECUTOR;
  
  private static final InternalHandler sHandler;
  
  private static final BlockingQueue<Runnable> sPoolWorkQueue;
  
  private static final ThreadFactory sThreadFactory;
  
  private final AtomicBoolean mCancelled = new AtomicBoolean();
  
  private final FutureTask<Result> mFuture = new Object(this, this.mWorker);
  
  private final AtomicBoolean mTaskInvoked = new AtomicBoolean();
  
  private final WorkerRunnable<Params, Result> mWorker = new Object(this);
  
  static  {
    ExecutorService executorService;
    sThreadFactory = new Object();
    sPoolWorkQueue = new LinkedBlockingQueue(10);
    THREAD_POOL_EXECUTOR = new ThreadPoolExecutor(5, 128, 1L, TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory, new ThreadPoolExecutor.DiscardOldestPolicy());
    if (Utils.hasHoneycomb()) {
      executorService = new SerialExecutor(null);
    } else {
      executorService = Executors.newSingleThreadExecutor(sThreadFactory);
    } 
    SERIAL_EXECUTOR = executorService;
    DUAL_THREAD_EXECUTOR = Executors.newFixedThreadPool(2, sThreadFactory);
    sHandler = new InternalHandler(null);
    sDefaultExecutor = SERIAL_EXECUTOR;
  }
  
  public static void execute(Runnable paramRunnable) { sDefaultExecutor.execute(paramRunnable); }
  
  private void finish(Result paramResult) {
    if (isCancelled()) {
      onCancelled(paramResult);
    } else {
      onPostExecute(paramResult);
    } 
    this.mStatus = Status.FINISHED;
  }
  
  public static void init() { sHandler.getLooper(); }
  
  private Result postResult(Result paramResult) {
    sHandler.obtainMessage(1, new AsyncTaskResult(this, new Object[] { paramResult })).sendToTarget();
    return paramResult;
  }
  
  private void postResultIfNotInvoked(Result paramResult) {
    if (!this.mTaskInvoked.get())
      postResult(paramResult); 
  }
  
  public static void setDefaultExecutor(Executor paramExecutor) { sDefaultExecutor = paramExecutor; }
  
  public final boolean cancel(boolean paramBoolean) {
    this.mCancelled.set(true);
    return this.mFuture.cancel(paramBoolean);
  }
  
  protected abstract Result doInBackground(Params... paramVarArgs);
  
  public final AsyncTask<Params, Progress, Result> execute(Params... paramVarArgs) { return executeOnExecutor(sDefaultExecutor, paramVarArgs); }
  
  public final AsyncTask<Params, Progress, Result> executeOnExecutor(Executor paramExecutor, Params... paramVarArgs) {
    if (this.mStatus != Status.PENDING) {
      int i = null.$SwitchMap$com$android$volley$misc$AsyncTask$Status[this.mStatus.ordinal()];
      if (i != 1) {
        if (i == 2)
          throw new IllegalStateException("Cannot execute task: the task has already been executed (a task can be executed only once)"); 
      } else {
        throw new IllegalStateException("Cannot execute task: the task is already running.");
      } 
    } 
    this.mStatus = Status.RUNNING;
    onPreExecute();
    this.mWorker.mParams = paramVarArgs;
    paramExecutor.execute(this.mFuture);
    return this;
  }
  
  public final Result get() throws InterruptedException, ExecutionException { return (Result)this.mFuture.get(); }
  
  public final Result get(long paramLong, TimeUnit paramTimeUnit) throws InterruptedException, ExecutionException, TimeoutException { return (Result)this.mFuture.get(paramLong, paramTimeUnit); }
  
  public final Status getStatus() { return this.mStatus; }
  
  public final boolean isCancelled() { return this.mCancelled.get(); }
  
  protected void onCancelled() {}
  
  protected void onCancelled(Result paramResult) { onCancelled(); }
  
  protected void onPostExecute(Result paramResult) {}
  
  protected void onPreExecute() {}
  
  protected void onProgressUpdate(Progress... paramVarArgs) {}
  
  protected final void publishProgress(Progress... paramVarArgs) {
    if (!isCancelled())
      sHandler.obtainMessage(2, new AsyncTaskResult(this, paramVarArgs)).sendToTarget(); 
  }
}
