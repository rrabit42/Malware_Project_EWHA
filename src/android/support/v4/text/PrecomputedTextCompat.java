package android.support.v4.text;

import android.os.Build;
import android.support.annotation.GuardedBy;
import android.support.annotation.IntRange;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresApi;
import android.support.annotation.RestrictTo;
import android.support.annotation.UiThread;
import android.support.v4.os.TraceCompat;
import android.support.v4.util.Preconditions;
import android.text.Layout;
import android.text.PrecomputedText;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.StaticLayout;
import android.text.TextUtils;
import java.util.ArrayList;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class PrecomputedTextCompat implements Spannable {
  private static final char LINE_FEED = '\n';
  
  @GuardedBy("sLock")
  @NonNull
  private static Executor sExecutor;
  
  private static final Object sLock = new Object();
  
  @NonNull
  private final int[] mParagraphEnds;
  
  @NonNull
  private final Params mParams;
  
  @NonNull
  private final Spannable mText;
  
  @Nullable
  private final PrecomputedText mWrapped;
  
  static  {
    sExecutor = null;
  }
  
  @RequiresApi(28)
  private PrecomputedTextCompat(@NonNull PrecomputedText paramPrecomputedText, @NonNull Params paramParams) {
    this.mText = paramPrecomputedText;
    this.mParams = paramParams;
    this.mParagraphEnds = null;
    this.mWrapped = paramPrecomputedText;
  }
  
  private PrecomputedTextCompat(@NonNull CharSequence paramCharSequence, @NonNull Params paramParams, @NonNull int[] paramArrayOfInt) {
    this.mText = new SpannableString(paramCharSequence);
    this.mParams = paramParams;
    this.mParagraphEnds = paramArrayOfInt;
    this.mWrapped = null;
  }
  
  public static PrecomputedTextCompat create(@NonNull CharSequence paramCharSequence, @NonNull Params paramParams) {
    Preconditions.checkNotNull(paramCharSequence);
    Preconditions.checkNotNull(paramParams);
    try {
      TraceCompat.beginSection("PrecomputedText");
      if (Build.VERSION.SDK_INT >= 28 && paramParams.mWrapped != null)
        return new PrecomputedTextCompat(PrecomputedText.create(paramCharSequence, paramParams.mWrapped), paramParams); 
      ArrayList arrayList = new ArrayList();
      int j = null.length();
      int i = 0;
      while (true) {
        if (i < j) {
          i = TextUtils.indexOf(null, '\n', i, j);
          if (i < 0) {
            i = j;
          } else {
            i++;
          } 
          arrayList.add(Integer.valueOf(i));
          continue;
        } 
        int[] arrayOfInt = new int[arrayList.size()];
        for (i = 0; i < arrayList.size(); i++)
          arrayOfInt[i] = ((Integer)arrayList.get(i)).intValue(); 
        if (Build.VERSION.SDK_INT >= 23) {
          StaticLayout.Builder.obtain(null, 0, null.length(), paramParams.getTextPaint(), 2147483647).setBreakStrategy(paramParams.getBreakStrategy()).setHyphenationFrequency(paramParams.getHyphenationFrequency()).setTextDirection(paramParams.getTextDirection()).build();
        } else if (Build.VERSION.SDK_INT >= 21) {
          new StaticLayout(null, paramParams.getTextPaint(), 2147483647, Layout.Alignment.ALIGN_NORMAL, 1.0F, 0.0F, false);
        } 
        return new PrecomputedTextCompat(null, paramParams, arrayOfInt);
      } 
    } finally {
      TraceCompat.endSection();
    } 
  }
  
  private int findParaIndex(@IntRange(from = 0L) int paramInt) {
    byte b = 0;
    while (true) {
      int[] arrayOfInt1 = this.mParagraphEnds;
      if (b < arrayOfInt1.length) {
        if (paramInt < arrayOfInt1[b])
          return b; 
        b++;
        continue;
      } 
      break;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("pos must be less than ");
    int[] arrayOfInt = this.mParagraphEnds;
    stringBuilder.append(arrayOfInt[arrayOfInt.length - 1]);
    stringBuilder.append(", gave ");
    stringBuilder.append(paramInt);
    IndexOutOfBoundsException indexOutOfBoundsException = new IndexOutOfBoundsException(stringBuilder.toString());
    throw indexOutOfBoundsException;
  }
  
  @UiThread
  public static Future<PrecomputedTextCompat> getTextFuture(@NonNull CharSequence paramCharSequence, @NonNull Params paramParams, @Nullable Executor paramExecutor) {
    PrecomputedTextFutureTask precomputedTextFutureTask = new PrecomputedTextFutureTask(paramParams, paramCharSequence);
    Executor executor = paramExecutor;
    if (paramExecutor == null)
      synchronized (sLock) {
        if (sExecutor == null)
          sExecutor = Executors.newFixedThreadPool(1); 
        executor = sExecutor;
      }  
    executor.execute(precomputedTextFutureTask);
    return precomputedTextFutureTask;
  }
  
  public char charAt(int paramInt) { return this.mText.charAt(paramInt); }
  
  @IntRange(from = 0L)
  public int getParagraphCount() { return (Build.VERSION.SDK_INT >= 28) ? this.mWrapped.getParagraphCount() : this.mParagraphEnds.length; }
  
  @IntRange(from = 0L)
  public int getParagraphEnd(@IntRange(from = 0L) int paramInt) {
    Preconditions.checkArgumentInRange(paramInt, 0, getParagraphCount(), "paraIndex");
    return (Build.VERSION.SDK_INT >= 28) ? this.mWrapped.getParagraphEnd(paramInt) : this.mParagraphEnds[paramInt];
  }
  
  @IntRange(from = 0L)
  public int getParagraphStart(@IntRange(from = 0L) int paramInt) {
    Preconditions.checkArgumentInRange(paramInt, 0, getParagraphCount(), "paraIndex");
    return (Build.VERSION.SDK_INT >= 28) ? this.mWrapped.getParagraphStart(paramInt) : ((paramInt == 0) ? 0 : this.mParagraphEnds[paramInt - 1]);
  }
  
  @NonNull
  public Params getParams() { return this.mParams; }
  
  @Nullable
  @RequiresApi(28)
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public PrecomputedText getPrecomputedText() {
    Spannable spannable = this.mText;
    return (spannable instanceof PrecomputedText) ? (PrecomputedText)spannable : null;
  }
  
  public int getSpanEnd(Object paramObject) { return this.mText.getSpanEnd(paramObject); }
  
  public int getSpanFlags(Object paramObject) { return this.mText.getSpanFlags(paramObject); }
  
  public int getSpanStart(Object paramObject) { return this.mText.getSpanStart(paramObject); }
  
  public <T> T[] getSpans(int paramInt1, int paramInt2, Class<T> paramClass) { return (Build.VERSION.SDK_INT >= 28) ? (T[])this.mWrapped.getSpans(paramInt1, paramInt2, paramClass) : (T[])this.mText.getSpans(paramInt1, paramInt2, paramClass); }
  
  public int length() { return this.mText.length(); }
  
  public int nextSpanTransition(int paramInt1, int paramInt2, Class paramClass) { return this.mText.nextSpanTransition(paramInt1, paramInt2, paramClass); }
  
  public void removeSpan(Object paramObject) {
    if (!(paramObject instanceof android.text.style.MetricAffectingSpan)) {
      if (Build.VERSION.SDK_INT >= 28) {
        this.mWrapped.removeSpan(paramObject);
        return;
      } 
      this.mText.removeSpan(paramObject);
      return;
    } 
    throw new IllegalArgumentException("MetricAffectingSpan can not be removed from PrecomputedText.");
  }
  
  public void setSpan(Object paramObject, int paramInt1, int paramInt2, int paramInt3) {
    if (!(paramObject instanceof android.text.style.MetricAffectingSpan)) {
      if (Build.VERSION.SDK_INT >= 28) {
        this.mWrapped.setSpan(paramObject, paramInt1, paramInt2, paramInt3);
        return;
      } 
      this.mText.setSpan(paramObject, paramInt1, paramInt2, paramInt3);
      return;
    } 
    throw new IllegalArgumentException("MetricAffectingSpan can not be set to PrecomputedText.");
  }
  
  public CharSequence subSequence(int paramInt1, int paramInt2) { return this.mText.subSequence(paramInt1, paramInt2); }
  
  public String toString() { return this.mText.toString(); }
}
