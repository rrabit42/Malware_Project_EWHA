package android.support.design.widget;

import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.annotation.DimenRes;
import android.support.annotation.Dimension;
import android.support.annotation.DrawableRes;
import android.support.annotation.IdRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.StyleRes;
import android.support.design.R;
import android.support.design.internal.BottomNavigationMenu;
import android.support.design.internal.BottomNavigationMenuView;
import android.support.design.internal.BottomNavigationPresenter;
import android.support.design.internal.ThemeEnforcement;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.ViewCompat;
import android.support.v7.view.SupportMenuInflater;
import android.support.v7.view.menu.MenuBuilder;
import android.support.v7.widget.TintTypedArray;
import android.util.AttributeSet;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.FrameLayout;

public class BottomNavigationView extends FrameLayout {
  private static final int MENU_PRESENTER_ID = 1;
  
  private final MenuBuilder menu;
  
  private MenuInflater menuInflater;
  
  private final BottomNavigationMenuView menuView;
  
  private final BottomNavigationPresenter presenter = new BottomNavigationPresenter();
  
  private OnNavigationItemReselectedListener reselectedListener;
  
  private OnNavigationItemSelectedListener selectedListener;
  
  public BottomNavigationView(Context paramContext) { this(paramContext, null); }
  
  public BottomNavigationView(Context paramContext, AttributeSet paramAttributeSet) { this(paramContext, paramAttributeSet, R.attr.bottomNavigationStyle); }
  
  public BottomNavigationView(Context paramContext, AttributeSet paramAttributeSet, int paramInt) {
    super(paramContext, paramAttributeSet, paramInt);
    this.menu = new BottomNavigationMenu(paramContext);
    this.menuView = new BottomNavigationMenuView(paramContext);
    FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(-2, -2);
    layoutParams.gravity = 17;
    this.menuView.setLayoutParams(layoutParams);
    this.presenter.setBottomNavigationMenuView(this.menuView);
    this.presenter.setId(1);
    this.menuView.setPresenter(this.presenter);
    this.menu.addMenuPresenter(this.presenter);
    this.presenter.initForMenu(getContext(), this.menu);
    TintTypedArray tintTypedArray = ThemeEnforcement.obtainTintedStyledAttributes(paramContext, paramAttributeSet, R.styleable.BottomNavigationView, paramInt, R.style.Widget_Design_BottomNavigationView, new int[] { R.styleable.BottomNavigationView_itemTextAppearanceInactive, R.styleable.BottomNavigationView_itemTextAppearanceActive });
    if (tintTypedArray.hasValue(R.styleable.BottomNavigationView_itemIconTint)) {
      this.menuView.setIconTintList(tintTypedArray.getColorStateList(R.styleable.BottomNavigationView_itemIconTint));
    } else {
      BottomNavigationMenuView bottomNavigationMenuView = this.menuView;
      bottomNavigationMenuView.setIconTintList(bottomNavigationMenuView.createDefaultColorStateList(16842808));
    } 
    setItemIconSize(tintTypedArray.getDimensionPixelSize(R.styleable.BottomNavigationView_itemIconSize, getResources().getDimensionPixelSize(R.dimen.design_bottom_navigation_icon_size)));
    if (tintTypedArray.hasValue(R.styleable.BottomNavigationView_itemTextAppearanceInactive))
      setItemTextAppearanceInactive(tintTypedArray.getResourceId(R.styleable.BottomNavigationView_itemTextAppearanceInactive, 0)); 
    if (tintTypedArray.hasValue(R.styleable.BottomNavigationView_itemTextAppearanceActive))
      setItemTextAppearanceActive(tintTypedArray.getResourceId(R.styleable.BottomNavigationView_itemTextAppearanceActive, 0)); 
    if (tintTypedArray.hasValue(R.styleable.BottomNavigationView_itemTextColor))
      setItemTextColor(tintTypedArray.getColorStateList(R.styleable.BottomNavigationView_itemTextColor)); 
    if (tintTypedArray.hasValue(R.styleable.BottomNavigationView_elevation))
      ViewCompat.setElevation(this, tintTypedArray.getDimensionPixelSize(R.styleable.BottomNavigationView_elevation, 0)); 
    setLabelVisibilityMode(tintTypedArray.getInteger(R.styleable.BottomNavigationView_labelVisibilityMode, -1));
    setItemHorizontalTranslationEnabled(tintTypedArray.getBoolean(R.styleable.BottomNavigationView_itemHorizontalTranslationEnabled, true));
    paramInt = tintTypedArray.getResourceId(R.styleable.BottomNavigationView_itemBackground, 0);
    this.menuView.setItemBackgroundRes(paramInt);
    if (tintTypedArray.hasValue(R.styleable.BottomNavigationView_menu))
      inflateMenu(tintTypedArray.getResourceId(R.styleable.BottomNavigationView_menu, 0)); 
    tintTypedArray.recycle();
    addView(this.menuView, layoutParams);
    if (Build.VERSION.SDK_INT < 21)
      addCompatibilityTopDivider(paramContext); 
    this.menu.setCallback(new Object(this));
  }
  
  private void addCompatibilityTopDivider(Context paramContext) {
    View view = new View(paramContext);
    view.setBackgroundColor(ContextCompat.getColor(paramContext, R.color.design_bottom_navigation_shadow_color));
    view.setLayoutParams(new FrameLayout.LayoutParams(-1, getResources().getDimensionPixelSize(R.dimen.design_bottom_navigation_shadow_height)));
    addView(view);
  }
  
  private MenuInflater getMenuInflater() {
    if (this.menuInflater == null)
      this.menuInflater = new SupportMenuInflater(getContext()); 
    return this.menuInflater;
  }
  
  @Nullable
  public Drawable getItemBackground() { return this.menuView.getItemBackground(); }
  
  @Deprecated
  @DrawableRes
  public int getItemBackgroundResource() { return this.menuView.getItemBackgroundRes(); }
  
  @Dimension
  public int getItemIconSize() { return this.menuView.getItemIconSize(); }
  
  @Nullable
  public ColorStateList getItemIconTintList() { return this.menuView.getIconTintList(); }
  
  @StyleRes
  public int getItemTextAppearanceActive() { return this.menuView.getItemTextAppearanceActive(); }
  
  @StyleRes
  public int getItemTextAppearanceInactive() { return this.menuView.getItemTextAppearanceInactive(); }
  
  @Nullable
  public ColorStateList getItemTextColor() { return this.menuView.getItemTextColor(); }
  
  public int getLabelVisibilityMode() { return this.menuView.getLabelVisibilityMode(); }
  
  public int getMaxItemCount() { return 5; }
  
  @NonNull
  public Menu getMenu() { return this.menu; }
  
  @IdRes
  public int getSelectedItemId() { return this.menuView.getSelectedItemId(); }
  
  public void inflateMenu(int paramInt) {
    this.presenter.setUpdateSuspended(true);
    getMenuInflater().inflate(paramInt, this.menu);
    this.presenter.setUpdateSuspended(false);
    this.presenter.updateMenuView(true);
  }
  
  public boolean isItemHorizontalTranslationEnabled() { return this.menuView.isItemHorizontalTranslationEnabled(); }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable) {
    if (!(paramParcelable instanceof SavedState)) {
      super.onRestoreInstanceState(paramParcelable);
      return;
    } 
    SavedState savedState = (SavedState)paramParcelable;
    super.onRestoreInstanceState(savedState.getSuperState());
    this.menu.restorePresenterStates(savedState.menuPresenterState);
  }
  
  protected Parcelable onSaveInstanceState() {
    SavedState savedState = new SavedState(super.onSaveInstanceState());
    savedState.menuPresenterState = new Bundle();
    this.menu.savePresenterStates(savedState.menuPresenterState);
    return savedState;
  }
  
  public void setItemBackground(@Nullable Drawable paramDrawable) { this.menuView.setItemBackground(paramDrawable); }
  
  public void setItemBackgroundResource(@DrawableRes int paramInt) { this.menuView.setItemBackgroundRes(paramInt); }
  
  public void setItemHorizontalTranslationEnabled(boolean paramBoolean) {
    if (this.menuView.isItemHorizontalTranslationEnabled() != paramBoolean) {
      this.menuView.setItemHorizontalTranslationEnabled(paramBoolean);
      this.presenter.updateMenuView(false);
    } 
  }
  
  public void setItemIconSize(@Dimension int paramInt) { this.menuView.setItemIconSize(paramInt); }
  
  public void setItemIconSizeRes(@DimenRes int paramInt) { setItemIconSize(getResources().getDimensionPixelSize(paramInt)); }
  
  public void setItemIconTintList(@Nullable ColorStateList paramColorStateList) { this.menuView.setIconTintList(paramColorStateList); }
  
  public void setItemTextAppearanceActive(@StyleRes int paramInt) { this.menuView.setItemTextAppearanceActive(paramInt); }
  
  public void setItemTextAppearanceInactive(@StyleRes int paramInt) { this.menuView.setItemTextAppearanceInactive(paramInt); }
  
  public void setItemTextColor(@Nullable ColorStateList paramColorStateList) { this.menuView.setItemTextColor(paramColorStateList); }
  
  public void setLabelVisibilityMode(int paramInt) {
    if (this.menuView.getLabelVisibilityMode() != paramInt) {
      this.menuView.setLabelVisibilityMode(paramInt);
      this.presenter.updateMenuView(false);
    } 
  }
  
  public void setOnNavigationItemReselectedListener(@Nullable OnNavigationItemReselectedListener paramOnNavigationItemReselectedListener) { this.reselectedListener = paramOnNavigationItemReselectedListener; }
  
  public void setOnNavigationItemSelectedListener(@Nullable OnNavigationItemSelectedListener paramOnNavigationItemSelectedListener) { this.selectedListener = paramOnNavigationItemSelectedListener; }
  
  public void setSelectedItemId(@IdRes int paramInt) {
    MenuItem menuItem = this.menu.findItem(paramInt);
    if (menuItem != null && !this.menu.performItemAction(menuItem, this.presenter, 0))
      menuItem.setChecked(true); 
  }
}
