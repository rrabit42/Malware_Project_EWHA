package android.support.v4.media;

import android.content.ComponentName;
import android.content.Context;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RestrictTo;
import android.support.v4.media.session.MediaSessionCompat;
import android.text.TextUtils;
import android.util.Log;

public final class MediaBrowserCompat {
  public static final String CUSTOM_ACTION_DOWNLOAD = "android.support.v4.media.action.DOWNLOAD";
  
  public static final String CUSTOM_ACTION_REMOVE_DOWNLOADED_FILE = "android.support.v4.media.action.REMOVE_DOWNLOADED_FILE";
  
  static final boolean DEBUG = Log.isLoggable("MediaBrowserCompat", 3);
  
  public static final String EXTRA_DOWNLOAD_PROGRESS = "android.media.browse.extra.DOWNLOAD_PROGRESS";
  
  public static final String EXTRA_MEDIA_ID = "android.media.browse.extra.MEDIA_ID";
  
  public static final String EXTRA_PAGE = "android.media.browse.extra.PAGE";
  
  public static final String EXTRA_PAGE_SIZE = "android.media.browse.extra.PAGE_SIZE";
  
  static final String TAG = "MediaBrowserCompat";
  
  private final MediaBrowserImpl mImpl;
  
  public MediaBrowserCompat(Context paramContext, ComponentName paramComponentName, ConnectionCallback paramConnectionCallback, Bundle paramBundle) {
    if (Build.VERSION.SDK_INT >= 26) {
      this.mImpl = new MediaBrowserImplApi26(paramContext, paramComponentName, paramConnectionCallback, paramBundle);
      return;
    } 
    if (Build.VERSION.SDK_INT >= 23) {
      this.mImpl = new MediaBrowserImplApi23(paramContext, paramComponentName, paramConnectionCallback, paramBundle);
      return;
    } 
    if (Build.VERSION.SDK_INT >= 21) {
      this.mImpl = new MediaBrowserImplApi21(paramContext, paramComponentName, paramConnectionCallback, paramBundle);
      return;
    } 
    this.mImpl = new MediaBrowserImplBase(paramContext, paramComponentName, paramConnectionCallback, paramBundle);
  }
  
  public void connect() { this.mImpl.connect(); }
  
  public void disconnect() { this.mImpl.disconnect(); }
  
  @Nullable
  public Bundle getExtras() { return this.mImpl.getExtras(); }
  
  public void getItem(@NonNull String paramString, @NonNull ItemCallback paramItemCallback) { this.mImpl.getItem(paramString, paramItemCallback); }
  
  @Nullable
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public Bundle getNotifyChildrenChangedOptions() { return this.mImpl.getNotifyChildrenChangedOptions(); }
  
  @NonNull
  public String getRoot() { return this.mImpl.getRoot(); }
  
  @NonNull
  public ComponentName getServiceComponent() { return this.mImpl.getServiceComponent(); }
  
  @NonNull
  public MediaSessionCompat.Token getSessionToken() { return this.mImpl.getSessionToken(); }
  
  public boolean isConnected() { return this.mImpl.isConnected(); }
  
  public void search(@NonNull String paramString, Bundle paramBundle, @NonNull SearchCallback paramSearchCallback) {
    if (!TextUtils.isEmpty(paramString)) {
      if (paramSearchCallback != null) {
        this.mImpl.search(paramString, paramBundle, paramSearchCallback);
        return;
      } 
      throw new IllegalArgumentException("callback cannot be null");
    } 
    throw new IllegalArgumentException("query cannot be empty");
  }
  
  public void sendCustomAction(@NonNull String paramString, Bundle paramBundle, @Nullable CustomActionCallback paramCustomActionCallback) {
    if (!TextUtils.isEmpty(paramString)) {
      this.mImpl.sendCustomAction(paramString, paramBundle, paramCustomActionCallback);
      return;
    } 
    throw new IllegalArgumentException("action cannot be empty");
  }
  
  public void subscribe(@NonNull String paramString, @NonNull Bundle paramBundle, @NonNull SubscriptionCallback paramSubscriptionCallback) {
    if (!TextUtils.isEmpty(paramString)) {
      if (paramSubscriptionCallback != null) {
        if (paramBundle != null) {
          this.mImpl.subscribe(paramString, paramBundle, paramSubscriptionCallback);
          return;
        } 
        throw new IllegalArgumentException("options are null");
      } 
      throw new IllegalArgumentException("callback is null");
    } 
    throw new IllegalArgumentException("parentId is empty");
  }
  
  public void subscribe(@NonNull String paramString, @NonNull SubscriptionCallback paramSubscriptionCallback) {
    if (!TextUtils.isEmpty(paramString)) {
      if (paramSubscriptionCallback != null) {
        this.mImpl.subscribe(paramString, null, paramSubscriptionCallback);
        return;
      } 
      throw new IllegalArgumentException("callback is null");
    } 
    throw new IllegalArgumentException("parentId is empty");
  }
  
  public void unsubscribe(@NonNull String paramString) {
    if (!TextUtils.isEmpty(paramString)) {
      this.mImpl.unsubscribe(paramString, null);
      return;
    } 
    throw new IllegalArgumentException("parentId is empty");
  }
  
  public void unsubscribe(@NonNull String paramString, @NonNull SubscriptionCallback paramSubscriptionCallback) {
    if (!TextUtils.isEmpty(paramString)) {
      if (paramSubscriptionCallback != null) {
        this.mImpl.unsubscribe(paramString, paramSubscriptionCallback);
        return;
      } 
      throw new IllegalArgumentException("callback is null");
    } 
    throw new IllegalArgumentException("parentId is empty");
  }
}
