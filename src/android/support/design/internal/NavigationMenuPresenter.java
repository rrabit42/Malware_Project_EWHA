package android.support.design.internal;

import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.annotation.LayoutRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RestrictTo;
import android.support.annotation.StyleRes;
import android.support.design.R;
import android.support.v4.view.ViewCompat;
import android.support.v4.view.WindowInsetsCompat;
import android.support.v7.view.menu.MenuBuilder;
import android.support.v7.view.menu.MenuItemImpl;
import android.support.v7.view.menu.MenuPresenter;
import android.support.v7.view.menu.MenuView;
import android.support.v7.view.menu.SubMenuBuilder;
import android.util.SparseArray;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;

@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
public class NavigationMenuPresenter implements MenuPresenter {
  private static final String STATE_ADAPTER = "android:menu:adapter";
  
  private static final String STATE_HEADER = "android:menu:header";
  
  private static final String STATE_HIERARCHY = "android:menu:list";
  
  NavigationMenuAdapter adapter;
  
  private MenuPresenter.Callback callback;
  
  LinearLayout headerLayout;
  
  ColorStateList iconTintList;
  
  private int id;
  
  Drawable itemBackground;
  
  int itemHorizontalPadding;
  
  int itemIconPadding;
  
  LayoutInflater layoutInflater;
  
  MenuBuilder menu;
  
  private NavigationMenuView menuView;
  
  final View.OnClickListener onClickListener = new Object(this);
  
  int paddingSeparator;
  
  private int paddingTopDefault;
  
  int textAppearance;
  
  boolean textAppearanceSet;
  
  ColorStateList textColor;
  
  public void addHeaderView(@NonNull View paramView) {
    this.headerLayout.addView(paramView);
    NavigationMenuView navigationMenuView = this.menuView;
    navigationMenuView.setPadding(0, 0, 0, navigationMenuView.getPaddingBottom());
  }
  
  public boolean collapseItemActionView(MenuBuilder paramMenuBuilder, MenuItemImpl paramMenuItemImpl) { return false; }
  
  public void dispatchApplyWindowInsets(WindowInsetsCompat paramWindowInsetsCompat) {
    int i = paramWindowInsetsCompat.getSystemWindowInsetTop();
    if (this.paddingTopDefault != i) {
      this.paddingTopDefault = i;
      if (this.headerLayout.getChildCount() == 0) {
        NavigationMenuView navigationMenuView = this.menuView;
        navigationMenuView.setPadding(0, this.paddingTopDefault, 0, navigationMenuView.getPaddingBottom());
      } 
    } 
    ViewCompat.dispatchApplyWindowInsets(this.headerLayout, paramWindowInsetsCompat);
  }
  
  public boolean expandItemActionView(MenuBuilder paramMenuBuilder, MenuItemImpl paramMenuItemImpl) { return false; }
  
  public boolean flagActionItems() { return false; }
  
  @Nullable
  public MenuItemImpl getCheckedItem() { return this.adapter.getCheckedItem(); }
  
  public int getHeaderCount() { return this.headerLayout.getChildCount(); }
  
  public View getHeaderView(int paramInt) { return this.headerLayout.getChildAt(paramInt); }
  
  public int getId() { return this.id; }
  
  @Nullable
  public Drawable getItemBackground() { return this.itemBackground; }
  
  public int getItemHorizontalPadding() { return this.itemHorizontalPadding; }
  
  public int getItemIconPadding() { return this.itemIconPadding; }
  
  @Nullable
  public ColorStateList getItemTextColor() { return this.textColor; }
  
  @Nullable
  public ColorStateList getItemTintList() { return this.iconTintList; }
  
  public MenuView getMenuView(ViewGroup paramViewGroup) {
    if (this.menuView == null) {
      this.menuView = (NavigationMenuView)this.layoutInflater.inflate(R.layout.design_navigation_menu, paramViewGroup, false);
      if (this.adapter == null)
        this.adapter = new NavigationMenuAdapter(this); 
      this.headerLayout = (LinearLayout)this.layoutInflater.inflate(R.layout.design_navigation_item_header, this.menuView, false);
      this.menuView.setAdapter(this.adapter);
    } 
    return this.menuView;
  }
  
  public View inflateHeaderView(@LayoutRes int paramInt) {
    View view = this.layoutInflater.inflate(paramInt, this.headerLayout, false);
    addHeaderView(view);
    return view;
  }
  
  public void initForMenu(Context paramContext, MenuBuilder paramMenuBuilder) {
    this.layoutInflater = LayoutInflater.from(paramContext);
    this.menu = paramMenuBuilder;
    this.paddingSeparator = paramContext.getResources().getDimensionPixelOffset(R.dimen.design_navigation_separator_vertical_padding);
  }
  
  public void onCloseMenu(MenuBuilder paramMenuBuilder, boolean paramBoolean) {
    MenuPresenter.Callback callback1 = this.callback;
    if (callback1 != null)
      callback1.onCloseMenu(paramMenuBuilder, paramBoolean); 
  }
  
  public void onRestoreInstanceState(Parcelable paramParcelable) {
    if (paramParcelable instanceof Bundle) {
      Bundle bundle1 = (Bundle)paramParcelable;
      SparseArray sparseArray2 = bundle1.getSparseParcelableArray("android:menu:list");
      if (sparseArray2 != null)
        this.menuView.restoreHierarchyState(sparseArray2); 
      Bundle bundle2 = bundle1.getBundle("android:menu:adapter");
      if (bundle2 != null)
        this.adapter.restoreInstanceState(bundle2); 
      SparseArray sparseArray1 = bundle1.getSparseParcelableArray("android:menu:header");
      if (sparseArray1 != null)
        this.headerLayout.restoreHierarchyState(sparseArray1); 
    } 
  }
  
  public Parcelable onSaveInstanceState() {
    Bundle bundle = new Bundle();
    if (this.menuView != null) {
      SparseArray sparseArray = new SparseArray();
      this.menuView.saveHierarchyState(sparseArray);
      bundle.putSparseParcelableArray("android:menu:list", sparseArray);
    } 
    NavigationMenuAdapter navigationMenuAdapter = this.adapter;
    if (navigationMenuAdapter != null)
      bundle.putBundle("android:menu:adapter", navigationMenuAdapter.createInstanceState()); 
    if (this.headerLayout != null) {
      SparseArray sparseArray = new SparseArray();
      this.headerLayout.saveHierarchyState(sparseArray);
      bundle.putSparseParcelableArray("android:menu:header", sparseArray);
    } 
    return bundle;
  }
  
  public boolean onSubMenuSelected(SubMenuBuilder paramSubMenuBuilder) { return false; }
  
  public void removeHeaderView(@NonNull View paramView) {
    this.headerLayout.removeView(paramView);
    if (this.headerLayout.getChildCount() == 0) {
      NavigationMenuView navigationMenuView = this.menuView;
      navigationMenuView.setPadding(0, this.paddingTopDefault, 0, navigationMenuView.getPaddingBottom());
    } 
  }
  
  public void setCallback(MenuPresenter.Callback paramCallback) { this.callback = paramCallback; }
  
  public void setCheckedItem(@NonNull MenuItemImpl paramMenuItemImpl) { this.adapter.setCheckedItem(paramMenuItemImpl); }
  
  public void setId(int paramInt) { this.id = paramInt; }
  
  public void setItemBackground(@Nullable Drawable paramDrawable) {
    this.itemBackground = paramDrawable;
    updateMenuView(false);
  }
  
  public void setItemHorizontalPadding(int paramInt) {
    this.itemHorizontalPadding = paramInt;
    updateMenuView(false);
  }
  
  public void setItemIconPadding(int paramInt) {
    this.itemIconPadding = paramInt;
    updateMenuView(false);
  }
  
  public void setItemIconTintList(@Nullable ColorStateList paramColorStateList) {
    this.iconTintList = paramColorStateList;
    updateMenuView(false);
  }
  
  public void setItemTextAppearance(@StyleRes int paramInt) {
    this.textAppearance = paramInt;
    this.textAppearanceSet = true;
    updateMenuView(false);
  }
  
  public void setItemTextColor(@Nullable ColorStateList paramColorStateList) {
    this.textColor = paramColorStateList;
    updateMenuView(false);
  }
  
  public void setUpdateSuspended(boolean paramBoolean) {
    NavigationMenuAdapter navigationMenuAdapter = this.adapter;
    if (navigationMenuAdapter != null)
      navigationMenuAdapter.setUpdateSuspended(paramBoolean); 
  }
  
  public void updateMenuView(boolean paramBoolean) {
    NavigationMenuAdapter navigationMenuAdapter = this.adapter;
    if (navigationMenuAdapter != null)
      navigationMenuAdapter.update(); 
  }
}
