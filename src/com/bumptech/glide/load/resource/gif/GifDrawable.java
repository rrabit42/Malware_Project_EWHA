package com.bumptech.glide.load.resource.gif;

import android.annotation.TargetApi;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.view.Gravity;
import com.bumptech.glide.gifdecoder.GifDecoder;
import com.bumptech.glide.gifdecoder.GifHeader;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.resource.drawable.GlideDrawable;

public class GifDrawable extends GlideDrawable implements GifFrameLoader.FrameCallback {
  private boolean applyGravity;
  
  private final GifDecoder decoder;
  
  private final Rect destRect = new Rect();
  
  private final GifFrameLoader frameLoader;
  
  private boolean isRecycled;
  
  private boolean isRunning;
  
  private boolean isStarted;
  
  private boolean isVisible = true;
  
  private int loopCount;
  
  private int maxLoopCount = -1;
  
  private final Paint paint;
  
  private final GifState state;
  
  public GifDrawable(Context paramContext, GifDecoder.BitmapProvider paramBitmapProvider, BitmapPool paramBitmapPool, Transformation<Bitmap> paramTransformation, int paramInt1, int paramInt2, GifHeader paramGifHeader, byte[] paramArrayOfByte, Bitmap paramBitmap) { this(new GifState(paramGifHeader, paramArrayOfByte, paramContext, paramTransformation, paramInt1, paramInt2, paramBitmapProvider, paramBitmapPool, paramBitmap)); }
  
  GifDrawable(GifDecoder paramGifDecoder, GifFrameLoader paramGifFrameLoader, Bitmap paramBitmap, BitmapPool paramBitmapPool, Paint paramPaint) {
    this.decoder = paramGifDecoder;
    this.frameLoader = paramGifFrameLoader;
    this.state = new GifState(null);
    this.paint = paramPaint;
    GifState gifState = this.state;
    gifState.bitmapPool = paramBitmapPool;
    gifState.firstFrame = paramBitmap;
  }
  
  GifDrawable(GifState paramGifState) {
    if (paramGifState != null) {
      this.state = paramGifState;
      this.decoder = new GifDecoder(paramGifState.bitmapProvider);
      this.paint = new Paint();
      this.decoder.setData(paramGifState.gifHeader, paramGifState.data);
      this.frameLoader = new GifFrameLoader(paramGifState.context, this, this.decoder, paramGifState.targetWidth, paramGifState.targetHeight);
      this.frameLoader.setFrameTransformation(paramGifState.frameTransformation);
      return;
    } 
    throw new NullPointerException("GifState must not be null");
  }
  
  public GifDrawable(GifDrawable paramGifDrawable, Bitmap paramBitmap, Transformation<Bitmap> paramTransformation) { this(new GifState(paramGifDrawable.state.gifHeader, paramGifDrawable.state.data, paramGifDrawable.state.context, paramTransformation, paramGifDrawable.state.targetWidth, paramGifDrawable.state.targetHeight, paramGifDrawable.state.bitmapProvider, paramGifDrawable.state.bitmapPool, paramBitmap)); }
  
  private void reset() {
    this.frameLoader.clear();
    invalidateSelf();
  }
  
  private void resetLoopCount() { this.loopCount = 0; }
  
  private void startRunning() {
    if (this.decoder.getFrameCount() == 1) {
      invalidateSelf();
      return;
    } 
    if (!this.isRunning) {
      this.isRunning = true;
      this.frameLoader.start();
      invalidateSelf();
    } 
  }
  
  private void stopRunning() {
    this.isRunning = false;
    this.frameLoader.stop();
  }
  
  public void draw(Canvas paramCanvas) {
    if (this.isRecycled)
      return; 
    if (this.applyGravity) {
      Gravity.apply(119, getIntrinsicWidth(), getIntrinsicHeight(), getBounds(), this.destRect);
      this.applyGravity = false;
    } 
    Bitmap bitmap = this.frameLoader.getCurrentFrame();
    if (bitmap == null)
      bitmap = this.state.firstFrame; 
    paramCanvas.drawBitmap(bitmap, null, this.destRect, this.paint);
  }
  
  public Drawable.ConstantState getConstantState() { return this.state; }
  
  public byte[] getData() { return this.state.data; }
  
  public GifDecoder getDecoder() { return this.decoder; }
  
  public Bitmap getFirstFrame() { return this.state.firstFrame; }
  
  public int getFrameCount() { return this.decoder.getFrameCount(); }
  
  public Transformation<Bitmap> getFrameTransformation() { return this.state.frameTransformation; }
  
  public int getIntrinsicHeight() { return this.state.firstFrame.getHeight(); }
  
  public int getIntrinsicWidth() { return this.state.firstFrame.getWidth(); }
  
  public int getOpacity() { return -2; }
  
  public boolean isAnimated() { return true; }
  
  boolean isRecycled() { return this.isRecycled; }
  
  public boolean isRunning() { return this.isRunning; }
  
  protected void onBoundsChange(Rect paramRect) {
    super.onBoundsChange(paramRect);
    this.applyGravity = true;
  }
  
  @TargetApi(11)
  public void onFrameReady(int paramInt) {
    if (Build.VERSION.SDK_INT >= 11 && getCallback() == null) {
      stop();
      reset();
      return;
    } 
    invalidateSelf();
    if (paramInt == this.decoder.getFrameCount() - 1)
      this.loopCount++; 
    paramInt = this.maxLoopCount;
    if (paramInt != -1 && this.loopCount >= paramInt)
      stop(); 
  }
  
  public void recycle() {
    this.isRecycled = true;
    this.state.bitmapPool.put(this.state.firstFrame);
    this.frameLoader.clear();
    this.frameLoader.stop();
  }
  
  public void setAlpha(int paramInt) { this.paint.setAlpha(paramInt); }
  
  public void setColorFilter(ColorFilter paramColorFilter) { this.paint.setColorFilter(paramColorFilter); }
  
  public void setFrameTransformation(Transformation<Bitmap> paramTransformation, Bitmap paramBitmap) {
    if (paramBitmap != null) {
      if (paramTransformation != null) {
        GifState gifState = this.state;
        gifState.frameTransformation = paramTransformation;
        gifState.firstFrame = paramBitmap;
        this.frameLoader.setFrameTransformation(paramTransformation);
        return;
      } 
      throw new NullPointerException("The frame transformation must not be null");
    } 
    throw new NullPointerException("The first frame of the GIF must not be null");
  }
  
  void setIsRunning(boolean paramBoolean) { this.isRunning = paramBoolean; }
  
  public void setLoopCount(int paramInt) {
    if (paramInt > 0 || paramInt == -1 || paramInt == 0) {
      if (paramInt == 0) {
        this.maxLoopCount = this.decoder.getLoopCount();
        return;
      } 
      this.maxLoopCount = paramInt;
      return;
    } 
    throw new IllegalArgumentException("Loop count must be greater than 0, or equal to GlideDrawable.LOOP_FOREVER, or equal to GlideDrawable.LOOP_INTRINSIC");
  }
  
  public boolean setVisible(boolean paramBoolean1, boolean paramBoolean2) {
    this.isVisible = paramBoolean1;
    if (!paramBoolean1) {
      stopRunning();
    } else if (this.isStarted) {
      startRunning();
    } 
    return super.setVisible(paramBoolean1, paramBoolean2);
  }
  
  public void start() {
    this.isStarted = true;
    resetLoopCount();
    if (this.isVisible)
      startRunning(); 
  }
  
  public void stop() {
    this.isStarted = false;
    stopRunning();
    if (Build.VERSION.SDK_INT < 11)
      reset(); 
  }
}
