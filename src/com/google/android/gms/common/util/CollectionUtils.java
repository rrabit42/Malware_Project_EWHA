package com.google.android.gms.common.util;

import android.support.annotation.Nullable;
import android.support.v4.util.ArrayMap;
import android.support.v4.util.ArraySet;
import com.google.android.gms.common.annotation.KeepForSdk;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

@KeepForSdk
public final class CollectionUtils {
  @KeepForSdk
  public static boolean isEmpty(@Nullable Collection<?> paramCollection) { return (paramCollection == null) ? true : paramCollection.isEmpty(); }
  
  @Deprecated
  @KeepForSdk
  public static <T> List<T> listOf() { return Collections.emptyList(); }
  
  @Deprecated
  @KeepForSdk
  public static <T> List<T> listOf(T paramT) { return Collections.singletonList(paramT); }
  
  @Deprecated
  @KeepForSdk
  public static <T> List<T> listOf(T... paramVarArgs) {
    int i = paramVarArgs.length;
    return (i != 0) ? ((i != 1) ? Collections.unmodifiableList(Arrays.asList(paramVarArgs)) : listOf(paramVarArgs[0])) : listOf();
  }
  
  @KeepForSdk
  public static <K, V> Map<K, V> mapOf(K paramK1, V paramV1, K paramK2, V paramV2, K paramK3, V paramV3) {
    Map map = zzb(3, false);
    map.put(paramK1, paramV1);
    map.put(paramK2, paramV2);
    map.put(paramK3, paramV3);
    return Collections.unmodifiableMap(map);
  }
  
  @KeepForSdk
  public static <K, V> Map<K, V> mapOf(K paramK1, V paramV1, K paramK2, V paramV2, K paramK3, V paramV3, K paramK4, V paramV4, K paramK5, V paramV5, K paramK6, V paramV6) {
    Map map = zzb(6, false);
    map.put(paramK1, paramV1);
    map.put(paramK2, paramV2);
    map.put(paramK3, paramV3);
    map.put(paramK4, paramV4);
    map.put(paramK5, paramV5);
    map.put(paramK6, paramV6);
    return Collections.unmodifiableMap(map);
  }
  
  @KeepForSdk
  public static <K, V> Map<K, V> mapOfKeyValueArrays(K[] paramArrayOfK, V[] paramArrayOfV) { // Byte code:
    //   0: aload_0
    //   1: arraylength
    //   2: aload_1
    //   3: arraylength
    //   4: if_icmpne -> 76
    //   7: aload_0
    //   8: arraylength
    //   9: istore_3
    //   10: iload_3
    //   11: ifeq -> 72
    //   14: iconst_0
    //   15: istore_2
    //   16: iload_3
    //   17: iconst_1
    //   18: if_icmpeq -> 62
    //   21: aload_0
    //   22: arraylength
    //   23: iconst_0
    //   24: invokestatic zzb : (IZ)Ljava/util/Map;
    //   27: astore #4
    //   29: iload_2
    //   30: aload_0
    //   31: arraylength
    //   32: if_icmpge -> 56
    //   35: aload #4
    //   37: aload_0
    //   38: iload_2
    //   39: aaload
    //   40: aload_1
    //   41: iload_2
    //   42: aaload
    //   43: invokeinterface put : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   48: pop
    //   49: iload_2
    //   50: iconst_1
    //   51: iadd
    //   52: istore_2
    //   53: goto -> 29
    //   56: aload #4
    //   58: invokestatic unmodifiableMap : (Ljava/util/Map;)Ljava/util/Map;
    //   61: areturn
    //   62: aload_0
    //   63: iconst_0
    //   64: aaload
    //   65: aload_1
    //   66: iconst_0
    //   67: aaload
    //   68: invokestatic singletonMap : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;
    //   71: areturn
    //   72: invokestatic emptyMap : ()Ljava/util/Map;
    //   75: areturn
    //   76: aload_0
    //   77: arraylength
    //   78: istore_2
    //   79: aload_1
    //   80: arraylength
    //   81: istore_3
    //   82: new java/lang/StringBuilder
    //   85: dup
    //   86: bipush #66
    //   88: invokespecial <init> : (I)V
    //   91: astore_0
    //   92: aload_0
    //   93: ldc 'Key and values array lengths not equal: '
    //   95: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   98: pop
    //   99: aload_0
    //   100: iload_2
    //   101: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   104: pop
    //   105: aload_0
    //   106: ldc ' != '
    //   108: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   111: pop
    //   112: aload_0
    //   113: iload_3
    //   114: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   117: pop
    //   118: new java/lang/IllegalArgumentException
    //   121: dup
    //   122: aload_0
    //   123: invokevirtual toString : ()Ljava/lang/String;
    //   126: invokespecial <init> : (Ljava/lang/String;)V
    //   129: astore_0
    //   130: goto -> 135
    //   133: aload_0
    //   134: athrow
    //   135: goto -> 133 }
  
  @KeepForSdk
  public static <T> Set<T> mutableSetOfWithSize(int paramInt) { return (paramInt == 0) ? new ArraySet() : zza(paramInt, true); }
  
  @Deprecated
  @KeepForSdk
  public static <T> Set<T> setOf(T paramT1, T paramT2, T paramT3) {
    Set set = zza(3, false);
    set.add(paramT1);
    set.add(paramT2);
    set.add(paramT3);
    return Collections.unmodifiableSet(set);
  }
  
  @Deprecated
  @KeepForSdk
  public static <T> Set<T> setOf(T... paramVarArgs) {
    int i = paramVarArgs.length;
    if (i != 0) {
      if (i != 1) {
        if (i != 2) {
          if (i != 3) {
            if (i != 4) {
              Set set2 = zza(paramVarArgs.length, false);
              Collections.addAll(set2, paramVarArgs);
              return Collections.unmodifiableSet(set2);
            } 
            T t1 = paramVarArgs[0];
            T t2 = paramVarArgs[1];
            T t3 = paramVarArgs[2];
            paramVarArgs = (T[])paramVarArgs[3];
            Set set1 = zza(4, false);
            set1.add(t1);
            set1.add(t2);
            set1.add(t3);
            set1.add(paramVarArgs);
            return Collections.unmodifiableSet(set1);
          } 
          return setOf(paramVarArgs[0], paramVarArgs[1], paramVarArgs[2]);
        } 
        T t = paramVarArgs[0];
        paramVarArgs = (T[])paramVarArgs[1];
        Set set = zza(2, false);
        set.add(t);
        set.add(paramVarArgs);
        return Collections.unmodifiableSet(set);
      } 
      return Collections.singleton(paramVarArgs[0]);
    } 
    return Collections.emptySet();
  }
  
  private static <T> Set<T> zza(int paramInt, boolean paramBoolean) {
    char c;
    float f;
    if (paramBoolean) {
      f = 0.75F;
    } else {
      f = 1.0F;
    } 
    if (paramBoolean) {
      c = '';
    } else {
      c = 'Ā';
    } 
    return (paramInt <= c) ? new ArraySet(paramInt) : new HashSet(paramInt, f);
  }
  
  private static <K, V> Map<K, V> zzb(int paramInt, boolean paramBoolean) { return (paramInt <= 256) ? new ArrayMap(paramInt) : new HashMap(paramInt, 1.0F); }
}
