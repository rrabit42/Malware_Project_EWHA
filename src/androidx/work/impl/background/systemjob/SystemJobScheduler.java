package androidx.work.impl.background.systemjob;

import android.app.job.JobInfo;
import android.app.job.JobScheduler;
import android.content.Context;
import android.os.Build;
import android.os.PersistableBundle;
import android.support.annotation.NonNull;
import android.support.annotation.RequiresApi;
import android.support.annotation.RestrictTo;
import android.support.annotation.VisibleForTesting;
import androidx.work.Logger;
import androidx.work.WorkInfo;
import androidx.work.impl.Scheduler;
import androidx.work.impl.WorkDatabase;
import androidx.work.impl.WorkManagerImpl;
import androidx.work.impl.model.SystemIdInfo;
import androidx.work.impl.model.WorkSpec;
import androidx.work.impl.utils.IdGenerator;
import java.util.List;

@RequiresApi(23)
@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
public class SystemJobScheduler implements Scheduler {
  private static final String TAG = Logger.tagWithPrefix("SystemJobScheduler");
  
  private final IdGenerator mIdGenerator;
  
  private final JobScheduler mJobScheduler;
  
  private final SystemJobInfoConverter mSystemJobInfoConverter;
  
  private final WorkManagerImpl mWorkManager;
  
  public SystemJobScheduler(@NonNull Context paramContext, @NonNull WorkManagerImpl paramWorkManagerImpl) { this(paramContext, paramWorkManagerImpl, (JobScheduler)paramContext.getSystemService("jobscheduler"), new SystemJobInfoConverter(paramContext)); }
  
  @VisibleForTesting
  public SystemJobScheduler(Context paramContext, WorkManagerImpl paramWorkManagerImpl, JobScheduler paramJobScheduler, SystemJobInfoConverter paramSystemJobInfoConverter) {
    this.mWorkManager = paramWorkManagerImpl;
    this.mJobScheduler = paramJobScheduler;
    this.mIdGenerator = new IdGenerator(paramContext);
    this.mSystemJobInfoConverter = paramSystemJobInfoConverter;
  }
  
  private static JobInfo getPendingJobInfo(@NonNull JobScheduler paramJobScheduler, @NonNull String paramString) {
    List list = paramJobScheduler.getAllPendingJobs();
    if (list != null)
      for (JobInfo jobInfo : list) {
        PersistableBundle persistableBundle = jobInfo.getExtras();
        if (persistableBundle != null && persistableBundle.containsKey("EXTRA_WORK_SPEC_ID") && paramString.equals(persistableBundle.getString("EXTRA_WORK_SPEC_ID")))
          return jobInfo; 
      }  
    return null;
  }
  
  public static void jobSchedulerCancelAll(@NonNull Context paramContext) {
    JobScheduler jobScheduler = (JobScheduler)paramContext.getSystemService("jobscheduler");
    if (jobScheduler != null) {
      List list = jobScheduler.getAllPendingJobs();
      if (list != null)
        for (JobInfo jobInfo : list) {
          if (jobInfo.getExtras().containsKey("EXTRA_WORK_SPEC_ID"))
            jobScheduler.cancel(jobInfo.getId()); 
        }  
    } 
  }
  
  public void cancel(@NonNull String paramString) {
    List list = this.mJobScheduler.getAllPendingJobs();
    if (list != null)
      for (JobInfo jobInfo : list) {
        if (paramString.equals(jobInfo.getExtras().getString("EXTRA_WORK_SPEC_ID"))) {
          this.mWorkManager.getWorkDatabase().systemIdInfoDao().removeSystemIdInfo(paramString);
          this.mJobScheduler.cancel(jobInfo.getId());
          if (Build.VERSION.SDK_INT != 23)
            break; 
        } 
      }  
  }
  
  public void schedule(WorkSpec... paramVarArgs) {
    WorkDatabase workDatabase = this.mWorkManager.getWorkDatabase();
    int i = paramVarArgs.length;
    b = 0;
    while (b < i) {
      WorkSpec workSpec = paramVarArgs[b];
      workDatabase.beginTransaction();
      try {
        Logger logger = workDatabase.workSpecDao().getWorkSpec(workSpec.id);
        if (logger == null) {
          logger = Logger.get();
          String str = TAG;
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("Skipping scheduling ");
          stringBuilder.append(workSpec.id);
          stringBuilder.append(" because it's no longer in the DB");
          logger.warning(str, stringBuilder.toString(), new Throwable[0]);
        } else if (logger.state != WorkInfo.State.ENQUEUED) {
          logger = Logger.get();
          String str = TAG;
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("Skipping scheduling ");
          stringBuilder.append(workSpec.id);
          stringBuilder.append(" because it is no longer enqueued");
          logger.warning(str, stringBuilder.toString(), new Throwable[0]);
        } else {
          SystemIdInfo systemIdInfo = workDatabase.systemIdInfoDao().getSystemIdInfo(workSpec.id);
          if (systemIdInfo != null && getPendingJobInfo(this.mJobScheduler, workSpec.id) != null) {
            Logger.get().debug(TAG, String.format("Skipping scheduling %s because JobScheduler is aware of it already.", new Object[] { workSpec.id }), new Throwable[0]);
          } else {
            int j;
            if (systemIdInfo != null) {
              j = systemIdInfo.systemId;
            } else {
              j = this.mIdGenerator.nextJobSchedulerIdWithRange(this.mWorkManager.getConfiguration().getMinJobSchedulerId(), this.mWorkManager.getConfiguration().getMaxJobSchedulerId());
            } 
            if (systemIdInfo == null) {
              systemIdInfo = new SystemIdInfo(workSpec.id, j);
              this.mWorkManager.getWorkDatabase().systemIdInfoDao().insertSystemIdInfo(systemIdInfo);
            } 
            scheduleInternal(workSpec, j);
            if (Build.VERSION.SDK_INT == 23)
              scheduleInternal(workSpec, this.mIdGenerator.nextJobSchedulerIdWithRange(this.mWorkManager.getConfiguration().getMinJobSchedulerId(), this.mWorkManager.getConfiguration().getMaxJobSchedulerId())); 
            workDatabase.setTransactionSuccessful();
          } 
        } 
        workDatabase.endTransaction();
      } finally {
        workDatabase.endTransaction();
      } 
    } 
  }
  
  @VisibleForTesting
  public void scheduleInternal(WorkSpec paramWorkSpec, int paramInt) {
    JobInfo jobInfo = this.mSystemJobInfoConverter.convert(paramWorkSpec, paramInt);
    Logger.get().debug(TAG, String.format("Scheduling work ID %s Job ID %s", new Object[] { paramWorkSpec.id, Integer.valueOf(paramInt) }), new Throwable[0]);
    this.mJobScheduler.schedule(jobInfo);
  }
}
