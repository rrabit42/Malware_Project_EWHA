package android.support.design.widget;

import android.animation.Animator;
import android.animation.ValueAnimator;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.database.DataSetObserver;
import android.graphics.Canvas;
import android.graphics.PorterDuff;
import android.graphics.RectF;
import android.graphics.drawable.Drawable;
import android.support.annotation.BoolRes;
import android.support.annotation.ColorInt;
import android.support.annotation.ColorRes;
import android.support.annotation.Dimension;
import android.support.annotation.DrawableRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.design.R;
import android.support.design.animation.AnimationUtils;
import android.support.design.internal.ThemeEnforcement;
import android.support.design.internal.ViewUtils;
import android.support.design.resources.MaterialResources;
import android.support.v4.util.Pools;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewCompat;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.DecorView;
import android.support.v7.appcompat.R;
import android.support.v7.content.res.AppCompatResources;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.widget.FrameLayout;
import android.widget.HorizontalScrollView;
import android.widget.LinearLayout;
import java.util.ArrayList;
import java.util.Iterator;

@DecorView
public class TabLayout extends HorizontalScrollView {
  private static final int ANIMATION_DURATION = 300;
  
  @Dimension(unit = 0)
  static final int DEFAULT_GAP_TEXT_ICON = 8;
  
  @Dimension(unit = 0)
  private static final int DEFAULT_HEIGHT = 48;
  
  @Dimension(unit = 0)
  private static final int DEFAULT_HEIGHT_WITH_TEXT_ICON = 72;
  
  @Dimension(unit = 0)
  static final int FIXED_WRAP_GUTTER_MIN = 16;
  
  public static final int GRAVITY_CENTER = 1;
  
  public static final int GRAVITY_FILL = 0;
  
  public static final int INDICATOR_GRAVITY_BOTTOM = 0;
  
  public static final int INDICATOR_GRAVITY_CENTER = 1;
  
  public static final int INDICATOR_GRAVITY_STRETCH = 3;
  
  public static final int INDICATOR_GRAVITY_TOP = 2;
  
  private static final int INVALID_WIDTH = -1;
  
  @Dimension(unit = 0)
  private static final int MIN_INDICATOR_WIDTH = 24;
  
  public static final int MODE_FIXED = 1;
  
  public static final int MODE_SCROLLABLE = 0;
  
  @Dimension(unit = 0)
  private static final int TAB_MIN_WIDTH_MARGIN = 56;
  
  private static final Pools.Pool<Tab> tabPool = new Pools.SynchronizedPool(16);
  
  private AdapterChangeListener adapterChangeListener;
  
  private int contentInsetStart;
  
  private BaseOnTabSelectedListener currentVpSelectedListener;
  
  boolean inlineLabel;
  
  int mode;
  
  private TabLayoutOnPageChangeListener pageChangeListener;
  
  private PagerAdapter pagerAdapter;
  
  private DataSetObserver pagerAdapterObserver;
  
  private final int requestedTabMaxWidth;
  
  private final int requestedTabMinWidth;
  
  private ValueAnimator scrollAnimator;
  
  private final int scrollableTabMinWidth;
  
  private BaseOnTabSelectedListener selectedListener;
  
  private final ArrayList<BaseOnTabSelectedListener> selectedListeners = new ArrayList();
  
  private Tab selectedTab;
  
  private boolean setupViewPagerImplicitly;
  
  private final SlidingTabIndicator slidingTabIndicator;
  
  final int tabBackgroundResId;
  
  int tabGravity;
  
  ColorStateList tabIconTint;
  
  PorterDuff.Mode tabIconTintMode;
  
  int tabIndicatorAnimationDuration;
  
  boolean tabIndicatorFullWidth;
  
  int tabIndicatorGravity;
  
  int tabMaxWidth = Integer.MAX_VALUE;
  
  int tabPaddingBottom;
  
  int tabPaddingEnd;
  
  int tabPaddingStart;
  
  int tabPaddingTop;
  
  ColorStateList tabRippleColorStateList;
  
  @Nullable
  Drawable tabSelectedIndicator;
  
  int tabTextAppearance;
  
  ColorStateList tabTextColors;
  
  float tabTextMultiLineSize;
  
  float tabTextSize;
  
  private final RectF tabViewContentBounds = new RectF();
  
  private final Pools.Pool<TabView> tabViewPool = new Pools.SimplePool(12);
  
  private final ArrayList<Tab> tabs = new ArrayList();
  
  boolean unboundedRipple;
  
  ViewPager viewPager;
  
  public TabLayout(Context paramContext) { this(paramContext, null); }
  
  public TabLayout(Context paramContext, AttributeSet paramAttributeSet) { this(paramContext, paramAttributeSet, R.attr.tabStyle); }
  
  public TabLayout(Context paramContext, AttributeSet paramAttributeSet, int paramInt) {
    super(paramContext, paramAttributeSet, paramInt);
    setHorizontalScrollBarEnabled(false);
    this.slidingTabIndicator = new SlidingTabIndicator(this, paramContext);
    super.addView(this.slidingTabIndicator, 0, new FrameLayout.LayoutParams(-2, -1));
    TypedArray typedArray2 = ThemeEnforcement.obtainStyledAttributes(paramContext, paramAttributeSet, R.styleable.TabLayout, paramInt, R.style.Widget_Design_TabLayout, new int[] { R.styleable.TabLayout_tabTextAppearance });
    this.slidingTabIndicator.setSelectedIndicatorHeight(typedArray2.getDimensionPixelSize(R.styleable.TabLayout_tabIndicatorHeight, -1));
    this.slidingTabIndicator.setSelectedIndicatorColor(typedArray2.getColor(R.styleable.TabLayout_tabIndicatorColor, 0));
    setSelectedTabIndicator(MaterialResources.getDrawable(paramContext, typedArray2, R.styleable.TabLayout_tabIndicator));
    setSelectedTabIndicatorGravity(typedArray2.getInt(R.styleable.TabLayout_tabIndicatorGravity, 0));
    setTabIndicatorFullWidth(typedArray2.getBoolean(R.styleable.TabLayout_tabIndicatorFullWidth, true));
    paramInt = typedArray2.getDimensionPixelSize(R.styleable.TabLayout_tabPadding, 0);
    this.tabPaddingBottom = paramInt;
    this.tabPaddingEnd = paramInt;
    this.tabPaddingTop = paramInt;
    this.tabPaddingStart = paramInt;
    this.tabPaddingStart = typedArray2.getDimensionPixelSize(R.styleable.TabLayout_tabPaddingStart, this.tabPaddingStart);
    this.tabPaddingTop = typedArray2.getDimensionPixelSize(R.styleable.TabLayout_tabPaddingTop, this.tabPaddingTop);
    this.tabPaddingEnd = typedArray2.getDimensionPixelSize(R.styleable.TabLayout_tabPaddingEnd, this.tabPaddingEnd);
    this.tabPaddingBottom = typedArray2.getDimensionPixelSize(R.styleable.TabLayout_tabPaddingBottom, this.tabPaddingBottom);
    this.tabTextAppearance = typedArray2.getResourceId(R.styleable.TabLayout_tabTextAppearance, R.style.TextAppearance_Design_Tab);
    TypedArray typedArray1 = paramContext.obtainStyledAttributes(this.tabTextAppearance, R.styleable.TextAppearance);
    try {
      this.tabTextSize = typedArray1.getDimensionPixelSize(R.styleable.TextAppearance_android_textSize, 0);
      this.tabTextColors = MaterialResources.getColorStateList(paramContext, typedArray1, R.styleable.TextAppearance_android_textColor);
      typedArray1.recycle();
      if (typedArray2.hasValue(R.styleable.TabLayout_tabTextColor))
        this.tabTextColors = MaterialResources.getColorStateList(paramContext, typedArray2, R.styleable.TabLayout_tabTextColor); 
      if (typedArray2.hasValue(R.styleable.TabLayout_tabSelectedTextColor)) {
        paramInt = typedArray2.getColor(R.styleable.TabLayout_tabSelectedTextColor, 0);
        this.tabTextColors = createColorStateList(this.tabTextColors.getDefaultColor(), paramInt);
      } 
      this.tabIconTint = MaterialResources.getColorStateList(paramContext, typedArray2, R.styleable.TabLayout_tabIconTint);
      this.tabIconTintMode = ViewUtils.parseTintMode(typedArray2.getInt(R.styleable.TabLayout_tabIconTintMode, -1), null);
      this.tabRippleColorStateList = MaterialResources.getColorStateList(paramContext, typedArray2, R.styleable.TabLayout_tabRippleColor);
      this.tabIndicatorAnimationDuration = typedArray2.getInt(R.styleable.TabLayout_tabIndicatorAnimationDuration, 300);
      this.requestedTabMinWidth = typedArray2.getDimensionPixelSize(R.styleable.TabLayout_tabMinWidth, -1);
      this.requestedTabMaxWidth = typedArray2.getDimensionPixelSize(R.styleable.TabLayout_tabMaxWidth, -1);
      this.tabBackgroundResId = typedArray2.getResourceId(R.styleable.TabLayout_tabBackground, 0);
      this.contentInsetStart = typedArray2.getDimensionPixelSize(R.styleable.TabLayout_tabContentStart, 0);
      this.mode = typedArray2.getInt(R.styleable.TabLayout_tabMode, 1);
      this.tabGravity = typedArray2.getInt(R.styleable.TabLayout_tabGravity, 0);
      this.inlineLabel = typedArray2.getBoolean(R.styleable.TabLayout_tabInlineLabel, false);
      this.unboundedRipple = typedArray2.getBoolean(R.styleable.TabLayout_tabUnboundedRipple, false);
      typedArray2.recycle();
      Resources resources = getResources();
      this.tabTextMultiLineSize = resources.getDimensionPixelSize(R.dimen.design_tab_text_size_2line);
      this.scrollableTabMinWidth = resources.getDimensionPixelSize(R.dimen.design_tab_scrollable_min_width);
      return;
    } finally {
      typedArray1.recycle();
    } 
  }
  
  private void addTabFromItemView(@NonNull TabItem paramTabItem) {
    Tab tab = newTab();
    if (paramTabItem.text != null)
      tab.setText(paramTabItem.text); 
    if (paramTabItem.icon != null)
      tab.setIcon(paramTabItem.icon); 
    if (paramTabItem.customLayout != 0)
      tab.setCustomView(paramTabItem.customLayout); 
    if (!TextUtils.isEmpty(paramTabItem.getContentDescription()))
      tab.setContentDescription(paramTabItem.getContentDescription()); 
    addTab(tab);
  }
  
  private void addTabView(Tab paramTab) {
    TabView tabView = paramTab.view;
    this.slidingTabIndicator.addView(tabView, paramTab.getPosition(), createLayoutParamsForTabs());
  }
  
  private void addViewInternal(View paramView) {
    if (paramView instanceof TabItem) {
      addTabFromItemView((TabItem)paramView);
      return;
    } 
    throw new IllegalArgumentException("Only TabItem instances can be added to TabLayout");
  }
  
  private void animateToTab(int paramInt) {
    if (paramInt == -1)
      return; 
    if (getWindowToken() == null || !ViewCompat.isLaidOut(this) || this.slidingTabIndicator.childrenNeedLayout()) {
      setScrollPosition(paramInt, 0.0F, true);
      return;
    } 
    int i = getScrollX();
    int j = calculateScrollXForTab(paramInt, 0.0F);
    if (i != j) {
      ensureScrollAnimator();
      this.scrollAnimator.setIntValues(new int[] { i, j });
      this.scrollAnimator.start();
    } 
    this.slidingTabIndicator.animateIndicatorToPosition(paramInt, this.tabIndicatorAnimationDuration);
  }
  
  private void applyModeAndGravity() {
    if (this.mode == 0) {
      i = Math.max(0, this.contentInsetStart - this.tabPaddingStart);
    } else {
      i = 0;
    } 
    ViewCompat.setPaddingRelative(this.slidingTabIndicator, i, 0, 0, 0);
    int i = this.mode;
    if (i != 0) {
      if (i == 1)
        this.slidingTabIndicator.setGravity(1); 
    } else {
      this.slidingTabIndicator.setGravity(8388611);
    } 
    updateTabViews(true);
  }
  
  private int calculateScrollXForTab(int paramInt, float paramFloat) {
    int j = this.mode;
    int i = 0;
    if (j == 0) {
      Object object;
      View view = this.slidingTabIndicator.getChildAt(paramInt);
      if (++paramInt < this.slidingTabIndicator.getChildCount()) {
        object = this.slidingTabIndicator.getChildAt(paramInt);
      } else {
        object = null;
      } 
      if (view != null) {
        paramInt = view.getWidth();
      } else {
        paramInt = 0;
      } 
      if (object != null)
        i = object.getWidth(); 
      j = view.getLeft() + paramInt / 2 - getWidth() / 2;
      paramInt = (int)((paramInt + i) * 0.5F * paramFloat);
      return (ViewCompat.getLayoutDirection(this) == 0) ? (j + paramInt) : (j - paramInt);
    } 
    return 0;
  }
  
  private void configureTab(Tab paramTab, int paramInt) {
    paramTab.setPosition(paramInt);
    this.tabs.add(paramInt, paramTab);
    int i = this.tabs.size();
    while (true) {
      if (++paramInt < i) {
        ((Tab)this.tabs.get(paramInt)).setPosition(paramInt);
        continue;
      } 
      break;
    } 
  }
  
  private static ColorStateList createColorStateList(int paramInt1, int paramInt2) { return new ColorStateList(new int[][] { SELECTED_STATE_SET, EMPTY_STATE_SET }, new int[] { paramInt2, paramInt1 }); }
  
  private LinearLayout.LayoutParams createLayoutParamsForTabs() {
    LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(-2, -1);
    updateTabViewLayoutParams(layoutParams);
    return layoutParams;
  }
  
  private TabView createTabView(@NonNull Tab paramTab) {
    Pools.Pool pool = this.tabViewPool;
    if (pool != null) {
      TabView tabView1 = (TabView)pool.acquire();
    } else {
      pool = null;
    } 
    TabView tabView = pool;
    if (pool == null)
      tabView = new TabView(this, getContext()); 
    tabView.setTab(paramTab);
    tabView.setFocusable(true);
    tabView.setMinimumWidth(getTabMinWidth());
    if (TextUtils.isEmpty(Tab.access$100(paramTab))) {
      tabView.setContentDescription(Tab.access$200(paramTab));
      return tabView;
    } 
    tabView.setContentDescription(Tab.access$100(paramTab));
    return tabView;
  }
  
  private void dispatchTabReselected(@NonNull Tab paramTab) {
    for (int i = this.selectedListeners.size() - 1; i >= 0; i--)
      ((BaseOnTabSelectedListener)this.selectedListeners.get(i)).onTabReselected(paramTab); 
  }
  
  private void dispatchTabSelected(@NonNull Tab paramTab) {
    for (int i = this.selectedListeners.size() - 1; i >= 0; i--)
      ((BaseOnTabSelectedListener)this.selectedListeners.get(i)).onTabSelected(paramTab); 
  }
  
  private void dispatchTabUnselected(@NonNull Tab paramTab) {
    for (int i = this.selectedListeners.size() - 1; i >= 0; i--)
      ((BaseOnTabSelectedListener)this.selectedListeners.get(i)).onTabUnselected(paramTab); 
  }
  
  private void ensureScrollAnimator() {
    if (this.scrollAnimator == null) {
      this.scrollAnimator = new ValueAnimator();
      this.scrollAnimator.setInterpolator(AnimationUtils.FAST_OUT_SLOW_IN_INTERPOLATOR);
      this.scrollAnimator.setDuration(this.tabIndicatorAnimationDuration);
      this.scrollAnimator.addUpdateListener(new Object(this));
    } 
  }
  
  @Dimension(unit = 0)
  private int getDefaultHeight() {
    boolean bool1;
    int i = this.tabs.size();
    boolean bool2 = false;
    byte b = 0;
    while (true) {
      bool1 = bool2;
      if (b < i) {
        Tab tab = (Tab)this.tabs.get(b);
        if (tab != null && tab.getIcon() != null && !TextUtils.isEmpty(tab.getText())) {
          bool1 = true;
          break;
        } 
        b++;
        continue;
      } 
      break;
    } 
    return (bool1 && !this.inlineLabel) ? 72 : 48;
  }
  
  private int getTabMinWidth() {
    int i = this.requestedTabMinWidth;
    return (i != -1) ? i : ((this.mode == 0) ? this.scrollableTabMinWidth : 0);
  }
  
  private int getTabScrollRange() { return Math.max(0, this.slidingTabIndicator.getWidth() - getWidth() - getPaddingLeft() - getPaddingRight()); }
  
  private void removeTabViewAt(int paramInt) {
    TabView tabView = (TabView)this.slidingTabIndicator.getChildAt(paramInt);
    this.slidingTabIndicator.removeViewAt(paramInt);
    if (tabView != null) {
      tabView.reset();
      this.tabViewPool.release(tabView);
    } 
    requestLayout();
  }
  
  private void setSelectedTabView(int paramInt) {
    int i = this.slidingTabIndicator.getChildCount();
    if (paramInt < i)
      for (byte b = 0; b < i; b++) {
        boolean bool;
        View view = this.slidingTabIndicator.getChildAt(b);
        boolean bool1 = true;
        if (b == paramInt) {
          bool = true;
        } else {
          bool = false;
        } 
        view.setSelected(bool);
        if (b == paramInt) {
          bool = bool1;
        } else {
          bool = false;
        } 
        view.setActivated(bool);
      }  
  }
  
  private void setupWithViewPager(@Nullable ViewPager paramViewPager, boolean paramBoolean1, boolean paramBoolean2) {
    ViewPager viewPager1 = this.viewPager;
    if (viewPager1 != null) {
      TabLayoutOnPageChangeListener tabLayoutOnPageChangeListener = this.pageChangeListener;
      if (tabLayoutOnPageChangeListener != null)
        viewPager1.removeOnPageChangeListener(tabLayoutOnPageChangeListener); 
      AdapterChangeListener adapterChangeListener1 = this.adapterChangeListener;
      if (adapterChangeListener1 != null)
        this.viewPager.removeOnAdapterChangeListener(adapterChangeListener1); 
    } 
    BaseOnTabSelectedListener baseOnTabSelectedListener = this.currentVpSelectedListener;
    if (baseOnTabSelectedListener != null) {
      removeOnTabSelectedListener(baseOnTabSelectedListener);
      this.currentVpSelectedListener = null;
    } 
    if (paramViewPager != null) {
      this.viewPager = paramViewPager;
      if (this.pageChangeListener == null)
        this.pageChangeListener = new TabLayoutOnPageChangeListener(this); 
      this.pageChangeListener.reset();
      paramViewPager.addOnPageChangeListener(this.pageChangeListener);
      this.currentVpSelectedListener = new ViewPagerOnTabSelectedListener(paramViewPager);
      addOnTabSelectedListener(this.currentVpSelectedListener);
      PagerAdapter pagerAdapter1 = paramViewPager.getAdapter();
      if (pagerAdapter1 != null)
        setPagerAdapter(pagerAdapter1, paramBoolean1); 
      if (this.adapterChangeListener == null)
        this.adapterChangeListener = new AdapterChangeListener(this); 
      this.adapterChangeListener.setAutoRefresh(paramBoolean1);
      paramViewPager.addOnAdapterChangeListener(this.adapterChangeListener);
      setScrollPosition(paramViewPager.getCurrentItem(), 0.0F, true);
    } else {
      this.viewPager = null;
      setPagerAdapter(null, false);
    } 
    this.setupViewPagerImplicitly = paramBoolean2;
  }
  
  private void updateAllTabs() {
    int i = this.tabs.size();
    for (byte b = 0; b < i; b++)
      ((Tab)this.tabs.get(b)).updateView(); 
  }
  
  private void updateTabViewLayoutParams(LinearLayout.LayoutParams paramLayoutParams) {
    if (this.mode == 1 && this.tabGravity == 0) {
      paramLayoutParams.width = 0;
      paramLayoutParams.weight = 1.0F;
      return;
    } 
    paramLayoutParams.width = -2;
    paramLayoutParams.weight = 0.0F;
  }
  
  public void addOnTabSelectedListener(@NonNull BaseOnTabSelectedListener paramBaseOnTabSelectedListener) {
    if (!this.selectedListeners.contains(paramBaseOnTabSelectedListener))
      this.selectedListeners.add(paramBaseOnTabSelectedListener); 
  }
  
  public void addTab(@NonNull Tab paramTab) { addTab(paramTab, this.tabs.isEmpty()); }
  
  public void addTab(@NonNull Tab paramTab, int paramInt) { addTab(paramTab, paramInt, this.tabs.isEmpty()); }
  
  public void addTab(@NonNull Tab paramTab, int paramInt, boolean paramBoolean) {
    if (paramTab.parent == this) {
      configureTab(paramTab, paramInt);
      addTabView(paramTab);
      if (paramBoolean)
        paramTab.select(); 
      return;
    } 
    throw new IllegalArgumentException("Tab belongs to a different TabLayout.");
  }
  
  public void addTab(@NonNull Tab paramTab, boolean paramBoolean) { addTab(paramTab, this.tabs.size(), paramBoolean); }
  
  public void addView(View paramView) { addViewInternal(paramView); }
  
  public void addView(View paramView, int paramInt) { addViewInternal(paramView); }
  
  public void addView(View paramView, int paramInt, ViewGroup.LayoutParams paramLayoutParams) { addViewInternal(paramView); }
  
  public void addView(View paramView, ViewGroup.LayoutParams paramLayoutParams) { addViewInternal(paramView); }
  
  public void clearOnTabSelectedListeners() { this.selectedListeners.clear(); }
  
  protected Tab createTabFromPool() {
    Tab tab2 = (Tab)tabPool.acquire();
    Tab tab1 = tab2;
    if (tab2 == null)
      tab1 = new Tab(); 
    return tab1;
  }
  
  @Dimension(unit = 1)
  int dpToPx(@Dimension(unit = 0) int paramInt) { return Math.round((getResources().getDisplayMetrics()).density * paramInt); }
  
  public FrameLayout.LayoutParams generateLayoutParams(AttributeSet paramAttributeSet) { return generateDefaultLayoutParams(); }
  
  public int getSelectedTabPosition() {
    Tab tab = this.selectedTab;
    return (tab != null) ? tab.getPosition() : -1;
  }
  
  @Nullable
  public Tab getTabAt(int paramInt) { return (paramInt < 0 || paramInt >= getTabCount()) ? null : (Tab)this.tabs.get(paramInt); }
  
  public int getTabCount() { return this.tabs.size(); }
  
  public int getTabGravity() { return this.tabGravity; }
  
  @Nullable
  public ColorStateList getTabIconTint() { return this.tabIconTint; }
  
  public int getTabIndicatorGravity() { return this.tabIndicatorGravity; }
  
  int getTabMaxWidth() { return this.tabMaxWidth; }
  
  public int getTabMode() { return this.mode; }
  
  @Nullable
  public ColorStateList getTabRippleColor() { return this.tabRippleColorStateList; }
  
  @Nullable
  public Drawable getTabSelectedIndicator() { return this.tabSelectedIndicator; }
  
  @Nullable
  public ColorStateList getTabTextColors() { return this.tabTextColors; }
  
  public boolean hasUnboundedRipple() { return this.unboundedRipple; }
  
  public boolean isInlineLabel() { return this.inlineLabel; }
  
  public boolean isTabIndicatorFullWidth() { return this.tabIndicatorFullWidth; }
  
  @NonNull
  public Tab newTab() {
    Tab tab = createTabFromPool();
    tab.parent = this;
    tab.view = createTabView(tab);
    return tab;
  }
  
  protected void onAttachedToWindow() {
    super.onAttachedToWindow();
    if (this.viewPager == null) {
      ViewParent viewParent = getParent();
      if (viewParent instanceof ViewPager)
        setupWithViewPager((ViewPager)viewParent, true, true); 
    } 
  }
  
  protected void onDetachedFromWindow() {
    super.onDetachedFromWindow();
    if (this.setupViewPagerImplicitly) {
      setupWithViewPager(null);
      this.setupViewPagerImplicitly = false;
    } 
  }
  
  protected void onDraw(Canvas paramCanvas) {
    for (byte b = 0; b < this.slidingTabIndicator.getChildCount(); b++) {
      View view = this.slidingTabIndicator.getChildAt(b);
      if (view instanceof TabView)
        TabView.access$300((TabView)view, paramCanvas); 
    } 
    super.onDraw(paramCanvas);
  }
  
  protected void onMeasure(int paramInt1, int paramInt2) {
    int i = dpToPx(getDefaultHeight()) + getPaddingTop() + getPaddingBottom();
    int j = View.MeasureSpec.getMode(paramInt2);
    if (j != Integer.MIN_VALUE) {
      if (j == 0)
        paramInt2 = View.MeasureSpec.makeMeasureSpec(i, 1073741824); 
    } else {
      paramInt2 = View.MeasureSpec.makeMeasureSpec(Math.min(i, View.MeasureSpec.getSize(paramInt2)), 1073741824);
    } 
    j = View.MeasureSpec.getSize(paramInt1);
    if (View.MeasureSpec.getMode(paramInt1) != 0) {
      i = this.requestedTabMaxWidth;
      if (i <= 0)
        i = j - dpToPx(56); 
      this.tabMaxWidth = i;
    } 
    super.onMeasure(paramInt1, paramInt2);
    if (getChildCount() == 1) {
      paramInt1 = 0;
      View view = getChildAt(0);
      i = this.mode;
      if ((i != 0) ? (i == 1 && view.getMeasuredWidth() != getMeasuredWidth()) : (view.getMeasuredWidth() < getMeasuredWidth()))
        paramInt1 = 1; 
      if (paramInt1 != 0) {
        paramInt1 = getChildMeasureSpec(paramInt2, getPaddingTop() + getPaddingBottom(), (view.getLayoutParams()).height);
        view.measure(View.MeasureSpec.makeMeasureSpec(getMeasuredWidth(), 1073741824), paramInt1);
      } 
    } 
  }
  
  void populateFromPagerAdapter() {
    removeAllTabs();
    PagerAdapter pagerAdapter1 = this.pagerAdapter;
    if (pagerAdapter1 != null) {
      int j = pagerAdapter1.getCount();
      int i;
      for (i = 0; i < j; i++)
        addTab(newTab().setText(this.pagerAdapter.getPageTitle(i)), false); 
      ViewPager viewPager1 = this.viewPager;
      if (viewPager1 != null && j > 0) {
        i = viewPager1.getCurrentItem();
        if (i != getSelectedTabPosition() && i < getTabCount())
          selectTab(getTabAt(i)); 
      } 
    } 
  }
  
  protected boolean releaseFromTabPool(Tab paramTab) { return tabPool.release(paramTab); }
  
  public void removeAllTabs() {
    for (int i = this.slidingTabIndicator.getChildCount() - 1; i >= 0; i--)
      removeTabViewAt(i); 
    Iterator iterator = this.tabs.iterator();
    while (iterator.hasNext()) {
      Tab tab = (Tab)iterator.next();
      iterator.remove();
      tab.reset();
      releaseFromTabPool(tab);
    } 
    this.selectedTab = null;
  }
  
  public void removeOnTabSelectedListener(@NonNull BaseOnTabSelectedListener paramBaseOnTabSelectedListener) { this.selectedListeners.remove(paramBaseOnTabSelectedListener); }
  
  public void removeTab(Tab paramTab) {
    if (paramTab.parent == this) {
      removeTabAt(paramTab.getPosition());
      return;
    } 
    throw new IllegalArgumentException("Tab does not belong to this TabLayout.");
  }
  
  public void removeTabAt(int paramInt) {
    boolean bool;
    Tab tab = this.selectedTab;
    if (tab != null) {
      bool = tab.getPosition();
    } else {
      bool = false;
    } 
    removeTabViewAt(paramInt);
    tab = (Tab)this.tabs.remove(paramInt);
    if (tab != null) {
      tab.reset();
      releaseFromTabPool(tab);
    } 
    int j = this.tabs.size();
    for (int i = paramInt; i < j; i++)
      ((Tab)this.tabs.get(i)).setPosition(i); 
    if (bool == paramInt) {
      if (this.tabs.isEmpty()) {
        tab = null;
      } else {
        tab = (Tab)this.tabs.get(Math.max(0, paramInt - 1));
      } 
      selectTab(tab);
    } 
  }
  
  void selectTab(Tab paramTab) { selectTab(paramTab, true); }
  
  void selectTab(Tab paramTab, boolean paramBoolean) {
    Tab tab = this.selectedTab;
    if (tab == paramTab) {
      if (tab != null) {
        dispatchTabReselected(paramTab);
        animateToTab(paramTab.getPosition());
        return;
      } 
    } else {
      byte b;
      if (paramTab != null) {
        b = paramTab.getPosition();
      } else {
        b = -1;
      } 
      if (paramBoolean) {
        if ((tab == null || tab.getPosition() == -1) && b != -1) {
          setScrollPosition(b, 0.0F, true);
        } else {
          animateToTab(b);
        } 
        if (b != -1)
          setSelectedTabView(b); 
      } 
      this.selectedTab = paramTab;
      if (tab != null)
        dispatchTabUnselected(tab); 
      if (paramTab != null)
        dispatchTabSelected(paramTab); 
    } 
  }
  
  public void setInlineLabel(boolean paramBoolean) {
    if (this.inlineLabel != paramBoolean) {
      this.inlineLabel = paramBoolean;
      for (byte b = 0; b < this.slidingTabIndicator.getChildCount(); b++) {
        View view = this.slidingTabIndicator.getChildAt(b);
        if (view instanceof TabView)
          ((TabView)view).updateOrientation(); 
      } 
      applyModeAndGravity();
    } 
  }
  
  public void setInlineLabelResource(@BoolRes int paramInt) { setInlineLabel(getResources().getBoolean(paramInt)); }
  
  @Deprecated
  public void setOnTabSelectedListener(@Nullable BaseOnTabSelectedListener paramBaseOnTabSelectedListener) {
    BaseOnTabSelectedListener baseOnTabSelectedListener = this.selectedListener;
    if (baseOnTabSelectedListener != null)
      removeOnTabSelectedListener(baseOnTabSelectedListener); 
    this.selectedListener = paramBaseOnTabSelectedListener;
    if (paramBaseOnTabSelectedListener != null)
      addOnTabSelectedListener(paramBaseOnTabSelectedListener); 
  }
  
  void setPagerAdapter(@Nullable PagerAdapter paramPagerAdapter, boolean paramBoolean) {
    PagerAdapter pagerAdapter1 = this.pagerAdapter;
    if (pagerAdapter1 != null) {
      DataSetObserver dataSetObserver = this.pagerAdapterObserver;
      if (dataSetObserver != null)
        pagerAdapter1.unregisterDataSetObserver(dataSetObserver); 
    } 
    this.pagerAdapter = paramPagerAdapter;
    if (paramBoolean && paramPagerAdapter != null) {
      if (this.pagerAdapterObserver == null)
        this.pagerAdapterObserver = new PagerAdapterObserver(this); 
      paramPagerAdapter.registerDataSetObserver(this.pagerAdapterObserver);
    } 
    populateFromPagerAdapter();
  }
  
  void setScrollAnimatorListener(Animator.AnimatorListener paramAnimatorListener) {
    ensureScrollAnimator();
    this.scrollAnimator.addListener(paramAnimatorListener);
  }
  
  public void setScrollPosition(int paramInt, float paramFloat, boolean paramBoolean) { setScrollPosition(paramInt, paramFloat, paramBoolean, true); }
  
  void setScrollPosition(int paramInt, float paramFloat, boolean paramBoolean1, boolean paramBoolean2) {
    int i = Math.round(paramInt + paramFloat);
    if (i >= 0) {
      if (i >= this.slidingTabIndicator.getChildCount())
        return; 
      if (paramBoolean2)
        this.slidingTabIndicator.setIndicatorPositionFromTabPosition(paramInt, paramFloat); 
      ValueAnimator valueAnimator = this.scrollAnimator;
      if (valueAnimator != null && valueAnimator.isRunning())
        this.scrollAnimator.cancel(); 
      scrollTo(calculateScrollXForTab(paramInt, paramFloat), 0);
      if (paramBoolean1)
        setSelectedTabView(i); 
    } 
  }
  
  public void setSelectedTabIndicator(@DrawableRes int paramInt) {
    if (paramInt != 0) {
      setSelectedTabIndicator(AppCompatResources.getDrawable(getContext(), paramInt));
      return;
    } 
    setSelectedTabIndicator(null);
  }
  
  public void setSelectedTabIndicator(@Nullable Drawable paramDrawable) {
    if (this.tabSelectedIndicator != paramDrawable) {
      this.tabSelectedIndicator = paramDrawable;
      ViewCompat.postInvalidateOnAnimation(this.slidingTabIndicator);
    } 
  }
  
  public void setSelectedTabIndicatorColor(@ColorInt int paramInt) { this.slidingTabIndicator.setSelectedIndicatorColor(paramInt); }
  
  public void setSelectedTabIndicatorGravity(int paramInt) {
    if (this.tabIndicatorGravity != paramInt) {
      this.tabIndicatorGravity = paramInt;
      ViewCompat.postInvalidateOnAnimation(this.slidingTabIndicator);
    } 
  }
  
  @Deprecated
  public void setSelectedTabIndicatorHeight(int paramInt) { this.slidingTabIndicator.setSelectedIndicatorHeight(paramInt); }
  
  public void setTabGravity(int paramInt) {
    if (this.tabGravity != paramInt) {
      this.tabGravity = paramInt;
      applyModeAndGravity();
    } 
  }
  
  public void setTabIconTint(@Nullable ColorStateList paramColorStateList) {
    if (this.tabIconTint != paramColorStateList) {
      this.tabIconTint = paramColorStateList;
      updateAllTabs();
    } 
  }
  
  public void setTabIconTintResource(@ColorRes int paramInt) { setTabIconTint(AppCompatResources.getColorStateList(getContext(), paramInt)); }
  
  public void setTabIndicatorFullWidth(boolean paramBoolean) {
    this.tabIndicatorFullWidth = paramBoolean;
    ViewCompat.postInvalidateOnAnimation(this.slidingTabIndicator);
  }
  
  public void setTabMode(int paramInt) {
    if (paramInt != this.mode) {
      this.mode = paramInt;
      applyModeAndGravity();
    } 
  }
  
  public void setTabRippleColor(@Nullable ColorStateList paramColorStateList) {
    if (this.tabRippleColorStateList != paramColorStateList) {
      this.tabRippleColorStateList = paramColorStateList;
      for (byte b = 0; b < this.slidingTabIndicator.getChildCount(); b++) {
        View view = this.slidingTabIndicator.getChildAt(b);
        if (view instanceof TabView)
          TabView.access$000((TabView)view, getContext()); 
      } 
    } 
  }
  
  public void setTabRippleColorResource(@ColorRes int paramInt) { setTabRippleColor(AppCompatResources.getColorStateList(getContext(), paramInt)); }
  
  public void setTabTextColors(int paramInt1, int paramInt2) { setTabTextColors(createColorStateList(paramInt1, paramInt2)); }
  
  public void setTabTextColors(@Nullable ColorStateList paramColorStateList) {
    if (this.tabTextColors != paramColorStateList) {
      this.tabTextColors = paramColorStateList;
      updateAllTabs();
    } 
  }
  
  @Deprecated
  public void setTabsFromPagerAdapter(@Nullable PagerAdapter paramPagerAdapter) { setPagerAdapter(paramPagerAdapter, false); }
  
  public void setUnboundedRipple(boolean paramBoolean) {
    if (this.unboundedRipple != paramBoolean) {
      this.unboundedRipple = paramBoolean;
      for (byte b = 0; b < this.slidingTabIndicator.getChildCount(); b++) {
        View view = this.slidingTabIndicator.getChildAt(b);
        if (view instanceof TabView)
          TabView.access$000((TabView)view, getContext()); 
      } 
    } 
  }
  
  public void setUnboundedRippleResource(@BoolRes int paramInt) { setUnboundedRipple(getResources().getBoolean(paramInt)); }
  
  public void setupWithViewPager(@Nullable ViewPager paramViewPager) { setupWithViewPager(paramViewPager, true); }
  
  public void setupWithViewPager(@Nullable ViewPager paramViewPager, boolean paramBoolean) { setupWithViewPager(paramViewPager, paramBoolean, false); }
  
  public boolean shouldDelayChildPressedState() { return (getTabScrollRange() > 0); }
  
  void updateTabViews(boolean paramBoolean) {
    for (byte b = 0; b < this.slidingTabIndicator.getChildCount(); b++) {
      View view = this.slidingTabIndicator.getChildAt(b);
      view.setMinimumWidth(getTabMinWidth());
      updateTabViewLayoutParams((LinearLayout.LayoutParams)view.getLayoutParams());
      if (paramBoolean)
        view.requestLayout(); 
    } 
  }
}
