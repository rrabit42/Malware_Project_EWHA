package com.bumptech.glide;

import android.content.Context;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.load.model.ModelLoader;
import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
import com.bumptech.glide.load.resource.transcode.UnitTranscoder;
import com.bumptech.glide.manager.Lifecycle;
import com.bumptech.glide.manager.RequestTracker;
import com.bumptech.glide.provider.DataLoadProvider;
import com.bumptech.glide.provider.FixedLoadProvider;
import com.bumptech.glide.provider.LoadProvider;
import com.bumptech.glide.request.FutureTarget;
import java.io.File;

public class GenericTranscodeRequest<ModelType, DataType, ResourceType> extends GenericRequestBuilder<ModelType, DataType, ResourceType, ResourceType> implements DownloadOptions {
  private final Class<DataType> dataClass;
  
  private final ModelLoader<ModelType, DataType> modelLoader;
  
  private final RequestManager.OptionsApplier optionsApplier;
  
  private final Class<ResourceType> resourceClass;
  
  GenericTranscodeRequest(Context paramContext, Glide paramGlide, Class<ModelType> paramClass1, ModelLoader<ModelType, DataType> paramModelLoader, Class<DataType> paramClass2, Class<ResourceType> paramClass3, RequestTracker paramRequestTracker, Lifecycle paramLifecycle, RequestManager.OptionsApplier paramOptionsApplier) {
    super(paramContext, paramClass1, build(paramGlide, paramModelLoader, paramClass2, paramClass3, UnitTranscoder.get()), paramClass3, paramGlide, paramRequestTracker, paramLifecycle);
    this.modelLoader = paramModelLoader;
    this.dataClass = paramClass2;
    this.resourceClass = paramClass3;
    this.optionsApplier = paramOptionsApplier;
  }
  
  GenericTranscodeRequest(Class<ResourceType> paramClass1, GenericRequestBuilder<ModelType, ?, ?, ?> paramGenericRequestBuilder, ModelLoader<ModelType, DataType> paramModelLoader, Class<DataType> paramClass2, Class<ResourceType> paramClass3, RequestManager.OptionsApplier paramOptionsApplier) {
    super(build(paramGenericRequestBuilder.glide, paramModelLoader, paramClass2, paramClass3, UnitTranscoder.get()), paramClass1, paramGenericRequestBuilder);
    this.modelLoader = paramModelLoader;
    this.dataClass = paramClass2;
    this.resourceClass = paramClass3;
    this.optionsApplier = paramOptionsApplier;
  }
  
  private static <A, T, Z, R> LoadProvider<A, T, Z, R> build(Glide paramGlide, ModelLoader<A, T> paramModelLoader, Class<T> paramClass1, Class<Z> paramClass2, ResourceTranscoder<Z, R> paramResourceTranscoder) { return new FixedLoadProvider(paramModelLoader, paramResourceTranscoder, paramGlide.buildDataProvider(paramClass1, paramClass2)); }
  
  private GenericRequestBuilder<ModelType, DataType, File, File> getDownloadOnlyRequest() {
    ResourceTranscoder resourceTranscoder = UnitTranscoder.get();
    DataLoadProvider dataLoadProvider = this.glide.buildDataProvider(this.dataClass, File.class);
    FixedLoadProvider fixedLoadProvider = new FixedLoadProvider(this.modelLoader, resourceTranscoder, dataLoadProvider);
    return this.optionsApplier.apply(new GenericRequestBuilder(fixedLoadProvider, File.class, this)).priority(Priority.LOW).diskCacheStrategy(DiskCacheStrategy.SOURCE).skipMemoryCache(true);
  }
  
  public FutureTarget<File> downloadOnly(int paramInt1, int paramInt2) { return getDownloadOnlyRequest().into(paramInt1, paramInt2); }
  
  public <Y extends com.bumptech.glide.request.target.Target<File>> Y downloadOnly(Y paramY) { return (Y)getDownloadOnlyRequest().into(paramY); }
  
  public <TranscodeType> GenericRequestBuilder<ModelType, DataType, ResourceType, TranscodeType> transcode(ResourceTranscoder<ResourceType, TranscodeType> paramResourceTranscoder, Class<TranscodeType> paramClass) {
    LoadProvider loadProvider = build(this.glide, this.modelLoader, this.dataClass, this.resourceClass, paramResourceTranscoder);
    return this.optionsApplier.apply(new GenericRequestBuilder(loadProvider, paramClass, this));
  }
}
