package com.bumptech.glide.load.engine.prefill;

import android.graphics.Bitmap;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.engine.cache.MemoryCache;
import com.bumptech.glide.load.resource.bitmap.BitmapResource;
import com.bumptech.glide.util.Util;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.TimeUnit;

final class BitmapPreFillRunner implements Runnable {
  static final int BACKOFF_RATIO = 4;
  
  private static final Clock DEFAULT_CLOCK = new Clock();
  
  static final long INITIAL_BACKOFF_MS = 40L;
  
  static final long MAX_BACKOFF_MS = TimeUnit.SECONDS.toMillis(1L);
  
  static final long MAX_DURATION_MS = 32L;
  
  private static final String TAG = "PreFillRunner";
  
  private final BitmapPool bitmapPool;
  
  private final Clock clock;
  
  private long currentDelay = 40L;
  
  private final Handler handler;
  
  private boolean isCancelled;
  
  private final MemoryCache memoryCache;
  
  private final Set<PreFillType> seenTypes = new HashSet();
  
  private final PreFillQueue toPrefill;
  
  public BitmapPreFillRunner(BitmapPool paramBitmapPool, MemoryCache paramMemoryCache, PreFillQueue paramPreFillQueue) { this(paramBitmapPool, paramMemoryCache, paramPreFillQueue, DEFAULT_CLOCK, new Handler(Looper.getMainLooper())); }
  
  BitmapPreFillRunner(BitmapPool paramBitmapPool, MemoryCache paramMemoryCache, PreFillQueue paramPreFillQueue, Clock paramClock, Handler paramHandler) {
    this.bitmapPool = paramBitmapPool;
    this.memoryCache = paramMemoryCache;
    this.toPrefill = paramPreFillQueue;
    this.clock = paramClock;
    this.handler = paramHandler;
  }
  
  private void addToBitmapPool(PreFillType paramPreFillType, Bitmap paramBitmap) {
    if (this.seenTypes.add(paramPreFillType)) {
      Bitmap bitmap = this.bitmapPool.get(paramPreFillType.getWidth(), paramPreFillType.getHeight(), paramPreFillType.getConfig());
      if (bitmap != null)
        this.bitmapPool.put(bitmap); 
    } 
    this.bitmapPool.put(paramBitmap);
  }
  
  private boolean allocate() {
    long l = this.clock.now();
    while (!this.toPrefill.isEmpty() && !isGcDetected(l)) {
      PreFillType preFillType = this.toPrefill.remove();
      Bitmap bitmap = Bitmap.createBitmap(preFillType.getWidth(), preFillType.getHeight(), preFillType.getConfig());
      if (getFreeMemoryCacheBytes() >= Util.getBitmapByteSize(bitmap)) {
        this.memoryCache.put(new UniqueKey(null), BitmapResource.obtain(bitmap, this.bitmapPool));
      } else {
        addToBitmapPool(preFillType, bitmap);
      } 
      if (Log.isLoggable("PreFillRunner", 3)) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("allocated [");
        stringBuilder.append(preFillType.getWidth());
        stringBuilder.append("x");
        stringBuilder.append(preFillType.getHeight());
        stringBuilder.append("] ");
        stringBuilder.append(preFillType.getConfig());
        stringBuilder.append(" size: ");
        stringBuilder.append(Util.getBitmapByteSize(bitmap));
        Log.d("PreFillRunner", stringBuilder.toString());
      } 
    } 
    return (!this.isCancelled && !this.toPrefill.isEmpty());
  }
  
  private int getFreeMemoryCacheBytes() { return this.memoryCache.getMaxSize() - this.memoryCache.getCurrentSize(); }
  
  private long getNextDelay() {
    long l = this.currentDelay;
    this.currentDelay = Math.min(4L * l, MAX_BACKOFF_MS);
    return l;
  }
  
  private boolean isGcDetected(long paramLong) { return (this.clock.now() - paramLong >= 32L); }
  
  public void cancel() { this.isCancelled = true; }
  
  public void run() {
    if (allocate())
      this.handler.postDelayed(this, getNextDelay()); 
  }
}
