package com.google.firebase.messaging;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import android.util.Log;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.internal.firebase_messaging.zzj;
import com.google.android.gms.internal.firebase_messaging.zzk;
import com.google.android.gms.internal.firebase_messaging.zzn;
import com.google.android.gms.tasks.Task;
import com.google.android.gms.tasks.Tasks;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.concurrent.Executor;

final class zze implements Closeable {
  private final URL url;
  
  @Nullable
  private Task<Bitmap> zzef;
  
  private zze(URL paramURL) { this.url = paramURL; }
  
  @Nullable
  public static zze zzo(String paramString) {
    if (TextUtils.isEmpty(paramString))
      return null; 
    try {
      return new zze(new URL(paramString));
    } catch (MalformedURLException malformedURLException) {
      paramString = String.valueOf(paramString);
      if (paramString.length() != 0) {
        paramString = "Not downloading image, bad URL: ".concat(paramString);
      } else {
        paramString = new String("Not downloading image, bad URL: ");
      } 
      Log.w("FirebaseMessaging", paramString);
      return null;
    } 
  }
  
  public final void close() { zzk.zza(this.zzeg); }
  
  public final Task<Bitmap> getTask() { return (Task)Preconditions.checkNotNull(this.zzef); }
  
  public final void zza(Executor paramExecutor) { this.zzef = Tasks.call(paramExecutor, new zzd(this)); }
  
  public final Bitmap zzat() throws IOException {
    stringBuilder = new StringBuilder((str = String.valueOf(this.url)).valueOf(str).length() + 22);
    stringBuilder.append("Starting download of: ");
    stringBuilder.append(str);
    Log.i("FirebaseMessaging", stringBuilder.toString());
    try {
      StringBuilder stringBuilder1;
      inputStream = this.url.openConnection().getInputStream();
      String str1 = null;
      str = str1;
      try {
        Throwable throwable;
        InputStream inputStream1 = zzj.zza(inputStream, 1048576L);
        try {
          this.zzeg = inputStream;
          bitmap = BitmapFactory.decodeStream(inputStream1);
          if (bitmap != null) {
            if (Log.isLoggable("FirebaseMessaging", 3)) {
              throwable = new StringBuilder((str = String.valueOf(this.url)).valueOf(str).length() + 31);
              throwable.append("Successfully downloaded image: ");
              throwable.append(str);
              Log.d("FirebaseMessaging", throwable.toString());
            } 
            str = str1;
            zza(null, inputStream1);
            return bitmap;
          } 
          StringBuilder stringBuilder2 = new StringBuilder((str = String.valueOf(this.url)).valueOf(str).length() + 24);
          stringBuilder2.append("Failed to decode image: ");
          stringBuilder2.append(str);
          str = stringBuilder2.toString();
          Log.w("FirebaseMessaging", str);
          throw new IOException(str);
        } catch (Throwable null) {
          try {
            throw throwable;
          } finally {}
        } finally {
          stringBuilder = null;
        } 
        str = str1;
        zza(throwable, inputStream1);
        str = str1;
        throw stringBuilder;
      } catch (Throwable stringBuilder) {
        stringBuilder1 = stringBuilder;
        throw stringBuilder;
      } finally {}
      if (inputStream != null)
        zza(stringBuilder1, inputStream); 
      throw stringBuilder;
    } catch (IOException str) {
      String str1;
      StringBuilder stringBuilder1 = new StringBuilder((str1 = (str = null).valueOf(this.url)).valueOf(str1).length() + 26);
      stringBuilder1.append("Failed to download image: ");
      stringBuilder1.append(str1);
      Log.w("FirebaseMessaging", stringBuilder1.toString());
      throw str;
    } 
  }
}
