package com.google.android.gms.auth;

import android.accounts.Account;
import android.annotation.TargetApi;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.RequiresPermission;
import android.util.Log;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.common.internal.Preconditions;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.List;

public final class GoogleAuthUtil extends zzd {
  public static final int CHANGE_TYPE_ACCOUNT_ADDED = 1;
  
  public static final int CHANGE_TYPE_ACCOUNT_REMOVED = 2;
  
  public static final int CHANGE_TYPE_ACCOUNT_RENAMED_FROM = 3;
  
  public static final int CHANGE_TYPE_ACCOUNT_RENAMED_TO = 4;
  
  public static final String GOOGLE_ACCOUNT_TYPE = "com.google";
  
  private static final String KEY_ANDROID_PACKAGE_NAME;
  
  private static final String KEY_CALLER_UID = zzd.KEY_CALLER_UID;
  
  public static final String KEY_SUPPRESS_PROGRESS_SCREEN = "suppressProgressScreen";
  
  public static final String WORK_ACCOUNT_TYPE = "com.google.work";
  
  static  {
    KEY_ANDROID_PACKAGE_NAME = zzd.KEY_ANDROID_PACKAGE_NAME;
  }
  
  public static void clearToken(Context paramContext, String paramString) throws GooglePlayServicesAvailabilityException, GoogleAuthException, IOException { zzd.clearToken(paramContext, paramString); }
  
  public static List<AccountChangeEvent> getAccountChangeEvents(Context paramContext, int paramInt, String paramString) throws GoogleAuthException, IOException { return zzd.getAccountChangeEvents(paramContext, paramInt, paramString); }
  
  public static String getAccountId(Context paramContext, String paramString) throws GoogleAuthException, IOException { return zzd.getAccountId(paramContext, paramString); }
  
  public static String getToken(Context paramContext, Account paramAccount, String paramString) throws IOException, UserRecoverableAuthException, GoogleAuthException { return zzd.getToken(paramContext, paramAccount, paramString); }
  
  public static String getToken(Context paramContext, Account paramAccount, String paramString, Bundle paramBundle) throws IOException, UserRecoverableAuthException, GoogleAuthException { return zzd.getToken(paramContext, paramAccount, paramString, paramBundle); }
  
  @Deprecated
  public static String getToken(Context paramContext, String paramString1, String paramString2) throws IOException, UserRecoverableAuthException, GoogleAuthException { return zzd.getToken(paramContext, paramString1, paramString2); }
  
  @Deprecated
  public static String getToken(Context paramContext, String paramString1, String paramString2, Bundle paramBundle) throws IOException, UserRecoverableAuthException, GoogleAuthException { return zzd.getToken(paramContext, paramString1, paramString2, paramBundle); }
  
  public static String getTokenWithNotification(Context paramContext, Account paramAccount, String paramString, Bundle paramBundle) throws IOException, UserRecoverableAuthException, GoogleAuthException {
    Bundle bundle = paramBundle;
    if (paramBundle == null)
      bundle = new Bundle(); 
    bundle.putBoolean("handle_notification", true);
    return zza(paramContext, paramAccount, paramString, bundle).zzb();
  }
  
  public static String getTokenWithNotification(Context paramContext, Account paramAccount, String paramString, Bundle paramBundle, Intent paramIntent) throws IOException, UserRecoverableNotifiedException, GoogleAuthException {
    if (paramIntent != null) {
      String str = paramIntent.toUri(1);
      try {
        Intent.parseUri(str, 1);
        Bundle bundle = paramBundle;
        if (paramBundle == null)
          bundle = new Bundle(); 
        bundle.putParcelable("callback_intent", paramIntent);
        bundle.putBoolean("handle_notification", true);
        return zza(paramContext, paramAccount, paramString, bundle).zzb();
      } catch (URISyntaxException paramContext) {
        throw new IllegalArgumentException("Parameter callback contains invalid data. It must be serializable using toUri() and parseUri().");
      } 
    } 
    throw new IllegalArgumentException("Callback cannot be null.");
  }
  
  public static String getTokenWithNotification(Context paramContext, Account paramAccount, String paramString1, Bundle paramBundle1, String paramString2, Bundle paramBundle2) throws IOException, UserRecoverableNotifiedException, GoogleAuthException {
    Preconditions.checkNotEmpty(paramString2, "Authority cannot be empty or null.");
    Bundle bundle = paramBundle1;
    if (paramBundle1 == null)
      bundle = new Bundle(); 
    paramBundle1 = paramBundle2;
    if (paramBundle2 == null)
      paramBundle1 = new Bundle(); 
    ContentResolver.validateSyncExtrasBundle(paramBundle1);
    bundle.putString("authority", paramString2);
    bundle.putBundle("sync_extras", paramBundle1);
    bundle.putBoolean("handle_notification", true);
    return zza(paramContext, paramAccount, paramString1, bundle).zzb();
  }
  
  @Deprecated
  public static String getTokenWithNotification(Context paramContext, String paramString1, String paramString2, Bundle paramBundle) throws IOException, UserRecoverableAuthException, GoogleAuthException { return getTokenWithNotification(paramContext, new Account(paramString1, "com.google"), paramString2, paramBundle); }
  
  @Deprecated
  public static String getTokenWithNotification(Context paramContext, String paramString1, String paramString2, Bundle paramBundle, Intent paramIntent) throws IOException, UserRecoverableNotifiedException, GoogleAuthException { return getTokenWithNotification(paramContext, new Account(paramString1, "com.google"), paramString2, paramBundle, paramIntent); }
  
  @Deprecated
  public static String getTokenWithNotification(Context paramContext, String paramString1, String paramString2, Bundle paramBundle1, String paramString3, Bundle paramBundle2) throws IOException, UserRecoverableNotifiedException, GoogleAuthException { return getTokenWithNotification(paramContext, new Account(paramString1, "com.google"), paramString2, paramBundle1, paramString3, paramBundle2); }
  
  @Deprecated
  @RequiresPermission("android.permission.MANAGE_ACCOUNTS")
  public static void invalidateToken(Context paramContext, String paramString) throws GooglePlayServicesAvailabilityException, GoogleAuthException, IOException { zzd.invalidateToken(paramContext, paramString); }
  
  @TargetApi(23)
  public static Bundle removeAccount(Context paramContext, Account paramAccount) throws GoogleAuthException, IOException { return zzd.removeAccount(paramContext, paramAccount); }
  
  @TargetApi(26)
  public static Boolean requestGoogleAccountsAccess(Context paramContext) throws GoogleAuthException, IOException { return zzd.requestGoogleAccountsAccess(paramContext); }
  
  private static TokenData zza(Context paramContext, Account paramAccount, String paramString, Bundle paramBundle) throws IOException, GoogleAuthException {
    Bundle bundle = paramBundle;
    if (paramBundle == null)
      bundle = new Bundle(); 
    try {
      TokenData tokenData = zzd.zzb(paramContext, paramAccount, paramString, bundle);
      GooglePlayServicesUtil.cancelAvailabilityErrorNotifications(paramContext);
      return tokenData;
    } catch (GooglePlayServicesAvailabilityException paramAccount) {
      GooglePlayServicesUtil.showErrorNotification(paramAccount.getConnectionStatusCode(), paramContext);
      Log.w("GoogleAuthUtil", "Error when getting token", paramAccount);
      throw new UserRecoverableNotifiedException("User intervention required. Notification has been pushed.");
    } catch (UserRecoverableAuthException paramAccount) {
      GooglePlayServicesUtil.cancelAvailabilityErrorNotifications(paramContext);
      Log.w("GoogleAuthUtil", "Error when getting token", paramAccount);
      throw new UserRecoverableNotifiedException("User intervention required. Notification has been pushed.");
    } 
  }
}
