package android.support.design.widget;

import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Parcelable;
import android.support.annotation.DimenRes;
import android.support.annotation.Dimension;
import android.support.annotation.DrawableRes;
import android.support.annotation.IdRes;
import android.support.annotation.LayoutRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RestrictTo;
import android.support.annotation.StyleRes;
import android.support.design.R;
import android.support.design.internal.NavigationMenu;
import android.support.design.internal.NavigationMenuPresenter;
import android.support.design.internal.ScrimInsetsFrameLayout;
import android.support.design.internal.ThemeEnforcement;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.ViewCompat;
import android.support.v4.view.WindowInsetsCompat;
import android.support.v7.appcompat.R;
import android.support.v7.content.res.AppCompatResources;
import android.support.v7.view.SupportMenuInflater;
import android.support.v7.view.menu.MenuItemImpl;
import android.support.v7.widget.TintTypedArray;
import android.util.AttributeSet;
import android.util.TypedValue;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;

public class NavigationView extends ScrimInsetsFrameLayout {
  private static final int[] CHECKED_STATE_SET = { 16842912 };
  
  private static final int[] DISABLED_STATE_SET = { -16842910 };
  
  private static final int PRESENTER_NAVIGATION_VIEW_ID = 1;
  
  OnNavigationItemSelectedListener listener;
  
  private final int maxWidth;
  
  private final NavigationMenu menu;
  
  private MenuInflater menuInflater;
  
  private final NavigationMenuPresenter presenter = new NavigationMenuPresenter();
  
  public NavigationView(Context paramContext) { this(paramContext, null); }
  
  public NavigationView(Context paramContext, AttributeSet paramAttributeSet) { this(paramContext, paramAttributeSet, R.attr.navigationViewStyle); }
  
  public NavigationView(Context paramContext, AttributeSet paramAttributeSet, int paramInt) {
    super(paramContext, paramAttributeSet, paramInt);
    this.menu = new NavigationMenu(paramContext);
    TintTypedArray tintTypedArray = ThemeEnforcement.obtainTintedStyledAttributes(paramContext, paramAttributeSet, R.styleable.NavigationView, paramInt, R.style.Widget_Design_NavigationView, new int[0]);
    ViewCompat.setBackground(this, tintTypedArray.getDrawable(R.styleable.NavigationView_android_background));
    if (tintTypedArray.hasValue(R.styleable.NavigationView_elevation))
      ViewCompat.setElevation(this, tintTypedArray.getDimensionPixelSize(R.styleable.NavigationView_elevation, 0)); 
    ViewCompat.setFitsSystemWindows(this, tintTypedArray.getBoolean(R.styleable.NavigationView_android_fitsSystemWindows, false));
    this.maxWidth = tintTypedArray.getDimensionPixelSize(R.styleable.NavigationView_android_maxWidth, 0);
    if (tintTypedArray.hasValue(R.styleable.NavigationView_itemIconTint)) {
      colorStateList2 = tintTypedArray.getColorStateList(R.styleable.NavigationView_itemIconTint);
    } else {
      colorStateList2 = createDefaultColorStateList(16842808);
    } 
    if (tintTypedArray.hasValue(R.styleable.NavigationView_itemTextAppearance)) {
      b = tintTypedArray.getResourceId(R.styleable.NavigationView_itemTextAppearance, 0);
      paramInt = 1;
    } else {
      paramInt = 0;
      b = 0;
    } 
    paramAttributeSet = null;
    if (tintTypedArray.hasValue(R.styleable.NavigationView_itemTextColor))
      colorStateList1 = tintTypedArray.getColorStateList(R.styleable.NavigationView_itemTextColor); 
    ColorStateList colorStateList3 = colorStateList1;
    if (paramInt == 0) {
      colorStateList3 = colorStateList1;
      if (colorStateList1 == null)
        colorStateList3 = createDefaultColorStateList(16842806); 
    } 
    Drawable drawable = tintTypedArray.getDrawable(R.styleable.NavigationView_itemBackground);
    if (tintTypedArray.hasValue(R.styleable.NavigationView_itemHorizontalPadding)) {
      int j = tintTypedArray.getDimensionPixelSize(R.styleable.NavigationView_itemHorizontalPadding, 0);
      this.presenter.setItemHorizontalPadding(j);
    } 
    int i = tintTypedArray.getDimensionPixelSize(R.styleable.NavigationView_itemIconPadding, 0);
    this.menu.setCallback(new Object(this));
    this.presenter.setId(1);
    this.presenter.initForMenu(paramContext, this.menu);
    this.presenter.setItemIconTintList(colorStateList2);
    if (paramInt != 0)
      this.presenter.setItemTextAppearance(b); 
    this.presenter.setItemTextColor(colorStateList3);
    this.presenter.setItemBackground(drawable);
    this.presenter.setItemIconPadding(i);
    this.menu.addMenuPresenter(this.presenter);
    addView((View)this.presenter.getMenuView(this));
    if (tintTypedArray.hasValue(R.styleable.NavigationView_menu))
      inflateMenu(tintTypedArray.getResourceId(R.styleable.NavigationView_menu, 0)); 
    if (tintTypedArray.hasValue(R.styleable.NavigationView_headerLayout))
      inflateHeaderView(tintTypedArray.getResourceId(R.styleable.NavigationView_headerLayout, 0)); 
    tintTypedArray.recycle();
  }
  
  private ColorStateList createDefaultColorStateList(int paramInt) {
    TypedValue typedValue = new TypedValue();
    if (!getContext().getTheme().resolveAttribute(paramInt, typedValue, true))
      return null; 
    ColorStateList colorStateList = AppCompatResources.getColorStateList(getContext(), typedValue.resourceId);
    if (!getContext().getTheme().resolveAttribute(R.attr.colorPrimary, typedValue, true))
      return null; 
    paramInt = typedValue.data;
    int i = colorStateList.getDefaultColor();
    int[] arrayOfInt1 = DISABLED_STATE_SET;
    int[] arrayOfInt2 = CHECKED_STATE_SET;
    int[] arrayOfInt3 = EMPTY_STATE_SET;
    int j = colorStateList.getColorForState(DISABLED_STATE_SET, i);
    return new ColorStateList(new int[][] { arrayOfInt1, arrayOfInt2, arrayOfInt3 }, new int[] { j, paramInt, i });
  }
  
  private MenuInflater getMenuInflater() {
    if (this.menuInflater == null)
      this.menuInflater = new SupportMenuInflater(getContext()); 
    return this.menuInflater;
  }
  
  public void addHeaderView(@NonNull View paramView) { this.presenter.addHeaderView(paramView); }
  
  @Nullable
  public MenuItem getCheckedItem() { return this.presenter.getCheckedItem(); }
  
  public int getHeaderCount() { return this.presenter.getHeaderCount(); }
  
  public View getHeaderView(int paramInt) { return this.presenter.getHeaderView(paramInt); }
  
  @Nullable
  public Drawable getItemBackground() { return this.presenter.getItemBackground(); }
  
  @Dimension
  public int getItemHorizontalPadding() { return this.presenter.getItemHorizontalPadding(); }
  
  @Dimension
  public int getItemIconPadding() { return this.presenter.getItemIconPadding(); }
  
  @Nullable
  public ColorStateList getItemIconTintList() { return this.presenter.getItemTintList(); }
  
  @Nullable
  public ColorStateList getItemTextColor() { return this.presenter.getItemTextColor(); }
  
  public Menu getMenu() { return this.menu; }
  
  public View inflateHeaderView(@LayoutRes int paramInt) { return this.presenter.inflateHeaderView(paramInt); }
  
  public void inflateMenu(int paramInt) {
    this.presenter.setUpdateSuspended(true);
    getMenuInflater().inflate(paramInt, this.menu);
    this.presenter.setUpdateSuspended(false);
    this.presenter.updateMenuView(false);
  }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  protected void onInsetsChanged(WindowInsetsCompat paramWindowInsetsCompat) { this.presenter.dispatchApplyWindowInsets(paramWindowInsetsCompat); }
  
  protected void onMeasure(int paramInt1, int paramInt2) {
    int i = View.MeasureSpec.getMode(paramInt1);
    if (i != Integer.MIN_VALUE) {
      if (i == 0)
        paramInt1 = View.MeasureSpec.makeMeasureSpec(this.maxWidth, 1073741824); 
    } else {
      paramInt1 = View.MeasureSpec.makeMeasureSpec(Math.min(View.MeasureSpec.getSize(paramInt1), this.maxWidth), 1073741824);
    } 
    super.onMeasure(paramInt1, paramInt2);
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable) {
    if (!(paramParcelable instanceof SavedState)) {
      super.onRestoreInstanceState(paramParcelable);
      return;
    } 
    SavedState savedState = (SavedState)paramParcelable;
    super.onRestoreInstanceState(savedState.getSuperState());
    this.menu.restorePresenterStates(savedState.menuState);
  }
  
  protected Parcelable onSaveInstanceState() {
    SavedState savedState = new SavedState(super.onSaveInstanceState());
    savedState.menuState = new Bundle();
    this.menu.savePresenterStates(savedState.menuState);
    return savedState;
  }
  
  public void removeHeaderView(@NonNull View paramView) { this.presenter.removeHeaderView(paramView); }
  
  public void setCheckedItem(@IdRes int paramInt) {
    MenuItem menuItem = this.menu.findItem(paramInt);
    if (menuItem != null)
      this.presenter.setCheckedItem((MenuItemImpl)menuItem); 
  }
  
  public void setCheckedItem(@NonNull MenuItem paramMenuItem) {
    paramMenuItem = this.menu.findItem(paramMenuItem.getItemId());
    if (paramMenuItem != null) {
      this.presenter.setCheckedItem((MenuItemImpl)paramMenuItem);
      return;
    } 
    throw new IllegalArgumentException("Called setCheckedItem(MenuItem) with an item that is not in the current menu.");
  }
  
  public void setItemBackground(@Nullable Drawable paramDrawable) { this.presenter.setItemBackground(paramDrawable); }
  
  public void setItemBackgroundResource(@DrawableRes int paramInt) { setItemBackground(ContextCompat.getDrawable(getContext(), paramInt)); }
  
  public void setItemHorizontalPadding(@Dimension int paramInt) { this.presenter.setItemHorizontalPadding(paramInt); }
  
  public void setItemHorizontalPaddingResource(@DimenRes int paramInt) { this.presenter.setItemHorizontalPadding(getResources().getDimensionPixelSize(paramInt)); }
  
  public void setItemIconPadding(@Dimension int paramInt) { this.presenter.setItemIconPadding(paramInt); }
  
  public void setItemIconPaddingResource(int paramInt) { this.presenter.setItemIconPadding(getResources().getDimensionPixelSize(paramInt)); }
  
  public void setItemIconTintList(@Nullable ColorStateList paramColorStateList) { this.presenter.setItemIconTintList(paramColorStateList); }
  
  public void setItemTextAppearance(@StyleRes int paramInt) { this.presenter.setItemTextAppearance(paramInt); }
  
  public void setItemTextColor(@Nullable ColorStateList paramColorStateList) { this.presenter.setItemTextColor(paramColorStateList); }
  
  public void setNavigationItemSelectedListener(@Nullable OnNavigationItemSelectedListener paramOnNavigationItemSelectedListener) { this.listener = paramOnNavigationItemSelectedListener; }
}
