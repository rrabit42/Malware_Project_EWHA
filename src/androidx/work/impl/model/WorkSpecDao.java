package androidx.work.impl.model;

import android.arch.lifecycle.LiveData;
import android.arch.persistence.room.Dao;
import android.arch.persistence.room.Insert;
import android.arch.persistence.room.Query;
import android.arch.persistence.room.Transaction;
import android.support.annotation.NonNull;
import androidx.work.Data;
import androidx.work.WorkInfo;
import java.util.List;

@Dao
public interface WorkSpecDao {
  @Query("DELETE FROM workspec WHERE id=:id")
  void delete(String paramString);
  
  @Query("SELECT id FROM workspec WHERE state NOT IN (2, 3, 5)")
  List<String> getAllUnfinishedWork();
  
  @Query("SELECT id FROM workspec")
  List<String> getAllWorkSpecIds();
  
  @Query("SELECT * FROM workspec WHERE state=0 AND schedule_requested_at=-1 LIMIT (SELECT MAX(:schedulerLimit-COUNT(*), 0) FROM workspec WHERE schedule_requested_at<>-1 AND state NOT IN (2, 3, 5))")
  List<WorkSpec> getEligibleWorkForScheduling(int paramInt);
  
  @Query("SELECT * FROM workspec WHERE state=0")
  List<WorkSpec> getEnqueuedWork();
  
  @Query("SELECT output FROM workspec WHERE id IN (SELECT prerequisite_id FROM dependency WHERE work_spec_id=:id)")
  List<Data> getInputsFromPrerequisites(String paramString);
  
  @Query("SELECT * FROM workspec WHERE state=0 AND schedule_requested_at<>-1")
  List<WorkSpec> getScheduledWork();
  
  @Query("SELECT state FROM workspec WHERE id=:id")
  WorkInfo.State getState(String paramString);
  
  @Query("SELECT id FROM workspec WHERE state NOT IN (2, 3, 5) AND id IN (SELECT work_spec_id FROM workname WHERE name=:name)")
  List<String> getUnfinishedWorkWithName(@NonNull String paramString);
  
  @Query("SELECT id FROM workspec WHERE state NOT IN (2, 3, 5) AND id IN (SELECT work_spec_id FROM worktag WHERE tag=:tag)")
  List<String> getUnfinishedWorkWithTag(@NonNull String paramString);
  
  @Query("SELECT * FROM workspec WHERE id=:id")
  WorkSpec getWorkSpec(String paramString);
  
  @Query("SELECT id, state FROM workspec WHERE id IN (SELECT work_spec_id FROM workname WHERE name=:name)")
  List<WorkSpec.IdAndState> getWorkSpecIdAndStatesForName(String paramString);
  
  @Query("SELECT * FROM workspec WHERE id IN (:ids)")
  WorkSpec[] getWorkSpecs(List<String> paramList);
  
  @Query("SELECT id, state, output FROM workspec WHERE id=:id")
  @Transaction
  WorkSpec.WorkInfoPojo getWorkStatusPojoForId(String paramString);
  
  @Query("SELECT id, state, output FROM workspec WHERE id IN (:ids)")
  @Transaction
  List<WorkSpec.WorkInfoPojo> getWorkStatusPojoForIds(List<String> paramList);
  
  @Query("SELECT id, state, output FROM workspec WHERE id IN (SELECT work_spec_id FROM workname WHERE name=:name)")
  @Transaction
  List<WorkSpec.WorkInfoPojo> getWorkStatusPojoForName(String paramString);
  
  @Query("SELECT id, state, output FROM workspec WHERE id IN (SELECT work_spec_id FROM worktag WHERE tag=:tag)")
  @Transaction
  List<WorkSpec.WorkInfoPojo> getWorkStatusPojoForTag(String paramString);
  
  @Query("SELECT id, state, output FROM workspec WHERE id IN (:ids)")
  @Transaction
  LiveData<List<WorkSpec.WorkInfoPojo>> getWorkStatusPojoLiveDataForIds(List<String> paramList);
  
  @Query("SELECT id, state, output FROM workspec WHERE id IN (SELECT work_spec_id FROM workname WHERE name=:name)")
  @Transaction
  LiveData<List<WorkSpec.WorkInfoPojo>> getWorkStatusPojoLiveDataForName(String paramString);
  
  @Query("SELECT id, state, output FROM workspec WHERE id IN (SELECT work_spec_id FROM worktag WHERE tag=:tag)")
  @Transaction
  LiveData<List<WorkSpec.WorkInfoPojo>> getWorkStatusPojoLiveDataForTag(String paramString);
  
  @Query("UPDATE workspec SET run_attempt_count=run_attempt_count+1 WHERE id=:id")
  int incrementWorkSpecRunAttemptCount(String paramString);
  
  @Insert(onConflict = 5)
  void insertWorkSpec(WorkSpec paramWorkSpec);
  
  @Query("UPDATE workspec SET schedule_requested_at=:startTime WHERE id=:id")
  int markWorkSpecScheduled(@NonNull String paramString, long paramLong);
  
  @Query("DELETE FROM workspec WHERE state IN (2, 3, 5) AND (SELECT COUNT(*)=0 FROM dependency WHERE     prerequisite_id=id AND     work_spec_id NOT IN         (SELECT id FROM workspec WHERE state IN (2, 3, 5)))")
  void pruneFinishedWorkWithZeroDependentsIgnoringKeepForAtLeast();
  
  @Query("UPDATE workspec SET schedule_requested_at=-1 WHERE state NOT IN (2, 3, 5)")
  int resetScheduledState();
  
  @Query("UPDATE workspec SET run_attempt_count=0 WHERE id=:id")
  int resetWorkSpecRunAttemptCount(String paramString);
  
  @Query("UPDATE workspec SET output=:output WHERE id=:id")
  void setOutput(String paramString, Data paramData);
  
  @Query("UPDATE workspec SET period_start_time=:periodStartTime WHERE id=:id")
  void setPeriodStartTime(String paramString, long paramLong);
  
  @Query("UPDATE workspec SET state=:state WHERE id IN (:ids)")
  int setState(WorkInfo.State paramState, String... paramVarArgs);
}
