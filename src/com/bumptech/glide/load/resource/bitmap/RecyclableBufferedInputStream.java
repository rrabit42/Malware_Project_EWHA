package com.bumptech.glide.load.resource.bitmap;

import android.util.Log;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;

public class RecyclableBufferedInputStream extends FilterInputStream {
  private static final String TAG = "BufferedIs";
  
  private int count;
  
  private int marklimit;
  
  private int markpos = -1;
  
  private int pos;
  
  public RecyclableBufferedInputStream(InputStream paramInputStream, byte[] paramArrayOfByte) {
    super(paramInputStream);
    if (paramArrayOfByte != null && paramArrayOfByte.length != 0) {
      this.buf = paramArrayOfByte;
      return;
    } 
    throw new IllegalArgumentException("buffer is null or empty");
  }
  
  private int fillbuf(InputStream paramInputStream, byte[] paramArrayOfByte) throws IOException {
    int i = this.markpos;
    if (i != -1) {
      int k = this.pos;
      int j = this.marklimit;
      if (k - i < j) {
        byte[] arrayOfByte;
        if (i == 0 && j > paramArrayOfByte.length && this.count == paramArrayOfByte.length) {
          k = paramArrayOfByte.length * 2;
          i = k;
          if (k > j)
            i = j; 
          if (Log.isLoggable("BufferedIs", 3)) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("allocate buffer of length: ");
            stringBuilder.append(i);
            Log.d("BufferedIs", stringBuilder.toString());
          } 
          arrayOfByte = new byte[i];
          System.arraycopy(paramArrayOfByte, 0, arrayOfByte, 0, paramArrayOfByte.length);
          this.buf = arrayOfByte;
        } else {
          i = this.markpos;
          arrayOfByte = paramArrayOfByte;
          if (i > 0) {
            System.arraycopy(paramArrayOfByte, i, paramArrayOfByte, 0, paramArrayOfByte.length - i);
            arrayOfByte = paramArrayOfByte;
          } 
        } 
        this.pos -= this.markpos;
        this.markpos = 0;
        this.count = 0;
        i = this.pos;
        j = paramInputStream.read(arrayOfByte, i, arrayOfByte.length - i);
        if (j <= 0) {
          i = this.pos;
        } else {
          i = this.pos + j;
        } 
        this.count = i;
        return j;
      } 
    } 
    i = paramInputStream.read(paramArrayOfByte);
    if (i > 0) {
      this.markpos = -1;
      this.pos = 0;
      this.count = i;
    } 
    return i;
  }
  
  private static IOException streamClosed() throws IOException { throw new IOException("BufferedInputStream is closed"); }
  
  public int available() throws IOException { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield in : Ljava/io/InputStream;
    //   6: astore #4
    //   8: aload_0
    //   9: getfield buf : [B
    //   12: ifnull -> 44
    //   15: aload #4
    //   17: ifnull -> 44
    //   20: aload_0
    //   21: getfield count : I
    //   24: istore_1
    //   25: aload_0
    //   26: getfield pos : I
    //   29: istore_2
    //   30: aload #4
    //   32: invokevirtual available : ()I
    //   35: istore_3
    //   36: aload_0
    //   37: monitorexit
    //   38: iload_1
    //   39: iload_2
    //   40: isub
    //   41: iload_3
    //   42: iadd
    //   43: ireturn
    //   44: invokestatic streamClosed : ()Ljava/io/IOException;
    //   47: athrow
    //   48: astore #4
    //   50: aload_0
    //   51: monitorexit
    //   52: aload #4
    //   54: athrow
    // Exception table:
    //   from	to	target	type
    //   2	15	48	finally
    //   20	36	48	finally
    //   44	48	48	finally }
  
  public void close() throws IOException {
    this.buf = null;
    InputStream inputStream = this.in;
    this.in = null;
    if (inputStream != null)
      inputStream.close(); 
  }
  
  public void fixMarkLimit() throws IOException { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: aload_0
    //   4: getfield buf : [B
    //   7: arraylength
    //   8: putfield marklimit : I
    //   11: aload_0
    //   12: monitorexit
    //   13: return
    //   14: astore_1
    //   15: aload_0
    //   16: monitorexit
    //   17: aload_1
    //   18: athrow
    // Exception table:
    //   from	to	target	type
    //   2	11	14	finally }
  
  public void mark(int paramInt) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: aload_0
    //   4: getfield marklimit : I
    //   7: iload_1
    //   8: invokestatic max : (II)I
    //   11: putfield marklimit : I
    //   14: aload_0
    //   15: aload_0
    //   16: getfield pos : I
    //   19: putfield markpos : I
    //   22: aload_0
    //   23: monitorexit
    //   24: return
    //   25: astore_2
    //   26: aload_0
    //   27: monitorexit
    //   28: aload_2
    //   29: athrow
    // Exception table:
    //   from	to	target	type
    //   2	22	25	finally }
  
  public boolean markSupported() { return true; }
  
  public int read() throws IOException { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield buf : [B
    //   6: astore_3
    //   7: aload_0
    //   8: getfield in : Ljava/io/InputStream;
    //   11: astore_2
    //   12: aload_3
    //   13: ifnull -> 113
    //   16: aload_2
    //   17: ifnull -> 113
    //   20: aload_0
    //   21: getfield pos : I
    //   24: aload_0
    //   25: getfield count : I
    //   28: if_icmplt -> 47
    //   31: aload_0
    //   32: aload_2
    //   33: aload_3
    //   34: invokespecial fillbuf : (Ljava/io/InputStream;[B)I
    //   37: istore_1
    //   38: iload_1
    //   39: iconst_m1
    //   40: if_icmpne -> 47
    //   43: aload_0
    //   44: monitorexit
    //   45: iconst_m1
    //   46: ireturn
    //   47: aload_3
    //   48: astore_2
    //   49: aload_3
    //   50: aload_0
    //   51: getfield buf : [B
    //   54: if_acmpeq -> 73
    //   57: aload_0
    //   58: getfield buf : [B
    //   61: astore_2
    //   62: aload_2
    //   63: ifnull -> 69
    //   66: goto -> 73
    //   69: invokestatic streamClosed : ()Ljava/io/IOException;
    //   72: athrow
    //   73: aload_0
    //   74: getfield count : I
    //   77: aload_0
    //   78: getfield pos : I
    //   81: isub
    //   82: ifle -> 109
    //   85: aload_0
    //   86: getfield pos : I
    //   89: istore_1
    //   90: aload_0
    //   91: iload_1
    //   92: iconst_1
    //   93: iadd
    //   94: putfield pos : I
    //   97: aload_2
    //   98: iload_1
    //   99: baload
    //   100: istore_1
    //   101: aload_0
    //   102: monitorexit
    //   103: iload_1
    //   104: sipush #255
    //   107: iand
    //   108: ireturn
    //   109: aload_0
    //   110: monitorexit
    //   111: iconst_m1
    //   112: ireturn
    //   113: invokestatic streamClosed : ()Ljava/io/IOException;
    //   116: athrow
    //   117: astore_2
    //   118: aload_0
    //   119: monitorexit
    //   120: aload_2
    //   121: athrow
    // Exception table:
    //   from	to	target	type
    //   2	12	117	finally
    //   20	38	117	finally
    //   49	62	117	finally
    //   69	73	117	finally
    //   73	97	117	finally
    //   113	117	117	finally }
  
  public int read(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws IOException { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield buf : [B
    //   6: astore #8
    //   8: aload #8
    //   10: ifnull -> 384
    //   13: iload_3
    //   14: ifne -> 21
    //   17: aload_0
    //   18: monitorexit
    //   19: iconst_0
    //   20: ireturn
    //   21: aload_0
    //   22: getfield in : Ljava/io/InputStream;
    //   25: astore #10
    //   27: aload #10
    //   29: ifnull -> 380
    //   32: aload_0
    //   33: getfield pos : I
    //   36: aload_0
    //   37: getfield count : I
    //   40: if_icmpge -> 141
    //   43: aload_0
    //   44: getfield count : I
    //   47: aload_0
    //   48: getfield pos : I
    //   51: isub
    //   52: iload_3
    //   53: if_icmplt -> 62
    //   56: iload_3
    //   57: istore #4
    //   59: goto -> 73
    //   62: aload_0
    //   63: getfield count : I
    //   66: aload_0
    //   67: getfield pos : I
    //   70: isub
    //   71: istore #4
    //   73: aload #8
    //   75: aload_0
    //   76: getfield pos : I
    //   79: aload_1
    //   80: iload_2
    //   81: iload #4
    //   83: invokestatic arraycopy : (Ljava/lang/Object;ILjava/lang/Object;II)V
    //   86: aload_0
    //   87: aload_0
    //   88: getfield pos : I
    //   91: iload #4
    //   93: iadd
    //   94: putfield pos : I
    //   97: iload #4
    //   99: iload_3
    //   100: if_icmpeq -> 136
    //   103: aload #10
    //   105: invokevirtual available : ()I
    //   108: istore #5
    //   110: iload #5
    //   112: ifne -> 118
    //   115: goto -> 136
    //   118: iload_2
    //   119: iload #4
    //   121: iadd
    //   122: istore #5
    //   124: iload_3
    //   125: iload #4
    //   127: isub
    //   128: istore_2
    //   129: iload #5
    //   131: istore #4
    //   133: goto -> 150
    //   136: aload_0
    //   137: monitorexit
    //   138: iload #4
    //   140: ireturn
    //   141: iload_3
    //   142: istore #5
    //   144: iload_2
    //   145: istore #4
    //   147: iload #5
    //   149: istore_2
    //   150: aload_0
    //   151: getfield markpos : I
    //   154: istore #6
    //   156: iconst_m1
    //   157: istore #5
    //   159: iload #6
    //   161: iconst_m1
    //   162: if_icmpne -> 211
    //   165: iload_2
    //   166: aload #8
    //   168: arraylength
    //   169: if_icmplt -> 211
    //   172: aload #10
    //   174: aload_1
    //   175: iload #4
    //   177: iload_2
    //   178: invokevirtual read : ([BII)I
    //   181: istore #7
    //   183: iload #7
    //   185: istore #6
    //   187: iload #7
    //   189: iconst_m1
    //   190: if_icmpne -> 339
    //   193: iload_2
    //   194: iload_3
    //   195: if_icmpne -> 201
    //   198: goto -> 206
    //   201: iload_3
    //   202: iload_2
    //   203: isub
    //   204: istore #5
    //   206: aload_0
    //   207: monitorexit
    //   208: iload #5
    //   210: ireturn
    //   211: aload_0
    //   212: aload #10
    //   214: aload #8
    //   216: invokespecial fillbuf : (Ljava/io/InputStream;[B)I
    //   219: istore #6
    //   221: iload #6
    //   223: iconst_m1
    //   224: if_icmpne -> 245
    //   227: iload_2
    //   228: iload_3
    //   229: if_icmpne -> 235
    //   232: goto -> 240
    //   235: iload_3
    //   236: iload_2
    //   237: isub
    //   238: istore #5
    //   240: aload_0
    //   241: monitorexit
    //   242: iload #5
    //   244: ireturn
    //   245: aload #8
    //   247: astore #9
    //   249: aload #8
    //   251: aload_0
    //   252: getfield buf : [B
    //   255: if_acmpeq -> 276
    //   258: aload_0
    //   259: getfield buf : [B
    //   262: astore #9
    //   264: aload #9
    //   266: ifnull -> 272
    //   269: goto -> 276
    //   272: invokestatic streamClosed : ()Ljava/io/IOException;
    //   275: athrow
    //   276: aload_0
    //   277: getfield count : I
    //   280: aload_0
    //   281: getfield pos : I
    //   284: isub
    //   285: iload_2
    //   286: if_icmplt -> 295
    //   289: iload_2
    //   290: istore #5
    //   292: goto -> 306
    //   295: aload_0
    //   296: getfield count : I
    //   299: aload_0
    //   300: getfield pos : I
    //   303: isub
    //   304: istore #5
    //   306: aload #9
    //   308: aload_0
    //   309: getfield pos : I
    //   312: aload_1
    //   313: iload #4
    //   315: iload #5
    //   317: invokestatic arraycopy : (Ljava/lang/Object;ILjava/lang/Object;II)V
    //   320: aload_0
    //   321: aload_0
    //   322: getfield pos : I
    //   325: iload #5
    //   327: iadd
    //   328: putfield pos : I
    //   331: iload #5
    //   333: istore #6
    //   335: aload #9
    //   337: astore #8
    //   339: iload_2
    //   340: iload #6
    //   342: isub
    //   343: istore_2
    //   344: iload_2
    //   345: ifne -> 352
    //   348: aload_0
    //   349: monitorexit
    //   350: iload_3
    //   351: ireturn
    //   352: aload #10
    //   354: invokevirtual available : ()I
    //   357: istore #5
    //   359: iload #5
    //   361: ifne -> 370
    //   364: aload_0
    //   365: monitorexit
    //   366: iload_3
    //   367: iload_2
    //   368: isub
    //   369: ireturn
    //   370: iload #4
    //   372: iload #6
    //   374: iadd
    //   375: istore #4
    //   377: goto -> 150
    //   380: invokestatic streamClosed : ()Ljava/io/IOException;
    //   383: athrow
    //   384: invokestatic streamClosed : ()Ljava/io/IOException;
    //   387: athrow
    //   388: astore_1
    //   389: aload_0
    //   390: monitorexit
    //   391: goto -> 396
    //   394: aload_1
    //   395: athrow
    //   396: goto -> 394
    // Exception table:
    //   from	to	target	type
    //   2	8	388	finally
    //   21	27	388	finally
    //   32	56	388	finally
    //   62	73	388	finally
    //   73	97	388	finally
    //   103	110	388	finally
    //   150	156	388	finally
    //   165	183	388	finally
    //   211	221	388	finally
    //   249	264	388	finally
    //   272	276	388	finally
    //   276	289	388	finally
    //   295	306	388	finally
    //   306	331	388	finally
    //   352	359	388	finally
    //   380	384	388	finally
    //   384	388	388	finally }
  
  public void reset() throws IOException { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield buf : [B
    //   6: ifnull -> 38
    //   9: iconst_m1
    //   10: aload_0
    //   11: getfield markpos : I
    //   14: if_icmpeq -> 28
    //   17: aload_0
    //   18: aload_0
    //   19: getfield markpos : I
    //   22: putfield pos : I
    //   25: aload_0
    //   26: monitorexit
    //   27: return
    //   28: new com/bumptech/glide/load/resource/bitmap/RecyclableBufferedInputStream$InvalidMarkException
    //   31: dup
    //   32: ldc 'Mark has been invalidated'
    //   34: invokespecial <init> : (Ljava/lang/String;)V
    //   37: athrow
    //   38: new java/io/IOException
    //   41: dup
    //   42: ldc 'Stream is closed'
    //   44: invokespecial <init> : (Ljava/lang/String;)V
    //   47: athrow
    //   48: astore_1
    //   49: aload_0
    //   50: monitorexit
    //   51: aload_1
    //   52: athrow
    // Exception table:
    //   from	to	target	type
    //   2	25	48	finally
    //   28	38	48	finally
    //   38	48	48	finally }
  
  public long skip(long paramLong) throws IOException { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield buf : [B
    //   6: astore #10
    //   8: aload_0
    //   9: getfield in : Ljava/io/InputStream;
    //   12: astore #11
    //   14: aload #10
    //   16: ifnull -> 217
    //   19: lload_1
    //   20: lconst_1
    //   21: lcmp
    //   22: ifge -> 29
    //   25: aload_0
    //   26: monitorexit
    //   27: lconst_0
    //   28: lreturn
    //   29: aload #11
    //   31: ifnull -> 213
    //   34: aload_0
    //   35: getfield count : I
    //   38: aload_0
    //   39: getfield pos : I
    //   42: isub
    //   43: i2l
    //   44: lload_1
    //   45: lcmp
    //   46: iflt -> 65
    //   49: aload_0
    //   50: aload_0
    //   51: getfield pos : I
    //   54: i2l
    //   55: lload_1
    //   56: ladd
    //   57: l2i
    //   58: putfield pos : I
    //   61: aload_0
    //   62: monitorexit
    //   63: lload_1
    //   64: lreturn
    //   65: aload_0
    //   66: getfield count : I
    //   69: aload_0
    //   70: getfield pos : I
    //   73: isub
    //   74: i2l
    //   75: lstore #4
    //   77: aload_0
    //   78: aload_0
    //   79: getfield count : I
    //   82: putfield pos : I
    //   85: aload_0
    //   86: getfield markpos : I
    //   89: iconst_m1
    //   90: if_icmpeq -> 196
    //   93: lload_1
    //   94: aload_0
    //   95: getfield marklimit : I
    //   98: i2l
    //   99: lcmp
    //   100: ifgt -> 196
    //   103: aload_0
    //   104: aload #11
    //   106: aload #10
    //   108: invokespecial fillbuf : (Ljava/io/InputStream;[B)I
    //   111: istore_3
    //   112: iload_3
    //   113: iconst_m1
    //   114: if_icmpne -> 122
    //   117: aload_0
    //   118: monitorexit
    //   119: lload #4
    //   121: lreturn
    //   122: aload_0
    //   123: getfield count : I
    //   126: aload_0
    //   127: getfield pos : I
    //   130: isub
    //   131: i2l
    //   132: lstore #6
    //   134: lload_1
    //   135: lload #4
    //   137: lsub
    //   138: lstore #8
    //   140: lload #6
    //   142: lload #8
    //   144: lcmp
    //   145: iflt -> 165
    //   148: aload_0
    //   149: aload_0
    //   150: getfield pos : I
    //   153: i2l
    //   154: lload #8
    //   156: ladd
    //   157: l2i
    //   158: putfield pos : I
    //   161: aload_0
    //   162: monitorexit
    //   163: lload_1
    //   164: lreturn
    //   165: aload_0
    //   166: getfield count : I
    //   169: i2l
    //   170: lstore_1
    //   171: aload_0
    //   172: getfield pos : I
    //   175: i2l
    //   176: lstore #6
    //   178: aload_0
    //   179: aload_0
    //   180: getfield count : I
    //   183: putfield pos : I
    //   186: aload_0
    //   187: monitorexit
    //   188: lload #4
    //   190: lload_1
    //   191: ladd
    //   192: lload #6
    //   194: lsub
    //   195: lreturn
    //   196: aload #11
    //   198: lload_1
    //   199: lload #4
    //   201: lsub
    //   202: invokevirtual skip : (J)J
    //   205: lstore_1
    //   206: aload_0
    //   207: monitorexit
    //   208: lload #4
    //   210: lload_1
    //   211: ladd
    //   212: lreturn
    //   213: invokestatic streamClosed : ()Ljava/io/IOException;
    //   216: athrow
    //   217: invokestatic streamClosed : ()Ljava/io/IOException;
    //   220: athrow
    //   221: astore #10
    //   223: aload_0
    //   224: monitorexit
    //   225: aload #10
    //   227: athrow
    // Exception table:
    //   from	to	target	type
    //   2	14	221	finally
    //   34	61	221	finally
    //   65	112	221	finally
    //   122	134	221	finally
    //   148	161	221	finally
    //   165	186	221	finally
    //   196	206	221	finally
    //   213	217	221	finally
    //   217	221	221	finally }
}
