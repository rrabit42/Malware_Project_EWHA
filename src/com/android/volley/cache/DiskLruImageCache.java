package com.android.volley.cache;

import android.content.Context;
import android.graphics.Bitmap;
import com.android.volley.misc.DiskLruCache;
import com.android.volley.toolbox.ImageCache;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

public class DiskLruImageCache implements ImageCache {
  private static final int APP_VERSION = 1;
  
  private static int IO_BUFFER_SIZE = 8192;
  
  private static final int VALUE_COUNT = 1;
  
  private Bitmap.CompressFormat mCompressFormat = Bitmap.CompressFormat.JPEG;
  
  private int mCompressQuality = 70;
  
  private DiskLruCache mDiskCache;
  
  static  {
  
  }
  
  public DiskLruImageCache(Context paramContext, String paramString, int paramInt1, Bitmap.CompressFormat paramCompressFormat, int paramInt2) {
    try {
      this.mDiskCache = DiskLruCache.open(getDiskCacheDir(paramContext, paramString), 1, 1, paramInt1);
      this.mCompressFormat = paramCompressFormat;
      this.mCompressQuality = paramInt2;
      return;
    } catch (IOException paramContext) {
      paramContext.printStackTrace();
      return;
    } 
  }
  
  private File getDiskCacheDir(Context paramContext, String paramString) {
    String str = paramContext.getCacheDir().getPath();
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(str);
    stringBuilder.append(File.separator);
    stringBuilder.append(paramString);
    return new File(stringBuilder.toString());
  }
  
  private boolean writeBitmapToFile(Bitmap paramBitmap, DiskLruCache.Editor paramEditor) throws IOException, FileNotFoundException {
    bufferedOutputStream2 = null;
    try {
      bufferedOutputStream = new BufferedOutputStream(paramEditor.newOutputStream(0), IO_BUFFER_SIZE);
    } finally {
      paramEditor = null;
    } 
    if (bufferedOutputStream1 != null)
      bufferedOutputStream1.close(); 
    throw paramEditor;
  }
  
  public void clear() { clearCache(); }
  
  public void clearCache() {
    try {
      this.mDiskCache.delete();
      return;
    } catch (IOException iOException) {
      iOException.printStackTrace();
      return;
    } 
  }
  
  public boolean containsKey(String paramString) {
    int j = 0;
    int i = 0;
    try {
      DiskLruCache.Snapshot snapshot = this.mDiskCache.get(paramString);
      if (snapshot != null)
        i = 1; 
      j = i;
      if (snapshot != null) {
        snapshot.close();
        return i;
      } 
    } catch (IOException paramString) {
      paramString.printStackTrace();
    } finally {}
    return j;
  }
  
  public Bitmap getBitmap(String paramString) { // Byte code:
    //   0: aconst_null
    //   1: astore #5
    //   3: aconst_null
    //   4: astore #6
    //   6: aconst_null
    //   7: astore #4
    //   9: aload_0
    //   10: getfield mDiskCache : Lcom/android/volley/misc/DiskLruCache;
    //   13: aload_1
    //   14: invokevirtual get : (Ljava/lang/String;)Lcom/android/volley/misc/DiskLruCache$Snapshot;
    //   17: astore_2
    //   18: aload_2
    //   19: ifnonnull -> 32
    //   22: aload_2
    //   23: ifnull -> 30
    //   26: aload_2
    //   27: invokevirtual close : ()V
    //   30: aconst_null
    //   31: areturn
    //   32: aload_2
    //   33: astore_3
    //   34: aload_2
    //   35: iconst_0
    //   36: invokevirtual getInputStream : (I)Ljava/io/InputStream;
    //   39: astore #7
    //   41: aload #4
    //   43: astore_1
    //   44: aload #7
    //   46: ifnull -> 67
    //   49: aload_2
    //   50: astore_3
    //   51: new java/io/BufferedInputStream
    //   54: dup
    //   55: aload #7
    //   57: getstatic com/android/volley/cache/DiskLruImageCache.IO_BUFFER_SIZE : I
    //   60: invokespecial <init> : (Ljava/io/InputStream;I)V
    //   63: invokestatic decodeStream : (Ljava/io/InputStream;)Landroid/graphics/Bitmap;
    //   66: astore_1
    //   67: aload_1
    //   68: astore_3
    //   69: aload_2
    //   70: ifnull -> 122
    //   73: aload_2
    //   74: astore_3
    //   75: aload_1
    //   76: astore_2
    //   77: aload_3
    //   78: invokevirtual close : ()V
    //   81: aload_2
    //   82: areturn
    //   83: astore #4
    //   85: aload_2
    //   86: astore_1
    //   87: goto -> 100
    //   90: astore_1
    //   91: aconst_null
    //   92: astore_3
    //   93: goto -> 125
    //   96: astore #4
    //   98: aconst_null
    //   99: astore_1
    //   100: aload_1
    //   101: astore_3
    //   102: aload #4
    //   104: invokevirtual printStackTrace : ()V
    //   107: aload #6
    //   109: astore_3
    //   110: aload_1
    //   111: ifnull -> 122
    //   114: aload #5
    //   116: astore_2
    //   117: aload_1
    //   118: astore_3
    //   119: goto -> 77
    //   122: aload_3
    //   123: areturn
    //   124: astore_1
    //   125: aload_3
    //   126: ifnull -> 133
    //   129: aload_3
    //   130: invokevirtual close : ()V
    //   133: goto -> 138
    //   136: aload_1
    //   137: athrow
    //   138: goto -> 136
    // Exception table:
    //   from	to	target	type
    //   9	18	96	java/io/IOException
    //   9	18	90	finally
    //   34	41	83	java/io/IOException
    //   34	41	124	finally
    //   51	67	83	java/io/IOException
    //   51	67	124	finally
    //   102	107	124	finally }
  
  public File getCacheFolder() { return this.mDiskCache.getDirectory(); }
  
  public void invalidateBitmap(String paramString) {}
  
  public void putBitmap(String paramString, Bitmap paramBitmap) {
    DiskLruCache.Editor editor = null;
    try {
      DiskLruCache.Editor editor1 = this.mDiskCache.edit(paramString);
      if (editor1 == null)
        return; 
      editor = editor1;
      if (writeBitmapToFile(paramBitmap, editor1)) {
        editor = editor1;
        this.mDiskCache.flush();
        editor = editor1;
        editor1.commit();
        return;
      } 
      editor = editor1;
      editor1.abort();
      return;
    } catch (IOException paramString) {
      if (editor != null)
        try {
          editor.abort();
          return;
        } catch (IOException paramString) {
          return;
        }  
    } 
  }
}
