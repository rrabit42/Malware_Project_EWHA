package com.google.android.gms.auth.api.signin.internal;

import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.PendingResults;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.internal.StatusPendingResult;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.logging.Logger;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;

public final class zzd implements Runnable {
  private static final Logger zzbd = new Logger("RevokeAccessOperation", new String[0]);
  
  private final String zzbe;
  
  private final StatusPendingResult zzbf;
  
  private zzd(String paramString) {
    Preconditions.checkNotEmpty(paramString);
    this.zzbe = paramString;
    this.zzbf = new StatusPendingResult(null);
  }
  
  public static PendingResult<Status> zzc(String paramString) {
    if (paramString == null)
      return PendingResults.immediateFailedResult(new Status(4), null); 
    zzd zzd1 = new zzd(paramString);
    (new Thread(zzd1)).start();
    return zzd1.zzbf;
  }
  
  public final void run() {
    Logger logger1 = Status.RESULT_INTERNAL_ERROR;
    Logger logger2 = logger1;
    Status status = logger1;
    try {
      String str = String.valueOf(this.zzbe);
      logger2 = logger1;
      status = logger1;
      if (str.length() != 0) {
        logger2 = logger1;
        status = logger1;
        str = "https://accounts.google.com/o/oauth2/revoke?token=".concat(str);
      } else {
        logger2 = logger1;
        status = logger1;
        str = new String("https://accounts.google.com/o/oauth2/revoke?token=");
      } 
      logger2 = logger1;
      status = logger1;
      HttpURLConnection httpURLConnection = (HttpURLConnection)(new URL(str)).openConnection();
      logger2 = logger1;
      status = logger1;
      httpURLConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
      logger2 = logger1;
      status = logger1;
      int i = httpURLConnection.getResponseCode();
      if (i == 200) {
        logger2 = logger1;
        status = logger1;
        logger1 = Status.RESULT_SUCCESS;
      } else {
        logger2 = logger1;
        status = logger1;
        zzbd.e("Unable to revoke access!", new Object[0]);
      } 
      logger2 = logger1;
      status = logger1;
      Logger logger = zzbd;
      logger2 = logger1;
      status = logger1;
      StringBuilder stringBuilder = new StringBuilder(26);
      logger2 = logger1;
      status = logger1;
      stringBuilder.append("Response Code: ");
      logger2 = logger1;
      status = logger1;
      stringBuilder.append(i);
      logger2 = logger1;
      status = logger1;
      logger.d(stringBuilder.toString(), new Object[0]);
    } catch (IOException null) {
      logger2 = zzbd;
      String str = String.valueOf(logger1.toString());
      if (str.length() != 0) {
        str = "IOException when revoking access: ".concat(str);
      } else {
        str = new String("IOException when revoking access: ");
      } 
      logger2.e(str, new Object[0]);
      Status status1 = status;
    } catch (Exception null) {
      Logger logger = zzbd;
      String str = String.valueOf(logger1.toString());
      if (str.length() != 0) {
        str = "Exception when revoking access: ".concat(str);
      } else {
        str = new String("Exception when revoking access: ");
      } 
      logger.e(str, new Object[0]);
      logger1 = logger2;
    } 
    this.zzbf.setResult(logger1);
  }
}
