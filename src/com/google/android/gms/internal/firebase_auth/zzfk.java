package com.google.android.gms.internal.firebase_auth;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

final class zzfk<FieldDescriptorType extends zzfm<FieldDescriptorType>> extends Object {
  private static final zzfk zzue = new zzfk(true);
  
  private final zzhz<FieldDescriptorType, Object> zzub = zzhz.zzbb(16);
  
  private boolean zzuc;
  
  private boolean zzud = false;
  
  private zzfk() {}
  
  private zzfk(boolean paramBoolean) { zzev(); }
  
  static int zza(zzjf paramzzjf, int paramInt, Object paramObject) {
    int i = zzfa.zzag(paramInt);
    paramInt = i;
    if (paramzzjf == zzjf.zzada) {
      zzfv.zzg((zzhc)paramObject);
      paramInt = i << 1;
    } 
    return paramInt + zzb(paramzzjf, paramObject);
  }
  
  private final Object zza(FieldDescriptorType paramFieldDescriptorType) {
    Object object = this.zzub.get(paramFieldDescriptorType);
    paramFieldDescriptorType = (FieldDescriptorType)object;
    if (object instanceof zzgf)
      paramFieldDescriptorType = (FieldDescriptorType)zzgf.zzia(); 
    return paramFieldDescriptorType;
  }
  
  static void zza(zzfa paramzzfa, zzjf paramzzjf, int paramInt, Object paramObject) throws IOException {
    zzhc zzhc;
    byte[] arrayOfByte;
    if (paramzzjf == zzjf.zzada) {
      zzhc = (zzhc)paramObject;
      zzfv.zzg(zzhc);
      paramzzfa.zzf(paramInt, 3);
      zzhc.zzb(paramzzfa);
      paramzzfa.zzf(paramInt, 4);
      return;
    } 
    paramzzfa.zzf(paramInt, zzhc.zzjz());
    switch (zzfl.zzto[zzhc.ordinal()]) {
      default:
        return;
      case 18:
        if (paramObject instanceof zzfw) {
          paramzzfa.zzac(((zzfw)paramObject).zzbi());
          return;
        } 
        paramzzfa.zzac(((Integer)paramObject).intValue());
        return;
      case 17:
        paramzzfa.zzc(((Long)paramObject).longValue());
        return;
      case 16:
        paramzzfa.zzae(((Integer)paramObject).intValue());
        return;
      case 15:
        paramzzfa.zzd(((Long)paramObject).longValue());
        return;
      case 14:
        paramzzfa.zzaf(((Integer)paramObject).intValue());
        return;
      case 13:
        paramzzfa.zzad(((Integer)paramObject).intValue());
        return;
      case 12:
        if (paramObject instanceof zzeh) {
          paramzzfa.zza((zzeh)paramObject);
          return;
        } 
        arrayOfByte = (byte[])paramObject;
        paramzzfa.zzd(arrayOfByte, 0, arrayOfByte.length);
        return;
      case 11:
        if (paramObject instanceof zzeh) {
          paramzzfa.zza((zzeh)paramObject);
          return;
        } 
        paramzzfa.zzda((String)paramObject);
        return;
      case 10:
        paramzzfa.zzc((zzhc)paramObject);
        return;
      case 9:
        ((zzhc)paramObject).zzb(paramzzfa);
        return;
      case 8:
        paramzzfa.zzs(((Boolean)paramObject).booleanValue());
        return;
      case 7:
        paramzzfa.zzaf(((Integer)paramObject).intValue());
        return;
      case 6:
        paramzzfa.zzd(((Long)paramObject).longValue());
        return;
      case 5:
        paramzzfa.zzac(((Integer)paramObject).intValue());
        return;
      case 4:
        paramzzfa.zzb(((Long)paramObject).longValue());
        return;
      case 3:
        paramzzfa.zzb(((Long)paramObject).longValue());
        return;
      case 2:
        paramzzfa.zza(((Float)paramObject).floatValue());
        return;
      case 1:
        break;
    } 
    paramzzfa.zza(((Double)paramObject).doubleValue());
  }
  
  private final void zza(FieldDescriptorType paramFieldDescriptorType, Object paramObject) {
    if (paramFieldDescriptorType.zzha()) {
      if (paramObject instanceof List) {
        ArrayList arrayList = new ArrayList();
        arrayList.addAll((List)paramObject);
        paramObject = (ArrayList)arrayList;
        int i = paramObject.size();
        byte b = 0;
        while (b < i) {
          Object object = paramObject.get(b);
          b++;
          zza(paramFieldDescriptorType.zzgy(), object);
        } 
        paramObject = arrayList;
      } else {
        throw new IllegalArgumentException("Wrong object type used with protocol message reflection.");
      } 
    } else {
      zza(paramFieldDescriptorType.zzgy(), paramObject);
    } 
    if (paramObject instanceof zzgf)
      this.zzud = true; 
    this.zzub.zza(paramFieldDescriptorType, paramObject);
  }
  
  private static void zza(zzjf paramzzjf, Object paramObject) { // Byte code:
    //   0: aload_1
    //   1: invokestatic checkNotNull : (Ljava/lang/Object;)Ljava/lang/Object;
    //   4: pop
    //   5: getstatic com/google/android/gms/internal/firebase_auth/zzfl.zzuf : [I
    //   8: aload_0
    //   9: invokevirtual zzjy : ()Lcom/google/android/gms/internal/firebase_auth/zzjk;
    //   12: invokevirtual ordinal : ()I
    //   15: iaload
    //   16: istore_2
    //   17: iconst_0
    //   18: istore_3
    //   19: iload_2
    //   20: tableswitch default -> 72, 1 -> 168, 2 -> 160, 3 -> 152, 4 -> 144, 5 -> 136, 6 -> 128, 7 -> 111, 8 -> 92, 9 -> 75
    //   72: goto -> 173
    //   75: aload_1
    //   76: instanceof com/google/android/gms/internal/firebase_auth/zzhc
    //   79: ifne -> 106
    //   82: aload_1
    //   83: instanceof com/google/android/gms/internal/firebase_auth/zzgf
    //   86: ifeq -> 173
    //   89: goto -> 106
    //   92: aload_1
    //   93: instanceof java/lang/Integer
    //   96: ifne -> 106
    //   99: aload_1
    //   100: instanceof com/google/android/gms/internal/firebase_auth/zzfw
    //   103: ifeq -> 173
    //   106: iconst_1
    //   107: istore_3
    //   108: goto -> 173
    //   111: aload_1
    //   112: instanceof com/google/android/gms/internal/firebase_auth/zzeh
    //   115: ifne -> 106
    //   118: aload_1
    //   119: instanceof [B
    //   122: ifeq -> 173
    //   125: goto -> 106
    //   128: aload_1
    //   129: instanceof java/lang/String
    //   132: istore_3
    //   133: goto -> 173
    //   136: aload_1
    //   137: instanceof java/lang/Boolean
    //   140: istore_3
    //   141: goto -> 173
    //   144: aload_1
    //   145: instanceof java/lang/Double
    //   148: istore_3
    //   149: goto -> 173
    //   152: aload_1
    //   153: instanceof java/lang/Float
    //   156: istore_3
    //   157: goto -> 173
    //   160: aload_1
    //   161: instanceof java/lang/Long
    //   164: istore_3
    //   165: goto -> 173
    //   168: aload_1
    //   169: instanceof java/lang/Integer
    //   172: istore_3
    //   173: iload_3
    //   174: ifeq -> 178
    //   177: return
    //   178: new java/lang/IllegalArgumentException
    //   181: dup
    //   182: ldc 'Wrong object type used with protocol message reflection.'
    //   184: invokespecial <init> : (Ljava/lang/String;)V
    //   187: astore_0
    //   188: goto -> 193
    //   191: aload_0
    //   192: athrow
    //   193: goto -> 191 }
  
  private static int zzb(zzfm<?> paramzzfm, Object paramObject) {
    zzjf zzjf = paramzzfm.zzgy();
    int i = paramzzfm.zzbi();
    if (paramzzfm.zzha()) {
      boolean bool = paramzzfm.zzhb();
      int k = 0;
      int j = 0;
      if (bool) {
        Iterator iterator1 = ((List)paramObject).iterator();
        while (iterator1.hasNext())
          j += zzb(zzjf, iterator1.next()); 
        return zzfa.zzag(i) + j + zzfa.zzao(j);
      } 
      Iterator iterator = ((List)paramObject).iterator();
      for (j = k; iterator.hasNext(); j += zza(zzjf, i, iterator.next()));
      return j;
    } 
    return zza(zzjf, i, paramObject);
  }
  
  private static int zzb(zzjf paramzzjf, Object paramObject) {
    switch (zzfl.zzto[paramzzjf.ordinal()]) {
      default:
        throw new RuntimeException("There is no way to get here, but the compiler thinks otherwise.");
      case 18:
        return (paramObject instanceof zzfw) ? zzfa.zzam(((zzfw)paramObject).zzbi()) : zzfa.zzam(((Integer)paramObject).intValue());
      case 17:
        return zzfa.zzg(((Long)paramObject).longValue());
      case 16:
        return zzfa.zzaj(((Integer)paramObject).intValue());
      case 15:
        return zzfa.zzi(((Long)paramObject).longValue());
      case 14:
        return zzfa.zzal(((Integer)paramObject).intValue());
      case 13:
        return zzfa.zzai(((Integer)paramObject).intValue());
      case 12:
        return (paramObject instanceof zzeh) ? zzfa.zzb((zzeh)paramObject) : zzfa.zzc((byte[])paramObject);
      case 11:
        return (paramObject instanceof zzeh) ? zzfa.zzb((zzeh)paramObject) : zzfa.zzdb((String)paramObject);
      case 10:
        return (paramObject instanceof zzgf) ? zzfa.zza((zzgf)paramObject) : zzfa.zzd((zzhc)paramObject);
      case 9:
        return zzfa.zze((zzhc)paramObject);
      case 8:
        return zzfa.zzt(((Boolean)paramObject).booleanValue());
      case 7:
        return zzfa.zzak(((Integer)paramObject).intValue());
      case 6:
        return zzfa.zzh(((Long)paramObject).longValue());
      case 5:
        return zzfa.zzah(((Integer)paramObject).intValue());
      case 4:
        return zzfa.zzf(((Long)paramObject).longValue());
      case 3:
        return zzfa.zze(((Long)paramObject).longValue());
      case 2:
        return zzfa.zzb(((Float)paramObject).floatValue());
      case 1:
        break;
    } 
    return zzfa.zzb(((Double)paramObject).doubleValue());
  }
  
  private static boolean zzb(Map.Entry<FieldDescriptorType, Object> paramEntry) {
    zzfm zzfm = (zzfm)paramEntry.getKey();
    if (zzfm.zzgz() == zzjk.zzadu) {
      Iterator iterator;
      if (zzfm.zzha()) {
        iterator = ((List)paramEntry.getValue()).iterator();
        while (iterator.hasNext()) {
          if (!((zzhc)iterator.next()).isInitialized())
            return false; 
        } 
      } else {
        Object object = iterator.getValue();
        if (object instanceof zzhc) {
          if (!((zzhc)object).isInitialized())
            return false; 
        } else {
          if (object instanceof zzgf)
            return true; 
          throw new IllegalArgumentException("Wrong object type used with protocol message reflection.");
        } 
      } 
    } 
    return true;
  }
  
  private final void zzc(Map.Entry<FieldDescriptorType, Object> paramEntry) {
    zzfm zzfm = (zzfm)paramEntry.getKey();
    Object object2 = paramEntry.getValue();
    Object object1 = object2;
    if (object2 instanceof zzgf)
      object1 = zzgf.zzia(); 
    if (zzfm.zzha()) {
      object = zza(zzfm);
      object2 = object;
      if (object == null)
        object2 = new ArrayList(); 
      for (Object object : (List)object1)
        ((List)object2).add(zzg(object)); 
      this.zzub.zza(zzfm, object2);
      return;
    } 
    if (zzfm.zzgz() == zzjk.zzadu) {
      object2 = zza(zzfm);
      if (object2 == null) {
        this.zzub.zza(zzfm, zzg(object1));
        return;
      } 
      if (object2 instanceof zzhi) {
        object1 = zzfm.zza((zzhi)object2, (zzhi)object1);
      } else {
        object1 = zzfm.zza(((zzhc)object2).zzhg(), (zzhc)object1).zzhn();
      } 
      this.zzub.zza(zzfm, object1);
      return;
    } 
    this.zzub.zza(zzfm, zzg(object1));
  }
  
  private static int zzd(Map.Entry<FieldDescriptorType, Object> paramEntry) {
    zzfm zzfm = (zzfm)paramEntry.getKey();
    Object object = paramEntry.getValue();
    return (zzfm.zzgz() == zzjk.zzadu && !zzfm.zzha() && !zzfm.zzhb()) ? ((object instanceof zzgf) ? zzfa.zzb(((zzfm)paramEntry.getKey()).zzbi(), (zzgf)object) : zzfa.zzb(((zzfm)paramEntry.getKey()).zzbi(), (zzhc)object)) : zzb(zzfm, object);
  }
  
  private static Object zzg(Object paramObject) {
    byte[] arrayOfByte;
    if (paramObject instanceof zzhi)
      return ((zzhi)paramObject).zziq(); 
    if (paramObject instanceof byte[]) {
      arrayOfByte = (byte[])paramObject;
      byte[] arrayOfByte1 = new byte[arrayOfByte.length];
      System.arraycopy(arrayOfByte, 0, arrayOfByte1, 0, arrayOfByte.length);
      return arrayOfByte1;
    } 
    return arrayOfByte;
  }
  
  public static <T extends zzfm<T>> zzfk<T> zzgv() { return zzue; }
  
  final Iterator<Map.Entry<FieldDescriptorType, Object>> descendingIterator() { return this.zzud ? new zzgi(this.zzub.zzjh().iterator()) : this.zzub.zzjh().iterator(); }
  
  public final boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (!(paramObject instanceof zzfk))
      return false; 
    paramObject = (zzfk)paramObject;
    return this.zzub.equals(paramObject.zzub);
  }
  
  public final int hashCode() { return this.zzub.hashCode(); }
  
  final boolean isEmpty() { return this.zzub.isEmpty(); }
  
  public final boolean isImmutable() { return this.zzuc; }
  
  public final boolean isInitialized() {
    for (byte b = 0; b < this.zzub.zzjf(); b++) {
      if (!zzb(this.zzub.zzbc(b)))
        return false; 
    } 
    Iterator iterator = this.zzub.zzjg().iterator();
    while (iterator.hasNext()) {
      if (!zzb((Map.Entry)iterator.next()))
        return false; 
    } 
    return true;
  }
  
  public final Iterator<Map.Entry<FieldDescriptorType, Object>> iterator() { return this.zzud ? new zzgi(this.zzub.entrySet().iterator()) : this.zzub.entrySet().iterator(); }
  
  public final void zza(zzfk<FieldDescriptorType> paramzzfk) {
    for (byte b = 0; b < paramzzfk.zzub.zzjf(); b++)
      zzc(paramzzfk.zzub.zzbc(b)); 
    Iterator iterator = paramzzfk.zzub.zzjg().iterator();
    while (iterator.hasNext())
      zzc((Map.Entry)iterator.next()); 
  }
  
  public final void zzev() {
    if (this.zzuc)
      return; 
    this.zzub.zzev();
    this.zzuc = true;
  }
  
  public final int zzgw() {
    byte b = 0;
    int i = 0;
    while (b < this.zzub.zzjf()) {
      Map.Entry entry = this.zzub.zzbc(b);
      i += zzb((zzfm)entry.getKey(), entry.getValue());
      b++;
    } 
    for (Map.Entry entry : this.zzub.zzjg())
      i += zzb((zzfm)entry.getKey(), entry.getValue()); 
    return i;
  }
  
  public final int zzgx() {
    byte b = 0;
    int i = 0;
    while (b < this.zzub.zzjf()) {
      i += zzd(this.zzub.zzbc(b));
      b++;
    } 
    Iterator iterator = this.zzub.zzjg().iterator();
    while (iterator.hasNext())
      i += zzd((Map.Entry)iterator.next()); 
    return i;
  }
}
