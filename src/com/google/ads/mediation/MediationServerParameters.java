package com.google.ads.mediation;

import com.google.android.gms.internal.ads.zzane;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

@Deprecated
public class MediationServerParameters {
  public void load(Map<String, String> paramMap) throws MappingException {
    HashMap hashMap = new HashMap();
    for (Field field : getClass().getFields()) {
      Parameter parameter = (Parameter)field.getAnnotation(Parameter.class);
      if (parameter != null)
        hashMap.put(parameter.name(), field); 
    } 
    if (hashMap.isEmpty())
      zzane.zzdk("No server options fields detected. To suppress this message either add a field with the @Parameter annotation, or override the load() method."); 
    Iterator iterator = paramMap.entrySet().iterator();
    while (true) {
      if (iterator.hasNext()) {
        String str1 = (Map.Entry)iterator.next();
        field = (Field)hashMap.remove(str1.getKey());
        if (field != null) {
          StringBuilder stringBuilder2;
          try {
            field.set(this, str1.getValue());
            continue;
          } catch (IllegalAccessException field) {
            stringBuilder2 = new StringBuilder((str1 = (String)str1.getKey()).valueOf(str1).length() + 49);
            stringBuilder2.append("Server option \"");
            stringBuilder2.append(str1);
            str1 = "\" could not be set: Illegal Access";
          } catch (IllegalArgumentException field) {
            stringBuilder2 = new StringBuilder((str1 = (String)str1.getKey()).valueOf(str1).length() + 43);
            stringBuilder2.append("Server option \"");
            stringBuilder2.append(str1);
            str1 = "\" could not be set: Bad Type";
          } 
          stringBuilder2.append(str1);
          zzane.zzdk(stringBuilder2.toString());
          continue;
        } 
        String str2;
        StringBuilder stringBuilder1 = new StringBuilder((str1 = (String)str1.getValue()).valueOf(str2).length() + 31 + (str2 = (String)str1.getKey()).valueOf(str1).length());
        stringBuilder1.append("Unexpected server option: ");
        stringBuilder1.append(str2);
        stringBuilder1.append(" = \"");
        stringBuilder1.append(str1);
        stringBuilder1.append("\"");
        zzane.zzck(stringBuilder1.toString());
        continue;
      } 
      StringBuilder stringBuilder = new StringBuilder();
      for (Field field : hashMap.values()) {
        if (((Parameter)field.getAnnotation(Parameter.class)).required()) {
          String str = String.valueOf(((Parameter)field.getAnnotation(Parameter.class)).name());
          if (str.length() != 0) {
            str = "Required server option missing: ".concat(str);
          } else {
            str = new String("Required server option missing: ");
          } 
          zzane.zzdk(str);
          if (stringBuilder.length() > 0)
            stringBuilder.append(", "); 
          stringBuilder.append(((Parameter)field.getAnnotation(Parameter.class)).name());
        } 
      } 
      if (stringBuilder.length() > 0) {
        String str = String.valueOf(stringBuilder.toString());
        if (str.length() != 0) {
          str = "Required server option(s) missing: ".concat(str);
        } else {
          str = new String("Required server option(s) missing: ");
        } 
        throw new MappingException(str);
      } 
      return;
    } 
  }
}
