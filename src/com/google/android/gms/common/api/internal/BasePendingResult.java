package com.google.android.gms.common.api.internal;

import android.os.Looper;
import android.os.RemoteException;
import android.support.annotation.NonNull;
import android.util.Log;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.annotation.KeepName;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.PendingResult;
import com.google.android.gms.common.api.Releasable;
import com.google.android.gms.common.api.Result;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.ResultTransform;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.common.api.TransformedResult;
import com.google.android.gms.common.internal.ICancelToken;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.VisibleForTesting;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;

@KeepForSdk
@KeepName
public abstract class BasePendingResult<R extends Result> extends PendingResult<R> {
  static final ThreadLocal<Boolean> zadm = new zap();
  
  @KeepName
  private zaa mResultGuardian;
  
  private Status mStatus;
  
  private R zaci;
  
  private final Object zadn = new Object();
  
  private final CallbackHandler<R> zado;
  
  private final WeakReference<GoogleApiClient> zadp;
  
  private final CountDownLatch zadq = new CountDownLatch(1);
  
  private final ArrayList<PendingResult.StatusListener> zadr = new ArrayList();
  
  private ResultCallback<? super R> zads;
  
  private final AtomicReference<zacs> zadt = new AtomicReference();
  
  private boolean zadv;
  
  private boolean zadw;
  
  private ICancelToken zadx;
  
  private boolean zadz = false;
  
  @Deprecated
  BasePendingResult() {
    this.zado = new CallbackHandler(Looper.getMainLooper());
    this.zadp = new WeakReference(null);
  }
  
  @Deprecated
  @KeepForSdk
  protected BasePendingResult(Looper paramLooper) {
    this.zado = new CallbackHandler(paramLooper);
    this.zadp = new WeakReference(null);
  }
  
  @KeepForSdk
  protected BasePendingResult(GoogleApiClient paramGoogleApiClient) {
    if (paramGoogleApiClient != null) {
      looper = paramGoogleApiClient.getLooper();
    } else {
      looper = Looper.getMainLooper();
    } 
    this.zado = new CallbackHandler(looper);
    this.zadp = new WeakReference(paramGoogleApiClient);
  }
  
  @KeepForSdk
  @VisibleForTesting
  protected BasePendingResult(@NonNull CallbackHandler<R> paramCallbackHandler) {
    this.zado = (CallbackHandler)Preconditions.checkNotNull(paramCallbackHandler, "CallbackHandler must not be null");
    this.zadp = new WeakReference(null);
  }
  
  private final R get() {
    synchronized (this.zadn) {
      boolean bool;
      if (!this.zadu) {
        bool = true;
      } else {
        bool = false;
      } 
      Preconditions.checkState(bool, "Result has already been consumed.");
      Preconditions.checkState(isReady(), "Result is not ready.");
      Result result = this.zaci;
      this.zaci = null;
      this.zads = null;
      this.zadu = true;
      null = (zacs)this.zadt.getAndSet(null);
      if (null != null)
        null.zac(this); 
      return (R)result;
    } 
  }
  
  private final void zaa(R paramR) {
    this.zaci = paramR;
    this.zadx = null;
    this.zadq.countDown();
    this.mStatus = this.zaci.getStatus();
    if (this.zadv) {
      this.zads = null;
    } else if (this.zads == null) {
      if (this.zaci instanceof Releasable)
        this.mResultGuardian = new zaa(this, null); 
    } else {
      this.zado.removeMessages(2);
      this.zado.zaa(this.zads, get());
    } 
    paramR = (R)(ArrayList)this.zadr;
    int i = paramR.size();
    byte b = 0;
    while (b < i) {
      Object object = paramR.get(b);
      b++;
      ((PendingResult.StatusListener)object).onComplete(this.mStatus);
    } 
    this.zadr.clear();
  }
  
  public static void zab(Result paramResult) {
    if (paramResult instanceof Releasable)
      try {
        ((Releasable)paramResult).release();
        return;
      } catch (RuntimeException runtimeException) {
        String str;
        StringBuilder stringBuilder = new StringBuilder((str = String.valueOf(paramResult)).valueOf(str).length() + 18);
        stringBuilder.append("Unable to release ");
        stringBuilder.append(str);
        Log.w("BasePendingResult", stringBuilder.toString(), runtimeException);
      }  
  }
  
  public final void addStatusListener(PendingResult.StatusListener paramStatusListener) {
    boolean bool;
    if (paramStatusListener != null) {
      bool = true;
    } else {
      bool = false;
    } 
    Preconditions.checkArgument(bool, "Callback cannot be null.");
    synchronized (this.zadn) {
      if (isReady()) {
        paramStatusListener.onComplete(this.mStatus);
      } else {
        this.zadr.add(paramStatusListener);
      } 
      return;
    } 
  }
  
  public final R await() {
    Preconditions.checkNotMainThread("await must not be called on the UI thread");
    boolean bool2 = this.zadu;
    boolean bool1 = true;
    Preconditions.checkState(bool2 ^ true, "Result has already been consumed");
    if (this.zady != null)
      bool1 = false; 
    Preconditions.checkState(bool1, "Cannot await if then() has been called.");
    try {
      this.zadq.await();
    } catch (InterruptedException interruptedException) {
      zab(Status.RESULT_INTERRUPTED);
    } 
    Preconditions.checkState(isReady(), "Result is not ready.");
    return (R)get();
  }
  
  public final R await(long paramLong, TimeUnit paramTimeUnit) {
    if (paramLong > 0L)
      Preconditions.checkNotMainThread("await must not be called on the UI thread when time is greater than zero."); 
    boolean bool2 = this.zadu;
    boolean bool1 = true;
    Preconditions.checkState(bool2 ^ true, "Result has already been consumed.");
    if (this.zady != null)
      bool1 = false; 
    Preconditions.checkState(bool1, "Cannot await if then() has been called.");
    try {
      if (!this.zadq.await(paramLong, paramTimeUnit))
        zab(Status.RESULT_TIMEOUT); 
    } catch (InterruptedException paramTimeUnit) {
      zab(Status.RESULT_INTERRUPTED);
    } 
    Preconditions.checkState(isReady(), "Result is not ready.");
    return (R)get();
  }
  
  @KeepForSdk
  public void cancel() {
    synchronized (this.zadn) {
      if (this.zadv || this.zadu)
        return; 
      iCancelToken = this.zadx;
      if (iCancelToken != null)
        try {
          this.zadx.cancel();
        } catch (RemoteException iCancelToken) {} 
      zab(this.zaci);
      this.zadv = true;
      zaa(createFailedResult(Status.RESULT_CANCELED));
      return;
    } 
  }
  
  @NonNull
  @KeepForSdk
  protected abstract R createFailedResult(Status paramStatus);
  
  public boolean isCanceled() {
    synchronized (this.zadn) {
      return this.zadv;
    } 
  }
  
  @KeepForSdk
  public final boolean isReady() { return (this.zadq.getCount() == 0L); }
  
  @KeepForSdk
  protected final void setCancelToken(ICancelToken paramICancelToken) {
    synchronized (this.zadn) {
      this.zadx = paramICancelToken;
      return;
    } 
  }
  
  @KeepForSdk
  public final void setResult(R paramR) {
    synchronized (this.zadn) {
      if (!this.zadw && !this.zadv) {
        isReady();
        boolean bool = isReady();
        boolean bool1 = true;
        if (!bool) {
          bool = true;
        } else {
          bool = false;
        } 
        Preconditions.checkState(bool, "Results have already been set");
        if (!this.zadu) {
          bool = bool1;
        } else {
          bool = false;
        } 
        Preconditions.checkState(bool, "Result has already been consumed");
        zaa(paramR);
        return;
      } 
      zab(paramR);
      return;
    } 
  }
  
  @KeepForSdk
  public final void setResultCallback(ResultCallback<? super R> paramResultCallback) { // Byte code:
    //   0: aload_0
    //   1: getfield zadn : Ljava/lang/Object;
    //   4: astore #4
    //   6: aload #4
    //   8: monitorenter
    //   9: aload_1
    //   10: ifnonnull -> 22
    //   13: aload_0
    //   14: aconst_null
    //   15: putfield zads : Lcom/google/android/gms/common/api/ResultCallback;
    //   18: aload #4
    //   20: monitorexit
    //   21: return
    //   22: aload_0
    //   23: getfield zadu : Z
    //   26: istore_2
    //   27: iconst_1
    //   28: istore_3
    //   29: iload_2
    //   30: ifne -> 111
    //   33: iconst_1
    //   34: istore_2
    //   35: goto -> 38
    //   38: iload_2
    //   39: ldc 'Result has already been consumed.'
    //   41: invokestatic checkState : (ZLjava/lang/Object;)V
    //   44: aload_0
    //   45: getfield zady : Lcom/google/android/gms/common/api/internal/zacm;
    //   48: ifnonnull -> 116
    //   51: iload_3
    //   52: istore_2
    //   53: goto -> 56
    //   56: iload_2
    //   57: ldc_w 'Cannot set callbacks if then() has been called.'
    //   60: invokestatic checkState : (ZLjava/lang/Object;)V
    //   63: aload_0
    //   64: invokevirtual isCanceled : ()Z
    //   67: ifeq -> 74
    //   70: aload #4
    //   72: monitorexit
    //   73: return
    //   74: aload_0
    //   75: invokevirtual isReady : ()Z
    //   78: ifeq -> 96
    //   81: aload_0
    //   82: getfield zado : Lcom/google/android/gms/common/api/internal/BasePendingResult$CallbackHandler;
    //   85: aload_1
    //   86: aload_0
    //   87: invokespecial get : ()Lcom/google/android/gms/common/api/Result;
    //   90: invokevirtual zaa : (Lcom/google/android/gms/common/api/ResultCallback;Lcom/google/android/gms/common/api/Result;)V
    //   93: goto -> 101
    //   96: aload_0
    //   97: aload_1
    //   98: putfield zads : Lcom/google/android/gms/common/api/ResultCallback;
    //   101: aload #4
    //   103: monitorexit
    //   104: return
    //   105: astore_1
    //   106: aload #4
    //   108: monitorexit
    //   109: aload_1
    //   110: athrow
    //   111: iconst_0
    //   112: istore_2
    //   113: goto -> 38
    //   116: iconst_0
    //   117: istore_2
    //   118: goto -> 56
    // Exception table:
    //   from	to	target	type
    //   13	21	105	finally
    //   22	27	105	finally
    //   38	51	105	finally
    //   56	73	105	finally
    //   74	93	105	finally
    //   96	101	105	finally
    //   101	104	105	finally
    //   106	109	105	finally }
  
  @KeepForSdk
  public final void setResultCallback(ResultCallback<? super R> paramResultCallback, long paramLong, TimeUnit paramTimeUnit) { // Byte code:
    //   0: aload_0
    //   1: getfield zadn : Ljava/lang/Object;
    //   4: astore #7
    //   6: aload #7
    //   8: monitorenter
    //   9: aload_1
    //   10: ifnonnull -> 22
    //   13: aload_0
    //   14: aconst_null
    //   15: putfield zads : Lcom/google/android/gms/common/api/ResultCallback;
    //   18: aload #7
    //   20: monitorexit
    //   21: return
    //   22: aload_0
    //   23: getfield zadu : Z
    //   26: istore #5
    //   28: iconst_1
    //   29: istore #6
    //   31: iload #5
    //   33: ifne -> 143
    //   36: iconst_1
    //   37: istore #5
    //   39: goto -> 42
    //   42: iload #5
    //   44: ldc 'Result has already been consumed.'
    //   46: invokestatic checkState : (ZLjava/lang/Object;)V
    //   49: aload_0
    //   50: getfield zady : Lcom/google/android/gms/common/api/internal/zacm;
    //   53: ifnonnull -> 149
    //   56: iload #6
    //   58: istore #5
    //   60: goto -> 63
    //   63: iload #5
    //   65: ldc_w 'Cannot set callbacks if then() has been called.'
    //   68: invokestatic checkState : (ZLjava/lang/Object;)V
    //   71: aload_0
    //   72: invokevirtual isCanceled : ()Z
    //   75: ifeq -> 82
    //   78: aload #7
    //   80: monitorexit
    //   81: return
    //   82: aload_0
    //   83: invokevirtual isReady : ()Z
    //   86: ifeq -> 104
    //   89: aload_0
    //   90: getfield zado : Lcom/google/android/gms/common/api/internal/BasePendingResult$CallbackHandler;
    //   93: aload_1
    //   94: aload_0
    //   95: invokespecial get : ()Lcom/google/android/gms/common/api/Result;
    //   98: invokevirtual zaa : (Lcom/google/android/gms/common/api/ResultCallback;Lcom/google/android/gms/common/api/Result;)V
    //   101: goto -> 133
    //   104: aload_0
    //   105: aload_1
    //   106: putfield zads : Lcom/google/android/gms/common/api/ResultCallback;
    //   109: aload_0
    //   110: getfield zado : Lcom/google/android/gms/common/api/internal/BasePendingResult$CallbackHandler;
    //   113: astore_1
    //   114: aload #4
    //   116: lload_2
    //   117: invokevirtual toMillis : (J)J
    //   120: lstore_2
    //   121: aload_1
    //   122: aload_1
    //   123: iconst_2
    //   124: aload_0
    //   125: invokevirtual obtainMessage : (ILjava/lang/Object;)Landroid/os/Message;
    //   128: lload_2
    //   129: invokevirtual sendMessageDelayed : (Landroid/os/Message;J)Z
    //   132: pop
    //   133: aload #7
    //   135: monitorexit
    //   136: return
    //   137: astore_1
    //   138: aload #7
    //   140: monitorexit
    //   141: aload_1
    //   142: athrow
    //   143: iconst_0
    //   144: istore #5
    //   146: goto -> 42
    //   149: iconst_0
    //   150: istore #5
    //   152: goto -> 63
    // Exception table:
    //   from	to	target	type
    //   13	21	137	finally
    //   22	28	137	finally
    //   42	56	137	finally
    //   63	81	137	finally
    //   82	101	137	finally
    //   104	133	137	finally
    //   133	136	137	finally
    //   138	141	137	finally }
  
  public <S extends Result> TransformedResult<S> then(ResultTransform<? super R, ? extends S> paramResultTransform) {
    Preconditions.checkState(this.zadu ^ true, "Result has already been consumed.");
    synchronized (this.zadn) {
      zacm zacm1 = this.zady;
      boolean bool1 = false;
      if (zacm1 == null) {
        bool = true;
      } else {
        bool = false;
      } 
      Preconditions.checkState(bool, "Cannot call then() twice.");
      if (this.zads == null) {
        bool = true;
      } else {
        bool = false;
      } 
      Preconditions.checkState(bool, "Cannot call then() if callbacks are set.");
      boolean bool = bool1;
      if (!this.zadv)
        bool = true; 
      Preconditions.checkState(bool, "Cannot call then() if result was canceled.");
      this.zadz = true;
      this.zady = new zacm(this.zadp);
      TransformedResult transformedResult = this.zady.then(paramResultTransform);
      if (isReady()) {
        this.zado.zaa(this.zady, get());
      } else {
        this.zads = this.zady;
      } 
      return transformedResult;
    } 
  }
  
  public final void zaa(zacs paramzacs) { this.zadt.set(paramzacs); }
  
  public final void zab(Status paramStatus) {
    synchronized (this.zadn) {
      if (!isReady()) {
        setResult(createFailedResult(paramStatus));
        this.zadw = true;
      } 
      return;
    } 
  }
  
  public final Integer zam() { return null; }
  
  public final boolean zat() {
    synchronized (this.zadn) {
      if ((GoogleApiClient)this.zadp.get() == null || !this.zadz)
        super.cancel(); 
      return super.isCanceled();
    } 
  }
  
  public final void zau() {
    boolean bool;
    if (this.zadz || ((Boolean)zadm.get()).booleanValue()) {
      bool = true;
    } else {
      bool = false;
    } 
    this.zadz = bool;
  }
}
