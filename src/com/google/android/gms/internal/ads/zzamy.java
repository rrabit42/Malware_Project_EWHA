package com.google.android.gms.internal.ads;

import android.content.Context;
import android.os.Build;
import android.provider.Settings;
import android.support.annotation.GuardedBy;
import android.support.annotation.Nullable;
import android.util.JsonWriter;
import com.google.android.gms.common.util.Base64Utils;
import com.google.android.gms.common.util.Clock;
import com.google.android.gms.common.util.DefaultClock;
import java.io.IOException;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

@zzadh
public final class zzamy {
  private static Object sLock = new Object();
  
  @GuardedBy("sLock")
  private static boolean zzcuv = false;
  
  @GuardedBy("sLock")
  private static boolean zzcuw = false;
  
  private static Clock zzcux = DefaultClock.getInstance();
  
  private static final Set<String> zzcuy = new HashSet(Arrays.asList(new String[0]));
  
  private final List<String> zzcuz;
  
  public zzamy() { this(null); }
  
  public zzamy(@Nullable String paramString) {
    if (!isEnabled()) {
      list = new ArrayList();
    } else {
      List list1;
      String str = UUID.randomUUID().toString();
      if (list == null) {
        String str1 = String.valueOf(str);
        if (str1.length() != 0) {
          str1 = "network_request_".concat(str1);
        } else {
          str1 = new String("network_request_");
        } 
        list1 = Arrays.asList(new String[] { str1 });
      } else {
        String str1 = String.valueOf(list1);
        if (str1.length() != 0) {
          str1 = "ad_request_".concat(str1);
        } else {
          str1 = new String("ad_request_");
        } 
        str = String.valueOf(str);
        if (str.length() != 0) {
          str = "network_request_".concat(str);
        } else {
          str = new String("network_request_");
        } 
        list = Arrays.asList(new String[] { str1, str });
      } 
    } 
    this.zzcuz = list;
  }
  
  public static boolean isEnabled() {
    synchronized (sLock) {
      if (zzcuv && zzcuw)
        return true; 
    } 
    boolean bool = false;
    /* monitor exit ClassFileLocalVariableReferenceExpression{type=ObjectType{java/lang/Object}, name=SYNTHETIC_LOCAL_VARIABLE_1} */
    return bool;
  }
  
  private static void zza(JsonWriter paramJsonWriter, @Nullable Map<String, ?> paramMap) throws IOException {
    if (paramMap == null)
      return; 
    paramJsonWriter.name("headers").beginArray();
    for (Map.Entry entry : paramMap.entrySet()) {
      String str = (String)entry.getKey();
      if (!zzcuy.contains(str)) {
        if (entry.getValue() instanceof List) {
          for (String str1 : (List)entry.getValue()) {
            paramJsonWriter.beginObject();
            paramJsonWriter.name("name").value(str);
            paramJsonWriter.name("value").value(str1);
            paramJsonWriter.endObject();
          } 
          continue;
        } 
        if (entry.getValue() instanceof String) {
          paramJsonWriter.beginObject();
          paramJsonWriter.name("name").value(str);
          paramJsonWriter.name("value").value((String)entry.getValue());
          paramJsonWriter.endObject();
          continue;
        } 
        zzane.e("Connection headers should be either Map<String, String> or Map<String, List<String>>");
        break;
      } 
    } 
    paramJsonWriter.endArray();
  }
  
  private final void zza(String paramString, zzand paramzzand) {
    StringWriter stringWriter = new StringWriter();
    JsonWriter jsonWriter = new JsonWriter(stringWriter);
    try {
      jsonWriter.beginObject();
      jsonWriter.name("timestamp").value(zzcux.currentTimeMillis());
      jsonWriter.name("event").value(paramString);
      jsonWriter.name("components").beginArray();
      Iterator iterator = this.zzcuz.iterator();
      while (iterator.hasNext())
        jsonWriter.value((String)iterator.next()); 
      jsonWriter.endArray();
      paramzzand.zza(jsonWriter);
      jsonWriter.endObject();
      jsonWriter.flush();
      jsonWriter.close();
    } catch (IOException paramString) {
      zzane.zzb("unable to log", paramString);
    } 
    zzdi(stringWriter.toString());
  }
  
  public static void zzaf(boolean paramBoolean) {
    synchronized (sLock) {
      zzcuv = true;
      zzcuw = paramBoolean;
      return;
    } 
  }
  
  private final void zzb(String paramString1, String paramString2, @Nullable Map<String, ?> paramMap, @Nullable byte[] paramArrayOfByte) { zza("onNetworkRequest", new zzamz(paramString1, paramString2, paramMap, paramArrayOfByte)); }
  
  private final void zzb(@Nullable Map<String, ?> paramMap, int paramInt) { zza("onNetworkResponse", new zzana(paramInt, paramMap)); }
  
  public static boolean zzbl(Context paramContext) {
    if (Build.VERSION.SDK_INT < 17)
      return false; 
    zzna zzna = zznk.zzazm;
    if (!((Boolean)zzkb.zzik().zzd(zzna)).booleanValue())
      return false; 
    try {
      int i = Settings.Global.getInt(paramContext.getContentResolver(), "development_settings_enabled", 0);
      return (i != 0);
    } catch (Exception paramContext) {
      zzane.zzc("Fail to determine debug setting.", paramContext);
      return false;
    } 
  }
  
  private final void zzdh(@Nullable String paramString) { zza("onNetworkRequestError", new zzanc(paramString)); }
  
  private static void zzdi(String paramString) { // Byte code:
    //   0: ldc com/google/android/gms/internal/ads/zzamy
    //   2: monitorenter
    //   3: ldc_w 'GMA Debug BEGIN'
    //   6: invokestatic zzdj : (Ljava/lang/String;)V
    //   9: iconst_0
    //   10: istore_1
    //   11: iload_1
    //   12: aload_0
    //   13: invokevirtual length : ()I
    //   16: if_icmpge -> 80
    //   19: iload_1
    //   20: sipush #4000
    //   23: iadd
    //   24: istore_2
    //   25: aload_0
    //   26: iload_1
    //   27: iload_2
    //   28: aload_0
    //   29: invokevirtual length : ()I
    //   32: invokestatic min : (II)I
    //   35: invokevirtual substring : (II)Ljava/lang/String;
    //   38: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   41: astore_3
    //   42: aload_3
    //   43: invokevirtual length : ()I
    //   46: ifeq -> 60
    //   49: ldc_w 'GMA Debug CONTENT '
    //   52: aload_3
    //   53: invokevirtual concat : (Ljava/lang/String;)Ljava/lang/String;
    //   56: astore_3
    //   57: goto -> 71
    //   60: new java/lang/String
    //   63: dup
    //   64: ldc_w 'GMA Debug CONTENT '
    //   67: invokespecial <init> : (Ljava/lang/String;)V
    //   70: astore_3
    //   71: aload_3
    //   72: invokestatic zzdj : (Ljava/lang/String;)V
    //   75: iload_2
    //   76: istore_1
    //   77: goto -> 11
    //   80: ldc_w 'GMA Debug FINISH'
    //   83: invokestatic zzdj : (Ljava/lang/String;)V
    //   86: ldc com/google/android/gms/internal/ads/zzamy
    //   88: monitorexit
    //   89: return
    //   90: astore_0
    //   91: ldc com/google/android/gms/internal/ads/zzamy
    //   93: monitorexit
    //   94: goto -> 99
    //   97: aload_0
    //   98: athrow
    //   99: goto -> 97
    // Exception table:
    //   from	to	target	type
    //   3	9	90	finally
    //   11	19	90	finally
    //   25	57	90	finally
    //   60	71	90	finally
    //   71	75	90	finally
    //   80	86	90	finally }
  
  public static void zzsj() {
    synchronized (sLock) {
      zzcuv = false;
      zzcuw = false;
      zzane.zzdk("Ad debug logging enablement is out of date.");
      return;
    } 
  }
  
  public static boolean zzsk() {
    synchronized (sLock) {
      return zzcuv;
    } 
  }
  
  public final void zza(String paramString1, String paramString2, @Nullable Map<String, ?> paramMap, @Nullable byte[] paramArrayOfByte) {
    if (!isEnabled())
      return; 
    zzb(paramString1, paramString2, paramMap, paramArrayOfByte);
  }
  
  public final void zza(HttpURLConnection paramHttpURLConnection, int paramInt) {
    if (!isEnabled())
      return; 
    Map map = paramHttpURLConnection.getHeaderFields();
    String str = null;
    if (map == null) {
      map = null;
    } else {
      map = new HashMap(paramHttpURLConnection.getHeaderFields());
    } 
    zzb(map, paramInt);
    if (paramInt < 200 || paramInt >= 300) {
      String str1;
      try {
        str1 = paramHttpURLConnection.getResponseMessage();
      } catch (IOException paramHttpURLConnection) {
        str1 = String.valueOf(paramHttpURLConnection.getMessage());
        if (str1.length() != 0) {
          str1 = "Can not get error message from error HttpURLConnection\n".concat(str1);
        } else {
          str1 = new String("Can not get error message from error HttpURLConnection\n");
        } 
        zzane.zzdk(str1);
        str1 = str;
      } 
      zzdh(str1);
    } 
  }
  
  public final void zza(HttpURLConnection paramHttpURLConnection, @Nullable byte[] paramArrayOfByte) {
    HashMap hashMap;
    if (!isEnabled())
      return; 
    if (paramHttpURLConnection.getRequestProperties() == null) {
      hashMap = null;
    } else {
      hashMap = new HashMap(paramHttpURLConnection.getRequestProperties());
    } 
    zzb(new String(paramHttpURLConnection.getURL().toString()), new String(paramHttpURLConnection.getRequestMethod()), hashMap, paramArrayOfByte);
  }
  
  public final void zza(@Nullable Map<String, ?> paramMap, int paramInt) {
    if (!isEnabled())
      return; 
    zzb(paramMap, paramInt);
    if (paramInt < 200 || paramInt >= 300)
      zzdh(null); 
  }
  
  public final void zzdg(@Nullable String paramString) {
    if (!isEnabled())
      return; 
    if (paramString == null)
      return; 
    zzf(paramString.getBytes());
  }
  
  public final void zzf(byte[] paramArrayOfByte) { zza("onNetworkResponseBody", new zzanb(paramArrayOfByte)); }
}
