package com.bumptech.glide.load.engine;

import android.os.Handler;
import android.os.Looper;
import com.bumptech.glide.load.Key;
import com.bumptech.glide.request.ResourceCallback;
import com.bumptech.glide.util.Util;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;

class EngineJob implements EngineRunnable.EngineRunnableManager {
  private static final EngineResourceFactory DEFAULT_FACTORY = new EngineResourceFactory();
  
  private static final Handler MAIN_THREAD_HANDLER = new Handler(Looper.getMainLooper(), new MainThreadCallback(null));
  
  private static final int MSG_COMPLETE = 1;
  
  private static final int MSG_EXCEPTION = 2;
  
  private final List<ResourceCallback> cbs = new ArrayList();
  
  private final ExecutorService diskCacheService;
  
  private EngineResource<?> engineResource;
  
  private final EngineResourceFactory engineResourceFactory;
  
  private EngineRunnable engineRunnable;
  
  private Exception exception;
  
  private boolean hasException;
  
  private boolean hasResource;
  
  private Set<ResourceCallback> ignoredCallbacks;
  
  private final boolean isCacheable;
  
  private boolean isCancelled;
  
  private final Key key;
  
  private final EngineJobListener listener;
  
  private Resource<?> resource;
  
  private final ExecutorService sourceService;
  
  public EngineJob(Key paramKey, ExecutorService paramExecutorService1, ExecutorService paramExecutorService2, boolean paramBoolean, EngineJobListener paramEngineJobListener) { this(paramKey, paramExecutorService1, paramExecutorService2, paramBoolean, paramEngineJobListener, DEFAULT_FACTORY); }
  
  public EngineJob(Key paramKey, ExecutorService paramExecutorService1, ExecutorService paramExecutorService2, boolean paramBoolean, EngineJobListener paramEngineJobListener, EngineResourceFactory paramEngineResourceFactory) {
    this.key = paramKey;
    this.diskCacheService = paramExecutorService1;
    this.sourceService = paramExecutorService2;
    this.isCacheable = paramBoolean;
    this.listener = paramEngineJobListener;
    this.engineResourceFactory = paramEngineResourceFactory;
  }
  
  private void addIgnoredCallback(ResourceCallback paramResourceCallback) {
    if (this.ignoredCallbacks == null)
      this.ignoredCallbacks = new HashSet(); 
    this.ignoredCallbacks.add(paramResourceCallback);
  }
  
  private void handleExceptionOnMainThread() {
    if (this.isCancelled)
      return; 
    if (!this.cbs.isEmpty()) {
      this.hasException = true;
      this.listener.onEngineJobComplete(this.key, null);
      for (ResourceCallback resourceCallback : this.cbs) {
        if (!isInIgnoredCallbacks(resourceCallback))
          resourceCallback.onException(this.exception); 
      } 
      return;
    } 
    IllegalStateException illegalStateException = new IllegalStateException("Received an exception without any callbacks to notify");
    throw illegalStateException;
  }
  
  private void handleResultOnMainThread() {
    if (this.isCancelled) {
      this.resource.recycle();
      return;
    } 
    if (!this.cbs.isEmpty()) {
      this.engineResource = this.engineResourceFactory.build(this.resource, this.isCacheable);
      this.hasResource = true;
      this.engineResource.acquire();
      this.listener.onEngineJobComplete(this.key, this.engineResource);
      for (ResourceCallback resourceCallback : this.cbs) {
        if (!isInIgnoredCallbacks(resourceCallback)) {
          this.engineResource.acquire();
          resourceCallback.onResourceReady(this.engineResource);
        } 
      } 
      this.engineResource.release();
      return;
    } 
    IllegalStateException illegalStateException = new IllegalStateException("Received a resource without any callbacks to notify");
    throw illegalStateException;
  }
  
  private boolean isInIgnoredCallbacks(ResourceCallback paramResourceCallback) {
    Set set = this.ignoredCallbacks;
    return (set != null && set.contains(paramResourceCallback));
  }
  
  public void addCallback(ResourceCallback paramResourceCallback) {
    Util.assertMainThread();
    if (this.hasResource) {
      paramResourceCallback.onResourceReady(this.engineResource);
      return;
    } 
    if (this.hasException) {
      paramResourceCallback.onException(this.exception);
      return;
    } 
    this.cbs.add(paramResourceCallback);
  }
  
  void cancel() {
    if (!this.hasException && !this.hasResource) {
      if (this.isCancelled)
        return; 
      this.engineRunnable.cancel();
      Future future1 = this.future;
      if (future1 != null)
        future1.cancel(true); 
      this.isCancelled = true;
      this.listener.onEngineJobCancelled(this, this.key);
    } 
  }
  
  boolean isCancelled() { return this.isCancelled; }
  
  public void onException(Exception paramException) {
    this.exception = paramException;
    MAIN_THREAD_HANDLER.obtainMessage(2, this).sendToTarget();
  }
  
  public void onResourceReady(Resource<?> paramResource) {
    this.resource = paramResource;
    MAIN_THREAD_HANDLER.obtainMessage(1, this).sendToTarget();
  }
  
  public void removeCallback(ResourceCallback paramResourceCallback) {
    Util.assertMainThread();
    if (this.hasResource || this.hasException) {
      addIgnoredCallback(paramResourceCallback);
      return;
    } 
    this.cbs.remove(paramResourceCallback);
    if (this.cbs.isEmpty()) {
      cancel();
      return;
    } 
  }
  
  public void start(EngineRunnable paramEngineRunnable) {
    this.engineRunnable = paramEngineRunnable;
    this.future = this.diskCacheService.submit(paramEngineRunnable);
  }
  
  public void submitForSource(EngineRunnable paramEngineRunnable) { this.future = this.sourceService.submit(paramEngineRunnable); }
}
