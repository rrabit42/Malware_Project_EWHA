package com.bumptech.glide.disklrucache;

import java.io.BufferedWriter;
import java.io.Closeable;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.Writer;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public final class DiskLruCache implements Closeable {
  static final long ANY_SEQUENCE_NUMBER = -1L;
  
  private static final String CLEAN = "CLEAN";
  
  private static final String DIRTY = "DIRTY";
  
  static final String JOURNAL_FILE = "journal";
  
  static final String JOURNAL_FILE_BACKUP = "journal.bkp";
  
  static final String JOURNAL_FILE_TEMP = "journal.tmp";
  
  static final String MAGIC = "libcore.io.DiskLruCache";
  
  private static final String READ = "READ";
  
  private static final String REMOVE = "REMOVE";
  
  static final String VERSION_1 = "1";
  
  private final int appVersion;
  
  private final Callable<Void> cleanupCallable = new Object(this);
  
  private final File directory;
  
  final ThreadPoolExecutor executorService = new ThreadPoolExecutor(0, 1, 60L, TimeUnit.SECONDS, new LinkedBlockingQueue());
  
  private final File journalFile;
  
  private final File journalFileBackup;
  
  private final File journalFileTmp;
  
  private Writer journalWriter;
  
  private final LinkedHashMap<String, Entry> lruEntries = new LinkedHashMap(0, 0.75F, true);
  
  private long maxSize;
  
  private long nextSequenceNumber = 0L;
  
  private int redundantOpCount;
  
  private long size = 0L;
  
  private final int valueCount;
  
  private DiskLruCache(File paramFile, int paramInt1, int paramInt2, long paramLong) {
    this.directory = paramFile;
    this.appVersion = paramInt1;
    this.journalFile = new File(paramFile, "journal");
    this.journalFileTmp = new File(paramFile, "journal.tmp");
    this.journalFileBackup = new File(paramFile, "journal.bkp");
    this.valueCount = paramInt2;
    this.maxSize = paramLong;
  }
  
  private void checkNotClosed() {
    if (this.journalWriter != null)
      return; 
    throw new IllegalStateException("cache is closed");
  }
  
  private void completeEdit(Editor paramEditor, boolean paramBoolean) throws IOException { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_1
    //   3: invokestatic access$1400 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Editor;)Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;
    //   6: astore #10
    //   8: aload #10
    //   10: invokestatic access$700 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)Lcom/bumptech/glide/disklrucache/DiskLruCache$Editor;
    //   13: aload_1
    //   14: if_acmpne -> 437
    //   17: iconst_0
    //   18: istore #5
    //   20: iload #5
    //   22: istore #4
    //   24: iload_2
    //   25: ifeq -> 126
    //   28: iload #5
    //   30: istore #4
    //   32: aload #10
    //   34: invokestatic access$600 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)Z
    //   37: ifne -> 126
    //   40: iconst_0
    //   41: istore_3
    //   42: iload #5
    //   44: istore #4
    //   46: iload_3
    //   47: aload_0
    //   48: getfield valueCount : I
    //   51: if_icmpge -> 126
    //   54: aload_1
    //   55: invokestatic access$1500 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Editor;)[Z
    //   58: iload_3
    //   59: baload
    //   60: ifeq -> 89
    //   63: aload #10
    //   65: iload_3
    //   66: invokevirtual getDirtyFile : (I)Ljava/io/File;
    //   69: invokevirtual exists : ()Z
    //   72: ifne -> 82
    //   75: aload_1
    //   76: invokevirtual abort : ()V
    //   79: aload_0
    //   80: monitorexit
    //   81: return
    //   82: iload_3
    //   83: iconst_1
    //   84: iadd
    //   85: istore_3
    //   86: goto -> 42
    //   89: aload_1
    //   90: invokevirtual abort : ()V
    //   93: new java/lang/StringBuilder
    //   96: dup
    //   97: invokespecial <init> : ()V
    //   100: astore_1
    //   101: aload_1
    //   102: ldc 'Newly created entry didn't create value for index '
    //   104: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   107: pop
    //   108: aload_1
    //   109: iload_3
    //   110: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   113: pop
    //   114: new java/lang/IllegalStateException
    //   117: dup
    //   118: aload_1
    //   119: invokevirtual toString : ()Ljava/lang/String;
    //   122: invokespecial <init> : (Ljava/lang/String;)V
    //   125: athrow
    //   126: iload #4
    //   128: aload_0
    //   129: getfield valueCount : I
    //   132: if_icmpge -> 221
    //   135: aload #10
    //   137: iload #4
    //   139: invokevirtual getDirtyFile : (I)Ljava/io/File;
    //   142: astore_1
    //   143: iload_2
    //   144: ifeq -> 214
    //   147: aload_1
    //   148: invokevirtual exists : ()Z
    //   151: ifeq -> 456
    //   154: aload #10
    //   156: iload #4
    //   158: invokevirtual getCleanFile : (I)Ljava/io/File;
    //   161: astore #11
    //   163: aload_1
    //   164: aload #11
    //   166: invokevirtual renameTo : (Ljava/io/File;)Z
    //   169: pop
    //   170: aload #10
    //   172: invokestatic access$1000 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)[J
    //   175: iload #4
    //   177: laload
    //   178: lstore #6
    //   180: aload #11
    //   182: invokevirtual length : ()J
    //   185: lstore #8
    //   187: aload #10
    //   189: invokestatic access$1000 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)[J
    //   192: iload #4
    //   194: lload #8
    //   196: lastore
    //   197: aload_0
    //   198: aload_0
    //   199: getfield size : J
    //   202: lload #6
    //   204: lsub
    //   205: lload #8
    //   207: ladd
    //   208: putfield size : J
    //   211: goto -> 456
    //   214: aload_1
    //   215: invokestatic deleteIfExists : (Ljava/io/File;)V
    //   218: goto -> 456
    //   221: aload_0
    //   222: aload_0
    //   223: getfield redundantOpCount : I
    //   226: iconst_1
    //   227: iadd
    //   228: putfield redundantOpCount : I
    //   231: aload #10
    //   233: aconst_null
    //   234: invokestatic access$702 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;Lcom/bumptech/glide/disklrucache/DiskLruCache$Editor;)Lcom/bumptech/glide/disklrucache/DiskLruCache$Editor;
    //   237: pop
    //   238: aload #10
    //   240: invokestatic access$600 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)Z
    //   243: iload_2
    //   244: ior
    //   245: ifeq -> 340
    //   248: aload #10
    //   250: iconst_1
    //   251: invokestatic access$602 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;Z)Z
    //   254: pop
    //   255: aload_0
    //   256: getfield journalWriter : Ljava/io/Writer;
    //   259: ldc 'CLEAN'
    //   261: invokevirtual append : (Ljava/lang/CharSequence;)Ljava/io/Writer;
    //   264: pop
    //   265: aload_0
    //   266: getfield journalWriter : Ljava/io/Writer;
    //   269: bipush #32
    //   271: invokevirtual append : (C)Ljava/io/Writer;
    //   274: pop
    //   275: aload_0
    //   276: getfield journalWriter : Ljava/io/Writer;
    //   279: aload #10
    //   281: invokestatic access$1100 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)Ljava/lang/String;
    //   284: invokevirtual append : (Ljava/lang/CharSequence;)Ljava/io/Writer;
    //   287: pop
    //   288: aload_0
    //   289: getfield journalWriter : Ljava/io/Writer;
    //   292: aload #10
    //   294: invokevirtual getLengths : ()Ljava/lang/String;
    //   297: invokevirtual append : (Ljava/lang/CharSequence;)Ljava/io/Writer;
    //   300: pop
    //   301: aload_0
    //   302: getfield journalWriter : Ljava/io/Writer;
    //   305: bipush #10
    //   307: invokevirtual append : (C)Ljava/io/Writer;
    //   310: pop
    //   311: iload_2
    //   312: ifeq -> 396
    //   315: aload_0
    //   316: getfield nextSequenceNumber : J
    //   319: lstore #6
    //   321: aload_0
    //   322: lconst_1
    //   323: lload #6
    //   325: ladd
    //   326: putfield nextSequenceNumber : J
    //   329: aload #10
    //   331: lload #6
    //   333: invokestatic access$1202 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;J)J
    //   336: pop2
    //   337: goto -> 396
    //   340: aload_0
    //   341: getfield lruEntries : Ljava/util/LinkedHashMap;
    //   344: aload #10
    //   346: invokestatic access$1100 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)Ljava/lang/String;
    //   349: invokevirtual remove : (Ljava/lang/Object;)Ljava/lang/Object;
    //   352: pop
    //   353: aload_0
    //   354: getfield journalWriter : Ljava/io/Writer;
    //   357: ldc 'REMOVE'
    //   359: invokevirtual append : (Ljava/lang/CharSequence;)Ljava/io/Writer;
    //   362: pop
    //   363: aload_0
    //   364: getfield journalWriter : Ljava/io/Writer;
    //   367: bipush #32
    //   369: invokevirtual append : (C)Ljava/io/Writer;
    //   372: pop
    //   373: aload_0
    //   374: getfield journalWriter : Ljava/io/Writer;
    //   377: aload #10
    //   379: invokestatic access$1100 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)Ljava/lang/String;
    //   382: invokevirtual append : (Ljava/lang/CharSequence;)Ljava/io/Writer;
    //   385: pop
    //   386: aload_0
    //   387: getfield journalWriter : Ljava/io/Writer;
    //   390: bipush #10
    //   392: invokevirtual append : (C)Ljava/io/Writer;
    //   395: pop
    //   396: aload_0
    //   397: getfield journalWriter : Ljava/io/Writer;
    //   400: invokevirtual flush : ()V
    //   403: aload_0
    //   404: getfield size : J
    //   407: aload_0
    //   408: getfield maxSize : J
    //   411: lcmp
    //   412: ifgt -> 422
    //   415: aload_0
    //   416: invokespecial journalRebuildRequired : ()Z
    //   419: ifeq -> 434
    //   422: aload_0
    //   423: getfield executorService : Ljava/util/concurrent/ThreadPoolExecutor;
    //   426: aload_0
    //   427: getfield cleanupCallable : Ljava/util/concurrent/Callable;
    //   430: invokevirtual submit : (Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
    //   433: pop
    //   434: aload_0
    //   435: monitorexit
    //   436: return
    //   437: new java/lang/IllegalStateException
    //   440: dup
    //   441: invokespecial <init> : ()V
    //   444: athrow
    //   445: astore_1
    //   446: aload_0
    //   447: monitorexit
    //   448: goto -> 453
    //   451: aload_1
    //   452: athrow
    //   453: goto -> 451
    //   456: iload #4
    //   458: iconst_1
    //   459: iadd
    //   460: istore #4
    //   462: goto -> 126
    // Exception table:
    //   from	to	target	type
    //   2	17	445	finally
    //   32	40	445	finally
    //   46	79	445	finally
    //   89	126	445	finally
    //   126	143	445	finally
    //   147	211	445	finally
    //   214	218	445	finally
    //   221	311	445	finally
    //   315	337	445	finally
    //   340	396	445	finally
    //   396	422	445	finally
    //   422	434	445	finally
    //   437	445	445	finally }
  
  private static void deleteIfExists(File paramFile) throws IOException {
    if (paramFile.exists()) {
      if (paramFile.delete())
        return; 
      throw new IOException();
    } 
  }
  
  private Editor edit(String paramString, long paramLong) throws IOException { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: invokespecial checkNotClosed : ()V
    //   6: aload_0
    //   7: getfield lruEntries : Ljava/util/LinkedHashMap;
    //   10: aload_1
    //   11: invokevirtual get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   14: checkcast com/bumptech/glide/disklrucache/DiskLruCache$Entry
    //   17: astore #6
    //   19: lload_2
    //   20: ldc2_w -1
    //   23: lcmp
    //   24: ifeq -> 50
    //   27: aload #6
    //   29: ifnull -> 46
    //   32: aload #6
    //   34: invokestatic access$1200 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)J
    //   37: lstore #4
    //   39: lload #4
    //   41: lload_2
    //   42: lcmp
    //   43: ifeq -> 50
    //   46: aload_0
    //   47: monitorexit
    //   48: aconst_null
    //   49: areturn
    //   50: aload #6
    //   52: ifnonnull -> 81
    //   55: new com/bumptech/glide/disklrucache/DiskLruCache$Entry
    //   58: dup
    //   59: aload_0
    //   60: aload_1
    //   61: aconst_null
    //   62: invokespecial <init> : (Lcom/bumptech/glide/disklrucache/DiskLruCache;Ljava/lang/String;Lcom/bumptech/glide/disklrucache/DiskLruCache$1;)V
    //   65: astore #6
    //   67: aload_0
    //   68: getfield lruEntries : Ljava/util/LinkedHashMap;
    //   71: aload_1
    //   72: aload #6
    //   74: invokevirtual put : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   77: pop
    //   78: goto -> 97
    //   81: aload #6
    //   83: invokestatic access$700 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)Lcom/bumptech/glide/disklrucache/DiskLruCache$Editor;
    //   86: astore #7
    //   88: aload #7
    //   90: ifnull -> 97
    //   93: aload_0
    //   94: monitorexit
    //   95: aconst_null
    //   96: areturn
    //   97: new com/bumptech/glide/disklrucache/DiskLruCache$Editor
    //   100: dup
    //   101: aload_0
    //   102: aload #6
    //   104: aconst_null
    //   105: invokespecial <init> : (Lcom/bumptech/glide/disklrucache/DiskLruCache;Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;Lcom/bumptech/glide/disklrucache/DiskLruCache$1;)V
    //   108: astore #7
    //   110: aload #6
    //   112: aload #7
    //   114: invokestatic access$702 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;Lcom/bumptech/glide/disklrucache/DiskLruCache$Editor;)Lcom/bumptech/glide/disklrucache/DiskLruCache$Editor;
    //   117: pop
    //   118: aload_0
    //   119: getfield journalWriter : Ljava/io/Writer;
    //   122: ldc 'DIRTY'
    //   124: invokevirtual append : (Ljava/lang/CharSequence;)Ljava/io/Writer;
    //   127: pop
    //   128: aload_0
    //   129: getfield journalWriter : Ljava/io/Writer;
    //   132: bipush #32
    //   134: invokevirtual append : (C)Ljava/io/Writer;
    //   137: pop
    //   138: aload_0
    //   139: getfield journalWriter : Ljava/io/Writer;
    //   142: aload_1
    //   143: invokevirtual append : (Ljava/lang/CharSequence;)Ljava/io/Writer;
    //   146: pop
    //   147: aload_0
    //   148: getfield journalWriter : Ljava/io/Writer;
    //   151: bipush #10
    //   153: invokevirtual append : (C)Ljava/io/Writer;
    //   156: pop
    //   157: aload_0
    //   158: getfield journalWriter : Ljava/io/Writer;
    //   161: invokevirtual flush : ()V
    //   164: aload_0
    //   165: monitorexit
    //   166: aload #7
    //   168: areturn
    //   169: astore_1
    //   170: aload_0
    //   171: monitorexit
    //   172: aload_1
    //   173: athrow
    // Exception table:
    //   from	to	target	type
    //   2	19	169	finally
    //   32	39	169	finally
    //   55	78	169	finally
    //   81	88	169	finally
    //   97	164	169	finally }
  
  private static String inputStreamToString(InputStream paramInputStream) throws IOException { return Util.readFully(new InputStreamReader(paramInputStream, Util.UTF_8)); }
  
  private boolean journalRebuildRequired() {
    int i = this.redundantOpCount;
    return (i >= 2000 && i >= this.lruEntries.size());
  }
  
  public static DiskLruCache open(File paramFile, int paramInt1, int paramInt2, long paramLong) throws IOException {
    if (paramLong > 0L) {
      if (paramInt2 > 0) {
        File file = new File(paramFile, "journal.bkp");
        if (file.exists()) {
          File file1 = new File(paramFile, "journal");
          if (file1.exists()) {
            file.delete();
          } else {
            renameTo(file, file1, false);
          } 
        } 
        DiskLruCache diskLruCache2 = new DiskLruCache(paramFile, paramInt1, paramInt2, paramLong);
        if (diskLruCache2.journalFile.exists())
          try {
            diskLruCache2.readJournal();
            diskLruCache2.processJournal();
            return diskLruCache2;
          } catch (IOException iOException) {
            PrintStream printStream = System.out;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("DiskLruCache ");
            stringBuilder.append(paramFile);
            stringBuilder.append(" is corrupt: ");
            stringBuilder.append(iOException.getMessage());
            stringBuilder.append(", removing");
            printStream.println(stringBuilder.toString());
            diskLruCache2.delete();
          }  
        paramFile.mkdirs();
        DiskLruCache diskLruCache1 = new DiskLruCache(paramFile, paramInt1, paramInt2, paramLong);
        diskLruCache1.rebuildJournal();
        return diskLruCache1;
      } 
      throw new IllegalArgumentException("valueCount <= 0");
    } 
    throw new IllegalArgumentException("maxSize <= 0");
  }
  
  private void processJournal() {
    deleteIfExists(this.journalFileTmp);
    Iterator iterator = this.lruEntries.values().iterator();
    while (iterator.hasNext()) {
      Entry entry;
      Editor editor = (entry = (Entry)iterator.next()).access$700(entry);
      byte b2 = 0;
      byte b1 = 0;
      if (editor == null) {
        while (b1 < this.valueCount) {
          this.size += Entry.access$1000(entry)[b1];
          b1++;
        } 
        continue;
      } 
      Entry.access$702(entry, null);
      for (b1 = b2; b1 < this.valueCount; b1++) {
        deleteIfExists(entry.getCleanFile(b1));
        deleteIfExists(entry.getDirtyFile(b1));
      } 
      iterator.remove();
    } 
  }
  
  private void readJournal() {
    strictLineReader = new StrictLineReader(new FileInputStream(this.journalFile), Util.US_ASCII);
    try {
      str1 = strictLineReader.readLine();
      String str2 = strictLineReader.readLine();
      String str5 = strictLineReader.readLine();
      String str3 = strictLineReader.readLine();
      String str4 = strictLineReader.readLine();
      if ("libcore.io.DiskLruCache".equals(str1) && "1".equals(str2) && Integer.toString(this.appVersion).equals(str5) && Integer.toString(this.valueCount).equals(str3)) {
        boolean bool = "".equals(str4);
        if (bool) {
          int i = 0;
          try {
            while (true) {
              readJournalLine(strictLineReader.readLine());
              i++;
            } 
          } catch (EOFException str1) {
            this.redundantOpCount = i - this.lruEntries.size();
            if (strictLineReader.hasUnterminatedLine()) {
              rebuildJournal();
            } else {
              this.journalWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(this.journalFile, true), Util.US_ASCII));
            } 
            return;
          } 
        } 
      } 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("unexpected journal header: [");
      stringBuilder.append(str1);
      stringBuilder.append(", ");
      stringBuilder.append(str2);
      stringBuilder.append(", ");
      stringBuilder.append(str3);
      stringBuilder.append(", ");
      stringBuilder.append(str4);
      stringBuilder.append("]");
      throw new IOException(stringBuilder.toString());
    } finally {
      Util.closeQuietly(strictLineReader);
    } 
  }
  
  private void readJournalLine(String paramString) throws IOException {
    String[] arrayOfString;
    int i = paramString.indexOf(' ');
    if (i != -1) {
      String str;
      int j = i + 1;
      int k = paramString.indexOf(' ', j);
      if (k == -1) {
        String str1 = paramString.substring(j);
        str = str1;
        if (i == 6) {
          str = str1;
          if (paramString.startsWith("REMOVE")) {
            this.lruEntries.remove(str1);
            return;
          } 
        } 
      } else {
        str = paramString.substring(j, k);
      } 
      Entry entry2 = (Entry)this.lruEntries.get(str);
      Entry entry1 = entry2;
      if (entry2 == null) {
        entry1 = new Entry(this, str, null);
        this.lruEntries.put(str, entry1);
      } 
      if (k != -1 && i == 5 && paramString.startsWith("CLEAN")) {
        arrayOfString = paramString.substring(k + 1).split(" ");
        Entry.access$602(entry1, true);
        Entry.access$702(entry1, null);
        Entry.access$800(entry1, arrayOfString);
        return;
      } 
      if (k == -1 && i == 5 && arrayOfString.startsWith("DIRTY")) {
        Entry.access$702(entry1, new Editor(this, entry1, null));
        return;
      } 
      if (k == -1 && i == 4 && arrayOfString.startsWith("READ"))
        return; 
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("unexpected journal line: ");
      stringBuilder1.append(arrayOfString);
      throw new IOException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("unexpected journal line: ");
    stringBuilder.append(arrayOfString);
    throw new IOException(stringBuilder.toString());
  }
  
  private void rebuildJournal() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield journalWriter : Ljava/io/Writer;
    //   6: ifnull -> 16
    //   9: aload_0
    //   10: getfield journalWriter : Ljava/io/Writer;
    //   13: invokevirtual close : ()V
    //   16: new java/io/BufferedWriter
    //   19: dup
    //   20: new java/io/OutputStreamWriter
    //   23: dup
    //   24: new java/io/FileOutputStream
    //   27: dup
    //   28: aload_0
    //   29: getfield journalFileTmp : Ljava/io/File;
    //   32: invokespecial <init> : (Ljava/io/File;)V
    //   35: getstatic com/bumptech/glide/disklrucache/Util.US_ASCII : Ljava/nio/charset/Charset;
    //   38: invokespecial <init> : (Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V
    //   41: invokespecial <init> : (Ljava/io/Writer;)V
    //   44: astore_1
    //   45: aload_1
    //   46: ldc 'libcore.io.DiskLruCache'
    //   48: invokevirtual write : (Ljava/lang/String;)V
    //   51: aload_1
    //   52: ldc_w '\\n'
    //   55: invokevirtual write : (Ljava/lang/String;)V
    //   58: aload_1
    //   59: ldc '1'
    //   61: invokevirtual write : (Ljava/lang/String;)V
    //   64: aload_1
    //   65: ldc_w '\\n'
    //   68: invokevirtual write : (Ljava/lang/String;)V
    //   71: aload_1
    //   72: aload_0
    //   73: getfield appVersion : I
    //   76: invokestatic toString : (I)Ljava/lang/String;
    //   79: invokevirtual write : (Ljava/lang/String;)V
    //   82: aload_1
    //   83: ldc_w '\\n'
    //   86: invokevirtual write : (Ljava/lang/String;)V
    //   89: aload_1
    //   90: aload_0
    //   91: getfield valueCount : I
    //   94: invokestatic toString : (I)Ljava/lang/String;
    //   97: invokevirtual write : (Ljava/lang/String;)V
    //   100: aload_1
    //   101: ldc_w '\\n'
    //   104: invokevirtual write : (Ljava/lang/String;)V
    //   107: aload_1
    //   108: ldc_w '\\n'
    //   111: invokevirtual write : (Ljava/lang/String;)V
    //   114: aload_0
    //   115: getfield lruEntries : Ljava/util/LinkedHashMap;
    //   118: invokevirtual values : ()Ljava/util/Collection;
    //   121: invokeinterface iterator : ()Ljava/util/Iterator;
    //   126: astore_2
    //   127: aload_2
    //   128: invokeinterface hasNext : ()Z
    //   133: ifeq -> 259
    //   136: aload_2
    //   137: invokeinterface next : ()Ljava/lang/Object;
    //   142: checkcast com/bumptech/glide/disklrucache/DiskLruCache$Entry
    //   145: astore_3
    //   146: aload_3
    //   147: invokestatic access$700 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)Lcom/bumptech/glide/disklrucache/DiskLruCache$Editor;
    //   150: ifnull -> 201
    //   153: new java/lang/StringBuilder
    //   156: dup
    //   157: invokespecial <init> : ()V
    //   160: astore #4
    //   162: aload #4
    //   164: ldc_w 'DIRTY '
    //   167: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   170: pop
    //   171: aload #4
    //   173: aload_3
    //   174: invokestatic access$1100 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)Ljava/lang/String;
    //   177: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   180: pop
    //   181: aload #4
    //   183: bipush #10
    //   185: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   188: pop
    //   189: aload_1
    //   190: aload #4
    //   192: invokevirtual toString : ()Ljava/lang/String;
    //   195: invokevirtual write : (Ljava/lang/String;)V
    //   198: goto -> 127
    //   201: new java/lang/StringBuilder
    //   204: dup
    //   205: invokespecial <init> : ()V
    //   208: astore #4
    //   210: aload #4
    //   212: ldc_w 'CLEAN '
    //   215: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   218: pop
    //   219: aload #4
    //   221: aload_3
    //   222: invokestatic access$1100 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)Ljava/lang/String;
    //   225: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   228: pop
    //   229: aload #4
    //   231: aload_3
    //   232: invokevirtual getLengths : ()Ljava/lang/String;
    //   235: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   238: pop
    //   239: aload #4
    //   241: bipush #10
    //   243: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   246: pop
    //   247: aload_1
    //   248: aload #4
    //   250: invokevirtual toString : ()Ljava/lang/String;
    //   253: invokevirtual write : (Ljava/lang/String;)V
    //   256: goto -> 127
    //   259: aload_1
    //   260: invokevirtual close : ()V
    //   263: aload_0
    //   264: getfield journalFile : Ljava/io/File;
    //   267: invokevirtual exists : ()Z
    //   270: ifeq -> 285
    //   273: aload_0
    //   274: getfield journalFile : Ljava/io/File;
    //   277: aload_0
    //   278: getfield journalFileBackup : Ljava/io/File;
    //   281: iconst_1
    //   282: invokestatic renameTo : (Ljava/io/File;Ljava/io/File;Z)V
    //   285: aload_0
    //   286: getfield journalFileTmp : Ljava/io/File;
    //   289: aload_0
    //   290: getfield journalFile : Ljava/io/File;
    //   293: iconst_0
    //   294: invokestatic renameTo : (Ljava/io/File;Ljava/io/File;Z)V
    //   297: aload_0
    //   298: getfield journalFileBackup : Ljava/io/File;
    //   301: invokevirtual delete : ()Z
    //   304: pop
    //   305: aload_0
    //   306: new java/io/BufferedWriter
    //   309: dup
    //   310: new java/io/OutputStreamWriter
    //   313: dup
    //   314: new java/io/FileOutputStream
    //   317: dup
    //   318: aload_0
    //   319: getfield journalFile : Ljava/io/File;
    //   322: iconst_1
    //   323: invokespecial <init> : (Ljava/io/File;Z)V
    //   326: getstatic com/bumptech/glide/disklrucache/Util.US_ASCII : Ljava/nio/charset/Charset;
    //   329: invokespecial <init> : (Ljava/io/OutputStream;Ljava/nio/charset/Charset;)V
    //   332: invokespecial <init> : (Ljava/io/Writer;)V
    //   335: putfield journalWriter : Ljava/io/Writer;
    //   338: aload_0
    //   339: monitorexit
    //   340: return
    //   341: astore_2
    //   342: aload_1
    //   343: invokevirtual close : ()V
    //   346: aload_2
    //   347: athrow
    //   348: astore_1
    //   349: aload_0
    //   350: monitorexit
    //   351: goto -> 356
    //   354: aload_1
    //   355: athrow
    //   356: goto -> 354
    // Exception table:
    //   from	to	target	type
    //   2	16	348	finally
    //   16	45	348	finally
    //   45	127	341	finally
    //   127	198	341	finally
    //   201	256	341	finally
    //   259	285	348	finally
    //   285	338	348	finally
    //   342	348	348	finally }
  
  private static void renameTo(File paramFile1, File paramFile2, boolean paramBoolean) throws IOException {
    if (paramBoolean)
      deleteIfExists(paramFile2); 
    if (paramFile1.renameTo(paramFile2))
      return; 
    throw new IOException();
  }
  
  private void trimToSize() {
    while (this.size > this.maxSize)
      remove((String)((Map.Entry)this.lruEntries.entrySet().iterator().next()).getKey()); 
  }
  
  public void close() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield journalWriter : Ljava/io/Writer;
    //   6: astore_1
    //   7: aload_1
    //   8: ifnonnull -> 14
    //   11: aload_0
    //   12: monitorexit
    //   13: return
    //   14: new java/util/ArrayList
    //   17: dup
    //   18: aload_0
    //   19: getfield lruEntries : Ljava/util/LinkedHashMap;
    //   22: invokevirtual values : ()Ljava/util/Collection;
    //   25: invokespecial <init> : (Ljava/util/Collection;)V
    //   28: invokevirtual iterator : ()Ljava/util/Iterator;
    //   31: astore_1
    //   32: aload_1
    //   33: invokeinterface hasNext : ()Z
    //   38: ifeq -> 68
    //   41: aload_1
    //   42: invokeinterface next : ()Ljava/lang/Object;
    //   47: checkcast com/bumptech/glide/disklrucache/DiskLruCache$Entry
    //   50: astore_2
    //   51: aload_2
    //   52: invokestatic access$700 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)Lcom/bumptech/glide/disklrucache/DiskLruCache$Editor;
    //   55: ifnull -> 32
    //   58: aload_2
    //   59: invokestatic access$700 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)Lcom/bumptech/glide/disklrucache/DiskLruCache$Editor;
    //   62: invokevirtual abort : ()V
    //   65: goto -> 32
    //   68: aload_0
    //   69: invokespecial trimToSize : ()V
    //   72: aload_0
    //   73: getfield journalWriter : Ljava/io/Writer;
    //   76: invokevirtual close : ()V
    //   79: aload_0
    //   80: aconst_null
    //   81: putfield journalWriter : Ljava/io/Writer;
    //   84: aload_0
    //   85: monitorexit
    //   86: return
    //   87: astore_1
    //   88: aload_0
    //   89: monitorexit
    //   90: goto -> 95
    //   93: aload_1
    //   94: athrow
    //   95: goto -> 93
    // Exception table:
    //   from	to	target	type
    //   2	7	87	finally
    //   14	32	87	finally
    //   32	65	87	finally
    //   68	84	87	finally }
  
  public void delete() {
    close();
    Util.deleteContents(this.directory);
  }
  
  public Editor edit(String paramString) throws IOException { return edit(paramString, -1L); }
  
  public void flush() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: invokespecial checkNotClosed : ()V
    //   6: aload_0
    //   7: invokespecial trimToSize : ()V
    //   10: aload_0
    //   11: getfield journalWriter : Ljava/io/Writer;
    //   14: invokevirtual flush : ()V
    //   17: aload_0
    //   18: monitorexit
    //   19: return
    //   20: astore_1
    //   21: aload_0
    //   22: monitorexit
    //   23: aload_1
    //   24: athrow
    // Exception table:
    //   from	to	target	type
    //   2	17	20	finally }
  
  public Value get(String paramString) throws IOException { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: invokespecial checkNotClosed : ()V
    //   6: aload_0
    //   7: getfield lruEntries : Ljava/util/LinkedHashMap;
    //   10: aload_1
    //   11: invokevirtual get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   14: checkcast com/bumptech/glide/disklrucache/DiskLruCache$Entry
    //   17: astore #5
    //   19: aload #5
    //   21: ifnonnull -> 28
    //   24: aload_0
    //   25: monitorexit
    //   26: aconst_null
    //   27: areturn
    //   28: aload #5
    //   30: invokestatic access$600 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)Z
    //   33: istore #4
    //   35: iload #4
    //   37: ifne -> 44
    //   40: aload_0
    //   41: monitorexit
    //   42: aconst_null
    //   43: areturn
    //   44: aload #5
    //   46: getfield cleanFiles : [Ljava/io/File;
    //   49: astore #6
    //   51: aload #6
    //   53: arraylength
    //   54: istore_3
    //   55: iconst_0
    //   56: istore_2
    //   57: iload_2
    //   58: iload_3
    //   59: if_icmpge -> 87
    //   62: aload #6
    //   64: iload_2
    //   65: aaload
    //   66: invokevirtual exists : ()Z
    //   69: istore #4
    //   71: iload #4
    //   73: ifne -> 80
    //   76: aload_0
    //   77: monitorexit
    //   78: aconst_null
    //   79: areturn
    //   80: iload_2
    //   81: iconst_1
    //   82: iadd
    //   83: istore_2
    //   84: goto -> 57
    //   87: aload_0
    //   88: aload_0
    //   89: getfield redundantOpCount : I
    //   92: iconst_1
    //   93: iadd
    //   94: putfield redundantOpCount : I
    //   97: aload_0
    //   98: getfield journalWriter : Ljava/io/Writer;
    //   101: ldc 'READ'
    //   103: invokevirtual append : (Ljava/lang/CharSequence;)Ljava/io/Writer;
    //   106: pop
    //   107: aload_0
    //   108: getfield journalWriter : Ljava/io/Writer;
    //   111: bipush #32
    //   113: invokevirtual append : (C)Ljava/io/Writer;
    //   116: pop
    //   117: aload_0
    //   118: getfield journalWriter : Ljava/io/Writer;
    //   121: aload_1
    //   122: invokevirtual append : (Ljava/lang/CharSequence;)Ljava/io/Writer;
    //   125: pop
    //   126: aload_0
    //   127: getfield journalWriter : Ljava/io/Writer;
    //   130: bipush #10
    //   132: invokevirtual append : (C)Ljava/io/Writer;
    //   135: pop
    //   136: aload_0
    //   137: invokespecial journalRebuildRequired : ()Z
    //   140: ifeq -> 155
    //   143: aload_0
    //   144: getfield executorService : Ljava/util/concurrent/ThreadPoolExecutor;
    //   147: aload_0
    //   148: getfield cleanupCallable : Ljava/util/concurrent/Callable;
    //   151: invokevirtual submit : (Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
    //   154: pop
    //   155: new com/bumptech/glide/disklrucache/DiskLruCache$Value
    //   158: dup
    //   159: aload_0
    //   160: aload_1
    //   161: aload #5
    //   163: invokestatic access$1200 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)J
    //   166: aload #5
    //   168: getfield cleanFiles : [Ljava/io/File;
    //   171: aload #5
    //   173: invokestatic access$1000 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)[J
    //   176: aconst_null
    //   177: invokespecial <init> : (Lcom/bumptech/glide/disklrucache/DiskLruCache;Ljava/lang/String;J[Ljava/io/File;[JLcom/bumptech/glide/disklrucache/DiskLruCache$1;)V
    //   180: astore_1
    //   181: aload_0
    //   182: monitorexit
    //   183: aload_1
    //   184: areturn
    //   185: astore_1
    //   186: aload_0
    //   187: monitorexit
    //   188: goto -> 193
    //   191: aload_1
    //   192: athrow
    //   193: goto -> 191
    // Exception table:
    //   from	to	target	type
    //   2	19	185	finally
    //   28	35	185	finally
    //   44	55	185	finally
    //   62	71	185	finally
    //   87	155	185	finally
    //   155	181	185	finally }
  
  public File getDirectory() { return this.directory; }
  
  public long getMaxSize() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield maxSize : J
    //   6: lstore_1
    //   7: aload_0
    //   8: monitorexit
    //   9: lload_1
    //   10: lreturn
    //   11: astore_3
    //   12: aload_0
    //   13: monitorexit
    //   14: aload_3
    //   15: athrow
    // Exception table:
    //   from	to	target	type
    //   2	7	11	finally }
  
  public boolean isClosed() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield journalWriter : Ljava/io/Writer;
    //   6: astore_2
    //   7: aload_2
    //   8: ifnonnull -> 16
    //   11: iconst_1
    //   12: istore_1
    //   13: goto -> 18
    //   16: iconst_0
    //   17: istore_1
    //   18: aload_0
    //   19: monitorexit
    //   20: iload_1
    //   21: ireturn
    //   22: astore_2
    //   23: aload_0
    //   24: monitorexit
    //   25: aload_2
    //   26: athrow
    // Exception table:
    //   from	to	target	type
    //   2	7	22	finally }
  
  public boolean remove(String paramString) throws IOException { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: invokespecial checkNotClosed : ()V
    //   6: aload_0
    //   7: getfield lruEntries : Ljava/util/LinkedHashMap;
    //   10: aload_1
    //   11: invokevirtual get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   14: checkcast com/bumptech/glide/disklrucache/DiskLruCache$Entry
    //   17: astore #4
    //   19: iconst_0
    //   20: istore_2
    //   21: aload #4
    //   23: ifnull -> 215
    //   26: aload #4
    //   28: invokestatic access$700 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)Lcom/bumptech/glide/disklrucache/DiskLruCache$Editor;
    //   31: ifnull -> 37
    //   34: goto -> 215
    //   37: iload_2
    //   38: aload_0
    //   39: getfield valueCount : I
    //   42: if_icmpge -> 134
    //   45: aload #4
    //   47: iload_2
    //   48: invokevirtual getCleanFile : (I)Ljava/io/File;
    //   51: astore_3
    //   52: aload_3
    //   53: invokevirtual exists : ()Z
    //   56: ifeq -> 103
    //   59: aload_3
    //   60: invokevirtual delete : ()Z
    //   63: ifeq -> 69
    //   66: goto -> 103
    //   69: new java/lang/StringBuilder
    //   72: dup
    //   73: invokespecial <init> : ()V
    //   76: astore_1
    //   77: aload_1
    //   78: ldc_w 'failed to delete '
    //   81: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   84: pop
    //   85: aload_1
    //   86: aload_3
    //   87: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   90: pop
    //   91: new java/io/IOException
    //   94: dup
    //   95: aload_1
    //   96: invokevirtual toString : ()Ljava/lang/String;
    //   99: invokespecial <init> : (Ljava/lang/String;)V
    //   102: athrow
    //   103: aload_0
    //   104: aload_0
    //   105: getfield size : J
    //   108: aload #4
    //   110: invokestatic access$1000 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)[J
    //   113: iload_2
    //   114: laload
    //   115: lsub
    //   116: putfield size : J
    //   119: aload #4
    //   121: invokestatic access$1000 : (Lcom/bumptech/glide/disklrucache/DiskLruCache$Entry;)[J
    //   124: iload_2
    //   125: lconst_0
    //   126: lastore
    //   127: iload_2
    //   128: iconst_1
    //   129: iadd
    //   130: istore_2
    //   131: goto -> 37
    //   134: aload_0
    //   135: aload_0
    //   136: getfield redundantOpCount : I
    //   139: iconst_1
    //   140: iadd
    //   141: putfield redundantOpCount : I
    //   144: aload_0
    //   145: getfield journalWriter : Ljava/io/Writer;
    //   148: ldc 'REMOVE'
    //   150: invokevirtual append : (Ljava/lang/CharSequence;)Ljava/io/Writer;
    //   153: pop
    //   154: aload_0
    //   155: getfield journalWriter : Ljava/io/Writer;
    //   158: bipush #32
    //   160: invokevirtual append : (C)Ljava/io/Writer;
    //   163: pop
    //   164: aload_0
    //   165: getfield journalWriter : Ljava/io/Writer;
    //   168: aload_1
    //   169: invokevirtual append : (Ljava/lang/CharSequence;)Ljava/io/Writer;
    //   172: pop
    //   173: aload_0
    //   174: getfield journalWriter : Ljava/io/Writer;
    //   177: bipush #10
    //   179: invokevirtual append : (C)Ljava/io/Writer;
    //   182: pop
    //   183: aload_0
    //   184: getfield lruEntries : Ljava/util/LinkedHashMap;
    //   187: aload_1
    //   188: invokevirtual remove : (Ljava/lang/Object;)Ljava/lang/Object;
    //   191: pop
    //   192: aload_0
    //   193: invokespecial journalRebuildRequired : ()Z
    //   196: ifeq -> 211
    //   199: aload_0
    //   200: getfield executorService : Ljava/util/concurrent/ThreadPoolExecutor;
    //   203: aload_0
    //   204: getfield cleanupCallable : Ljava/util/concurrent/Callable;
    //   207: invokevirtual submit : (Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
    //   210: pop
    //   211: aload_0
    //   212: monitorexit
    //   213: iconst_1
    //   214: ireturn
    //   215: aload_0
    //   216: monitorexit
    //   217: iconst_0
    //   218: ireturn
    //   219: astore_1
    //   220: aload_0
    //   221: monitorexit
    //   222: goto -> 227
    //   225: aload_1
    //   226: athrow
    //   227: goto -> 225
    // Exception table:
    //   from	to	target	type
    //   2	19	219	finally
    //   26	34	219	finally
    //   37	66	219	finally
    //   69	103	219	finally
    //   103	127	219	finally
    //   134	211	219	finally }
  
  public void setMaxSize(long paramLong) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: lload_1
    //   4: putfield maxSize : J
    //   7: aload_0
    //   8: getfield executorService : Ljava/util/concurrent/ThreadPoolExecutor;
    //   11: aload_0
    //   12: getfield cleanupCallable : Ljava/util/concurrent/Callable;
    //   15: invokevirtual submit : (Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
    //   18: pop
    //   19: aload_0
    //   20: monitorexit
    //   21: return
    //   22: astore_3
    //   23: aload_0
    //   24: monitorexit
    //   25: aload_3
    //   26: athrow
    // Exception table:
    //   from	to	target	type
    //   2	19	22	finally }
  
  public long size() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield size : J
    //   6: lstore_1
    //   7: aload_0
    //   8: monitorexit
    //   9: lload_1
    //   10: lreturn
    //   11: astore_3
    //   12: aload_0
    //   13: monitorexit
    //   14: aload_3
    //   15: athrow
    // Exception table:
    //   from	to	target	type
    //   2	7	11	finally }
}
