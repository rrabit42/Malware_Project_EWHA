package com.google.firebase.auth;

import android.app.Activity;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.tasks.TaskExecutors;
import com.google.firebase.FirebaseApp;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;

public class PhoneAuthProvider {
  public static final String PHONE_SIGN_IN_METHOD = "phone";
  
  public static final String PROVIDER_ID = "phone";
  
  private FirebaseAuth zzht;
  
  private PhoneAuthProvider(FirebaseAuth paramFirebaseAuth) { this.zzht = paramFirebaseAuth; }
  
  public static PhoneAuthCredential getCredential(@NonNull String paramString1, @NonNull String paramString2) { return new PhoneAuthCredential(paramString1, paramString2, false, null, true, null); }
  
  public static PhoneAuthProvider getInstance() { return new PhoneAuthProvider(FirebaseAuth.getInstance(FirebaseApp.getInstance())); }
  
  public static PhoneAuthProvider getInstance(FirebaseAuth paramFirebaseAuth) { return new PhoneAuthProvider(paramFirebaseAuth); }
  
  private final void zza(String paramString, long paramLong, TimeUnit paramTimeUnit, Activity paramActivity, Executor paramExecutor, OnVerificationStateChangedCallbacks paramOnVerificationStateChangedCallbacks, ForceResendingToken paramForceResendingToken) {
    boolean bool;
    FirebaseAuth firebaseAuth = this.zzht;
    if (paramForceResendingToken != null) {
      bool = true;
    } else {
      bool = false;
    } 
    firebaseAuth.zza(paramString, paramLong, paramTimeUnit, paramOnVerificationStateChangedCallbacks, paramActivity, paramExecutor, bool);
  }
  
  public void verifyPhoneNumber(@NonNull String paramString, long paramLong, TimeUnit paramTimeUnit, @NonNull Activity paramActivity, @NonNull OnVerificationStateChangedCallbacks paramOnVerificationStateChangedCallbacks) { zza(Preconditions.checkNotEmpty(paramString), paramLong, paramTimeUnit, (Activity)Preconditions.checkNotNull(paramActivity), TaskExecutors.MAIN_THREAD, (OnVerificationStateChangedCallbacks)Preconditions.checkNotNull(paramOnVerificationStateChangedCallbacks), null); }
  
  public void verifyPhoneNumber(@NonNull String paramString, long paramLong, TimeUnit paramTimeUnit, @NonNull Activity paramActivity, @NonNull OnVerificationStateChangedCallbacks paramOnVerificationStateChangedCallbacks, @Nullable ForceResendingToken paramForceResendingToken) { zza(Preconditions.checkNotEmpty(paramString), paramLong, paramTimeUnit, (Activity)Preconditions.checkNotNull(paramActivity), TaskExecutors.MAIN_THREAD, (OnVerificationStateChangedCallbacks)Preconditions.checkNotNull(paramOnVerificationStateChangedCallbacks), paramForceResendingToken); }
  
  public void verifyPhoneNumber(@NonNull String paramString, long paramLong, TimeUnit paramTimeUnit, @NonNull Executor paramExecutor, @NonNull OnVerificationStateChangedCallbacks paramOnVerificationStateChangedCallbacks) { zza(Preconditions.checkNotEmpty(paramString), paramLong, paramTimeUnit, null, (Executor)Preconditions.checkNotNull(paramExecutor), (OnVerificationStateChangedCallbacks)Preconditions.checkNotNull(paramOnVerificationStateChangedCallbacks), null); }
  
  public void verifyPhoneNumber(@NonNull String paramString, long paramLong, TimeUnit paramTimeUnit, @NonNull Executor paramExecutor, @NonNull OnVerificationStateChangedCallbacks paramOnVerificationStateChangedCallbacks, @Nullable ForceResendingToken paramForceResendingToken) { zza(Preconditions.checkNotEmpty(paramString), paramLong, paramTimeUnit, null, (Executor)Preconditions.checkNotNull(paramExecutor), (OnVerificationStateChangedCallbacks)Preconditions.checkNotNull(paramOnVerificationStateChangedCallbacks), paramForceResendingToken); }
}
