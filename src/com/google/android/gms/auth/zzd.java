package com.google.android.gms.auth;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.ComponentName;
import android.content.Context;
import android.os.Bundle;
import android.os.RemoteException;
import android.os.SystemClock;
import android.support.annotation.RequiresPermission;
import android.text.TextUtils;
import com.google.android.gms.common.BlockingServiceConnection;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import com.google.android.gms.common.GooglePlayServicesRepairableException;
import com.google.android.gms.common.GooglePlayServicesUtilLight;
import com.google.android.gms.common.internal.GmsClientSupervisor;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.logging.Logger;
import java.io.IOException;
import java.util.List;

public class zzd {
  private static final String[] ACCEPTABLE_ACCOUNT_TYPES = { "com.google", "com.google.work", "cn.google" };
  
  public static final int CHANGE_TYPE_ACCOUNT_ADDED = 1;
  
  public static final int CHANGE_TYPE_ACCOUNT_REMOVED = 2;
  
  public static final int CHANGE_TYPE_ACCOUNT_RENAMED_FROM = 3;
  
  public static final int CHANGE_TYPE_ACCOUNT_RENAMED_TO = 4;
  
  public static final String GOOGLE_ACCOUNT_TYPE = "com.google";
  
  @SuppressLint({"InlinedApi"})
  public static final String KEY_ANDROID_PACKAGE_NAME;
  
  @SuppressLint({"InlinedApi"})
  public static final String KEY_CALLER_UID = "callerUid";
  
  public static final String KEY_SUPPRESS_PROGRESS_SCREEN = "suppressProgressScreen";
  
  public static final String WORK_ACCOUNT_TYPE = "com.google.work";
  
  private static final ComponentName zzm;
  
  private static final Logger zzn;
  
  static  {
    KEY_ANDROID_PACKAGE_NAME = "androidPackageName";
    zzm = new ComponentName("com.google.android.gms", "com.google.android.gms.auth.GetToken");
    zzn = new Logger("Auth", new String[] { "GoogleAuthUtil" });
  }
  
  public static void clearToken(Context paramContext, String paramString) throws GooglePlayServicesAvailabilityException, GoogleAuthException, IOException {
    Preconditions.checkNotMainThread("Calling this from your main thread can lead to deadlock");
    ensurePlayServicesAvailable(paramContext, 8400000);
    Bundle bundle = new Bundle();
    String str = (paramContext.getApplicationInfo()).packageName;
    bundle.putString("clientPackageName", str);
    if (!bundle.containsKey(KEY_ANDROID_PACKAGE_NAME))
      bundle.putString(KEY_ANDROID_PACKAGE_NAME, str); 
    zzf zzf = new zzf(paramString, bundle);
    zza(paramContext, zzm, zzf);
  }
  
  private static void ensurePlayServicesAvailable(Context paramContext, int paramInt) throws GoogleAuthException {
    try {
      GooglePlayServicesUtilLight.ensurePlayServicesAvailable(paramContext.getApplicationContext(), paramInt);
      return;
    } catch (GooglePlayServicesRepairableException paramContext) {
      throw new GooglePlayServicesAvailabilityException(paramContext.getConnectionStatusCode(), paramContext.getMessage(), paramContext.getIntent());
    } catch (GooglePlayServicesNotAvailableException paramContext) {
      throw new GoogleAuthException(paramContext.getMessage());
    } 
  }
  
  public static List<AccountChangeEvent> getAccountChangeEvents(Context paramContext, int paramInt, String paramString) throws GoogleAuthException, IOException {
    Preconditions.checkNotEmpty(paramString, "accountName must be provided");
    Preconditions.checkNotMainThread("Calling this from your main thread can lead to deadlock");
    ensurePlayServicesAvailable(paramContext, 8400000);
    zzg zzg = new zzg(paramString, paramInt);
    return (List)zza(paramContext, zzm, zzg);
  }
  
  public static String getAccountId(Context paramContext, String paramString) throws GoogleAuthException, IOException {
    Preconditions.checkNotEmpty(paramString, "accountName must be provided");
    Preconditions.checkNotMainThread("Calling this from your main thread can lead to deadlock");
    ensurePlayServicesAvailable(paramContext, 8400000);
    return getToken(paramContext, paramString, "^^_account_id_^^", new Bundle());
  }
  
  public static String getToken(Context paramContext, Account paramAccount, String paramString) throws IOException, UserRecoverableAuthException, GoogleAuthException { return getToken(paramContext, paramAccount, paramString, new Bundle()); }
  
  public static String getToken(Context paramContext, Account paramAccount, String paramString, Bundle paramBundle) throws IOException, UserRecoverableAuthException, GoogleAuthException {
    zzb(paramAccount);
    return zzb(paramContext, paramAccount, paramString, paramBundle).zzb();
  }
  
  @Deprecated
  public static String getToken(Context paramContext, String paramString1, String paramString2) throws IOException, UserRecoverableAuthException, GoogleAuthException { return getToken(paramContext, new Account(paramString1, "com.google"), paramString2); }
  
  @Deprecated
  public static String getToken(Context paramContext, String paramString1, String paramString2, Bundle paramBundle) throws IOException, UserRecoverableAuthException, GoogleAuthException { return getToken(paramContext, new Account(paramString1, "com.google"), paramString2, paramBundle); }
  
  @Deprecated
  @RequiresPermission("android.permission.MANAGE_ACCOUNTS")
  public static void invalidateToken(Context paramContext, String paramString) throws GooglePlayServicesAvailabilityException, GoogleAuthException, IOException { AccountManager.get(paramContext).invalidateAuthToken("com.google", paramString); }
  
  @TargetApi(23)
  public static Bundle removeAccount(Context paramContext, Account paramAccount) throws GoogleAuthException, IOException {
    Preconditions.checkNotNull(paramContext);
    zzb(paramAccount);
    ensurePlayServicesAvailable(paramContext, 8400000);
    zzh zzh = new zzh(paramAccount);
    return (Bundle)zza(paramContext, zzm, zzh);
  }
  
  @TargetApi(26)
  public static Boolean requestGoogleAccountsAccess(Context paramContext) throws GoogleAuthException, IOException {
    Preconditions.checkNotNull(paramContext);
    ensurePlayServicesAvailable(paramContext, 11400000);
    zzi zzi = new zzi((paramContext.getApplicationInfo()).packageName);
    return (Boolean)zza(paramContext, zzm, zzi);
  }
  
  private static <T> T zza(Context paramContext, ComponentName paramComponentName, zzj<T> paramzzj) throws IOException, GoogleAuthException {
    BlockingServiceConnection blockingServiceConnection = new BlockingServiceConnection();
    GmsClientSupervisor gmsClientSupervisor = GmsClientSupervisor.getInstance(paramContext);
    if (gmsClientSupervisor.bindService(paramComponentName, blockingServiceConnection, "GoogleAuthUtil")) {
      try {
        Object object = paramzzj.zzb(blockingServiceConnection.getService());
        gmsClientSupervisor.unbindService(paramComponentName, blockingServiceConnection, "GoogleAuthUtil");
        return (T)object;
      } catch (RemoteException paramContext) {
      
      } catch (InterruptedException paramContext) {
      
      } finally {}
      zzn.i("GoogleAuthUtil", new Object[] { "Error on service connection.", paramContext });
      throw new IOException("Error on service connection.", paramContext);
    } 
    throw new IOException("Could not bind to service.");
  }
  
  private static <T> T zza(T paramT) throws IOException {
    if (paramT != null)
      return paramT; 
    zzn.w("GoogleAuthUtil", new Object[] { "Binder call returned null." });
    throw new IOException("Service unavailable.");
  }
  
  public static TokenData zzb(Context paramContext, Account paramAccount, String paramString, Bundle paramBundle) throws IOException, UserRecoverableAuthException, GoogleAuthException {
    Preconditions.checkNotMainThread("Calling this from your main thread can lead to deadlock");
    Preconditions.checkNotEmpty(paramString, "Scope cannot be empty or null.");
    zzb(paramAccount);
    ensurePlayServicesAvailable(paramContext, 8400000);
    if (paramBundle == null) {
      paramBundle = new Bundle();
    } else {
      paramBundle = new Bundle(paramBundle);
    } 
    String str = (paramContext.getApplicationInfo()).packageName;
    paramBundle.putString("clientPackageName", str);
    if (TextUtils.isEmpty(paramBundle.getString(KEY_ANDROID_PACKAGE_NAME)))
      paramBundle.putString(KEY_ANDROID_PACKAGE_NAME, str); 
    paramBundle.putLong("service_connection_start_time_millis", SystemClock.elapsedRealtime());
    zze zze = new zze(paramAccount, paramString, paramBundle);
    return (TokenData)zza(paramContext, zzm, zze);
  }
  
  private static void zzb(Account paramAccount) {
    if (paramAccount != null) {
      if (!TextUtils.isEmpty(paramAccount.name)) {
        String[] arrayOfString = ACCEPTABLE_ACCOUNT_TYPES;
        int i = arrayOfString.length;
        for (byte b = 0; b < i; b++) {
          if (arrayOfString[b].equals(paramAccount.type))
            return; 
        } 
        throw new IllegalArgumentException("Account type not supported");
      } 
      throw new IllegalArgumentException("Account name cannot be empty!");
    } 
    IllegalArgumentException illegalArgumentException = new IllegalArgumentException("Account cannot be null");
    throw illegalArgumentException;
  }
}
