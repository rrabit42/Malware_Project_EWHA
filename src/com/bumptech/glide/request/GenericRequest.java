package com.bumptech.glide.request;

import android.content.Context;
import android.graphics.drawable.Drawable;
import android.util.Log;
import com.bumptech.glide.Priority;
import com.bumptech.glide.load.Key;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.load.engine.Engine;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
import com.bumptech.glide.provider.LoadProvider;
import com.bumptech.glide.request.animation.GlideAnimationFactory;
import com.bumptech.glide.request.target.SizeReadyCallback;
import com.bumptech.glide.request.target.Target;
import com.bumptech.glide.util.LogTime;
import com.bumptech.glide.util.Util;
import java.util.Queue;

public final class GenericRequest<A, T, Z, R> extends Object implements Request, SizeReadyCallback, ResourceCallback {
  private static final Queue<GenericRequest<?, ?, ?, ?>> REQUEST_POOL = Util.createQueue(0);
  
  private static final String TAG = "GenericRequest";
  
  private static final double TO_MEGABYTE = 9.5367431640625E-7D;
  
  private GlideAnimationFactory<R> animationFactory;
  
  private Context context;
  
  private DiskCacheStrategy diskCacheStrategy;
  
  private Engine engine;
  
  private Drawable errorDrawable;
  
  private int errorResourceId;
  
  private Drawable fallbackDrawable;
  
  private int fallbackResourceId;
  
  private boolean isMemoryCacheable;
  
  private LoadProvider<A, T, Z, R> loadProvider;
  
  private Engine.LoadStatus loadStatus;
  
  private boolean loadedFromMemoryCache;
  
  private A model;
  
  private int overrideHeight;
  
  private int overrideWidth;
  
  private Drawable placeholderDrawable;
  
  private int placeholderResourceId;
  
  private Priority priority;
  
  private RequestCoordinator requestCoordinator;
  
  private RequestListener<? super A, R> requestListener;
  
  private Resource<?> resource;
  
  private Key signature;
  
  private float sizeMultiplier;
  
  private long startTime;
  
  private Status status;
  
  private final String tag = String.valueOf(hashCode());
  
  private Target<R> target;
  
  private Class<R> transcodeClass;
  
  private Transformation<Z> transformation;
  
  private boolean canNotifyStatusChanged() {
    RequestCoordinator requestCoordinator1 = this.requestCoordinator;
    return (requestCoordinator1 == null || requestCoordinator1.canNotifyStatusChanged(this));
  }
  
  private boolean canSetResource() {
    RequestCoordinator requestCoordinator1 = this.requestCoordinator;
    return (requestCoordinator1 == null || requestCoordinator1.canSetImage(this));
  }
  
  private static void check(String paramString1, Object paramObject, String paramString2) {
    if (paramObject == null) {
      StringBuilder stringBuilder = new StringBuilder(paramString1);
      stringBuilder.append(" must not be null");
      if (paramString2 != null) {
        stringBuilder.append(", ");
        stringBuilder.append(paramString2);
      } 
      throw new NullPointerException(stringBuilder.toString());
    } 
  }
  
  private Drawable getErrorDrawable() {
    if (this.errorDrawable == null && this.errorResourceId > 0)
      this.errorDrawable = this.context.getResources().getDrawable(this.errorResourceId); 
    return this.errorDrawable;
  }
  
  private Drawable getFallbackDrawable() {
    if (this.fallbackDrawable == null && this.fallbackResourceId > 0)
      this.fallbackDrawable = this.context.getResources().getDrawable(this.fallbackResourceId); 
    return this.fallbackDrawable;
  }
  
  private Drawable getPlaceholderDrawable() {
    if (this.placeholderDrawable == null && this.placeholderResourceId > 0)
      this.placeholderDrawable = this.context.getResources().getDrawable(this.placeholderResourceId); 
    return this.placeholderDrawable;
  }
  
  private void init(LoadProvider<A, T, Z, R> paramLoadProvider, A paramA, Key paramKey, Context paramContext, Priority paramPriority, Target<R> paramTarget, float paramFloat, Drawable paramDrawable1, int paramInt1, Drawable paramDrawable2, int paramInt2, Drawable paramDrawable3, int paramInt3, RequestListener<? super A, R> paramRequestListener, RequestCoordinator paramRequestCoordinator, Engine paramEngine, Transformation<Z> paramTransformation, Class<R> paramClass, boolean paramBoolean, GlideAnimationFactory<R> paramGlideAnimationFactory, int paramInt4, int paramInt5, DiskCacheStrategy paramDiskCacheStrategy) {
    this.loadProvider = paramLoadProvider;
    this.model = paramA;
    this.signature = paramKey;
    this.fallbackDrawable = paramDrawable3;
    this.fallbackResourceId = paramInt3;
    this.context = paramContext.getApplicationContext();
    this.priority = paramPriority;
    this.target = paramTarget;
    this.sizeMultiplier = paramFloat;
    this.placeholderDrawable = paramDrawable1;
    this.placeholderResourceId = paramInt1;
    this.errorDrawable = paramDrawable2;
    this.errorResourceId = paramInt2;
    this.requestListener = paramRequestListener;
    this.requestCoordinator = paramRequestCoordinator;
    this.engine = paramEngine;
    this.transformation = paramTransformation;
    this.transcodeClass = paramClass;
    this.isMemoryCacheable = paramBoolean;
    this.animationFactory = paramGlideAnimationFactory;
    this.overrideWidth = paramInt4;
    this.overrideHeight = paramInt5;
    this.diskCacheStrategy = paramDiskCacheStrategy;
    this.status = Status.PENDING;
    if (paramA != null) {
      check("ModelLoader", paramLoadProvider.getModelLoader(), "try .using(ModelLoader)");
      check("Transcoder", paramLoadProvider.getTranscoder(), "try .as*(Class).transcode(ResourceTranscoder)");
      check("Transformation", paramTransformation, "try .transform(UnitTransformation.get())");
      if (paramDiskCacheStrategy.cacheSource()) {
        check("SourceEncoder", paramLoadProvider.getSourceEncoder(), "try .sourceEncoder(Encoder) or .diskCacheStrategy(NONE/RESULT)");
      } else {
        check("SourceDecoder", paramLoadProvider.getSourceDecoder(), "try .decoder/.imageDecoder/.videoDecoder(ResourceDecoder) or .diskCacheStrategy(ALL/SOURCE)");
      } 
      if (paramDiskCacheStrategy.cacheSource() || paramDiskCacheStrategy.cacheResult())
        check("CacheDecoder", paramLoadProvider.getCacheDecoder(), "try .cacheDecoder(ResouceDecoder) or .diskCacheStrategy(NONE)"); 
      if (paramDiskCacheStrategy.cacheResult())
        check("Encoder", paramLoadProvider.getEncoder(), "try .encode(ResourceEncoder) or .diskCacheStrategy(NONE/SOURCE)"); 
    } 
  }
  
  private boolean isFirstReadyResource() {
    RequestCoordinator requestCoordinator1 = this.requestCoordinator;
    return (requestCoordinator1 == null || !requestCoordinator1.isAnyResourceSet());
  }
  
  private void logV(String paramString) {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(paramString);
    stringBuilder.append(" this: ");
    stringBuilder.append(this.tag);
    Log.v("GenericRequest", stringBuilder.toString());
  }
  
  private void notifyLoadSuccess() {
    RequestCoordinator requestCoordinator1 = this.requestCoordinator;
    if (requestCoordinator1 != null)
      requestCoordinator1.onRequestSuccess(this); 
  }
  
  public static <A, T, Z, R> GenericRequest<A, T, Z, R> obtain(LoadProvider<A, T, Z, R> paramLoadProvider, A paramA, Key paramKey, Context paramContext, Priority paramPriority, Target<R> paramTarget, float paramFloat, Drawable paramDrawable1, int paramInt1, Drawable paramDrawable2, int paramInt2, Drawable paramDrawable3, int paramInt3, RequestListener<? super A, R> paramRequestListener, RequestCoordinator paramRequestCoordinator, Engine paramEngine, Transformation<Z> paramTransformation, Class<R> paramClass, boolean paramBoolean, GlideAnimationFactory<R> paramGlideAnimationFactory, int paramInt4, int paramInt5, DiskCacheStrategy paramDiskCacheStrategy) {
    GenericRequest genericRequest2 = (GenericRequest)REQUEST_POOL.poll();
    GenericRequest genericRequest1 = genericRequest2;
    if (genericRequest2 == null)
      genericRequest1 = new GenericRequest(); 
    genericRequest1.init(paramLoadProvider, paramA, paramKey, paramContext, paramPriority, paramTarget, paramFloat, paramDrawable1, paramInt1, paramDrawable2, paramInt2, paramDrawable3, paramInt3, paramRequestListener, paramRequestCoordinator, paramEngine, paramTransformation, paramClass, paramBoolean, paramGlideAnimationFactory, paramInt4, paramInt5, paramDiskCacheStrategy);
    return genericRequest1;
  }
  
  private void onResourceReady(Resource<?> paramResource, R paramR) { // Byte code:
    //   0: aload_0
    //   1: invokespecial isFirstReadyResource : ()Z
    //   4: istore #5
    //   6: aload_0
    //   7: getstatic com/bumptech/glide/request/GenericRequest$Status.COMPLETE : Lcom/bumptech/glide/request/GenericRequest$Status;
    //   10: putfield status : Lcom/bumptech/glide/request/GenericRequest$Status;
    //   13: aload_0
    //   14: aload_1
    //   15: putfield resource : Lcom/bumptech/glide/load/engine/Resource;
    //   18: aload_0
    //   19: getfield requestListener : Lcom/bumptech/glide/request/RequestListener;
    //   22: astore #6
    //   24: aload #6
    //   26: ifnull -> 54
    //   29: aload #6
    //   31: aload_2
    //   32: aload_0
    //   33: getfield model : Ljava/lang/Object;
    //   36: aload_0
    //   37: getfield target : Lcom/bumptech/glide/request/target/Target;
    //   40: aload_0
    //   41: getfield loadedFromMemoryCache : Z
    //   44: iload #5
    //   46: invokeinterface onResourceReady : (Ljava/lang/Object;Ljava/lang/Object;Lcom/bumptech/glide/request/target/Target;ZZ)Z
    //   51: ifne -> 83
    //   54: aload_0
    //   55: getfield animationFactory : Lcom/bumptech/glide/request/animation/GlideAnimationFactory;
    //   58: aload_0
    //   59: getfield loadedFromMemoryCache : Z
    //   62: iload #5
    //   64: invokeinterface build : (ZZ)Lcom/bumptech/glide/request/animation/GlideAnimation;
    //   69: astore #6
    //   71: aload_0
    //   72: getfield target : Lcom/bumptech/glide/request/target/Target;
    //   75: aload_2
    //   76: aload #6
    //   78: invokeinterface onResourceReady : (Ljava/lang/Object;Lcom/bumptech/glide/request/animation/GlideAnimation;)V
    //   83: aload_0
    //   84: invokespecial notifyLoadSuccess : ()V
    //   87: ldc 'GenericRequest'
    //   89: iconst_2
    //   90: invokestatic isLoggable : (Ljava/lang/String;I)Z
    //   93: ifeq -> 180
    //   96: new java/lang/StringBuilder
    //   99: dup
    //   100: invokespecial <init> : ()V
    //   103: astore_2
    //   104: aload_2
    //   105: ldc_w 'Resource ready in '
    //   108: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   111: pop
    //   112: aload_2
    //   113: aload_0
    //   114: getfield startTime : J
    //   117: invokestatic getElapsedMillis : (J)D
    //   120: invokevirtual append : (D)Ljava/lang/StringBuilder;
    //   123: pop
    //   124: aload_2
    //   125: ldc_w ' size: '
    //   128: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   131: pop
    //   132: aload_1
    //   133: invokeinterface getSize : ()I
    //   138: i2d
    //   139: dstore_3
    //   140: dload_3
    //   141: invokestatic isNaN : (D)Z
    //   144: pop
    //   145: aload_2
    //   146: dload_3
    //   147: ldc2_w 9.5367431640625E-7
    //   150: dmul
    //   151: invokevirtual append : (D)Ljava/lang/StringBuilder;
    //   154: pop
    //   155: aload_2
    //   156: ldc_w ' fromCache: '
    //   159: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   162: pop
    //   163: aload_2
    //   164: aload_0
    //   165: getfield loadedFromMemoryCache : Z
    //   168: invokevirtual append : (Z)Ljava/lang/StringBuilder;
    //   171: pop
    //   172: aload_0
    //   173: aload_2
    //   174: invokevirtual toString : ()Ljava/lang/String;
    //   177: invokespecial logV : (Ljava/lang/String;)V
    //   180: return }
  
  private void releaseResource(Resource paramResource) {
    this.engine.release(paramResource);
    this.resource = null;
  }
  
  private void setErrorPlaceholder(Exception paramException) {
    if (!canNotifyStatusChanged())
      return; 
    if (this.model == null) {
      drawable2 = getFallbackDrawable();
    } else {
      drawable2 = null;
    } 
    Drawable drawable1 = drawable2;
    if (drawable2 == null)
      drawable1 = getErrorDrawable(); 
    Drawable drawable2 = drawable1;
    if (drawable1 == null)
      drawable2 = getPlaceholderDrawable(); 
    this.target.onLoadFailed(paramException, drawable2);
  }
  
  public void begin() {
    this.startTime = LogTime.getLogTime();
    if (this.model == null) {
      onException(null);
      return;
    } 
    this.status = Status.WAITING_FOR_SIZE;
    if (Util.isValidDimensions(this.overrideWidth, this.overrideHeight)) {
      onSizeReady(this.overrideWidth, this.overrideHeight);
    } else {
      this.target.getSize(this);
    } 
    if (!isComplete() && !isFailed() && canNotifyStatusChanged())
      this.target.onLoadStarted(getPlaceholderDrawable()); 
    if (Log.isLoggable("GenericRequest", 2)) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("finished run method in ");
      stringBuilder.append(LogTime.getElapsedMillis(this.startTime));
      logV(stringBuilder.toString());
    } 
  }
  
  void cancel() {
    this.status = Status.CANCELLED;
    Engine.LoadStatus loadStatus1 = this.loadStatus;
    if (loadStatus1 != null) {
      loadStatus1.cancel();
      this.loadStatus = null;
    } 
  }
  
  public void clear() {
    Util.assertMainThread();
    if (this.status == Status.CLEARED)
      return; 
    cancel();
    Resource resource1 = this.resource;
    if (resource1 != null)
      releaseResource(resource1); 
    if (canNotifyStatusChanged())
      this.target.onLoadCleared(getPlaceholderDrawable()); 
    this.status = Status.CLEARED;
  }
  
  public boolean isCancelled() { return (this.status == Status.CANCELLED || this.status == Status.CLEARED); }
  
  public boolean isComplete() { return (this.status == Status.COMPLETE); }
  
  public boolean isFailed() { return (this.status == Status.FAILED); }
  
  public boolean isPaused() { return (this.status == Status.PAUSED); }
  
  public boolean isResourceSet() { return isComplete(); }
  
  public boolean isRunning() { return (this.status == Status.RUNNING || this.status == Status.WAITING_FOR_SIZE); }
  
  public void onException(Exception paramException) {
    if (Log.isLoggable("GenericRequest", 3))
      Log.d("GenericRequest", "load failed", paramException); 
    this.status = Status.FAILED;
    RequestListener requestListener1 = this.requestListener;
    if (requestListener1 == null || !requestListener1.onException(paramException, this.model, this.target, isFirstReadyResource()))
      setErrorPlaceholder(paramException); 
  }
  
  public void onResourceReady(Resource<?> paramResource) {
    String str;
    if (paramResource == null) {
      str = new StringBuilder();
      str.append("Expected to receive a Resource<R> with an object of ");
      str.append(this.transcodeClass);
      str.append(" inside, but instead got null.");
      onException(new Exception(str.toString()));
      return;
    } 
    Object object = str.get();
    if (object == null || !this.transcodeClass.isAssignableFrom(object.getClass())) {
      String str1;
      releaseResource(str);
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Expected to receive an object of ");
      stringBuilder.append(this.transcodeClass);
      stringBuilder.append(" but instead got ");
      String str2 = "";
      if (object != null) {
        str1 = object.getClass();
      } else {
        str1 = "";
      } 
      stringBuilder.append(str1);
      stringBuilder.append("{");
      stringBuilder.append(object);
      stringBuilder.append("}");
      stringBuilder.append(" inside Resource{");
      stringBuilder.append(str);
      stringBuilder.append("}.");
      if (object != null) {
        str = str2;
      } else {
        str = " To indicate failure return a null Resource object, rather than a Resource object containing null data.";
      } 
      stringBuilder.append(str);
      onException(new Exception(stringBuilder.toString()));
      return;
    } 
    if (!canSetResource()) {
      releaseResource(str);
      this.status = Status.COMPLETE;
      return;
    } 
    onResourceReady(str, object);
  }
  
  public void onSizeReady(int paramInt1, int paramInt2) {
    if (Log.isLoggable("GenericRequest", 2)) {
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("Got onSizeReady in ");
      stringBuilder1.append(LogTime.getElapsedMillis(this.startTime));
      logV(stringBuilder1.toString());
    } 
    if (this.status != Status.WAITING_FOR_SIZE)
      return; 
    this.status = Status.RUNNING;
    paramInt1 = Math.round(this.sizeMultiplier * paramInt1);
    paramInt2 = Math.round(this.sizeMultiplier * paramInt2);
    StringBuilder stringBuilder = this.loadProvider.getModelLoader().getResourceFetcher(this.model, paramInt1, paramInt2);
    if (stringBuilder == null) {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Failed to load model: '");
      stringBuilder.append(this.model);
      stringBuilder.append("'");
      onException(new Exception(stringBuilder.toString()));
      return;
    } 
    ResourceTranscoder resourceTranscoder = this.loadProvider.getTranscoder();
    if (Log.isLoggable("GenericRequest", 2)) {
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("finished setup for calling load in ");
      stringBuilder1.append(LogTime.getElapsedMillis(this.startTime));
      logV(stringBuilder1.toString());
    } 
    boolean bool = true;
    this.loadedFromMemoryCache = true;
    this.loadStatus = this.engine.load(this.signature, paramInt1, paramInt2, stringBuilder, this.loadProvider, this.transformation, resourceTranscoder, this.priority, this.isMemoryCacheable, this.diskCacheStrategy, this);
    if (this.resource == null)
      bool = false; 
    this.loadedFromMemoryCache = bool;
    if (Log.isLoggable("GenericRequest", 2)) {
      stringBuilder = new StringBuilder();
      stringBuilder.append("finished onSizeReady in ");
      stringBuilder.append(LogTime.getElapsedMillis(this.startTime));
      logV(stringBuilder.toString());
    } 
  }
  
  public void pause() {
    clear();
    this.status = Status.PAUSED;
  }
  
  public void recycle() {
    this.loadProvider = null;
    this.model = null;
    this.context = null;
    this.target = null;
    this.placeholderDrawable = null;
    this.errorDrawable = null;
    this.fallbackDrawable = null;
    this.requestListener = null;
    this.requestCoordinator = null;
    this.transformation = null;
    this.animationFactory = null;
    this.loadedFromMemoryCache = false;
    this.loadStatus = null;
    REQUEST_POOL.offer(this);
  }
}
