package androidx.work;

import android.content.Context;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RestrictTo;

public abstract class WorkerFactory {
  private static final String TAG = Logger.tagWithPrefix("WorkerFactory");
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public static WorkerFactory getDefaultWorkerFactory() { return new Object(); }
  
  @Nullable
  public abstract ListenableWorker createWorker(@NonNull Context paramContext, @NonNull String paramString, @NonNull WorkerParameters paramWorkerParameters);
  
  @Nullable
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public final ListenableWorker createWorkerWithDefaultFallback(@NonNull Context paramContext, @NonNull String paramString, @NonNull WorkerParameters paramWorkerParameters) {
    ListenableWorker listenableWorker = createWorker(paramContext, paramString, paramWorkerParameters);
    if (listenableWorker != null)
      return listenableWorker; 
    try {
      Class clazz = Class.forName(paramString).asSubclass(ListenableWorker.class);
      try {
        return (ListenableWorker)clazz.getDeclaredConstructor(new Class[] { Context.class, WorkerParameters.class }).newInstance(new Object[] { paramContext, paramWorkerParameters });
      } catch (Exception paramContext) {
        Logger logger = Logger.get();
        String str = TAG;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Could not instantiate ");
        stringBuilder.append(paramString);
        logger.error(str, stringBuilder.toString(), new Throwable[] { paramContext });
        return null;
      } 
    } catch (ClassNotFoundException paramContext) {
      Logger logger = Logger.get();
      String str = TAG;
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Class not found: ");
      stringBuilder.append(paramString);
      logger.error(str, stringBuilder.toString(), new Throwable[0]);
      return null;
    } 
  }
}
