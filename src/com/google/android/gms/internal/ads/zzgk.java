package com.google.android.gms.internal.ads;

import android.annotation.TargetApi;
import android.app.ActivityManager;
import android.app.KeyguardManager;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Rect;
import android.os.PowerManager;
import android.os.Process;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.WebView;
import android.widget.TextView;
import com.google.android.gms.ads.internal.zzbv;
import com.google.android.gms.common.util.PlatformVersion;
import com.google.android.gms.common.util.VisibleForTesting;
import java.util.Iterator;
import java.util.List;
import javax.annotation.ParametersAreNonnullByDefault;
import org.json.JSONException;
import org.json.JSONObject;

@zzadh
@ParametersAreNonnullByDefault
@TargetApi(14)
public final class zzgk extends Thread {
  private final Object mLock;
  
  private boolean mStarted = false;
  
  private final int zzagx;
  
  private final int zzagz;
  
  private boolean zzahy = false;
  
  private final zzgf zzahz;
  
  private final zzadf zzaia;
  
  private final int zzaib;
  
  private final int zzaic;
  
  private final int zzaid;
  
  private final int zzaie;
  
  private final int zzaif;
  
  private final int zzaig;
  
  private final String zzaih;
  
  private final boolean zzaii;
  
  private boolean zzbm = false;
  
  public zzgk(zzgf paramzzgf, zzadf paramzzadf) {
    this.zzahz = paramzzgf;
    this.zzaia = paramzzadf;
    this.mLock = new Object();
    zzna zzna = zznk.zzawl;
    this.zzagx = ((Integer)zzkb.zzik().zzd(zzna)).intValue();
    zzna = zznk.zzawm;
    this.zzaic = ((Integer)zzkb.zzik().zzd(zzna)).intValue();
    zzna = zznk.zzawn;
    this.zzagz = ((Integer)zzkb.zzik().zzd(zzna)).intValue();
    zzna = zznk.zzawo;
    this.zzaid = ((Integer)zzkb.zzik().zzd(zzna)).intValue();
    zzna = zznk.zzawr;
    this.zzaie = ((Integer)zzkb.zzik().zzd(zzna)).intValue();
    zzna = zznk.zzawt;
    this.zzaif = ((Integer)zzkb.zzik().zzd(zzna)).intValue();
    zzna = zznk.zzawu;
    this.zzaig = ((Integer)zzkb.zzik().zzd(zzna)).intValue();
    zzna = zznk.zzawp;
    this.zzaib = ((Integer)zzkb.zzik().zzd(zzna)).intValue();
    zzna = zznk.zzaww;
    this.zzaih = (String)zzkb.zzik().zzd(zzna);
    zzna = zznk.zzawy;
    this.zzaii = ((Boolean)zzkb.zzik().zzd(zzna)).booleanValue();
    setName("ContentFetchTask");
  }
  
  @VisibleForTesting
  private final zzgo zza(@Nullable View paramView, zzge paramzzge) {
    WebView webView;
    byte b = 0;
    if (paramView == null)
      return new zzgo(this, 0, 0); 
    boolean bool = paramView.getGlobalVisibleRect(new Rect());
    if (paramView instanceof TextView && !(paramView instanceof android.widget.EditText)) {
      CharSequence charSequence = ((TextView)paramView).getText();
      if (!TextUtils.isEmpty(charSequence)) {
        paramzzge.zzb(charSequence.toString(), bool, paramView.getX(), paramView.getY(), paramView.getWidth(), paramView.getHeight());
        return new zzgo(this, 1, 0);
      } 
      return new zzgo(this, 0, 0);
    } 
    if (paramView instanceof WebView && !(paramView instanceof zzaqw)) {
      boolean bool1;
      paramzzge.zzgs();
      webView = (WebView)paramView;
      if (!PlatformVersion.isAtLeastKitKat()) {
        bool1 = false;
      } else {
        paramzzge.zzgs();
        webView.post(new zzgm(this, paramzzge, webView, bool));
        bool1 = true;
      } 
      return bool1 ? new zzgo(this, 0, 1) : new zzgo(this, 0, 0);
    } 
    if (webView instanceof ViewGroup) {
      ViewGroup viewGroup = (ViewGroup)webView;
      int j = 0;
      int i = 0;
      while (b < viewGroup.getChildCount()) {
        zzgo zzgo = zza(viewGroup.getChildAt(b), paramzzge);
        j += zzgo.zzaiq;
        i += zzgo.zzair;
        b++;
      } 
      return new zzgo(this, j, i);
    } 
    return new zzgo(this, 0, 0);
  }
  
  @VisibleForTesting
  private static boolean zzgx() {
    byte b = 0;
    try {
      Context context = zzbv.zzen().getContext();
      if (context == null)
        return false; 
      ActivityManager activityManager = (ActivityManager)context.getSystemService("activity");
      KeyguardManager keyguardManager = (KeyguardManager)context.getSystemService("keyguard");
      int i = b;
      if (activityManager != null) {
        if (keyguardManager == null)
          return false; 
        List list = activityManager.getRunningAppProcesses();
        if (list == null)
          return false; 
        Iterator iterator = list.iterator();
        while (true) {
          i = b;
          if (iterator.hasNext()) {
            ActivityManager.RunningAppProcessInfo runningAppProcessInfo = (ActivityManager.RunningAppProcessInfo)iterator.next();
            if (Process.myPid() == runningAppProcessInfo.pid) {
              i = b;
              if (runningAppProcessInfo.importance == 100) {
                i = b;
                if (!keyguardManager.inKeyguardRestrictedInputMode()) {
                  boolean bool;
                  PowerManager powerManager = (PowerManager)context.getSystemService("power");
                  if (powerManager == null) {
                    bool = false;
                  } else {
                    bool = powerManager.isScreenOn();
                  } 
                  i = b;
                  if (bool)
                    i = 1; 
                } 
              } 
              break;
            } 
            continue;
          } 
          break;
        } 
      } 
      return i;
    } catch (Throwable throwable) {
      zzbv.zzeo().zza(throwable, "ContentFetchTask.isInForeground");
      return false;
    } 
  }
  
  private final void zzgz() {
    synchronized (this.mLock) {
      this.zzahy = true;
      boolean bool = this.zzahy;
      StringBuilder stringBuilder = new StringBuilder(42);
      stringBuilder.append("ContentFetchThread: paused, mPause = ");
      stringBuilder.append(bool);
      zzakb.zzck(stringBuilder.toString());
      return;
    } 
  }
  
  public final void run() { // Byte code:
    //   0: invokestatic zzgx : ()Z
    //   3: ifeq -> 124
    //   6: invokestatic zzen : ()Lcom/google/android/gms/internal/ads/zzgg;
    //   9: invokevirtual getActivity : ()Landroid/app/Activity;
    //   12: astore #4
    //   14: aload #4
    //   16: ifnonnull -> 32
    //   19: ldc_w 'ContentFetchThread: no activity. Sleeping.'
    //   22: invokestatic zzck : (Ljava/lang/String;)V
    //   25: aload_0
    //   26: invokespecial zzgz : ()V
    //   29: goto -> 133
    //   32: aload #4
    //   34: ifnull -> 133
    //   37: aconst_null
    //   38: astore_3
    //   39: aload_3
    //   40: astore_2
    //   41: aload #4
    //   43: invokevirtual getWindow : ()Landroid/view/Window;
    //   46: ifnull -> 99
    //   49: aload_3
    //   50: astore_2
    //   51: aload #4
    //   53: invokevirtual getWindow : ()Landroid/view/Window;
    //   56: invokevirtual getDecorView : ()Landroid/view/View;
    //   59: ifnull -> 99
    //   62: aload #4
    //   64: invokevirtual getWindow : ()Landroid/view/Window;
    //   67: invokevirtual getDecorView : ()Landroid/view/View;
    //   70: ldc_w 16908290
    //   73: invokevirtual findViewById : (I)Landroid/view/View;
    //   76: astore_2
    //   77: goto -> 99
    //   80: astore_2
    //   81: invokestatic zzeo : ()Lcom/google/android/gms/internal/ads/zzajm;
    //   84: aload_2
    //   85: ldc_w 'ContentFetchTask.extractContent'
    //   88: invokevirtual zza : (Ljava/lang/Throwable;Ljava/lang/String;)V
    //   91: ldc_w 'Failed getting root view of activity. Content not extracted.'
    //   94: invokestatic zzck : (Ljava/lang/String;)V
    //   97: aload_3
    //   98: astore_2
    //   99: aload_2
    //   100: ifnull -> 133
    //   103: aload_2
    //   104: ifnull -> 133
    //   107: aload_2
    //   108: new com/google/android/gms/internal/ads/zzgl
    //   111: dup
    //   112: aload_0
    //   113: aload_2
    //   114: invokespecial <init> : (Lcom/google/android/gms/internal/ads/zzgk;Landroid/view/View;)V
    //   117: invokevirtual post : (Ljava/lang/Runnable;)Z
    //   120: pop
    //   121: goto -> 133
    //   124: ldc_w 'ContentFetchTask: sleeping'
    //   127: invokestatic zzck : (Ljava/lang/String;)V
    //   130: goto -> 25
    //   133: aload_0
    //   134: getfield zzaib : I
    //   137: sipush #1000
    //   140: imul
    //   141: i2l
    //   142: invokestatic sleep : (J)V
    //   145: goto -> 180
    //   148: astore_2
    //   149: ldc_w 'Error in ContentFetchTask'
    //   152: aload_2
    //   153: invokestatic zzb : (Ljava/lang/String;Ljava/lang/Throwable;)V
    //   156: aload_0
    //   157: getfield zzaia : Lcom/google/android/gms/internal/ads/zzadf;
    //   160: aload_2
    //   161: ldc_w 'ContentFetchTask.run'
    //   164: invokeinterface zza : (Ljava/lang/Throwable;Ljava/lang/String;)V
    //   169: goto -> 180
    //   172: astore_2
    //   173: ldc_w 'Error in ContentFetchTask'
    //   176: aload_2
    //   177: invokestatic zzb : (Ljava/lang/String;Ljava/lang/Throwable;)V
    //   180: aload_0
    //   181: getfield mLock : Ljava/lang/Object;
    //   184: astore_2
    //   185: aload_2
    //   186: monitorenter
    //   187: aload_0
    //   188: getfield zzahy : Z
    //   191: istore_1
    //   192: iload_1
    //   193: ifeq -> 212
    //   196: ldc_w 'ContentFetchTask: waiting'
    //   199: invokestatic zzck : (Ljava/lang/String;)V
    //   202: aload_0
    //   203: getfield mLock : Ljava/lang/Object;
    //   206: invokevirtual wait : ()V
    //   209: goto -> 187
    //   212: aload_2
    //   213: monitorexit
    //   214: goto -> 0
    //   217: astore_3
    //   218: aload_2
    //   219: monitorexit
    //   220: goto -> 225
    //   223: aload_3
    //   224: athrow
    //   225: goto -> 223
    //   228: astore_3
    //   229: goto -> 187
    // Exception table:
    //   from	to	target	type
    //   0	14	172	java/lang/InterruptedException
    //   0	14	148	java/lang/Exception
    //   19	25	172	java/lang/InterruptedException
    //   19	25	148	java/lang/Exception
    //   25	29	172	java/lang/InterruptedException
    //   25	29	148	java/lang/Exception
    //   41	49	80	java/lang/Exception
    //   41	49	172	java/lang/InterruptedException
    //   51	77	80	java/lang/Exception
    //   51	77	172	java/lang/InterruptedException
    //   81	97	172	java/lang/InterruptedException
    //   81	97	148	java/lang/Exception
    //   107	121	172	java/lang/InterruptedException
    //   107	121	148	java/lang/Exception
    //   124	130	172	java/lang/InterruptedException
    //   124	130	148	java/lang/Exception
    //   133	145	172	java/lang/InterruptedException
    //   133	145	148	java/lang/Exception
    //   187	192	217	finally
    //   196	209	228	java/lang/InterruptedException
    //   196	209	217	finally
    //   212	214	217	finally
    //   218	220	217	finally }
  
  public final void wakeup() {
    synchronized (this.mLock) {
      this.zzahy = false;
      this.mLock.notifyAll();
      zzakb.zzck("ContentFetchThread: wakeup");
      return;
    } 
  }
  
  @VisibleForTesting
  final void zza(zzge paramzzge, WebView paramWebView, String paramString, boolean paramBoolean) {
    paramzzge.zzgr();
    try {
      if (!TextUtils.isEmpty(paramString)) {
        paramString = (new JSONObject(paramString)).optString("text");
        if (!this.zzaii && !TextUtils.isEmpty(paramWebView.getTitle())) {
          String str;
          StringBuilder stringBuilder = new StringBuilder((str = paramWebView.getTitle()).valueOf(str).length() + 1 + String.valueOf(paramString).length());
          stringBuilder.append(str);
          stringBuilder.append("\n");
          stringBuilder.append(paramString);
          paramzzge.zza(stringBuilder.toString(), paramBoolean, paramWebView.getX(), paramWebView.getY(), paramWebView.getWidth(), paramWebView.getHeight());
        } else {
          paramzzge.zza(paramString, paramBoolean, paramWebView.getX(), paramWebView.getY(), paramWebView.getWidth(), paramWebView.getHeight());
        } 
      } 
      if (paramzzge.zzgn())
        this.zzahz.zzb(paramzzge); 
      return;
    } catch (JSONException paramzzge) {
      zzakb.zzck("Json string may be malformed.");
      return;
    } catch (Throwable paramzzge) {
      zzakb.zza("Failed to get webview content.", paramzzge);
      this.zzaia.zza(paramzzge, "ContentFetchTask.processWebViewContent");
      return;
    } 
  }
  
  public final void zzgw() {
    synchronized (this.mLock) {
      if (this.mStarted) {
        zzakb.zzck("Content hash thread already started, quiting...");
        return;
      } 
      this.mStarted = true;
      start();
      return;
    } 
  }
  
  public final zzge zzgy() { return this.zzahz.zzgv(); }
  
  public final boolean zzha() { return this.zzahy; }
  
  @VisibleForTesting
  final void zzk(View paramView) {
    try {
      zzge zzge = new zzge(this.zzagx, this.zzaic, this.zzagz, this.zzaid, this.zzaie, this.zzaif, this.zzaig);
      Context context = zzbv.zzen().getContext();
      if (context != null && !TextUtils.isEmpty(this.zzaih)) {
        Resources resources = context.getResources();
        zzna zzna = zznk.zzawv;
        String str = (String)paramView.getTag(resources.getIdentifier((String)zzkb.zzik().zzd(zzna), "id", context.getPackageName()));
        if (str != null && str.equals(this.zzaih))
          return; 
      } 
      zzgo zzgo = zza(paramView, zzge);
      zzge.zzgt();
      if (zzgo.zzaiq == 0 && zzgo.zzair == 0)
        return; 
      if (zzgo.zzair == 0 && zzge.zzgu() == 0)
        return; 
      if (zzgo.zzair == 0 && this.zzahz.zza(zzge))
        return; 
      this.zzahz.zzc(zzge);
      return;
    } catch (Exception paramView) {
      zzakb.zzb("Exception in fetchContentOnUIThread", paramView);
      this.zzaia.zza(paramView, "ContentFetchTask.fetchContent");
      return;
    } 
  }
}
