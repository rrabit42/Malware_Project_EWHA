package com.bumptech.glide.load.engine;

import android.util.Log;
import com.bumptech.glide.Priority;
import com.bumptech.glide.load.engine.executor.Prioritized;

class EngineRunnable implements Runnable, Prioritized {
  private static final String TAG = "EngineRunnable";
  
  private final DecodeJob<?, ?, ?> decodeJob;
  
  private final EngineRunnableManager manager;
  
  private final Priority priority;
  
  private Stage stage;
  
  public EngineRunnable(EngineRunnableManager paramEngineRunnableManager, DecodeJob<?, ?, ?> paramDecodeJob, Priority paramPriority) {
    this.manager = paramEngineRunnableManager;
    this.decodeJob = paramDecodeJob;
    this.stage = Stage.CACHE;
    this.priority = paramPriority;
  }
  
  private Resource<?> decode() throws Exception { return isDecodingFromCache() ? decodeFromCache() : decodeFromSource(); }
  
  private Resource<?> decodeFromCache() throws Exception {
    try {
      exception = this.decodeJob.decodeResultFromCache();
    } catch (Exception exception) {
      if (Log.isLoggable("EngineRunnable", 3)) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Exception decoding result from cache: ");
        stringBuilder.append(exception);
        Log.d("EngineRunnable", stringBuilder.toString());
      } 
      exception = null;
    } 
    Resource resource = exception;
    if (exception == null)
      resource = this.decodeJob.decodeSourceFromCache(); 
    return resource;
  }
  
  private Resource<?> decodeFromSource() throws Exception { return this.decodeJob.decodeFromSource(); }
  
  private boolean isDecodingFromCache() { return (this.stage == Stage.CACHE); }
  
  private void onLoadComplete(Resource paramResource) { this.manager.onResourceReady(paramResource); }
  
  private void onLoadFailed(Exception paramException) {
    if (isDecodingFromCache()) {
      this.stage = Stage.SOURCE;
      this.manager.submitForSource(this);
      return;
    } 
    this.manager.onException(paramException);
  }
  
  public void cancel() {
    this.isCancelled = true;
    this.decodeJob.cancel();
  }
  
  public int getPriority() { return this.priority.ordinal(); }
  
  public void run() {
    Exception exception;
    Resource resource;
    if (this.isCancelled)
      return; 
    Object object = null;
    try {
      resource = decode();
      exception = null;
    } catch (Exception exception1) {
      resource = object;
      exception = exception1;
      if (Log.isLoggable("EngineRunnable", 2)) {
        Log.v("EngineRunnable", "Exception decoding", exception1);
        exception = exception1;
        resource = object;
      } 
    } 
    if (this.isCancelled) {
      if (resource != null)
        resource.recycle(); 
      return;
    } 
    if (resource == null) {
      onLoadFailed(exception);
      return;
    } 
    onLoadComplete(resource);
  }
}
