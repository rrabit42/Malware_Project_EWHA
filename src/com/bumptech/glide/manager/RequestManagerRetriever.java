package com.bumptech.glide.manager;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.Fragment;
import android.app.FragmentManager;
import android.content.Context;
import android.content.ContextWrapper;
import android.os.Build;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.util.Log;
import com.bumptech.glide.RequestManager;
import com.bumptech.glide.util.Util;
import java.util.HashMap;
import java.util.Map;

public class RequestManagerRetriever implements Handler.Callback {
  static final String FRAGMENT_TAG = "com.bumptech.glide.manager";
  
  private static final int ID_REMOVE_FRAGMENT_MANAGER = 1;
  
  private static final int ID_REMOVE_SUPPORT_FRAGMENT_MANAGER = 2;
  
  private static final RequestManagerRetriever INSTANCE = new RequestManagerRetriever();
  
  private static final String TAG = "RMRetriever";
  
  private final Handler handler = new Handler(Looper.getMainLooper(), this);
  
  final Map<FragmentManager, RequestManagerFragment> pendingRequestManagerFragments = new HashMap();
  
  final Map<FragmentManager, SupportRequestManagerFragment> pendingSupportRequestManagerFragments = new HashMap();
  
  @TargetApi(17)
  private static void assertNotDestroyed(Activity paramActivity) {
    if (Build.VERSION.SDK_INT >= 17) {
      if (!paramActivity.isDestroyed())
        return; 
      throw new IllegalArgumentException("You cannot start a load for a destroyed activity");
    } 
  }
  
  public static RequestManagerRetriever get() { return INSTANCE; }
  
  private RequestManager getApplicationManager(Context paramContext) { // Byte code:
    //   0: aload_0
    //   1: getfield applicationManager : Lcom/bumptech/glide/RequestManager;
    //   4: ifnonnull -> 55
    //   7: aload_0
    //   8: monitorenter
    //   9: aload_0
    //   10: getfield applicationManager : Lcom/bumptech/glide/RequestManager;
    //   13: ifnonnull -> 45
    //   16: aload_0
    //   17: new com/bumptech/glide/RequestManager
    //   20: dup
    //   21: aload_1
    //   22: invokevirtual getApplicationContext : ()Landroid/content/Context;
    //   25: new com/bumptech/glide/manager/ApplicationLifecycle
    //   28: dup
    //   29: invokespecial <init> : ()V
    //   32: new com/bumptech/glide/manager/EmptyRequestManagerTreeNode
    //   35: dup
    //   36: invokespecial <init> : ()V
    //   39: invokespecial <init> : (Landroid/content/Context;Lcom/bumptech/glide/manager/Lifecycle;Lcom/bumptech/glide/manager/RequestManagerTreeNode;)V
    //   42: putfield applicationManager : Lcom/bumptech/glide/RequestManager;
    //   45: aload_0
    //   46: monitorexit
    //   47: goto -> 55
    //   50: astore_1
    //   51: aload_0
    //   52: monitorexit
    //   53: aload_1
    //   54: athrow
    //   55: aload_0
    //   56: getfield applicationManager : Lcom/bumptech/glide/RequestManager;
    //   59: areturn
    // Exception table:
    //   from	to	target	type
    //   9	45	50	finally
    //   45	47	50	finally
    //   51	53	50	finally }
  
  @TargetApi(11)
  RequestManager fragmentGet(Context paramContext, FragmentManager paramFragmentManager) {
    RequestManagerFragment requestManagerFragment = getRequestManagerFragment(paramFragmentManager);
    RequestManager requestManager2 = requestManagerFragment.getRequestManager();
    RequestManager requestManager1 = requestManager2;
    if (requestManager2 == null) {
      requestManager1 = new RequestManager(paramContext, requestManagerFragment.getLifecycle(), requestManagerFragment.getRequestManagerTreeNode());
      requestManagerFragment.setRequestManager(requestManager1);
    } 
    return requestManager1;
  }
  
  @TargetApi(11)
  public RequestManager get(Activity paramActivity) {
    if (Util.isOnBackgroundThread() || Build.VERSION.SDK_INT < 11)
      return get(paramActivity.getApplicationContext()); 
    assertNotDestroyed(paramActivity);
    return fragmentGet(paramActivity, paramActivity.getFragmentManager());
  }
  
  @TargetApi(17)
  public RequestManager get(Fragment paramFragment) {
    if (paramFragment.getActivity() != null) {
      if (Util.isOnBackgroundThread() || Build.VERSION.SDK_INT < 17)
        return get(paramFragment.getActivity().getApplicationContext()); 
      FragmentManager fragmentManager = paramFragment.getChildFragmentManager();
      return fragmentGet(paramFragment.getActivity(), fragmentManager);
    } 
    throw new IllegalArgumentException("You cannot start a load on a fragment before it is attached");
  }
  
  public RequestManager get(Context paramContext) {
    if (paramContext != null) {
      if (Util.isOnMainThread() && !(paramContext instanceof android.app.Application)) {
        if (paramContext instanceof FragmentActivity)
          return get((FragmentActivity)paramContext); 
        if (paramContext instanceof Activity)
          return get((Activity)paramContext); 
        if (paramContext instanceof ContextWrapper)
          return get(((ContextWrapper)paramContext).getBaseContext()); 
      } 
      return getApplicationManager(paramContext);
    } 
    throw new IllegalArgumentException("You cannot start a load on a null Context");
  }
  
  public RequestManager get(Fragment paramFragment) {
    if (paramFragment.getActivity() != null) {
      if (Util.isOnBackgroundThread())
        return get(paramFragment.getActivity().getApplicationContext()); 
      FragmentManager fragmentManager = paramFragment.getChildFragmentManager();
      return supportFragmentGet(paramFragment.getActivity(), fragmentManager);
    } 
    throw new IllegalArgumentException("You cannot start a load on a fragment before it is attached");
  }
  
  public RequestManager get(FragmentActivity paramFragmentActivity) {
    if (Util.isOnBackgroundThread())
      return get(paramFragmentActivity.getApplicationContext()); 
    assertNotDestroyed(paramFragmentActivity);
    return supportFragmentGet(paramFragmentActivity, paramFragmentActivity.getSupportFragmentManager());
  }
  
  @TargetApi(17)
  RequestManagerFragment getRequestManagerFragment(FragmentManager paramFragmentManager) {
    RequestManagerFragment requestManagerFragment2 = (RequestManagerFragment)paramFragmentManager.findFragmentByTag("com.bumptech.glide.manager");
    RequestManagerFragment requestManagerFragment1 = requestManagerFragment2;
    if (requestManagerFragment2 == null) {
      requestManagerFragment2 = (RequestManagerFragment)this.pendingRequestManagerFragments.get(paramFragmentManager);
      requestManagerFragment1 = requestManagerFragment2;
      if (requestManagerFragment2 == null) {
        requestManagerFragment1 = new RequestManagerFragment();
        this.pendingRequestManagerFragments.put(paramFragmentManager, requestManagerFragment1);
        paramFragmentManager.beginTransaction().add(requestManagerFragment1, "com.bumptech.glide.manager").commitAllowingStateLoss();
        this.handler.obtainMessage(1, paramFragmentManager).sendToTarget();
      } 
    } 
    return requestManagerFragment1;
  }
  
  SupportRequestManagerFragment getSupportRequestManagerFragment(FragmentManager paramFragmentManager) {
    SupportRequestManagerFragment supportRequestManagerFragment2 = (SupportRequestManagerFragment)paramFragmentManager.findFragmentByTag("com.bumptech.glide.manager");
    SupportRequestManagerFragment supportRequestManagerFragment1 = supportRequestManagerFragment2;
    if (supportRequestManagerFragment2 == null) {
      supportRequestManagerFragment2 = (SupportRequestManagerFragment)this.pendingSupportRequestManagerFragments.get(paramFragmentManager);
      supportRequestManagerFragment1 = supportRequestManagerFragment2;
      if (supportRequestManagerFragment2 == null) {
        supportRequestManagerFragment1 = new SupportRequestManagerFragment();
        this.pendingSupportRequestManagerFragments.put(paramFragmentManager, supportRequestManagerFragment1);
        paramFragmentManager.beginTransaction().add(supportRequestManagerFragment1, "com.bumptech.glide.manager").commitAllowingStateLoss();
        this.handler.obtainMessage(2, paramFragmentManager).sendToTarget();
      } 
    } 
    return supportRequestManagerFragment1;
  }
  
  public boolean handleMessage(Message paramMessage) {
    FragmentManager fragmentManager;
    int i = paramMessage.what;
    Object object = null;
    boolean bool = true;
    if (i != 1) {
      if (i != 2) {
        bool = false;
        Message message = null;
        paramMessage = object;
        object = message;
      } else {
        fragmentManager = (FragmentManager)paramMessage.obj;
        Object object1 = this.pendingSupportRequestManagerFragments.remove(fragmentManager);
      } 
    } else {
      fragmentManager = (FragmentManager)fragmentManager.obj;
      object = this.pendingRequestManagerFragments.remove(fragmentManager);
    } 
    if (bool && object == null && Log.isLoggable("RMRetriever", 5)) {
      object = new StringBuilder();
      object.append("Failed to remove expected request manager fragment, manager: ");
      object.append(fragmentManager);
      Log.w("RMRetriever", object.toString());
    } 
    return bool;
  }
  
  RequestManager supportFragmentGet(Context paramContext, FragmentManager paramFragmentManager) {
    SupportRequestManagerFragment supportRequestManagerFragment = getSupportRequestManagerFragment(paramFragmentManager);
    RequestManager requestManager2 = supportRequestManagerFragment.getRequestManager();
    RequestManager requestManager1 = requestManager2;
    if (requestManager2 == null) {
      requestManager1 = new RequestManager(paramContext, supportRequestManagerFragment.getLifecycle(), supportRequestManagerFragment.getRequestManagerTreeNode());
      supportRequestManagerFragment.setRequestManager(requestManager1);
    } 
    return requestManager1;
  }
}
