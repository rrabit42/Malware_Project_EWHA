package androidx.work.impl.constraints.trackers;

import android.content.Context;
import android.content.IntentFilter;
import android.net.ConnectivityManager;
import android.net.Network;
import android.net.NetworkCapabilities;
import android.net.NetworkInfo;
import android.os.Build;
import android.support.annotation.RequiresApi;
import android.support.annotation.RestrictTo;
import android.support.v4.net.ConnectivityManagerCompat;
import androidx.work.Logger;
import androidx.work.impl.constraints.NetworkState;

@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
public class NetworkStateTracker extends ConstraintTracker<NetworkState> {
  static final String TAG = Logger.tagWithPrefix("NetworkStateTracker");
  
  private NetworkStateBroadcastReceiver mBroadcastReceiver;
  
  private final ConnectivityManager mConnectivityManager = (ConnectivityManager)this.mAppContext.getSystemService("connectivity");
  
  @RequiresApi(24)
  private NetworkStateCallback mNetworkCallback;
  
  public NetworkStateTracker(Context paramContext) {
    super(paramContext);
    if (isNetworkCallbackSupported()) {
      this.mNetworkCallback = new NetworkStateCallback(this);
      return;
    } 
    this.mBroadcastReceiver = new NetworkStateBroadcastReceiver(this);
  }
  
  private boolean isActiveNetworkValidated() {
    int i = Build.VERSION.SDK_INT;
    byte b = 0;
    if (i < 23)
      return false; 
    Network network = this.mConnectivityManager.getActiveNetwork();
    NetworkCapabilities networkCapabilities = this.mConnectivityManager.getNetworkCapabilities(network);
    int j = b;
    if (networkCapabilities != null) {
      j = b;
      if (networkCapabilities.hasCapability(16))
        j = 1; 
    } 
    return j;
  }
  
  private static boolean isNetworkCallbackSupported() { return (Build.VERSION.SDK_INT >= 24); }
  
  NetworkState getActiveNetworkState() {
    boolean bool1;
    NetworkInfo networkInfo = this.mConnectivityManager.getActiveNetworkInfo();
    boolean bool2 = true;
    if (networkInfo != null && networkInfo.isConnected()) {
      bool1 = true;
    } else {
      bool1 = false;
    } 
    boolean bool3 = isActiveNetworkValidated();
    boolean bool4 = ConnectivityManagerCompat.isActiveNetworkMetered(this.mConnectivityManager);
    if (networkInfo == null || networkInfo.isRoaming())
      bool2 = false; 
    return new NetworkState(bool1, bool3, bool4, bool2);
  }
  
  public NetworkState getInitialState() { return getActiveNetworkState(); }
  
  public void startTracking() {
    if (isNetworkCallbackSupported()) {
      Logger.get().debug(TAG, "Registering network callback", new Throwable[0]);
      this.mConnectivityManager.registerDefaultNetworkCallback(this.mNetworkCallback);
      return;
    } 
    Logger.get().debug(TAG, "Registering broadcast receiver", new Throwable[0]);
    this.mAppContext.registerReceiver(this.mBroadcastReceiver, new IntentFilter("android.net.conn.CONNECTIVITY_CHANGE"));
  }
  
  public void stopTracking() {
    if (isNetworkCallbackSupported())
      try {
        Logger.get().debug(TAG, "Unregistering network callback", new Throwable[0]);
        this.mConnectivityManager.unregisterNetworkCallback(this.mNetworkCallback);
        return;
      } catch (IllegalArgumentException illegalArgumentException) {
        Logger.get().error(TAG, "Received exception while unregistering network callback", new Throwable[] { illegalArgumentException });
        return;
      }  
    Logger.get().debug(TAG, "Unregistering broadcast receiver", new Throwable[0]);
    this.mAppContext.unregisterReceiver(this.mBroadcastReceiver);
  }
}
