package com.android.volley.cache;

import android.graphics.Bitmap;
import android.util.Log;
import com.android.volley.Cache;
import com.android.volley.VolleyLog;
import com.android.volley.misc.DiskLruCache;
import com.android.volley.misc.Utils;
import java.io.File;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class DiskLruBasedCache implements Cache {
  private static final int APP_VERSION = 1;
  
  private static final Bitmap.CompressFormat DEFAULT_COMPRESS_FORMAT = Bitmap.CompressFormat.JPEG;
  
  private static final int DEFAULT_COMPRESS_QUALITY = 70;
  
  private static final boolean DEFAULT_DISK_CACHE_ENABLED = true;
  
  private static final int DEFAULT_DISK_CACHE_SIZE = 10485760;
  
  private static final boolean DEFAULT_INIT_DISK_CACHE_ON_CREATE = false;
  
  private static final boolean DEFAULT_MEM_CACHE_ENABLED = true;
  
  private static final int DEFAULT_MEM_CACHE_SIZE = 5120;
  
  private static final int DISK_CACHE_INDEX = 0;
  
  private static int IO_BUFFER_SIZE = 8192;
  
  private static final String TAG = "DiskLruImageCache";
  
  private static final int VALUE_COUNT = 1;
  
  private ImageCacheParams mCacheParams;
  
  private Bitmap.CompressFormat mCompressFormat = DEFAULT_COMPRESS_FORMAT;
  
  private int mCompressQuality = 70;
  
  private final Object mDiskCacheLock = new Object();
  
  private boolean mDiskCacheStarting = true;
  
  private DiskLruCache mDiskLruCache;
  
  public DiskLruBasedCache(ImageCacheParams paramImageCacheParams) { this.mCacheParams = paramImageCacheParams; }
  
  public DiskLruBasedCache(File paramFile) { this.mCacheParams = new ImageCacheParams(paramFile); }
  
  private static String bytesToHexString(byte[] paramArrayOfByte) {
    StringBuilder stringBuilder = new StringBuilder();
    for (byte b = 0; b < paramArrayOfByte.length; b++) {
      String str = Integer.toHexString(paramArrayOfByte[b] & 0xFF);
      if (str.length() == 1)
        stringBuilder.append('0'); 
      stringBuilder.append(str);
    } 
    return stringBuilder.toString();
  }
  
  private String getFilenameForKey(String paramString) {
    int i = paramString.length() / 2;
    int j = paramString.substring(0, i).hashCode();
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(String.valueOf(j));
    stringBuilder.append(String.valueOf(paramString.substring(i).hashCode()));
    return stringBuilder.toString();
  }
  
  public static String hashKeyForDisk(String paramString) {
    try {
      MessageDigest messageDigest = MessageDigest.getInstance("MD5");
      messageDigest.update(paramString.getBytes());
      return bytesToHexString(messageDigest.digest());
    } catch (NoSuchAlgorithmException noSuchAlgorithmException) {
      return String.valueOf(paramString.hashCode());
    } 
  }
  
  public void clear() {
    synchronized (this.mDiskCacheLock) {
      this.mDiskCacheStarting = true;
      if (this.mDiskLruCache != null) {
        boolean bool = this.mDiskLruCache.isClosed();
        if (!bool) {
          try {
            this.mDiskLruCache.delete();
          } catch (IOException iOException) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("clearCache - ");
            stringBuilder.append(iOException);
            Log.e("DiskLruImageCache", stringBuilder.toString());
          } 
          this.mDiskLruCache = null;
          initDiskCache();
        } 
      } 
      return;
    } 
  }
  
  public void clearCache() {
    try {
      this.mDiskLruCache.delete();
      return;
    } catch (IOException iOException) {
      iOException.printStackTrace();
      return;
    } 
  }
  
  public void close() {
    synchronized (this.mDiskCacheLock) {
      diskLruCache = this.mDiskLruCache;
      if (diskLruCache != null)
        try {
          if (!this.mDiskLruCache.isClosed()) {
            this.mDiskLruCache.close();
            this.mDiskLruCache = null;
          } 
        } catch (IOException diskLruCache) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("close - ");
          stringBuilder.append(diskLruCache);
          Log.e("DiskLruImageCache", stringBuilder.toString());
        }  
      return;
    } 
  }
  
  public boolean containsKey(String paramString) {
    int j = 0;
    int i = 0;
    try {
      DiskLruCache.Snapshot snapshot = this.mDiskLruCache.get(paramString);
      if (snapshot != null)
        i = 1; 
      j = i;
      if (snapshot != null) {
        snapshot.close();
        return i;
      } 
    } catch (IOException paramString) {
      paramString.printStackTrace();
    } finally {}
    return j;
  }
  
  public void flush() {
    synchronized (this.mDiskCacheLock) {
      diskLruCache = this.mDiskLruCache;
      if (diskLruCache != null)
        try {
          this.mDiskLruCache.flush();
        } catch (IOException diskLruCache) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("flush - ");
          stringBuilder.append(diskLruCache);
          Log.e("DiskLruImageCache", stringBuilder.toString());
        }  
      return;
    } 
  }
  
  public Cache.Entry get(String paramString) { // Byte code:
    //   0: aload_1
    //   1: invokestatic hashKeyForDisk : (Ljava/lang/String;)Ljava/lang/String;
    //   4: astore #6
    //   6: aload_1
    //   7: ifnonnull -> 12
    //   10: aconst_null
    //   11: areturn
    //   12: aload_0
    //   13: getfield mDiskCacheLock : Ljava/lang/Object;
    //   16: astore #5
    //   18: aload #5
    //   20: monitorenter
    //   21: aload_0
    //   22: getfield mDiskCacheStarting : Z
    //   25: istore_2
    //   26: iload_2
    //   27: ifeq -> 40
    //   30: aload_0
    //   31: getfield mDiskCacheLock : Ljava/lang/Object;
    //   34: invokevirtual wait : ()V
    //   37: goto -> 21
    //   40: aload_0
    //   41: getfield mDiskLruCache : Lcom/android/volley/misc/DiskLruCache;
    //   44: ifnull -> 307
    //   47: aload_0
    //   48: aload #6
    //   50: invokevirtual getFileForKey : (Ljava/lang/String;)Ljava/io/File;
    //   53: astore #7
    //   55: aload_0
    //   56: getfield mDiskLruCache : Lcom/android/volley/misc/DiskLruCache;
    //   59: aload #6
    //   61: invokevirtual get : (Ljava/lang/String;)Lcom/android/volley/misc/DiskLruCache$Snapshot;
    //   64: astore_1
    //   65: aload_1
    //   66: ifnull -> 146
    //   69: aload_1
    //   70: iconst_0
    //   71: invokevirtual getInputStream : (I)Ljava/io/InputStream;
    //   74: astore_3
    //   75: aload_3
    //   76: astore_1
    //   77: aload_3
    //   78: ifnull -> 148
    //   81: aload_3
    //   82: astore_1
    //   83: new com/android/volley/misc/IOUtils$CountingInputStream
    //   86: dup
    //   87: aload_3
    //   88: invokespecial <init> : (Ljava/io/InputStream;)V
    //   91: astore #4
    //   93: aload_3
    //   94: astore_1
    //   95: aload #4
    //   97: invokestatic readHeader : (Ljava/io/InputStream;)Lcom/android/volley/cache/DiskBasedCache$CacheHeader;
    //   100: aload #4
    //   102: aload #7
    //   104: invokevirtual length : ()J
    //   107: aload #4
    //   109: invokevirtual getBytesRead : ()J
    //   112: lsub
    //   113: l2i
    //   114: invokestatic streamToBytes : (Ljava/io/InputStream;I)[B
    //   117: invokevirtual toCacheEntry : ([B)Lcom/android/volley/Cache$Entry;
    //   120: astore #4
    //   122: aload_3
    //   123: ifnull -> 130
    //   126: aload_3
    //   127: invokevirtual close : ()V
    //   130: aload #5
    //   132: monitorexit
    //   133: aload #4
    //   135: areturn
    //   136: astore #4
    //   138: goto -> 169
    //   141: astore #4
    //   143: goto -> 224
    //   146: aconst_null
    //   147: astore_1
    //   148: aload_1
    //   149: ifnull -> 307
    //   152: aload_1
    //   153: invokevirtual close : ()V
    //   156: goto -> 307
    //   159: astore_1
    //   160: aconst_null
    //   161: astore_3
    //   162: goto -> 297
    //   165: astore #4
    //   167: aconst_null
    //   168: astore_3
    //   169: aload_3
    //   170: astore_1
    //   171: ldc 'Caught OOM for %d byte image, path=%s: %s'
    //   173: iconst_3
    //   174: anewarray java/lang/Object
    //   177: dup
    //   178: iconst_0
    //   179: aload #7
    //   181: invokevirtual length : ()J
    //   184: invokestatic valueOf : (J)Ljava/lang/Long;
    //   187: aastore
    //   188: dup
    //   189: iconst_1
    //   190: aload #7
    //   192: invokevirtual getAbsolutePath : ()Ljava/lang/String;
    //   195: aastore
    //   196: dup
    //   197: iconst_2
    //   198: aload #4
    //   200: invokevirtual toString : ()Ljava/lang/String;
    //   203: aastore
    //   204: invokestatic e : (Ljava/lang/String;[Ljava/lang/Object;)V
    //   207: aload_3
    //   208: ifnull -> 215
    //   211: aload_3
    //   212: invokevirtual close : ()V
    //   215: aload #5
    //   217: monitorexit
    //   218: aconst_null
    //   219: areturn
    //   220: astore #4
    //   222: aconst_null
    //   223: astore_3
    //   224: aload_3
    //   225: astore_1
    //   226: aload_0
    //   227: aload #6
    //   229: invokevirtual remove : (Ljava/lang/String;)V
    //   232: aload_3
    //   233: astore_1
    //   234: new java/lang/StringBuilder
    //   237: dup
    //   238: invokespecial <init> : ()V
    //   241: astore #6
    //   243: aload_3
    //   244: astore_1
    //   245: aload #6
    //   247: ldc_w 'getDiskLruBasedCache - '
    //   250: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   253: pop
    //   254: aload_3
    //   255: astore_1
    //   256: aload #6
    //   258: aload #4
    //   260: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   263: pop
    //   264: aload_3
    //   265: astore_1
    //   266: ldc 'DiskLruImageCache'
    //   268: aload #6
    //   270: invokevirtual toString : ()Ljava/lang/String;
    //   273: invokestatic e : (Ljava/lang/String;Ljava/lang/String;)I
    //   276: pop
    //   277: aload_3
    //   278: ifnull -> 285
    //   281: aload_3
    //   282: invokevirtual close : ()V
    //   285: aload #5
    //   287: monitorexit
    //   288: aconst_null
    //   289: areturn
    //   290: astore #4
    //   292: aload_1
    //   293: astore_3
    //   294: aload #4
    //   296: astore_1
    //   297: aload_3
    //   298: ifnull -> 305
    //   301: aload_3
    //   302: invokevirtual close : ()V
    //   305: aload_1
    //   306: athrow
    //   307: aload #5
    //   309: monitorexit
    //   310: aconst_null
    //   311: areturn
    //   312: astore_1
    //   313: aload #5
    //   315: monitorexit
    //   316: goto -> 321
    //   319: aload_1
    //   320: athrow
    //   321: goto -> 319
    //   324: astore_1
    //   325: goto -> 21
    //   328: astore_1
    //   329: goto -> 130
    //   332: astore_1
    //   333: goto -> 307
    //   336: astore_1
    //   337: goto -> 215
    //   340: astore_1
    //   341: goto -> 285
    //   344: astore_3
    //   345: goto -> 305
    // Exception table:
    //   from	to	target	type
    //   21	26	312	finally
    //   30	37	324	java/lang/InterruptedException
    //   30	37	312	finally
    //   40	55	312	finally
    //   55	65	220	java/io/IOException
    //   55	65	165	java/lang/OutOfMemoryError
    //   55	65	159	finally
    //   69	75	220	java/io/IOException
    //   69	75	165	java/lang/OutOfMemoryError
    //   69	75	159	finally
    //   83	93	141	java/io/IOException
    //   83	93	136	java/lang/OutOfMemoryError
    //   83	93	290	finally
    //   95	122	141	java/io/IOException
    //   95	122	136	java/lang/OutOfMemoryError
    //   95	122	290	finally
    //   126	130	328	java/io/IOException
    //   126	130	312	finally
    //   130	133	312	finally
    //   152	156	332	java/io/IOException
    //   152	156	312	finally
    //   171	207	290	finally
    //   211	215	336	java/io/IOException
    //   211	215	312	finally
    //   215	218	312	finally
    //   226	232	290	finally
    //   234	243	290	finally
    //   245	254	290	finally
    //   256	264	290	finally
    //   266	277	290	finally
    //   281	285	340	java/io/IOException
    //   281	285	312	finally
    //   285	288	312	finally
    //   301	305	344	java/io/IOException
    //   301	305	312	finally
    //   305	307	312	finally
    //   307	310	312	finally
    //   313	316	312	finally }
  
  public Bitmap getBitmap(String paramString) { // Byte code:
    //   0: aload_1
    //   1: invokestatic hashKeyForDisk : (Ljava/lang/String;)Ljava/lang/String;
    //   4: astore #4
    //   6: aload_0
    //   7: getfield mDiskCacheLock : Ljava/lang/Object;
    //   10: astore #8
    //   12: aload #8
    //   14: monitorenter
    //   15: aload_0
    //   16: getfield mDiskCacheStarting : Z
    //   19: istore_2
    //   20: iload_2
    //   21: ifeq -> 34
    //   24: aload_0
    //   25: getfield mDiskCacheLock : Ljava/lang/Object;
    //   28: invokevirtual wait : ()V
    //   31: goto -> 15
    //   34: aload_0
    //   35: getfield mDiskLruCache : Lcom/android/volley/misc/DiskLruCache;
    //   38: astore #5
    //   40: aconst_null
    //   41: astore #6
    //   43: aconst_null
    //   44: astore #7
    //   46: aconst_null
    //   47: astore_1
    //   48: aload #7
    //   50: astore_3
    //   51: aload #5
    //   53: ifnull -> 221
    //   56: aload_0
    //   57: getfield mDiskLruCache : Lcom/android/volley/misc/DiskLruCache;
    //   60: aload #4
    //   62: invokevirtual get : (Ljava/lang/String;)Lcom/android/volley/misc/DiskLruCache$Snapshot;
    //   65: astore_3
    //   66: aload_3
    //   67: ifnull -> 116
    //   70: aload_3
    //   71: iconst_0
    //   72: invokevirtual getInputStream : (I)Ljava/io/InputStream;
    //   75: astore_3
    //   76: aload_3
    //   77: astore #4
    //   79: aload_3
    //   80: ifnull -> 119
    //   83: aload_3
    //   84: astore #4
    //   86: aload_3
    //   87: checkcast java/io/FileInputStream
    //   90: invokevirtual getFD : ()Ljava/io/FileDescriptor;
    //   93: ldc_w 2147483647
    //   96: ldc_w 2147483647
    //   99: invokestatic decodeSampledBitmapFromDescriptor : (Ljava/io/FileDescriptor;II)Landroid/graphics/Bitmap;
    //   102: astore_1
    //   103: aload_3
    //   104: astore #4
    //   106: goto -> 119
    //   109: astore #5
    //   111: aload_3
    //   112: astore_1
    //   113: goto -> 147
    //   116: aconst_null
    //   117: astore #4
    //   119: aload_1
    //   120: astore_3
    //   121: aload #4
    //   123: ifnull -> 221
    //   126: aload_1
    //   127: astore_3
    //   128: aload #4
    //   130: invokevirtual close : ()V
    //   133: goto -> 221
    //   136: astore_1
    //   137: aconst_null
    //   138: astore #4
    //   140: goto -> 209
    //   143: astore #5
    //   145: aconst_null
    //   146: astore_1
    //   147: aload_1
    //   148: astore #4
    //   150: new java/lang/StringBuilder
    //   153: dup
    //   154: invokespecial <init> : ()V
    //   157: astore_3
    //   158: aload_1
    //   159: astore #4
    //   161: aload_3
    //   162: ldc_w 'getBitmapFromDiskCache - '
    //   165: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   168: pop
    //   169: aload_1
    //   170: astore #4
    //   172: aload_3
    //   173: aload #5
    //   175: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   178: pop
    //   179: aload_1
    //   180: astore #4
    //   182: ldc 'DiskLruImageCache'
    //   184: aload_3
    //   185: invokevirtual toString : ()Ljava/lang/String;
    //   188: invokestatic e : (Ljava/lang/String;Ljava/lang/String;)I
    //   191: pop
    //   192: aload #7
    //   194: astore_3
    //   195: aload_1
    //   196: ifnull -> 221
    //   199: aload #6
    //   201: astore_3
    //   202: aload_1
    //   203: astore #4
    //   205: goto -> 128
    //   208: astore_1
    //   209: aload #4
    //   211: ifnull -> 219
    //   214: aload #4
    //   216: invokevirtual close : ()V
    //   219: aload_1
    //   220: athrow
    //   221: aload #8
    //   223: monitorexit
    //   224: aload_3
    //   225: areturn
    //   226: astore_1
    //   227: aload #8
    //   229: monitorexit
    //   230: goto -> 235
    //   233: aload_1
    //   234: athrow
    //   235: goto -> 233
    //   238: astore_1
    //   239: goto -> 15
    //   242: astore_1
    //   243: goto -> 221
    //   246: astore_3
    //   247: goto -> 219
    // Exception table:
    //   from	to	target	type
    //   15	20	226	finally
    //   24	31	238	java/lang/InterruptedException
    //   24	31	226	finally
    //   34	40	226	finally
    //   56	66	143	java/io/IOException
    //   56	66	136	finally
    //   70	76	143	java/io/IOException
    //   70	76	136	finally
    //   86	103	109	java/io/IOException
    //   86	103	208	finally
    //   128	133	242	java/io/IOException
    //   128	133	226	finally
    //   150	158	208	finally
    //   161	169	208	finally
    //   172	179	208	finally
    //   182	192	208	finally
    //   214	219	246	java/io/IOException
    //   214	219	226	finally
    //   219	221	226	finally
    //   221	224	226	finally
    //   227	230	226	finally }
  
  public File getCacheFolder() { return this.mDiskLruCache.getDirectory(); }
  
  public File getFileForKey(String paramString) {
    File file = this.mCacheParams.diskCacheDir;
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(paramString);
    stringBuilder.append(".0");
    return new File(file, stringBuilder.toString());
  }
  
  public void initDiskCache() {
    synchronized (this.mDiskCacheLock) {
      if (this.mDiskLruCache == null || this.mDiskLruCache.isClosed()) {
        file = this.mCacheParams.diskCacheDir;
        if (this.mCacheParams.diskCacheEnabled && file != null) {
          if (!file.exists())
            file.mkdirs(); 
          long l = Utils.getUsableSpace(file);
          int i = this.mCacheParams.diskCacheSize;
          if (l > i)
            try {
              this.mDiskLruCache = DiskLruCache.open(file, 1, 1, this.mCacheParams.diskCacheSize);
            } catch (IOException file) {
              this.mCacheParams.diskCacheDir = null;
              StringBuilder stringBuilder = new StringBuilder();
              stringBuilder.append("initDiskCache - ");
              stringBuilder.append(file);
              VolleyLog.e(stringBuilder.toString(), new Object[0]);
            }  
        } 
      } 
      this.mDiskCacheStarting = false;
      this.mDiskCacheLock.notifyAll();
      return;
    } 
  }
  
  public void initialize() { initDiskCache(); }
  
  public void invalidate(String paramString, boolean paramBoolean) {
    Cache.Entry entry = get(paramString);
    if (entry != null) {
      entry.softTtl = -1L;
      if (paramBoolean)
        entry.ttl = -1L; 
      put(paramString, entry);
    } 
  }
  
  public void put(String paramString, Cache.Entry paramEntry) { // Byte code:
    //   0: aload_1
    //   1: ifnull -> 309
    //   4: aload_2
    //   5: ifnonnull -> 9
    //   8: return
    //   9: aload_0
    //   10: getfield mDiskCacheLock : Ljava/lang/Object;
    //   13: astore #9
    //   15: aload #9
    //   17: monitorenter
    //   18: aload_0
    //   19: getfield mDiskLruCache : Lcom/android/volley/misc/DiskLruCache;
    //   22: ifnull -> 299
    //   25: aload_1
    //   26: invokestatic hashKeyForDisk : (Ljava/lang/String;)Ljava/lang/String;
    //   29: astore #10
    //   31: aconst_null
    //   32: astore #6
    //   34: aconst_null
    //   35: astore #7
    //   37: aconst_null
    //   38: astore #8
    //   40: aconst_null
    //   41: astore #5
    //   43: aload #6
    //   45: astore_1
    //   46: aload #7
    //   48: astore_3
    //   49: aload #8
    //   51: astore #4
    //   53: aload_0
    //   54: getfield mDiskLruCache : Lcom/android/volley/misc/DiskLruCache;
    //   57: aload #10
    //   59: invokevirtual edit : (Ljava/lang/String;)Lcom/android/volley/misc/DiskLruCache$Editor;
    //   62: astore #11
    //   64: aload #11
    //   66: ifnull -> 162
    //   69: aload #6
    //   71: astore_1
    //   72: aload #7
    //   74: astore_3
    //   75: aload #8
    //   77: astore #4
    //   79: aload #11
    //   81: iconst_0
    //   82: invokevirtual newOutputStream : (I)Ljava/io/OutputStream;
    //   85: astore #5
    //   87: aload #5
    //   89: astore_1
    //   90: aload #5
    //   92: astore_3
    //   93: aload #5
    //   95: astore #4
    //   97: new com/android/volley/cache/DiskBasedCache$CacheHeader
    //   100: dup
    //   101: aload #10
    //   103: aload_2
    //   104: invokespecial <init> : (Ljava/lang/String;Lcom/android/volley/Cache$Entry;)V
    //   107: aload #5
    //   109: invokevirtual writeHeader : (Ljava/io/OutputStream;)Z
    //   112: pop
    //   113: aload #5
    //   115: astore_1
    //   116: aload #5
    //   118: astore_3
    //   119: aload #5
    //   121: astore #4
    //   123: aload #5
    //   125: aload_2
    //   126: getfield data : [B
    //   129: invokevirtual write : ([B)V
    //   132: aload #5
    //   134: astore_1
    //   135: aload #5
    //   137: astore_3
    //   138: aload #5
    //   140: astore #4
    //   142: aload #11
    //   144: invokevirtual commit : ()V
    //   147: aload #5
    //   149: astore_1
    //   150: aload #5
    //   152: astore_3
    //   153: aload #5
    //   155: astore #4
    //   157: aload #5
    //   159: invokevirtual close : ()V
    //   162: aload #5
    //   164: ifnull -> 299
    //   167: aload #5
    //   169: astore_3
    //   170: aload_3
    //   171: invokevirtual close : ()V
    //   174: goto -> 299
    //   177: astore_2
    //   178: goto -> 289
    //   181: astore_2
    //   182: aload_3
    //   183: astore_1
    //   184: new java/lang/StringBuilder
    //   187: dup
    //   188: invokespecial <init> : ()V
    //   191: astore #4
    //   193: aload_3
    //   194: astore_1
    //   195: aload #4
    //   197: ldc_w 'putDiskLruBasedCache - '
    //   200: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   203: pop
    //   204: aload_3
    //   205: astore_1
    //   206: aload #4
    //   208: aload_2
    //   209: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   212: pop
    //   213: aload_3
    //   214: astore_1
    //   215: ldc 'DiskLruImageCache'
    //   217: aload #4
    //   219: invokevirtual toString : ()Ljava/lang/String;
    //   222: invokestatic e : (Ljava/lang/String;Ljava/lang/String;)I
    //   225: pop
    //   226: aload_3
    //   227: ifnull -> 299
    //   230: goto -> 170
    //   233: astore_2
    //   234: aload #4
    //   236: astore_1
    //   237: new java/lang/StringBuilder
    //   240: dup
    //   241: invokespecial <init> : ()V
    //   244: astore_3
    //   245: aload #4
    //   247: astore_1
    //   248: aload_3
    //   249: ldc_w 'putDiskLruBasedCache - '
    //   252: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   255: pop
    //   256: aload #4
    //   258: astore_1
    //   259: aload_3
    //   260: aload_2
    //   261: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   264: pop
    //   265: aload #4
    //   267: astore_1
    //   268: ldc 'DiskLruImageCache'
    //   270: aload_3
    //   271: invokevirtual toString : ()Ljava/lang/String;
    //   274: invokestatic e : (Ljava/lang/String;Ljava/lang/String;)I
    //   277: pop
    //   278: aload #4
    //   280: ifnull -> 299
    //   283: aload #4
    //   285: astore_3
    //   286: goto -> 170
    //   289: aload_1
    //   290: ifnull -> 297
    //   293: aload_1
    //   294: invokevirtual close : ()V
    //   297: aload_2
    //   298: athrow
    //   299: aload #9
    //   301: monitorexit
    //   302: return
    //   303: astore_1
    //   304: aload #9
    //   306: monitorexit
    //   307: aload_1
    //   308: athrow
    //   309: return
    //   310: astore_1
    //   311: goto -> 299
    //   314: astore_1
    //   315: goto -> 297
    // Exception table:
    //   from	to	target	type
    //   18	31	303	finally
    //   53	64	233	java/io/IOException
    //   53	64	181	java/lang/Exception
    //   53	64	177	finally
    //   79	87	233	java/io/IOException
    //   79	87	181	java/lang/Exception
    //   79	87	177	finally
    //   97	113	233	java/io/IOException
    //   97	113	181	java/lang/Exception
    //   97	113	177	finally
    //   123	132	233	java/io/IOException
    //   123	132	181	java/lang/Exception
    //   123	132	177	finally
    //   142	147	233	java/io/IOException
    //   142	147	181	java/lang/Exception
    //   142	147	177	finally
    //   157	162	233	java/io/IOException
    //   157	162	181	java/lang/Exception
    //   157	162	177	finally
    //   170	174	310	java/io/IOException
    //   170	174	303	finally
    //   184	193	177	finally
    //   195	204	177	finally
    //   206	213	177	finally
    //   215	226	177	finally
    //   237	245	177	finally
    //   248	256	177	finally
    //   259	265	177	finally
    //   268	278	177	finally
    //   293	297	314	java/io/IOException
    //   293	297	303	finally
    //   297	299	303	finally
    //   299	302	303	finally
    //   304	307	303	finally }
  
  public void putBitmap(String paramString, Bitmap paramBitmap) { // Byte code:
    //   0: aload_1
    //   1: ifnull -> 343
    //   4: aload_2
    //   5: ifnonnull -> 9
    //   8: return
    //   9: aload_0
    //   10: getfield mDiskCacheLock : Ljava/lang/Object;
    //   13: astore #9
    //   15: aload #9
    //   17: monitorenter
    //   18: aload_0
    //   19: getfield mDiskLruCache : Lcom/android/volley/misc/DiskLruCache;
    //   22: ifnull -> 333
    //   25: aload_1
    //   26: invokestatic hashKeyForDisk : (Ljava/lang/String;)Ljava/lang/String;
    //   29: astore #10
    //   31: aconst_null
    //   32: astore #6
    //   34: aconst_null
    //   35: astore #7
    //   37: aconst_null
    //   38: astore #8
    //   40: aconst_null
    //   41: astore #5
    //   43: aload #6
    //   45: astore_1
    //   46: aload #7
    //   48: astore_3
    //   49: aload #8
    //   51: astore #4
    //   53: aload_0
    //   54: getfield mDiskLruCache : Lcom/android/volley/misc/DiskLruCache;
    //   57: aload #10
    //   59: invokevirtual get : (Ljava/lang/String;)Lcom/android/volley/misc/DiskLruCache$Snapshot;
    //   62: astore #11
    //   64: aload #11
    //   66: ifnonnull -> 177
    //   69: aload #6
    //   71: astore_1
    //   72: aload #7
    //   74: astore_3
    //   75: aload #8
    //   77: astore #4
    //   79: aload_0
    //   80: getfield mDiskLruCache : Lcom/android/volley/misc/DiskLruCache;
    //   83: aload #10
    //   85: invokevirtual edit : (Ljava/lang/String;)Lcom/android/volley/misc/DiskLruCache$Editor;
    //   88: astore #10
    //   90: aload #10
    //   92: ifnull -> 196
    //   95: aload #6
    //   97: astore_1
    //   98: aload #7
    //   100: astore_3
    //   101: aload #8
    //   103: astore #4
    //   105: aload #10
    //   107: iconst_0
    //   108: invokevirtual newOutputStream : (I)Ljava/io/OutputStream;
    //   111: astore #5
    //   113: aload #5
    //   115: astore_1
    //   116: aload #5
    //   118: astore_3
    //   119: aload #5
    //   121: astore #4
    //   123: aload_2
    //   124: aload_0
    //   125: getfield mCacheParams : Lcom/android/volley/cache/DiskLruBasedCache$ImageCacheParams;
    //   128: getfield compressFormat : Landroid/graphics/Bitmap$CompressFormat;
    //   131: aload_0
    //   132: getfield mCacheParams : Lcom/android/volley/cache/DiskLruBasedCache$ImageCacheParams;
    //   135: getfield compressQuality : I
    //   138: aload #5
    //   140: invokevirtual compress : (Landroid/graphics/Bitmap$CompressFormat;ILjava/io/OutputStream;)Z
    //   143: pop
    //   144: aload #5
    //   146: astore_1
    //   147: aload #5
    //   149: astore_3
    //   150: aload #5
    //   152: astore #4
    //   154: aload #10
    //   156: invokevirtual commit : ()V
    //   159: aload #5
    //   161: astore_1
    //   162: aload #5
    //   164: astore_3
    //   165: aload #5
    //   167: astore #4
    //   169: aload #5
    //   171: invokevirtual close : ()V
    //   174: goto -> 196
    //   177: aload #6
    //   179: astore_1
    //   180: aload #7
    //   182: astore_3
    //   183: aload #8
    //   185: astore #4
    //   187: aload #11
    //   189: iconst_0
    //   190: invokevirtual getInputStream : (I)Ljava/io/InputStream;
    //   193: invokevirtual close : ()V
    //   196: aload #5
    //   198: ifnull -> 333
    //   201: aload #5
    //   203: astore_3
    //   204: aload_3
    //   205: invokevirtual close : ()V
    //   208: goto -> 333
    //   211: astore_2
    //   212: goto -> 323
    //   215: astore_2
    //   216: aload_3
    //   217: astore_1
    //   218: new java/lang/StringBuilder
    //   221: dup
    //   222: invokespecial <init> : ()V
    //   225: astore #4
    //   227: aload_3
    //   228: astore_1
    //   229: aload #4
    //   231: ldc_w 'addBitmapToCache - '
    //   234: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   237: pop
    //   238: aload_3
    //   239: astore_1
    //   240: aload #4
    //   242: aload_2
    //   243: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   246: pop
    //   247: aload_3
    //   248: astore_1
    //   249: ldc 'DiskLruImageCache'
    //   251: aload #4
    //   253: invokevirtual toString : ()Ljava/lang/String;
    //   256: invokestatic e : (Ljava/lang/String;Ljava/lang/String;)I
    //   259: pop
    //   260: aload_3
    //   261: ifnull -> 333
    //   264: goto -> 204
    //   267: astore_2
    //   268: aload #4
    //   270: astore_1
    //   271: new java/lang/StringBuilder
    //   274: dup
    //   275: invokespecial <init> : ()V
    //   278: astore_3
    //   279: aload #4
    //   281: astore_1
    //   282: aload_3
    //   283: ldc_w 'addBitmapToCache - '
    //   286: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   289: pop
    //   290: aload #4
    //   292: astore_1
    //   293: aload_3
    //   294: aload_2
    //   295: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   298: pop
    //   299: aload #4
    //   301: astore_1
    //   302: ldc 'DiskLruImageCache'
    //   304: aload_3
    //   305: invokevirtual toString : ()Ljava/lang/String;
    //   308: invokestatic e : (Ljava/lang/String;Ljava/lang/String;)I
    //   311: pop
    //   312: aload #4
    //   314: ifnull -> 333
    //   317: aload #4
    //   319: astore_3
    //   320: goto -> 204
    //   323: aload_1
    //   324: ifnull -> 331
    //   327: aload_1
    //   328: invokevirtual close : ()V
    //   331: aload_2
    //   332: athrow
    //   333: aload #9
    //   335: monitorexit
    //   336: return
    //   337: astore_1
    //   338: aload #9
    //   340: monitorexit
    //   341: aload_1
    //   342: athrow
    //   343: return
    //   344: astore_1
    //   345: goto -> 333
    //   348: astore_1
    //   349: goto -> 331
    // Exception table:
    //   from	to	target	type
    //   18	31	337	finally
    //   53	64	267	java/io/IOException
    //   53	64	215	java/lang/Exception
    //   53	64	211	finally
    //   79	90	267	java/io/IOException
    //   79	90	215	java/lang/Exception
    //   79	90	211	finally
    //   105	113	267	java/io/IOException
    //   105	113	215	java/lang/Exception
    //   105	113	211	finally
    //   123	144	267	java/io/IOException
    //   123	144	215	java/lang/Exception
    //   123	144	211	finally
    //   154	159	267	java/io/IOException
    //   154	159	215	java/lang/Exception
    //   154	159	211	finally
    //   169	174	267	java/io/IOException
    //   169	174	215	java/lang/Exception
    //   169	174	211	finally
    //   187	196	267	java/io/IOException
    //   187	196	215	java/lang/Exception
    //   187	196	211	finally
    //   204	208	344	java/io/IOException
    //   204	208	337	finally
    //   218	227	211	finally
    //   229	238	211	finally
    //   240	247	211	finally
    //   249	260	211	finally
    //   271	279	211	finally
    //   282	290	211	finally
    //   293	299	211	finally
    //   302	312	211	finally
    //   327	331	348	java/io/IOException
    //   327	331	337	finally
    //   331	333	337	finally
    //   333	336	337	finally
    //   338	341	337	finally }
  
  public void remove(String paramString) {
    if (paramString == null)
      return; 
    synchronized (this.mDiskCacheLock) {
      if (this.mDiskLruCache != null) {
        paramString = hashKeyForDisk(paramString);
        try {
          this.mDiskLruCache.remove(paramString);
        } catch (IOException paramString) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("removeDiskLruBasedCache - ");
          stringBuilder.append(paramString);
          Log.e("DiskLruImageCache", stringBuilder.toString());
        } catch (Exception paramString) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("removeDiskLruBasedCache - ");
          stringBuilder.append(paramString);
          Log.e("DiskLruImageCache", stringBuilder.toString());
        } 
      } 
      return;
    } 
  }
}
