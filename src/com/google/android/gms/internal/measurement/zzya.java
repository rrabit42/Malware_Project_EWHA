package com.google.android.gms.internal.measurement;

import java.io.IOException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public final class zzya {
  private final ByteBuffer zzbur;
  
  private zztv zzcer;
  
  private int zzces;
  
  private zzya(ByteBuffer paramByteBuffer) {
    this.zzbur = paramByteBuffer;
    this.zzbur.order(ByteOrder.LITTLE_ENDIAN);
  }
  
  private zzya(byte[] paramArrayOfByte, int paramInt1, int paramInt2) { this(ByteBuffer.wrap(paramArrayOfByte, paramInt1, paramInt2)); }
  
  private static int zza(CharSequence paramCharSequence) {
    int k;
    int n = paramCharSequence.length();
    int m = 0;
    int j;
    for (j = 0; j < n && paramCharSequence.charAt(j) < ''; j++);
    int i = n;
    while (true) {
      k = i;
      if (j < n) {
        k = paramCharSequence.charAt(j);
        if (k < 2048) {
          i += (127 - k >>> 31);
          j++;
          continue;
        } 
        int i1 = paramCharSequence.length();
        k = m;
        while (j < i1) {
          char c = paramCharSequence.charAt(j);
          if (c < 'ࠀ') {
            k += ('' - c >>> '\037');
            m = j;
          } else {
            int i2 = k + 2;
            k = i2;
            m = j;
            if ('?' <= c) {
              k = i2;
              m = j;
              if (c <= '?')
                if (Character.codePointAt(paramCharSequence, j) >= 65536) {
                  m = j + 1;
                  k = i2;
                } else {
                  paramCharSequence = new StringBuilder(39);
                  paramCharSequence.append("Unpaired surrogate at index ");
                  paramCharSequence.append(j);
                  throw new IllegalArgumentException(paramCharSequence.toString());
                }  
            } 
          } 
          j = m + 1;
        } 
        k = i + k;
      } 
      break;
    } 
    if (k >= n)
      return k; 
    long l = k;
    paramCharSequence = new StringBuilder(54);
    paramCharSequence.append("UTF-8 length does not fit in int: ");
    paramCharSequence.append(l + 4294967296L);
    IllegalArgumentException illegalArgumentException = new IllegalArgumentException(paramCharSequence.toString());
    throw illegalArgumentException;
  }
  
  public static int zzb(int paramInt, zzyi paramzzyi) {
    paramInt = zzbd(paramInt);
    int i = paramzzyi.zzvx();
    return paramInt + zzbl(i) + i;
  }
  
  public static int zzbd(int paramInt) { return zzbl(paramInt << 3); }
  
  public static int zzbe(int paramInt) { return (paramInt >= 0) ? zzbl(paramInt) : 10; }
  
  private final void zzbf(long paramLong) throws IOException {
    while (true) {
      if ((0xFFFFFFFFFFFFFF80L & paramLong) == 0L) {
        zzcc((int)paramLong);
        return;
      } 
      zzcc((int)paramLong & 0x7F | 0x80);
      paramLong >>>= 7;
    } 
  }
  
  public static int zzbg(long paramLong) { return ((0xFFFFFFFFFFFFFF80L & paramLong) == 0L) ? 1 : (((0xFFFFFFFFFFFFC000L & paramLong) == 0L) ? 2 : (((0xFFFFFFFFFFE00000L & paramLong) == 0L) ? 3 : (((0xFFFFFFFFF0000000L & paramLong) == 0L) ? 4 : (((0xFFFFFFF800000000L & paramLong) == 0L) ? 5 : (((0xFFFFFC0000000000L & paramLong) == 0L) ? 6 : (((0xFFFE000000000000L & paramLong) == 0L) ? 7 : (((0xFF00000000000000L & paramLong) == 0L) ? 8 : (((paramLong & Float.MIN_VALUE) == 0L) ? 9 : 10)))))))); }
  
  public static int zzbl(int paramInt) { return ((paramInt & 0xFFFFFF80) == 0) ? 1 : (((paramInt & 0xFFFFC000) == 0) ? 2 : (((0xFFE00000 & paramInt) == 0) ? 3 : (((paramInt & 0xF0000000) == 0) ? 4 : 5))); }
  
  public static int zzc(int paramInt, String paramString) { return zzbd(paramInt) + zzgc(paramString); }
  
  private final void zzcc(int paramInt) throws IOException {
    byte b = (byte)paramInt;
    if (this.zzbur.hasRemaining()) {
      this.zzbur.put(b);
      return;
    } 
    throw new zzyb(this.zzbur.position(), this.zzbur.limit());
  }
  
  public static int zzd(int paramInt, long paramLong) { return zzbd(paramInt) + zzbg(paramLong); }
  
  private static void zzd(CharSequence paramCharSequence, ByteBuffer paramByteBuffer) { // Byte code:
    //   0: aload_1
    //   1: invokevirtual isReadOnly : ()Z
    //   4: ifne -> 745
    //   7: aload_1
    //   8: invokevirtual hasArray : ()Z
    //   11: istore #10
    //   13: iconst_0
    //   14: istore #5
    //   16: iconst_0
    //   17: istore #4
    //   19: iload #10
    //   21: ifeq -> 436
    //   24: aload_1
    //   25: invokevirtual array : ()[B
    //   28: astore #11
    //   30: aload_1
    //   31: invokevirtual arrayOffset : ()I
    //   34: aload_1
    //   35: invokevirtual position : ()I
    //   38: iadd
    //   39: istore #5
    //   41: aload_1
    //   42: invokevirtual remaining : ()I
    //   45: istore #6
    //   47: aload_0
    //   48: invokeinterface length : ()I
    //   53: istore #7
    //   55: iload #6
    //   57: iload #5
    //   59: iadd
    //   60: istore #8
    //   62: iload #4
    //   64: iload #7
    //   66: if_icmpge -> 761
    //   69: iload #4
    //   71: iload #5
    //   73: iadd
    //   74: istore #6
    //   76: iload #6
    //   78: iload #8
    //   80: if_icmpge -> 761
    //   83: aload_0
    //   84: iload #4
    //   86: invokeinterface charAt : (I)C
    //   91: istore #9
    //   93: iload #9
    //   95: sipush #128
    //   98: if_icmpge -> 761
    //   101: aload #11
    //   103: iload #6
    //   105: iload #9
    //   107: i2b
    //   108: bastore
    //   109: iload #4
    //   111: iconst_1
    //   112: iadd
    //   113: istore #4
    //   115: goto -> 62
    //   118: iload #5
    //   120: istore #6
    //   122: iload #4
    //   124: iload #7
    //   126: if_icmpge -> 406
    //   129: aload_0
    //   130: iload #4
    //   132: invokeinterface charAt : (I)C
    //   137: istore_2
    //   138: iload_2
    //   139: sipush #128
    //   142: if_icmpge -> 791
    //   145: iload #5
    //   147: iload #8
    //   149: if_icmpge -> 791
    //   152: iload #5
    //   154: iconst_1
    //   155: iadd
    //   156: istore #6
    //   158: aload #11
    //   160: iload #5
    //   162: iload_2
    //   163: i2b
    //   164: bastore
    //   165: iload #6
    //   167: istore #5
    //   169: goto -> 788
    //   172: iload #5
    //   174: iload #8
    //   176: iconst_4
    //   177: isub
    //   178: if_icmpgt -> 357
    //   181: iload #4
    //   183: iconst_1
    //   184: iadd
    //   185: istore #6
    //   187: iload #6
    //   189: aload_0
    //   190: invokeinterface length : ()I
    //   195: if_icmpeq -> 319
    //   198: aload_0
    //   199: iload #6
    //   201: invokeinterface charAt : (I)C
    //   206: istore_3
    //   207: iload_2
    //   208: iload_3
    //   209: invokestatic isSurrogatePair : (CC)Z
    //   212: ifeq -> 946
    //   215: iload_2
    //   216: iload_3
    //   217: invokestatic toCodePoint : (CC)I
    //   220: istore #4
    //   222: iload #5
    //   224: iconst_1
    //   225: iadd
    //   226: istore #9
    //   228: aload #11
    //   230: iload #5
    //   232: iload #4
    //   234: bipush #18
    //   236: iushr
    //   237: sipush #240
    //   240: ior
    //   241: i2b
    //   242: bastore
    //   243: iload #9
    //   245: iconst_1
    //   246: iadd
    //   247: istore #5
    //   249: aload #11
    //   251: iload #9
    //   253: iload #4
    //   255: bipush #12
    //   257: iushr
    //   258: bipush #63
    //   260: iand
    //   261: sipush #128
    //   264: ior
    //   265: i2b
    //   266: bastore
    //   267: iload #5
    //   269: iconst_1
    //   270: iadd
    //   271: istore #9
    //   273: aload #11
    //   275: iload #5
    //   277: iload #4
    //   279: bipush #6
    //   281: iushr
    //   282: bipush #63
    //   284: iand
    //   285: sipush #128
    //   288: ior
    //   289: i2b
    //   290: bastore
    //   291: iload #9
    //   293: iconst_1
    //   294: iadd
    //   295: istore #5
    //   297: aload #11
    //   299: iload #9
    //   301: iload #4
    //   303: bipush #63
    //   305: iand
    //   306: sipush #128
    //   309: ior
    //   310: i2b
    //   311: bastore
    //   312: iload #6
    //   314: istore #4
    //   316: goto -> 937
    //   319: new java/lang/StringBuilder
    //   322: dup
    //   323: bipush #39
    //   325: invokespecial <init> : (I)V
    //   328: astore_0
    //   329: aload_0
    //   330: ldc 'Unpaired surrogate at index '
    //   332: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   335: pop
    //   336: aload_0
    //   337: iload #4
    //   339: iconst_1
    //   340: isub
    //   341: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   344: pop
    //   345: new java/lang/IllegalArgumentException
    //   348: dup
    //   349: aload_0
    //   350: invokevirtual toString : ()Ljava/lang/String;
    //   353: invokespecial <init> : (Ljava/lang/String;)V
    //   356: athrow
    //   357: new java/lang/StringBuilder
    //   360: dup
    //   361: bipush #37
    //   363: invokespecial <init> : (I)V
    //   366: astore_0
    //   367: aload_0
    //   368: ldc 'Failed writing '
    //   370: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   373: pop
    //   374: aload_0
    //   375: iload_2
    //   376: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   379: pop
    //   380: aload_0
    //   381: ldc ' at index '
    //   383: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   386: pop
    //   387: aload_0
    //   388: iload #5
    //   390: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   393: pop
    //   394: new java/lang/ArrayIndexOutOfBoundsException
    //   397: dup
    //   398: aload_0
    //   399: invokevirtual toString : ()Ljava/lang/String;
    //   402: invokespecial <init> : (Ljava/lang/String;)V
    //   405: athrow
    //   406: aload_1
    //   407: iload #6
    //   409: aload_1
    //   410: invokevirtual arrayOffset : ()I
    //   413: isub
    //   414: invokevirtual position : (I)Ljava/nio/Buffer;
    //   417: pop
    //   418: return
    //   419: astore_0
    //   420: new java/nio/BufferOverflowException
    //   423: dup
    //   424: invokespecial <init> : ()V
    //   427: astore_1
    //   428: aload_1
    //   429: aload_0
    //   430: invokevirtual initCause : (Ljava/lang/Throwable;)Ljava/lang/Throwable;
    //   433: pop
    //   434: aload_1
    //   435: athrow
    //   436: aload_0
    //   437: invokeinterface length : ()I
    //   442: istore #6
    //   444: iload #5
    //   446: istore #4
    //   448: iload #4
    //   450: iload #6
    //   452: if_icmpge -> 744
    //   455: aload_0
    //   456: iload #4
    //   458: invokeinterface charAt : (I)C
    //   463: istore_2
    //   464: iload_2
    //   465: sipush #128
    //   468: if_icmpge -> 481
    //   471: aload_1
    //   472: iload_2
    //   473: i2b
    //   474: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   477: pop
    //   478: goto -> 735
    //   481: iload_2
    //   482: sipush #2048
    //   485: if_icmpge -> 519
    //   488: aload_1
    //   489: iload_2
    //   490: bipush #6
    //   492: iushr
    //   493: sipush #960
    //   496: ior
    //   497: i2b
    //   498: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   501: pop
    //   502: aload_1
    //   503: iload_2
    //   504: bipush #63
    //   506: iand
    //   507: sipush #128
    //   510: ior
    //   511: i2b
    //   512: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   515: pop
    //   516: goto -> 735
    //   519: iload_2
    //   520: ldc 55296
    //   522: if_icmplt -> 690
    //   525: ldc 57343
    //   527: iload_2
    //   528: if_icmpge -> 534
    //   531: goto -> 690
    //   534: iload #4
    //   536: iconst_1
    //   537: iadd
    //   538: istore #5
    //   540: iload #5
    //   542: aload_0
    //   543: invokeinterface length : ()I
    //   548: if_icmpeq -> 652
    //   551: aload_0
    //   552: iload #5
    //   554: invokeinterface charAt : (I)C
    //   559: istore_3
    //   560: iload_2
    //   561: iload_3
    //   562: invokestatic isSurrogatePair : (CC)Z
    //   565: ifeq -> 648
    //   568: iload_2
    //   569: iload_3
    //   570: invokestatic toCodePoint : (CC)I
    //   573: istore #4
    //   575: aload_1
    //   576: iload #4
    //   578: bipush #18
    //   580: iushr
    //   581: sipush #240
    //   584: ior
    //   585: i2b
    //   586: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   589: pop
    //   590: aload_1
    //   591: iload #4
    //   593: bipush #12
    //   595: iushr
    //   596: bipush #63
    //   598: iand
    //   599: sipush #128
    //   602: ior
    //   603: i2b
    //   604: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   607: pop
    //   608: aload_1
    //   609: iload #4
    //   611: bipush #6
    //   613: iushr
    //   614: bipush #63
    //   616: iand
    //   617: sipush #128
    //   620: ior
    //   621: i2b
    //   622: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   625: pop
    //   626: aload_1
    //   627: iload #4
    //   629: bipush #63
    //   631: iand
    //   632: sipush #128
    //   635: ior
    //   636: i2b
    //   637: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   640: pop
    //   641: iload #5
    //   643: istore #4
    //   645: goto -> 735
    //   648: iload #5
    //   650: istore #4
    //   652: new java/lang/StringBuilder
    //   655: dup
    //   656: bipush #39
    //   658: invokespecial <init> : (I)V
    //   661: astore_0
    //   662: aload_0
    //   663: ldc 'Unpaired surrogate at index '
    //   665: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   668: pop
    //   669: aload_0
    //   670: iload #4
    //   672: iconst_1
    //   673: isub
    //   674: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   677: pop
    //   678: new java/lang/IllegalArgumentException
    //   681: dup
    //   682: aload_0
    //   683: invokevirtual toString : ()Ljava/lang/String;
    //   686: invokespecial <init> : (Ljava/lang/String;)V
    //   689: athrow
    //   690: aload_1
    //   691: iload_2
    //   692: bipush #12
    //   694: iushr
    //   695: sipush #480
    //   698: ior
    //   699: i2b
    //   700: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   703: pop
    //   704: aload_1
    //   705: iload_2
    //   706: bipush #6
    //   708: iushr
    //   709: bipush #63
    //   711: iand
    //   712: sipush #128
    //   715: ior
    //   716: i2b
    //   717: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   720: pop
    //   721: aload_1
    //   722: iload_2
    //   723: bipush #63
    //   725: iand
    //   726: sipush #128
    //   729: ior
    //   730: i2b
    //   731: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   734: pop
    //   735: iload #4
    //   737: iconst_1
    //   738: iadd
    //   739: istore #4
    //   741: goto -> 448
    //   744: return
    //   745: new java/nio/ReadOnlyBufferException
    //   748: dup
    //   749: invokespecial <init> : ()V
    //   752: astore_0
    //   753: goto -> 758
    //   756: aload_0
    //   757: athrow
    //   758: goto -> 756
    //   761: iload #4
    //   763: iload #7
    //   765: if_icmpne -> 778
    //   768: iload #5
    //   770: iload #7
    //   772: iadd
    //   773: istore #6
    //   775: goto -> 406
    //   778: iload #5
    //   780: iload #4
    //   782: iadd
    //   783: istore #5
    //   785: goto -> 118
    //   788: goto -> 937
    //   791: iload_2
    //   792: sipush #2048
    //   795: if_icmpge -> 850
    //   798: iload #5
    //   800: iload #8
    //   802: iconst_2
    //   803: isub
    //   804: if_icmpgt -> 850
    //   807: iload #5
    //   809: iconst_1
    //   810: iadd
    //   811: istore #6
    //   813: aload #11
    //   815: iload #5
    //   817: iload_2
    //   818: bipush #6
    //   820: iushr
    //   821: sipush #960
    //   824: ior
    //   825: i2b
    //   826: bastore
    //   827: iload #6
    //   829: iconst_1
    //   830: iadd
    //   831: istore #5
    //   833: aload #11
    //   835: iload #6
    //   837: iload_2
    //   838: bipush #63
    //   840: iand
    //   841: sipush #128
    //   844: ior
    //   845: i2b
    //   846: bastore
    //   847: goto -> 937
    //   850: iload_2
    //   851: ldc 55296
    //   853: if_icmplt -> 862
    //   856: ldc 57343
    //   858: iload_2
    //   859: if_icmpge -> 172
    //   862: iload #5
    //   864: iload #8
    //   866: iconst_3
    //   867: isub
    //   868: if_icmpgt -> 172
    //   871: iload #5
    //   873: iconst_1
    //   874: iadd
    //   875: istore #6
    //   877: aload #11
    //   879: iload #5
    //   881: iload_2
    //   882: bipush #12
    //   884: iushr
    //   885: sipush #480
    //   888: ior
    //   889: i2b
    //   890: bastore
    //   891: iload #6
    //   893: iconst_1
    //   894: iadd
    //   895: istore #9
    //   897: aload #11
    //   899: iload #6
    //   901: iload_2
    //   902: bipush #6
    //   904: iushr
    //   905: bipush #63
    //   907: iand
    //   908: sipush #128
    //   911: ior
    //   912: i2b
    //   913: bastore
    //   914: iload #9
    //   916: iconst_1
    //   917: iadd
    //   918: istore #5
    //   920: aload #11
    //   922: iload #9
    //   924: iload_2
    //   925: bipush #63
    //   927: iand
    //   928: sipush #128
    //   931: ior
    //   932: i2b
    //   933: bastore
    //   934: goto -> 788
    //   937: iload #4
    //   939: iconst_1
    //   940: iadd
    //   941: istore #4
    //   943: goto -> 118
    //   946: iload #6
    //   948: istore #4
    //   950: goto -> 319
    // Exception table:
    //   from	to	target	type
    //   24	55	419	java/lang/ArrayIndexOutOfBoundsException
    //   83	93	419	java/lang/ArrayIndexOutOfBoundsException
    //   129	138	419	java/lang/ArrayIndexOutOfBoundsException
    //   187	222	419	java/lang/ArrayIndexOutOfBoundsException
    //   319	357	419	java/lang/ArrayIndexOutOfBoundsException
    //   357	406	419	java/lang/ArrayIndexOutOfBoundsException
    //   406	418	419	java/lang/ArrayIndexOutOfBoundsException }
  
  public static int zzgc(String paramString) {
    int i = zza(paramString);
    return zzbl(i) + i;
  }
  
  public static int zzh(int paramInt1, int paramInt2) { return zzbd(paramInt1) + zzbe(paramInt2); }
  
  public static zzya zzk(byte[] paramArrayOfByte, int paramInt1, int paramInt2) { return new zzya(paramArrayOfByte, 0, paramInt2); }
  
  public static zzya zzo(byte[] paramArrayOfByte) { return zzk(paramArrayOfByte, 0, paramArrayOfByte.length); }
  
  private final zztv zzyz() throws IOException {
    if (this.zzcer == null) {
      this.zzcer = zztv.zza(this.zzbur);
      this.zzces = this.zzbur.position();
    } else if (this.zzces != this.zzbur.position()) {
      this.zzcer.write(this.zzbur.array(), this.zzces, this.zzbur.position() - this.zzces);
      this.zzces = this.zzbur.position();
    } 
    return this.zzcer;
  }
  
  public final void zza(int paramInt, double paramDouble) throws IOException {
    zzc(paramInt, 1);
    long l = Double.doubleToLongBits(paramDouble);
    if (this.zzbur.remaining() >= 8) {
      this.zzbur.putLong(l);
      return;
    } 
    throw new zzyb(this.zzbur.position(), this.zzbur.limit());
  }
  
  public final void zza(int paramInt, float paramFloat) throws IOException {
    zzc(paramInt, 5);
    paramInt = Float.floatToIntBits(paramFloat);
    if (this.zzbur.remaining() >= 4) {
      this.zzbur.putInt(paramInt);
      return;
    } 
    throw new zzyb(this.zzbur.position(), this.zzbur.limit());
  }
  
  public final void zza(int paramInt, long paramLong) throws IOException {
    zzc(paramInt, 0);
    zzbf(paramLong);
  }
  
  public final void zza(int paramInt, zzyi paramzzyi) throws IOException {
    zzc(paramInt, 2);
    zzb(paramzzyi);
  }
  
  public final void zzb(int paramInt, String paramString) throws IOException {
    zzc(paramInt, 2);
    try {
      paramInt = zzbl(paramString.length());
      if (paramInt == zzbl(paramString.length() * 3)) {
        int i = this.zzbur.position();
        if (this.zzbur.remaining() >= paramInt) {
          this.zzbur.position(i + paramInt);
          zzd(paramString, this.zzbur);
          int j = this.zzbur.position();
          this.zzbur.position(i);
          zzcd(j - i - paramInt);
          this.zzbur.position(j);
          return;
        } 
        throw new zzyb(i + paramInt, this.zzbur.limit());
      } 
      zzcd(zza(paramString));
      zzd(paramString, this.zzbur);
      return;
    } catch (BufferOverflowException paramString) {
      zzyb zzyb = new zzyb(this.zzbur.position(), this.zzbur.limit());
      zzyb.initCause(paramString);
      throw zzyb;
    } 
  }
  
  public final void zzb(int paramInt, boolean paramBoolean) throws IOException {
    zzc(paramInt, 0);
    byte b = (byte)paramBoolean;
    if (this.zzbur.hasRemaining()) {
      this.zzbur.put(b);
      return;
    } 
    throw new zzyb(this.zzbur.position(), this.zzbur.limit());
  }
  
  public final void zzb(zzyi paramzzyi) throws IOException {
    zzcd(paramzzyi.zzzh());
    paramzzyi.zza(this);
  }
  
  public final void zzc(int paramInt1, int paramInt2) throws IOException { zzcd(paramInt1 << 3 | paramInt2); }
  
  public final void zzcd(int paramInt) throws IOException {
    while (true) {
      if ((paramInt & 0xFFFFFF80) == 0) {
        zzcc(paramInt);
        return;
      } 
      zzcc(paramInt & 0x7F | 0x80);
      paramInt >>>= 7;
    } 
  }
  
  public final void zzd(int paramInt1, int paramInt2) throws IOException {
    zzc(paramInt1, 0);
    if (paramInt2 >= 0) {
      zzcd(paramInt2);
      return;
    } 
    zzbf(paramInt2);
  }
  
  public final void zze(int paramInt, zzvv paramzzvv) throws IOException {
    zztv zztv1 = zzyz();
    zztv1.zza(paramInt, paramzzvv);
    zztv1.flush();
    this.zzces = this.zzbur.position();
  }
  
  public final void zzi(int paramInt, long paramLong) throws IOException {
    zzc(paramInt, 0);
    zzbf(paramLong);
  }
  
  public final void zzp(byte[] paramArrayOfByte) throws IOException {
    int i = paramArrayOfByte.length;
    if (this.zzbur.remaining() >= i) {
      this.zzbur.put(paramArrayOfByte, 0, i);
      return;
    } 
    throw new zzyb(this.zzbur.position(), this.zzbur.limit());
  }
  
  public final void zzza() {
    if (this.zzbur.remaining() == 0)
      return; 
    throw new IllegalStateException(String.format("Did not write as much data as expected, %s bytes remaining.", new Object[] { Integer.valueOf(this.zzbur.remaining()) }));
  }
}
