package android.support.v4.media;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.os.IBinder;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RestrictTo;
import android.support.v4.media.session.MediaSessionCompat;
import android.support.v4.os.ResultReceiver;
import android.support.v4.util.ArrayMap;
import android.support.v4.util.Pair;
import android.util.Log;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public abstract class MediaBrowserServiceCompat extends Service {
  static final boolean DEBUG = Log.isLoggable("MBServiceCompat", 3);
  
  private static final float EPSILON = 1.0E-5F;
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String KEY_MEDIA_ITEM = "media_item";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String KEY_SEARCH_RESULTS = "search_results";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final int RESULT_ERROR = -1;
  
  static final int RESULT_FLAG_ON_LOAD_ITEM_NOT_IMPLEMENTED = 2;
  
  static final int RESULT_FLAG_ON_SEARCH_NOT_IMPLEMENTED = 4;
  
  static final int RESULT_FLAG_OPTION_NOT_HANDLED = 1;
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final int RESULT_OK = 0;
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final int RESULT_PROGRESS_UPDATE = 1;
  
  public static final String SERVICE_INTERFACE = "android.media.browse.MediaBrowserService";
  
  static final String TAG = "MBServiceCompat";
  
  final ArrayMap<IBinder, ConnectionRecord> mConnections = new ArrayMap();
  
  ConnectionRecord mCurConnection;
  
  final ServiceHandler mHandler = new ServiceHandler(this);
  
  private MediaBrowserServiceImpl mImpl;
  
  MediaSessionCompat.Token mSession;
  
  void addSubscription(String paramString, ConnectionRecord paramConnectionRecord, IBinder paramIBinder, Bundle paramBundle) {
    List list2 = (List)paramConnectionRecord.subscriptions.get(paramString);
    List list1 = list2;
    if (list2 == null)
      list1 = new ArrayList(); 
    for (Pair pair : list1) {
      if (paramIBinder == pair.first && MediaBrowserCompatUtils.areSameOptions(paramBundle, (Bundle)pair.second))
        return; 
    } 
    list1.add(new Pair(paramIBinder, paramBundle));
    paramConnectionRecord.subscriptions.put(paramString, list1);
    performLoadChildren(paramString, paramConnectionRecord, paramBundle, null);
    this.mCurConnection = paramConnectionRecord;
    onSubscribe(paramString, paramBundle);
    this.mCurConnection = null;
  }
  
  List<MediaBrowserCompat.MediaItem> applyOptions(List<MediaBrowserCompat.MediaItem> paramList, Bundle paramBundle) {
    if (paramList == null)
      return null; 
    int i = paramBundle.getInt("android.media.browse.extra.PAGE", -1);
    int m = paramBundle.getInt("android.media.browse.extra.PAGE_SIZE", -1);
    if (i == -1 && m == -1)
      return paramList; 
    int k = m * i;
    int j = k + m;
    if (i < 0 || m < 1 || k >= paramList.size())
      return Collections.emptyList(); 
    i = j;
    if (j > paramList.size())
      i = paramList.size(); 
    return paramList.subList(k, i);
  }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public void attachToBaseContext(Context paramContext) { attachBaseContext(paramContext); }
  
  public void dump(FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString) {}
  
  public final Bundle getBrowserRootHints() { return this.mImpl.getBrowserRootHints(); }
  
  @NonNull
  public final MediaSessionManager.RemoteUserInfo getCurrentBrowserInfo() { return this.mImpl.getCurrentBrowserInfo(); }
  
  @Nullable
  public MediaSessionCompat.Token getSessionToken() { return this.mSession; }
  
  boolean isValidPackage(String paramString, int paramInt) {
    if (paramString == null)
      return false; 
    String[] arrayOfString = getPackageManager().getPackagesForUid(paramInt);
    int i = arrayOfString.length;
    for (paramInt = 0; paramInt < i; paramInt++) {
      if (arrayOfString[paramInt].equals(paramString))
        return true; 
    } 
    return false;
  }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public void notifyChildrenChanged(@NonNull MediaSessionManager.RemoteUserInfo paramRemoteUserInfo, @NonNull String paramString, @NonNull Bundle paramBundle) {
    if (paramRemoteUserInfo != null) {
      if (paramString != null) {
        if (paramBundle != null) {
          this.mImpl.notifyChildrenChanged(paramRemoteUserInfo, paramString, paramBundle);
          return;
        } 
        throw new IllegalArgumentException("options cannot be null in notifyChildrenChanged");
      } 
      throw new IllegalArgumentException("parentId cannot be null in notifyChildrenChanged");
    } 
    throw new IllegalArgumentException("remoteUserInfo cannot be null in notifyChildrenChanged");
  }
  
  public void notifyChildrenChanged(@NonNull String paramString) {
    if (paramString != null) {
      this.mImpl.notifyChildrenChanged(paramString, null);
      return;
    } 
    throw new IllegalArgumentException("parentId cannot be null in notifyChildrenChanged");
  }
  
  public void notifyChildrenChanged(@NonNull String paramString, @NonNull Bundle paramBundle) {
    if (paramString != null) {
      if (paramBundle != null) {
        this.mImpl.notifyChildrenChanged(paramString, paramBundle);
        return;
      } 
      throw new IllegalArgumentException("options cannot be null in notifyChildrenChanged");
    } 
    throw new IllegalArgumentException("parentId cannot be null in notifyChildrenChanged");
  }
  
  public IBinder onBind(Intent paramIntent) { return this.mImpl.onBind(paramIntent); }
  
  public void onCreate() {
    super.onCreate();
    if (Build.VERSION.SDK_INT >= 28) {
      this.mImpl = new MediaBrowserServiceImplApi28(this);
    } else if (Build.VERSION.SDK_INT >= 26) {
      this.mImpl = new MediaBrowserServiceImplApi26(this);
    } else if (Build.VERSION.SDK_INT >= 23) {
      this.mImpl = new MediaBrowserServiceImplApi23(this);
    } else if (Build.VERSION.SDK_INT >= 21) {
      this.mImpl = new MediaBrowserServiceImplApi21(this);
    } else {
      this.mImpl = new MediaBrowserServiceImplBase(this);
    } 
    this.mImpl.onCreate();
  }
  
  public void onCustomAction(@NonNull String paramString, Bundle paramBundle, @NonNull Result<Bundle> paramResult) { paramResult.sendError(null); }
  
  @Nullable
  public abstract BrowserRoot onGetRoot(@NonNull String paramString, int paramInt, @Nullable Bundle paramBundle);
  
  public abstract void onLoadChildren(@NonNull String paramString, @NonNull Result<List<MediaBrowserCompat.MediaItem>> paramResult);
  
  public void onLoadChildren(@NonNull String paramString, @NonNull Result<List<MediaBrowserCompat.MediaItem>> paramResult, @NonNull Bundle paramBundle) {
    paramResult.setFlags(1);
    onLoadChildren(paramString, paramResult);
  }
  
  public void onLoadItem(String paramString, @NonNull Result<MediaBrowserCompat.MediaItem> paramResult) {
    paramResult.setFlags(2);
    paramResult.sendResult(null);
  }
  
  public void onSearch(@NonNull String paramString, Bundle paramBundle, @NonNull Result<List<MediaBrowserCompat.MediaItem>> paramResult) {
    paramResult.setFlags(4);
    paramResult.sendResult(null);
  }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public void onSubscribe(String paramString, Bundle paramBundle) {}
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public void onUnsubscribe(String paramString) {}
  
  void performCustomAction(String paramString, Bundle paramBundle, ConnectionRecord paramConnectionRecord, ResultReceiver paramResultReceiver) {
    Object object = new Object(this, paramString, paramResultReceiver);
    this.mCurConnection = paramConnectionRecord;
    onCustomAction(paramString, paramBundle, object);
    this.mCurConnection = null;
    if (object.isDone())
      return; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("onCustomAction must call detach() or sendResult() or sendError() before returning for action=");
    stringBuilder.append(paramString);
    stringBuilder.append(" extras=");
    stringBuilder.append(paramBundle);
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  void performLoadChildren(String paramString, ConnectionRecord paramConnectionRecord, Bundle paramBundle1, Bundle paramBundle2) {
    Object object = new Object(this, paramString, paramConnectionRecord, paramString, paramBundle1, paramBundle2);
    this.mCurConnection = paramConnectionRecord;
    if (paramBundle1 == null) {
      onLoadChildren(paramString, object);
    } else {
      onLoadChildren(paramString, object, paramBundle1);
    } 
    this.mCurConnection = null;
    if (object.isDone())
      return; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("onLoadChildren must call detach() or sendResult() before returning for package=");
    stringBuilder.append(paramConnectionRecord.pkg);
    stringBuilder.append(" id=");
    stringBuilder.append(paramString);
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  void performLoadItem(String paramString, ConnectionRecord paramConnectionRecord, ResultReceiver paramResultReceiver) {
    Object object = new Object(this, paramString, paramResultReceiver);
    this.mCurConnection = paramConnectionRecord;
    onLoadItem(paramString, object);
    this.mCurConnection = null;
    if (object.isDone())
      return; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("onLoadItem must call detach() or sendResult() before returning for id=");
    stringBuilder.append(paramString);
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  void performSearch(String paramString, Bundle paramBundle, ConnectionRecord paramConnectionRecord, ResultReceiver paramResultReceiver) {
    Object object = new Object(this, paramString, paramResultReceiver);
    this.mCurConnection = paramConnectionRecord;
    onSearch(paramString, paramBundle, object);
    this.mCurConnection = null;
    if (object.isDone())
      return; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("onSearch must call detach() or sendResult() before returning for query=");
    stringBuilder.append(paramString);
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  boolean removeSubscription(String paramString, ConnectionRecord paramConnectionRecord, IBinder paramIBinder) {
    int j = 1;
    byte b = 0;
    i = 0;
    if (paramIBinder == null)
      try {
        Object object = paramConnectionRecord.subscriptions.remove(paramString);
        if (object != null) {
          i = j;
        } else {
          i = 0;
        } 
        return i;
      } finally {
        this.mCurConnection = paramConnectionRecord;
        onUnsubscribe(paramString);
        this.mCurConnection = null;
      }  
    List list = (List)paramConnectionRecord.subscriptions.get(paramString);
    j = b;
    if (list != null) {
      byte b1;
      Iterator iterator = list.iterator();
      while (iterator.hasNext()) {
        if (paramIBinder == ((Pair)iterator.next()).first) {
          iterator.remove();
          b1 = 1;
        } 
      } 
      j = b1;
      if (list.size() == 0) {
        paramConnectionRecord.subscriptions.remove(paramString);
        j = b1;
      } 
    } 
    this.mCurConnection = paramConnectionRecord;
    onUnsubscribe(paramString);
    this.mCurConnection = null;
    return j;
  }
  
  public void setSessionToken(MediaSessionCompat.Token paramToken) {
    if (paramToken != null) {
      if (this.mSession == null) {
        this.mSession = paramToken;
        this.mImpl.setSessionToken(paramToken);
        return;
      } 
      throw new IllegalStateException("The session token has already been set.");
    } 
    throw new IllegalArgumentException("Session token may not be null.");
  }
}
