package com.bumptech.glide.load.resource.bitmap;

import android.annotation.TargetApi;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.RectF;
import android.media.ExifInterface;
import android.os.Build;
import android.util.Log;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;

public final class TransformationUtils {
  public static final int PAINT_FLAGS = 6;
  
  private static final String TAG = "TransformationUtils";
  
  public static Bitmap centerCrop(Bitmap paramBitmap1, Bitmap paramBitmap2, int paramInt1, int paramInt2) {
    float f2;
    float f1;
    if (paramBitmap2 == null)
      return null; 
    if (paramBitmap2.getWidth() == paramInt1 && paramBitmap2.getHeight() == paramInt2)
      return paramBitmap2; 
    Matrix matrix = new Matrix();
    int i = paramBitmap2.getWidth();
    int j = paramBitmap2.getHeight();
    float f3 = 0.0F;
    if (i * paramInt2 > j * paramInt1) {
      f1 = paramInt2 / paramBitmap2.getHeight();
      f2 = (paramInt1 - paramBitmap2.getWidth() * f1) * 0.5F;
    } else {
      f1 = paramInt1 / paramBitmap2.getWidth();
      f3 = (paramInt2 - paramBitmap2.getHeight() * f1) * 0.5F;
      f2 = 0.0F;
    } 
    matrix.setScale(f1, f1);
    matrix.postTranslate((int)(f2 + 0.5F), (int)(f3 + 0.5F));
    if (paramBitmap1 == null)
      paramBitmap1 = Bitmap.createBitmap(paramInt1, paramInt2, getSafeConfig(paramBitmap2)); 
    setAlpha(paramBitmap2, paramBitmap1);
    (new Canvas(paramBitmap1)).drawBitmap(paramBitmap2, matrix, new Paint(6));
    return paramBitmap1;
  }
  
  public static Bitmap fitCenter(Bitmap paramBitmap, BitmapPool paramBitmapPool, int paramInt1, int paramInt2) {
    if (paramBitmap.getWidth() == paramInt1 && paramBitmap.getHeight() == paramInt2) {
      if (Log.isLoggable("TransformationUtils", 2))
        Log.v("TransformationUtils", "requested target size matches input, returning input"); 
      return paramBitmap;
    } 
    float f = Math.min(paramInt1 / paramBitmap.getWidth(), paramInt2 / paramBitmap.getHeight());
    int i = (int)(paramBitmap.getWidth() * f);
    int j = (int)(paramBitmap.getHeight() * f);
    if (paramBitmap.getWidth() == i && paramBitmap.getHeight() == j) {
      if (Log.isLoggable("TransformationUtils", 2))
        Log.v("TransformationUtils", "adjusted target size matches input, returning input"); 
      return paramBitmap;
    } 
    Bitmap.Config config = getSafeConfig(paramBitmap);
    Bitmap bitmap2 = paramBitmapPool.get(i, j, config);
    Bitmap bitmap1 = bitmap2;
    if (bitmap2 == null)
      bitmap1 = Bitmap.createBitmap(i, j, config); 
    setAlpha(paramBitmap, bitmap1);
    if (Log.isLoggable("TransformationUtils", 2)) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("request: ");
      stringBuilder.append(paramInt1);
      stringBuilder.append("x");
      stringBuilder.append(paramInt2);
      Log.v("TransformationUtils", stringBuilder.toString());
      stringBuilder = new StringBuilder();
      stringBuilder.append("toFit:   ");
      stringBuilder.append(paramBitmap.getWidth());
      stringBuilder.append("x");
      stringBuilder.append(paramBitmap.getHeight());
      Log.v("TransformationUtils", stringBuilder.toString());
      stringBuilder = new StringBuilder();
      stringBuilder.append("toReuse: ");
      stringBuilder.append(bitmap1.getWidth());
      stringBuilder.append("x");
      stringBuilder.append(bitmap1.getHeight());
      Log.v("TransformationUtils", stringBuilder.toString());
      stringBuilder = new StringBuilder();
      stringBuilder.append("minPct:   ");
      stringBuilder.append(f);
      Log.v("TransformationUtils", stringBuilder.toString());
    } 
    Canvas canvas = new Canvas(bitmap1);
    Matrix matrix = new Matrix();
    matrix.setScale(f, f);
    canvas.drawBitmap(paramBitmap, matrix, new Paint(6));
    return bitmap1;
  }
  
  public static int getExifOrientationDegrees(int paramInt) {
    switch (paramInt) {
      default:
        return 0;
      case 7:
      case 8:
        return 270;
      case 5:
      case 6:
        return 90;
      case 3:
      case 4:
        break;
    } 
    return 180;
  }
  
  @Deprecated
  @TargetApi(5)
  public static int getOrientation(String paramString) {
    try {
      return getExifOrientationDegrees((new ExifInterface(paramString)).getAttributeInt("Orientation", 0));
    } catch (Exception exception) {
      if (Log.isLoggable("TransformationUtils", 6)) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Unable to get orientation for image with path=");
        stringBuilder.append(paramString);
        Log.e("TransformationUtils", stringBuilder.toString(), exception);
      } 
      return 0;
    } 
  }
  
  private static Bitmap.Config getSafeConfig(Bitmap paramBitmap) { return (paramBitmap.getConfig() != null) ? paramBitmap.getConfig() : Bitmap.Config.ARGB_8888; }
  
  static void initializeMatrixForRotation(int paramInt, Matrix paramMatrix) {
    switch (paramInt) {
      default:
        return;
      case 8:
        paramMatrix.setRotate(-90.0F);
        return;
      case 7:
        paramMatrix.setRotate(-90.0F);
        paramMatrix.postScale(-1.0F, 1.0F);
        return;
      case 6:
        paramMatrix.setRotate(90.0F);
        return;
      case 5:
        paramMatrix.setRotate(90.0F);
        paramMatrix.postScale(-1.0F, 1.0F);
        return;
      case 4:
        paramMatrix.setRotate(180.0F);
        paramMatrix.postScale(-1.0F, 1.0F);
        return;
      case 3:
        paramMatrix.setRotate(180.0F);
        return;
      case 2:
        break;
    } 
    paramMatrix.setScale(-1.0F, 1.0F);
  }
  
  @Deprecated
  public static Bitmap orientImage(String paramString, Bitmap paramBitmap) { return rotateImage(paramBitmap, getOrientation(paramString)); }
  
  public static Bitmap rotateImage(Bitmap paramBitmap, int paramInt) {
    if (paramInt != 0)
      try {
        Matrix matrix = new Matrix();
        matrix.setRotate(paramInt);
        return Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), matrix, true);
      } catch (Exception exception) {
        if (Log.isLoggable("TransformationUtils", 6))
          Log.e("TransformationUtils", "Exception when trying to orient image", exception); 
      }  
    return paramBitmap;
  }
  
  public static Bitmap rotateImageExif(Bitmap paramBitmap, BitmapPool paramBitmapPool, int paramInt) {
    Matrix matrix = new Matrix();
    initializeMatrixForRotation(paramInt, matrix);
    if (matrix.isIdentity())
      return paramBitmap; 
    RectF rectF = new RectF(0.0F, 0.0F, paramBitmap.getWidth(), paramBitmap.getHeight());
    matrix.mapRect(rectF);
    paramInt = Math.round(rectF.width());
    int i = Math.round(rectF.height());
    Bitmap.Config config = getSafeConfig(paramBitmap);
    Bitmap bitmap2 = paramBitmapPool.get(paramInt, i, config);
    Bitmap bitmap1 = bitmap2;
    if (bitmap2 == null)
      bitmap1 = Bitmap.createBitmap(paramInt, i, config); 
    matrix.postTranslate(-rectF.left, -rectF.top);
    (new Canvas(bitmap1)).drawBitmap(paramBitmap, matrix, new Paint(6));
    return bitmap1;
  }
  
  @TargetApi(12)
  public static void setAlpha(Bitmap paramBitmap1, Bitmap paramBitmap2) {
    if (Build.VERSION.SDK_INT >= 12 && paramBitmap2 != null)
      paramBitmap2.setHasAlpha(paramBitmap1.hasAlpha()); 
  }
}
