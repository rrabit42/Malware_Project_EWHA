package com.google.android.gms.internal.ads;

import android.support.annotation.Nullable;
import com.google.android.gms.ads.internal.zzbv;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import javax.annotation.ParametersAreNonnullByDefault;

@zzadh
@ParametersAreNonnullByDefault
public final class zzgf {
  private final Object mLock = new Object();
  
  private int zzahm;
  
  private List<zzge> zzahn = new LinkedList();
  
  public final boolean zza(zzge paramzzge) {
    synchronized (this.mLock) {
      if (this.zzahn.contains(paramzzge))
        return true; 
      return false;
    } 
  }
  
  public final boolean zzb(zzge paramzzge) {
    synchronized (this.mLock) {
      Iterator iterator = this.zzahn.iterator();
      while (iterator.hasNext()) {
        zzge zzge1 = (zzge)iterator.next();
        zzna zzna = zznk.zzawq;
        if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue() && !zzbv.zzeo().zzqh().zzqu()) {
          if (paramzzge != zzge1 && zzge1.getSignature().equals(paramzzge.getSignature())) {
            iterator.remove();
            return true;
          } 
          continue;
        } 
        zzna = zznk.zzaws;
        if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue() && !zzbv.zzeo().zzqh().zzqw() && paramzzge != zzge1 && zzge1.zzgp().equals(paramzzge.zzgp())) {
          iterator.remove();
          return true;
        } 
      } 
      return false;
    } 
  }
  
  public final void zzc(zzge paramzzge) {
    synchronized (this.mLock) {
      if (this.zzahn.size() >= 10) {
        int j = this.zzahn.size();
        StringBuilder stringBuilder = new StringBuilder(41);
        stringBuilder.append("Queue is full, current size = ");
        stringBuilder.append(j);
        zzakb.zzck(stringBuilder.toString());
        this.zzahn.remove(0);
      } 
      int i = this.zzahm;
      this.zzahm = i + 1;
      paramzzge.zzo(i);
      this.zzahn.add(paramzzge);
      return;
    } 
  }
  
  @Nullable
  public final zzge zzgv() {
    synchronized (this.mLock) {
      int i = this.zzahn.size();
      zzge zzge = null;
      if (i == 0) {
        zzakb.zzck("Queue empty");
        return null;
      } 
      i = this.zzahn.size();
      int j = 0;
      if (i >= 2) {
        int k = Integer.MIN_VALUE;
        Iterator iterator = this.zzahn.iterator();
        i = 0;
        while (true) {
          int m;
          if (iterator.hasNext()) {
            zzge zzge1 = (zzge)iterator.next();
            int n = zzge1.getScore();
            m = k;
            if (n > k) {
              j = i;
              zzge = zzge1;
              m = n;
            } 
          } else {
            this.zzahn.remove(j);
            return zzge;
          } 
          i++;
          k = m;
        } 
      } 
      zzge = (zzge)this.zzahn.get(0);
      zzge.zzgq();
      return zzge;
    } 
  }
}
