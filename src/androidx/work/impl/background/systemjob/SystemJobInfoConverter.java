package androidx.work.impl.background.systemjob;

import android.app.job.JobInfo;
import android.content.ComponentName;
import android.content.Context;
import android.os.Build;
import android.os.PersistableBundle;
import android.support.annotation.NonNull;
import android.support.annotation.RequiresApi;
import android.support.annotation.RestrictTo;
import android.support.annotation.VisibleForTesting;
import androidx.work.BackoffPolicy;
import androidx.work.Constraints;
import androidx.work.ContentUriTriggers;
import androidx.work.Logger;
import androidx.work.NetworkType;
import androidx.work.impl.model.WorkSpec;
import java.util.Iterator;

@RequiresApi(api = 23)
@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
class SystemJobInfoConverter {
  static final String EXTRA_IS_PERIODIC = "EXTRA_IS_PERIODIC";
  
  static final String EXTRA_WORK_SPEC_ID = "EXTRA_WORK_SPEC_ID";
  
  private static final String TAG = Logger.tagWithPrefix("SystemJobInfoConverter");
  
  private final ComponentName mWorkServiceComponent;
  
  @VisibleForTesting(otherwise = 3)
  SystemJobInfoConverter(@NonNull Context paramContext) { this.mWorkServiceComponent = new ComponentName(paramContext.getApplicationContext(), SystemJobService.class); }
  
  @RequiresApi(24)
  private static JobInfo.TriggerContentUri convertContentUriTrigger(ContentUriTriggers.Trigger paramTrigger) { throw new RuntimeException("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.copyTypes(TypeTransformer.java:311)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.fixTypes(TypeTransformer.java:226)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:207)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n"); }
  
  static int convertNetworkType(NetworkType paramNetworkType) {
    int i = null.$SwitchMap$androidx$work$NetworkType[paramNetworkType.ordinal()];
    if (i != 1) {
      if (i != 2) {
        if (i != 3) {
          if (i != 4) {
            if (i == 5 && Build.VERSION.SDK_INT >= 26)
              return 4; 
          } else if (Build.VERSION.SDK_INT >= 24) {
            return 3;
          } 
          Logger.get().debug(TAG, String.format("API version too low. Cannot convert network type value %s", new Object[] { paramNetworkType }), new Throwable[0]);
          return 1;
        } 
        return 2;
      } 
      return 1;
    } 
    return 0;
  }
  
  JobInfo convert(WorkSpec paramWorkSpec, int paramInt) {
    Constraints constraints = paramWorkSpec.constraints;
    int i = convertNetworkType(constraints.getRequiredNetworkType());
    PersistableBundle persistableBundle = new PersistableBundle();
    persistableBundle.putString("EXTRA_WORK_SPEC_ID", paramWorkSpec.id);
    persistableBundle.putBoolean("EXTRA_IS_PERIODIC", paramWorkSpec.isPeriodic());
    JobInfo.Builder builder = (new JobInfo.Builder(paramInt, this.mWorkServiceComponent)).setRequiredNetworkType(i).setRequiresCharging(constraints.requiresCharging()).setRequiresDeviceIdle(constraints.requiresDeviceIdle()).setExtras(persistableBundle);
    if (!constraints.requiresDeviceIdle()) {
      if (paramWorkSpec.backoffPolicy == BackoffPolicy.LINEAR) {
        paramInt = 0;
      } else {
        paramInt = 1;
      } 
      builder.setBackoffCriteria(paramWorkSpec.backoffDelayDuration, paramInt);
    } 
    if (paramWorkSpec.isPeriodic()) {
      if (Build.VERSION.SDK_INT >= 24) {
        builder.setPeriodic(paramWorkSpec.intervalDuration, paramWorkSpec.flexDuration);
      } else {
        Logger.get().debug(TAG, "Flex duration is currently not supported before API 24. Ignoring.", new Throwable[0]);
        builder.setPeriodic(paramWorkSpec.intervalDuration);
      } 
    } else {
      builder.setMinimumLatency(paramWorkSpec.initialDelay);
    } 
    if (Build.VERSION.SDK_INT >= 24 && constraints.hasContentUriTriggers()) {
      Iterator iterator = constraints.getContentUriTriggers().getTriggers().iterator();
      while (iterator.hasNext())
        builder.addTriggerContentUri(convertContentUriTrigger((ContentUriTriggers.Trigger)iterator.next())); 
      builder.setTriggerContentUpdateDelay(constraints.getTriggerContentUpdateDelay());
      builder.setTriggerContentMaxDelay(constraints.getTriggerMaxContentDelay());
    } 
    builder.setPersisted(false);
    if (Build.VERSION.SDK_INT >= 26) {
      builder.setRequiresBatteryNotLow(constraints.requiresBatteryNotLow());
      builder.setRequiresStorageNotLow(constraints.requiresStorageNotLow());
    } 
    return builder.build();
  }
}
