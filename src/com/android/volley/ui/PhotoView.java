package com.android.volley.ui;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.support.v4.view.GestureDetectorCompat;
import android.support.v4.view.ScaleGestureDetectorCompat;
import android.util.AttributeSet;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.ScaleGestureDetector;
import android.view.View;
import android.view.ViewConfiguration;
import com.android.volley.R;
import com.android.volley.misc.Utils;

public class PhotoView extends NetworkImageView implements GestureDetector.OnGestureListener, GestureDetector.OnDoubleTapListener, ScaleGestureDetector.OnScaleGestureListener, Utils.HorizontallyScrollable {
  private static final float CROPPED_SIZE = 256.0F;
  
  private static final float DOUBLE_TAP_SCALE_FACTOR = 1.5F;
  
  private static final long ROTATE_ANIMATION_DURATION = 500L;
  
  private static final long SNAP_DELAY = 250L;
  
  private static final long SNAP_DURATION = 100L;
  
  private static final float SNAP_THRESHOLD = 20.0F;
  
  private static final long ZOOM_ANIMATION_DURATION = 300L;
  
  private static Paint sCropDimPaint;
  
  private static Paint sCropPaint;
  
  private static int sCropSize;
  
  private static boolean sInitialized;
  
  private static int sTouchSlopSquare;
  
  private static Bitmap sVideoImage;
  
  private static Bitmap sVideoNotReadyImage;
  
  private boolean mAllowCrop;
  
  private Rect mCropRect = new Rect();
  
  private int mCropSize;
  
  private boolean mDoubleTapDebounce;
  
  private boolean mDoubleTapOccurred;
  
  private boolean mDoubleTapToZoomEnabled = true;
  
  private float mDownFocusX;
  
  private float mDownFocusY;
  
  private Matrix mDrawMatrix;
  
  private Drawable mDrawable;
  
  private View.OnClickListener mExternalClickListener;
  
  private int mFixedHeight = -1;
  
  private boolean mFullScreen;
  
  private GestureDetectorCompat mGestureDetector;
  
  private boolean mHaveLayout;
  
  private boolean mIsDoubleTouch;
  
  private Matrix mMatrix = new Matrix();
  
  private float mMaxInitialScaleFactor = 2.0F;
  
  private float mMaxScale;
  
  private float mMinScale;
  
  private Matrix mOriginalMatrix = new Matrix();
  
  private boolean mQuickScaleEnabled;
  
  private RotateRunnable mRotateRunnable;
  
  private float mRotation;
  
  private ScaleGestureDetector mScaleGetureDetector;
  
  private ScaleRunnable mScaleRunnable;
  
  private SnapRunnable mSnapRunnable;
  
  private RectF mTempDst = new RectF();
  
  private RectF mTempSrc = new RectF();
  
  private boolean mTransformsEnabled;
  
  private RectF mTranslateRect = new RectF();
  
  private TranslateRunnable mTranslateRunnable;
  
  private float[] mValues = new float[9];
  
  private byte[] mVideoBlob;
  
  private boolean mVideoReady;
  
  public PhotoView(Context paramContext) {
    super(paramContext);
    initialize();
  }
  
  public PhotoView(Context paramContext, AttributeSet paramAttributeSet) {
    super(paramContext, paramAttributeSet);
    initialize();
  }
  
  public PhotoView(Context paramContext, AttributeSet paramAttributeSet, int paramInt) {
    super(paramContext, paramAttributeSet, paramInt);
    initialize();
  }
  
  private void configureBounds(boolean paramBoolean) {
    Drawable drawable = this.mDrawable;
    if (drawable != null) {
      if (!this.mHaveLayout)
        return; 
      int j = drawable.getIntrinsicWidth();
      int k = this.mDrawable.getIntrinsicHeight();
      int i = getWidth();
      int m = getHeight();
      if ((j < 0 || i == j) && (k < 0 || m == k)) {
        i = 1;
      } else {
        i = 0;
      } 
      this.mDrawable.setBounds(0, 0, j, k);
      if (paramBoolean || (this.mMinScale == 0.0F && this.mDrawable != null && this.mHaveLayout)) {
        generateMatrix();
        generateScale();
      } 
      this.mMatrix.postRotate(getRotationDegree(), (getWidth() / 2), (getHeight() / 2));
      if (i != 0 || this.mMatrix.isIdentity()) {
        this.mDrawMatrix = null;
        return;
      } 
      this.mDrawMatrix = this.mMatrix;
      return;
    } 
  }
  
  private void generateMatrix() {
    boolean bool;
    int j;
    int i;
    int k = this.mDrawable.getIntrinsicWidth();
    int m = this.mDrawable.getIntrinsicHeight();
    if (this.mAllowCrop) {
      i = sCropSize;
    } else {
      i = getWidth();
    } 
    if (this.mAllowCrop) {
      j = sCropSize;
    } else {
      j = getHeight();
    } 
    if ((k < 0 || i == k) && (m < 0 || j == m)) {
      bool = true;
    } else {
      bool = false;
    } 
    if (bool && !this.mAllowCrop) {
      this.mMatrix.reset();
    } else {
      RectF rectF = this.mTempSrc;
      float f1 = k;
      float f2 = m;
      rectF.set(0.0F, 0.0F, f1, f2);
      if (this.mAllowCrop) {
        this.mTempDst.set(this.mCropRect);
      } else {
        this.mTempDst.set(0.0F, 0.0F, i, j);
      } 
      float f3 = (i / 2);
      float f4 = this.mMaxInitialScaleFactor;
      float f5 = f1 * f4 / 2.0F;
      float f6 = (j / 2);
      rectF = new RectF(f3 - f5, f6 - f2 * f4 / 2.0F, f3 + f1 * f4 / 2.0F, f6 + f2 * f4 / 2.0F);
      if (this.mTempDst.contains(rectF)) {
        this.mMatrix.setRectToRect(this.mTempSrc, rectF, Matrix.ScaleToFit.CENTER);
      } else {
        this.mMatrix.setRectToRect(this.mTempSrc, this.mTempDst, Matrix.ScaleToFit.CENTER);
      } 
    } 
    this.mOriginalMatrix.set(this.mMatrix);
  }
  
  private void generateScale() {
    int j;
    int i;
    int k = this.mDrawable.getIntrinsicWidth();
    int m = this.mDrawable.getIntrinsicHeight();
    if (this.mAllowCrop) {
      i = getCropSize();
    } else {
      i = getWidth();
    } 
    if (this.mAllowCrop) {
      j = getCropSize();
    } else {
      j = getHeight();
    } 
    if (k < i && m < j && !this.mAllowCrop) {
      this.mMinScale = 1.0F;
    } else {
      this.mMinScale = getScale();
    } 
    this.mMaxScale = Math.max(this.mMinScale * 8.0F, 8.0F);
  }
  
  private int getCropSize() {
    int i = this.mCropSize;
    return (i > 0) ? i : sCropSize;
  }
  
  private float getScale() { return (float)Math.sqrt(((float)Math.pow(getValue(this.mMatrix, 0), 2.0D) + (float)Math.pow(getValue(this.mMatrix, 3), 2.0D))); }
  
  private float getValue(Matrix paramMatrix, int paramInt) {
    paramMatrix.getValues(this.mValues);
    return this.mValues[paramInt];
  }
  
  private void initialize() {
    Context context = getContext();
    if (!sInitialized) {
      sInitialized = true;
      Resources resources = context.getApplicationContext().getResources();
      sCropSize = resources.getDimensionPixelSize(R.dimen.photo_crop_width);
      sCropDimPaint = new Paint();
      sCropDimPaint.setAntiAlias(true);
      sCropDimPaint.setColor(resources.getColor(R.color.photo_crop_dim_color));
      sCropDimPaint.setStyle(Paint.Style.FILL);
      sCropPaint = new Paint();
      sCropPaint.setAntiAlias(true);
      sCropPaint.setColor(resources.getColor(R.color.photo_crop_highlight_color));
      sCropPaint.setStyle(Paint.Style.STROKE);
      sCropPaint.setStrokeWidth(resources.getDimension(R.dimen.photo_crop_stroke_width));
      int i = ViewConfiguration.get(context).getScaledTouchSlop();
      sTouchSlopSquare = i * i;
    } 
    this.mGestureDetector = new GestureDetectorCompat(context, this, null);
    this.mScaleGetureDetector = new ScaleGestureDetector(context, this);
    this.mQuickScaleEnabled = ScaleGestureDetectorCompat.isQuickScaleEnabled(this.mScaleGetureDetector);
    this.mScaleRunnable = new ScaleRunnable(this);
    this.mTranslateRunnable = new TranslateRunnable(this);
    this.mSnapRunnable = new SnapRunnable(this);
    this.mRotateRunnable = new RotateRunnable(this);
  }
  
  private void rotate(float paramFloat, boolean paramBoolean) {
    if (paramBoolean) {
      this.mRotateRunnable.start(paramFloat);
      return;
    } 
    this.mRotation += paramFloat;
    this.mMatrix.postRotate(paramFloat, (getWidth() / 2), (getHeight() / 2));
    invalidate();
  }
  
  private void scale(float paramFloat1, float paramFloat2, float paramFloat3) {
    this.mMatrix.postRotate(-this.mRotation, (getWidth() / 2), (getHeight() / 2));
    paramFloat1 = Math.min(Math.max(paramFloat1, this.mMinScale), this.mMaxScale) / getScale();
    this.mMatrix.postScale(paramFloat1, paramFloat1, paramFloat2, paramFloat3);
    snap();
    this.mMatrix.postRotate(this.mRotation, (getWidth() / 2), (getHeight() / 2));
    invalidate();
  }
  
  private boolean scale(MotionEvent paramMotionEvent) {
    boolean bool;
    if (this.mDoubleTapToZoomEnabled && this.mTransformsEnabled && this.mDoubleTapOccurred) {
      if (!this.mDoubleTapDebounce) {
        float f1 = getScale();
        float f2 = Math.max(this.mMinScale, 1.5F * f1);
        f2 = Math.min(this.mMaxScale, f2);
        this.mScaleRunnable.start(f1, f2, paramMotionEvent.getX(), paramMotionEvent.getY());
        bool = true;
      } else {
        bool = false;
      } 
      this.mDoubleTapDebounce = false;
    } else {
      bool = false;
    } 
    this.mDoubleTapOccurred = false;
    return bool;
  }
  
  private void snap() {
    int i;
    float f1;
    this.mTranslateRect.set(this.mTempSrc);
    this.mMatrix.mapRect(this.mTranslateRect);
    boolean bool = this.mAllowCrop;
    float f3 = 0.0F;
    if (bool) {
      f1 = this.mCropRect.left;
    } else {
      f1 = 0.0F;
    } 
    if (this.mAllowCrop) {
      i = this.mCropRect.right;
    } else {
      i = getWidth();
    } 
    float f2 = i;
    float f4 = this.mTranslateRect.left;
    float f5 = this.mTranslateRect.right;
    float f6 = f2 - f1;
    if (f5 - f4 < f6) {
      f1 += (f6 - f5 + f4) / 2.0F;
    } else if (f4 > f1) {
      f1 -= f4;
    } else if (f5 < f2) {
      f1 = f2 - f5;
    } else {
      f1 = 0.0F;
    } 
    if (this.mAllowCrop) {
      f2 = this.mCropRect.top;
    } else {
      f2 = 0.0F;
    } 
    if (this.mAllowCrop) {
      i = this.mCropRect.bottom;
    } else {
      i = getHeight();
    } 
    f4 = i;
    f6 = this.mTranslateRect.top;
    f5 = this.mTranslateRect.bottom;
    float f7 = f4 - f2;
    if (f5 - f6 < f7) {
      f2 += (f7 - f5 + f6) / 2.0F;
    } else if (f6 > f2) {
      f2 -= f6;
    } else {
      f2 = f3;
      if (f5 < f4)
        f2 = f4 - f5; 
    } 
    if (Math.abs(f1) > 20.0F || Math.abs(f2) > 20.0F) {
      this.mSnapRunnable.start(f1, f2);
      return;
    } 
    this.mMatrix.postTranslate(f1, f2);
    invalidate();
  }
  
  private boolean translate(float paramFloat1, float paramFloat2) {
    int i;
    float f1;
    this.mTranslateRect.set(this.mTempSrc);
    this.mMatrix.mapRect(this.mTranslateRect);
    boolean bool = this.mAllowCrop;
    float f2 = 0.0F;
    if (bool) {
      f1 = this.mCropRect.left;
    } else {
      f1 = 0.0F;
    } 
    if (this.mAllowCrop) {
      i = this.mCropRect.right;
    } else {
      i = getWidth();
    } 
    float f3 = i;
    float f4 = this.mTranslateRect.left;
    float f5 = this.mTranslateRect.right;
    if (this.mAllowCrop) {
      f1 = Math.max(f1 - this.mTranslateRect.right, Math.min(f3 - this.mTranslateRect.left, paramFloat1));
    } else {
      float f = f3 - f1;
      if (f5 - f4 < f) {
        f1 += (f - f5 + f4) / 2.0F;
      } else {
        f1 = Math.max(f3 - f5, Math.min(f1 - f4, paramFloat1));
      } 
    } 
    if (this.mAllowCrop)
      f2 = this.mCropRect.top; 
    if (this.mAllowCrop) {
      i = this.mCropRect.bottom;
    } else {
      i = getHeight();
    } 
    f3 = i;
    f4 = this.mTranslateRect.top;
    f5 = this.mTranslateRect.bottom;
    if (this.mAllowCrop) {
      f2 = Math.max(f2 - this.mTranslateRect.bottom, Math.min(f3 - this.mTranslateRect.top, paramFloat2));
    } else {
      float f = f3 - f2;
      if (f5 - f4 < f) {
        f2 += (f - f5 + f4) / 2.0F;
      } else {
        f2 = Math.max(f3 - f5, Math.min(f2 - f4, paramFloat2));
      } 
    } 
    this.mMatrix.postTranslate(f1, f2);
    invalidate();
    return (f1 == paramFloat1 && f2 == paramFloat2);
  }
  
  public void bindDrawable(Drawable paramDrawable) { // Byte code:
    //   0: aload_1
    //   1: ifnull -> 46
    //   4: aload_0
    //   5: getfield mDrawable : Landroid/graphics/drawable/Drawable;
    //   8: astore_3
    //   9: aload_1
    //   10: aload_3
    //   11: if_acmpeq -> 46
    //   14: aload_3
    //   15: ifnull -> 23
    //   18: aload_3
    //   19: aconst_null
    //   20: invokevirtual setCallback : (Landroid/graphics/drawable/Drawable$Callback;)V
    //   23: aload_0
    //   24: aload_1
    //   25: putfield mDrawable : Landroid/graphics/drawable/Drawable;
    //   28: aload_0
    //   29: fconst_0
    //   30: putfield mMinScale : F
    //   33: aload_0
    //   34: getfield mDrawable : Landroid/graphics/drawable/Drawable;
    //   37: aload_0
    //   38: invokevirtual setCallback : (Landroid/graphics/drawable/Drawable$Callback;)V
    //   41: iconst_1
    //   42: istore_2
    //   43: goto -> 48
    //   46: iconst_0
    //   47: istore_2
    //   48: aload_0
    //   49: iload_2
    //   50: invokespecial configureBounds : (Z)V
    //   53: aload_0
    //   54: invokevirtual invalidate : ()V
    //   57: return }
  
  public void bindPhoto(Bitmap paramBitmap) {
    byte b;
    boolean bool = this.mDrawable instanceof BitmapDrawable;
    if (!bool) {
      b = 1;
    } else {
      b = 0;
    } 
    Drawable drawable = this.mDrawable;
    int i = b;
    if (drawable != null) {
      i = b;
      if (bool) {
        if (paramBitmap == ((BitmapDrawable)drawable).getBitmap())
          return; 
        if (paramBitmap != null && (this.mDrawable.getIntrinsicWidth() != paramBitmap.getWidth() || this.mDrawable.getIntrinsicHeight() != paramBitmap.getHeight())) {
          b = 1;
        } else {
          b = 0;
        } 
        this.mMinScale = 0.0F;
        this.mDrawable = null;
        i = b;
      } 
    } 
    if (this.mDrawable == null && paramBitmap != null)
      this.mDrawable = new BitmapDrawable(getResources(), paramBitmap); 
    configureBounds(i);
    invalidate();
  }
  
  public void bindResource(int paramInt) { bindDrawable(getResources().getDrawable(paramInt)); }
  
  public void clear() {
    this.mGestureDetector = null;
    this.mScaleGetureDetector = null;
    this.mDrawable = null;
    this.mScaleRunnable.stop();
    this.mScaleRunnable = null;
    this.mTranslateRunnable.stop();
    this.mTranslateRunnable = null;
    this.mSnapRunnable.stop();
    this.mSnapRunnable = null;
    this.mRotateRunnable.stop();
    this.mRotateRunnable = null;
    setOnClickListener(null);
    this.mExternalClickListener = null;
    this.mDoubleTapOccurred = false;
  }
  
  public void enableAllowCrop(boolean paramBoolean) {
    if (!paramBoolean || !this.mHaveLayout) {
      if (paramBoolean || !this.mAllowCrop) {
        this.mAllowCrop = paramBoolean;
        return;
      } 
      throw new IllegalArgumentException("Cannot unset crop mode");
    } 
    throw new IllegalArgumentException("Cannot set crop after view has been laid out");
  }
  
  public void enableImageTransforms(boolean paramBoolean) {
    this.mTransformsEnabled = paramBoolean;
    if (!this.mTransformsEnabled)
      resetTransformations(); 
  }
  
  public int getActualHeight() {
    Drawable drawable = this.mDrawable;
    return (drawable != null) ? drawable.getIntrinsicHeight() : 0;
  }
  
  public int getActualWidth() {
    Drawable drawable = this.mDrawable;
    return (drawable != null) ? drawable.getIntrinsicWidth() : 0;
  }
  
  public Bitmap getCroppedPhoto() {
    if (!this.mAllowCrop)
      return null; 
    Bitmap bitmap = Bitmap.createBitmap(256, 256, Bitmap.Config.ARGB_8888);
    Canvas canvas = new Canvas(bitmap);
    float f = 256.0F / (this.mCropRect.right - this.mCropRect.left);
    Matrix matrix = new Matrix(this.mDrawMatrix);
    matrix.postTranslate(-this.mCropRect.left, -this.mCropRect.top);
    matrix.postScale(f, f);
    if (this.mDrawable != null) {
      canvas.concat(matrix);
      this.mDrawable.draw(canvas);
    } 
    return bitmap;
  }
  
  public Drawable getDrawable() { return this.mDrawable; }
  
  public Bitmap getPhoto() {
    Drawable drawable = this.mDrawable;
    return (drawable != null && drawable instanceof BitmapDrawable) ? ((BitmapDrawable)drawable).getBitmap() : null;
  }
  
  public float getRotationDegree() { return this.mRotation % 360.0F; }
  
  public byte[] getVideoData() { return this.mVideoBlob; }
  
  public boolean interceptMoveLeft(float paramFloat1, float paramFloat2) {
    if (!this.mTransformsEnabled)
      return false; 
    if (TranslateRunnable.access$000(this.mTranslateRunnable))
      return true; 
    this.mMatrix.getValues(this.mValues);
    this.mTranslateRect.set(this.mTempSrc);
    this.mMatrix.mapRect(this.mTranslateRect);
    paramFloat1 = getWidth();
    paramFloat2 = this.mValues[2];
    float f = this.mTranslateRect.right - this.mTranslateRect.left;
    if (this.mTransformsEnabled) {
      if (f <= paramFloat1)
        return false; 
      if (paramFloat2 == 0.0F)
        return false; 
      if (paramFloat1 >= f + paramFloat2);
      return true;
    } 
    return false;
  }
  
  public boolean interceptMoveRight(float paramFloat1, float paramFloat2) {
    if (!this.mTransformsEnabled)
      return false; 
    if (TranslateRunnable.access$000(this.mTranslateRunnable))
      return true; 
    this.mMatrix.getValues(this.mValues);
    this.mTranslateRect.set(this.mTempSrc);
    this.mMatrix.mapRect(this.mTranslateRect);
    paramFloat1 = getWidth();
    paramFloat2 = this.mValues[2];
    float f = this.mTranslateRect.right - this.mTranslateRect.left;
    return this.mTransformsEnabled ? ((f <= paramFloat1) ? false : ((paramFloat2 == 0.0F) ? true : (!(paramFloat1 >= f + paramFloat2)))) : false;
  }
  
  public void invalidateDrawable(Drawable paramDrawable) {
    if (this.mDrawable == paramDrawable) {
      invalidate();
      return;
    } 
    super.invalidateDrawable(paramDrawable);
  }
  
  public boolean isImageTransformsEnabled() { return this.mTransformsEnabled; }
  
  public boolean isPhotoBound() { return (this.mDrawable != null); }
  
  public boolean isVideo() { return (this.mVideoBlob != null); }
  
  public boolean isVideoReady() { return (this.mVideoBlob != null && this.mVideoReady); }
  
  public void loadImageIfNecessary(boolean paramBoolean) { // Byte code:
    //   0: aload_0
    //   1: invokevirtual getWidth : ()I
    //   4: istore #6
    //   6: aload_0
    //   7: invokevirtual getHeight : ()I
    //   10: istore #5
    //   12: aload_0
    //   13: invokevirtual getLayoutParams : ()Landroid/view/ViewGroup$LayoutParams;
    //   16: astore #8
    //   18: iconst_1
    //   19: istore #4
    //   21: aload #8
    //   23: ifnull -> 70
    //   26: aload_0
    //   27: invokevirtual getLayoutParams : ()Landroid/view/ViewGroup$LayoutParams;
    //   30: getfield width : I
    //   33: bipush #-2
    //   35: if_icmpne -> 43
    //   38: iconst_1
    //   39: istore_2
    //   40: goto -> 45
    //   43: iconst_0
    //   44: istore_2
    //   45: iload_2
    //   46: istore_3
    //   47: aload_0
    //   48: invokevirtual getLayoutParams : ()Landroid/view/ViewGroup$LayoutParams;
    //   51: getfield height : I
    //   54: bipush #-2
    //   56: if_icmpne -> 72
    //   59: iconst_1
    //   60: istore #7
    //   62: iload_2
    //   63: istore_3
    //   64: iload #7
    //   66: istore_2
    //   67: goto -> 74
    //   70: iconst_0
    //   71: istore_3
    //   72: iconst_0
    //   73: istore_2
    //   74: iload_3
    //   75: ifeq -> 85
    //   78: iload_2
    //   79: ifeq -> 85
    //   82: goto -> 88
    //   85: iconst_0
    //   86: istore #4
    //   88: iload #6
    //   90: ifne -> 104
    //   93: iload #5
    //   95: ifne -> 104
    //   98: iload #4
    //   100: ifne -> 104
    //   103: return
    //   104: aload_0
    //   105: getfield mUrl : Ljava/lang/String;
    //   108: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   111: ifeq -> 138
    //   114: aload_0
    //   115: getfield mImageContainer : Lcom/android/volley/toolbox/ImageLoader$ImageContainer;
    //   118: ifnull -> 133
    //   121: aload_0
    //   122: getfield mImageContainer : Lcom/android/volley/toolbox/ImageLoader$ImageContainer;
    //   125: invokevirtual cancelRequest : ()V
    //   128: aload_0
    //   129: aconst_null
    //   130: putfield mImageContainer : Lcom/android/volley/toolbox/ImageLoader$ImageContainer;
    //   133: aload_0
    //   134: invokevirtual setDefaultImageOrNull : ()V
    //   137: return
    //   138: aload_0
    //   139: getfield mImageContainer : Lcom/android/volley/toolbox/ImageLoader$ImageContainer;
    //   142: ifnull -> 184
    //   145: aload_0
    //   146: getfield mImageContainer : Lcom/android/volley/toolbox/ImageLoader$ImageContainer;
    //   149: invokevirtual getRequestUrl : ()Ljava/lang/String;
    //   152: ifnull -> 184
    //   155: aload_0
    //   156: getfield mImageContainer : Lcom/android/volley/toolbox/ImageLoader$ImageContainer;
    //   159: invokevirtual getRequestUrl : ()Ljava/lang/String;
    //   162: aload_0
    //   163: getfield mUrl : Ljava/lang/String;
    //   166: invokevirtual equals : (Ljava/lang/Object;)Z
    //   169: ifeq -> 173
    //   172: return
    //   173: aload_0
    //   174: getfield mImageContainer : Lcom/android/volley/toolbox/ImageLoader$ImageContainer;
    //   177: invokevirtual cancelRequest : ()V
    //   180: aload_0
    //   181: invokevirtual setDefaultImageOrNull : ()V
    //   184: iload #6
    //   186: istore #4
    //   188: iload_3
    //   189: ifeq -> 195
    //   192: iconst_0
    //   193: istore #4
    //   195: iload #5
    //   197: istore_3
    //   198: iload_2
    //   199: ifeq -> 204
    //   202: iconst_0
    //   203: istore_3
    //   204: aload_0
    //   205: aload_0
    //   206: getfield mImageLoader : Lcom/android/volley/toolbox/ImageLoader;
    //   209: aload_0
    //   210: getfield mUrl : Ljava/lang/String;
    //   213: new com/android/volley/ui/PhotoView$1
    //   216: dup
    //   217: aload_0
    //   218: iload_1
    //   219: invokespecial <init> : (Lcom/android/volley/ui/PhotoView;Z)V
    //   222: iload #4
    //   224: iload_3
    //   225: invokevirtual get : (Ljava/lang/String;Lcom/android/volley/toolbox/ImageLoader$ImageListener;II)Lcom/android/volley/toolbox/ImageLoader$ImageContainer;
    //   228: putfield mImageContainer : Lcom/android/volley/toolbox/ImageLoader$ImageContainer;
    //   231: return }
  
  public boolean onDoubleTap(MotionEvent paramMotionEvent) {
    this.mDoubleTapOccurred = true;
    return !this.mQuickScaleEnabled ? scale(paramMotionEvent) : 0;
  }
  
  public boolean onDoubleTapEvent(MotionEvent paramMotionEvent) {
    int i = paramMotionEvent.getAction();
    if (i != 0) {
      if (i != 1) {
        if (i != 2)
          return false; 
        if (this.mQuickScaleEnabled && this.mDoubleTapOccurred) {
          i = (int)(paramMotionEvent.getX() - this.mDownFocusX);
          int j = (int)(paramMotionEvent.getY() - this.mDownFocusY);
          if (i * i + j * j > sTouchSlopSquare) {
            this.mDoubleTapOccurred = false;
            return false;
          } 
        } 
      } else if (this.mQuickScaleEnabled) {
        return scale(paramMotionEvent);
      } 
    } else if (this.mQuickScaleEnabled) {
      this.mDownFocusX = paramMotionEvent.getX();
      this.mDownFocusY = paramMotionEvent.getY();
    } 
    return false;
  }
  
  public boolean onDown(MotionEvent paramMotionEvent) {
    if (this.mTransformsEnabled) {
      this.mTranslateRunnable.stop();
      this.mSnapRunnable.stop();
    } 
    return true;
  }
  
  protected void onDraw(Canvas paramCanvas) {
    super.onDraw(paramCanvas);
    if (this.mDrawable != null) {
      int i = paramCanvas.getSaveCount();
      paramCanvas.save();
      Matrix matrix = this.mDrawMatrix;
      if (matrix != null)
        paramCanvas.concat(matrix); 
      this.mDrawable.draw(paramCanvas);
      paramCanvas.restoreToCount(i);
      if (this.mVideoBlob != null) {
        Bitmap bitmap;
        if (this.mVideoReady) {
          bitmap = sVideoImage;
        } else {
          bitmap = sVideoNotReadyImage;
        } 
        i = (getWidth() - bitmap.getWidth()) / 2;
        int j = (getHeight() - bitmap.getHeight()) / 2;
        paramCanvas.drawBitmap(bitmap, i, j, null);
      } 
      this.mTranslateRect.set(this.mDrawable.getBounds());
      matrix = this.mDrawMatrix;
      if (matrix != null)
        matrix.mapRect(this.mTranslateRect); 
      if (this.mAllowCrop) {
        i = paramCanvas.getSaveCount();
        paramCanvas.drawRect(0.0F, 0.0F, getWidth(), getHeight(), sCropDimPaint);
        paramCanvas.save();
        paramCanvas.clipRect(this.mCropRect);
        matrix = this.mDrawMatrix;
        if (matrix != null)
          paramCanvas.concat(matrix); 
        this.mDrawable.draw(paramCanvas);
        paramCanvas.restoreToCount(i);
        paramCanvas.drawRect(this.mCropRect, sCropPaint);
      } 
    } 
  }
  
  public boolean onFling(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, float paramFloat1, float paramFloat2) {
    if (this.mTransformsEnabled)
      this.mTranslateRunnable.start(paramFloat1, paramFloat2); 
    return true;
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    this.mHaveLayout = true;
    paramInt3 = getWidth();
    paramInt2 = getHeight();
    if (this.mAllowCrop) {
      this.mCropSize = Math.min(sCropSize, Math.min(paramInt3, paramInt2));
      paramInt1 = this.mCropSize;
      paramInt3 = (paramInt3 - paramInt1) / 2;
      paramInt2 = (paramInt2 - paramInt1) / 2;
      this.mCropRect.set(paramInt3, paramInt2, paramInt3 + paramInt1, paramInt1 + paramInt2);
    } 
    configureBounds(paramBoolean);
  }
  
  public void onLongPress(MotionEvent paramMotionEvent) {}
  
  protected void onMeasure(int paramInt1, int paramInt2) {
    int i = this.mFixedHeight;
    if (i != -1) {
      super.onMeasure(paramInt1, View.MeasureSpec.makeMeasureSpec(i, -2147483648));
      setMeasuredDimension(getMeasuredWidth(), this.mFixedHeight);
      return;
    } 
    super.onMeasure(paramInt1, paramInt2);
  }
  
  public boolean onScale(ScaleGestureDetector paramScaleGestureDetector) {
    if (this.mTransformsEnabled) {
      this.mIsDoubleTouch = false;
      scale(getScale() * paramScaleGestureDetector.getScaleFactor(), paramScaleGestureDetector.getFocusX(), paramScaleGestureDetector.getFocusY());
    } 
    return true;
  }
  
  public boolean onScaleBegin(ScaleGestureDetector paramScaleGestureDetector) {
    if (this.mTransformsEnabled) {
      this.mScaleRunnable.stop();
      this.mIsDoubleTouch = true;
    } 
    return true;
  }
  
  public void onScaleEnd(ScaleGestureDetector paramScaleGestureDetector) {
    if (this.mTransformsEnabled && this.mIsDoubleTouch) {
      this.mDoubleTapDebounce = true;
      resetTransformations();
    } 
  }
  
  public boolean onScroll(MotionEvent paramMotionEvent1, MotionEvent paramMotionEvent2, float paramFloat1, float paramFloat2) {
    if (this.mTransformsEnabled)
      translate(-paramFloat1, -paramFloat2); 
    return true;
  }
  
  public void onShowPress(MotionEvent paramMotionEvent) {}
  
  public boolean onSingleTapConfirmed(MotionEvent paramMotionEvent) {
    View.OnClickListener onClickListener = this.mExternalClickListener;
    if (onClickListener != null && !this.mIsDoubleTouch)
      onClickListener.onClick(this); 
    this.mIsDoubleTouch = false;
    return true;
  }
  
  public boolean onSingleTapUp(MotionEvent paramMotionEvent) { return false; }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent) {
    ScaleGestureDetector scaleGestureDetector = this.mScaleGetureDetector;
    if (scaleGestureDetector != null) {
      if (this.mGestureDetector == null)
        return true; 
      scaleGestureDetector.onTouchEvent(paramMotionEvent);
      this.mGestureDetector.onTouchEvent(paramMotionEvent);
      int i = paramMotionEvent.getAction();
      if (i != 1 && i != 3)
        return true; 
      if (!TranslateRunnable.access$000(this.mTranslateRunnable))
        snap(); 
    } 
    return true;
  }
  
  public void resetTransformations() {
    this.mMatrix.set(this.mOriginalMatrix);
    invalidate();
  }
  
  public void rotateClockwise() { rotate(90.0F, true); }
  
  public void rotateCounterClockwise() { rotate(-90.0F, true); }
  
  public void rotateTo(float paramFloat) { rotate(paramFloat % 360.0F, true); }
  
  public void rotateTo(float paramFloat, boolean paramBoolean) { rotate(paramFloat % 360.0F, paramBoolean); }
  
  protected void setDefaultImageOrNull() {
    if (this.mDefaultImageId != 0) {
      bindResource(this.mDefaultImageId);
      return;
    } 
    bindPhoto(null);
  }
  
  public void setFixedHeight(int paramInt) {
    boolean bool;
    if (paramInt != this.mFixedHeight) {
      bool = true;
    } else {
      bool = false;
    } 
    this.mFixedHeight = paramInt;
    setMeasuredDimension(getMeasuredWidth(), this.mFixedHeight);
    if (bool) {
      configureBounds(true);
      requestLayout();
    } 
  }
  
  public void setFullScreen(boolean paramBoolean1, boolean paramBoolean2) {
    if (paramBoolean1 != this.mFullScreen) {
      this.mFullScreen = paramBoolean1;
      requestLayout();
      invalidate();
    } 
  }
  
  public void setMaxInitialScale(float paramFloat) { this.mMaxInitialScaleFactor = paramFloat; }
  
  public void setOnClickListener(View.OnClickListener paramOnClickListener) { this.mExternalClickListener = paramOnClickListener; }
  
  public void setRotationDegree(float paramFloat) { this.mRotation = paramFloat % 360.0F; }
  
  public boolean verifyDrawable(Drawable paramDrawable) { return (this.mDrawable == paramDrawable || super.verifyDrawable(paramDrawable)); }
}
