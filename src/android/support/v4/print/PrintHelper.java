package android.support.v4.print;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.RectF;
import android.net.Uri;
import android.os.Build;
import android.os.CancellationSignal;
import android.os.ParcelFileDescriptor;
import android.print.PrintAttributes;
import android.print.PrintDocumentAdapter;
import android.print.PrintManager;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresApi;
import android.util.Log;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

public final class PrintHelper {
  @SuppressLint({"InlinedApi"})
  public static final int COLOR_MODE_COLOR = 2;
  
  @SuppressLint({"InlinedApi"})
  public static final int COLOR_MODE_MONOCHROME = 1;
  
  static final boolean IS_MIN_MARGINS_HANDLING_CORRECT;
  
  private static final String LOG_TAG = "PrintHelper";
  
  private static final int MAX_PRINT_SIZE = 3500;
  
  public static final int ORIENTATION_LANDSCAPE = 1;
  
  public static final int ORIENTATION_PORTRAIT = 2;
  
  static final boolean PRINT_ACTIVITY_RESPECTS_ORIENTATION;
  
  public static final int SCALE_MODE_FILL = 2;
  
  public static final int SCALE_MODE_FIT = 1;
  
  int mColorMode = 2;
  
  final Context mContext;
  
  BitmapFactory.Options mDecodeOptions = null;
  
  final Object mLock = new Object();
  
  int mOrientation = 1;
  
  int mScaleMode = 2;
  
  static  {
    int i = Build.VERSION.SDK_INT;
    byte b2 = 0;
    if (i < 20 || Build.VERSION.SDK_INT > 23) {
      b1 = 1;
    } else {
      b1 = 0;
    } 
    PRINT_ACTIVITY_RESPECTS_ORIENTATION = b1;
    byte b1 = b2;
    if (Build.VERSION.SDK_INT != 23)
      b1 = 1; 
    IS_MIN_MARGINS_HANDLING_CORRECT = b1;
  }
  
  public PrintHelper(@NonNull Context paramContext) { this.mContext = paramContext; }
  
  static Bitmap convertBitmapForColorMode(Bitmap paramBitmap, int paramInt) {
    if (paramInt != 1)
      return paramBitmap; 
    Bitmap bitmap = Bitmap.createBitmap(paramBitmap.getWidth(), paramBitmap.getHeight(), Bitmap.Config.ARGB_8888);
    Canvas canvas = new Canvas(bitmap);
    Paint paint = new Paint();
    ColorMatrix colorMatrix = new ColorMatrix();
    colorMatrix.setSaturation(0.0F);
    paint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));
    canvas.drawBitmap(paramBitmap, 0.0F, 0.0F, paint);
    canvas.setBitmap(null);
    return bitmap;
  }
  
  @RequiresApi(19)
  private static PrintAttributes.Builder copyAttributes(PrintAttributes paramPrintAttributes) {
    PrintAttributes.Builder builder = (new PrintAttributes.Builder()).setMediaSize(paramPrintAttributes.getMediaSize()).setResolution(paramPrintAttributes.getResolution()).setMinMargins(paramPrintAttributes.getMinMargins());
    if (paramPrintAttributes.getColorMode() != 0)
      builder.setColorMode(paramPrintAttributes.getColorMode()); 
    if (Build.VERSION.SDK_INT >= 23 && paramPrintAttributes.getDuplexMode() != 0)
      builder.setDuplexMode(paramPrintAttributes.getDuplexMode()); 
    return builder;
  }
  
  static Matrix getMatrix(int paramInt1, int paramInt2, RectF paramRectF, int paramInt3) {
    Matrix matrix = new Matrix();
    float f1 = paramRectF.width();
    float f2 = paramInt1;
    f1 /= f2;
    if (paramInt3 == 2) {
      f1 = Math.max(f1, paramRectF.height() / paramInt2);
    } else {
      f1 = Math.min(f1, paramRectF.height() / paramInt2);
    } 
    matrix.postScale(f1, f1);
    matrix.postTranslate((paramRectF.width() - f2 * f1) / 2.0F, (paramRectF.height() - paramInt2 * f1) / 2.0F);
    return matrix;
  }
  
  static boolean isPortrait(Bitmap paramBitmap) { return (paramBitmap.getWidth() <= paramBitmap.getHeight()); }
  
  private Bitmap loadBitmap(Uri paramUri, BitmapFactory.Options paramOptions) throws FileNotFoundException {
    if (paramUri != null) {
      Context context = this.mContext;
      if (context != null) {
        inputStream2 = null;
        try {
          inputStream = context.getContentResolver().openInputStream(paramUri);
        } finally {
          paramUri = null;
        } 
        if (inputStream1 != null)
          try {
            inputStream1.close();
          } catch (IOException inputStream1) {
            Log.w("PrintHelper", "close fail ", inputStream1);
          }  
        throw paramUri;
      } 
    } 
    throw new IllegalArgumentException("bad argument to loadBitmap");
  }
  
  public static boolean systemSupportsPrint() { return (Build.VERSION.SDK_INT >= 19); }
  
  public int getColorMode() { return this.mColorMode; }
  
  public int getOrientation() { return (Build.VERSION.SDK_INT >= 19 && this.mOrientation == 0) ? 1 : this.mOrientation; }
  
  public int getScaleMode() { return this.mScaleMode; }
  
  Bitmap loadConstrainedBitmap(Uri paramUri) throws FileNotFoundException {
    if (paramUri != null && this.mContext != null) {
      BitmapFactory.Options options = new BitmapFactory.Options();
      options.inJustDecodeBounds = true;
      loadBitmap(paramUri, options);
      int i = options.outWidth;
      int j = options.outHeight;
      if (i > 0) {
        if (j <= 0)
          return null; 
        int m = Math.max(i, j);
        int k;
        for (k = 1; m > 3500; k <<= true)
          m >>>= 1; 
        if (k) {
          if (Math.min(i, j) / k <= 0)
            return null; 
          synchronized (this.mLock) {
            this.mDecodeOptions = new BitmapFactory.Options();
            this.mDecodeOptions.inMutable = true;
            this.mDecodeOptions.inSampleSize = k;
            BitmapFactory.Options options1 = this.mDecodeOptions;
            try {
              null = loadBitmap(paramUri, options1);
            } finally {
              null = null;
            } 
          } 
        } 
      } 
      return null;
    } 
    IllegalArgumentException illegalArgumentException = new IllegalArgumentException("bad argument to getScaledBitmap");
    throw illegalArgumentException;
  }
  
  public void printBitmap(@NonNull String paramString, @NonNull Bitmap paramBitmap) { printBitmap(paramString, paramBitmap, null); }
  
  public void printBitmap(@NonNull String paramString, @NonNull Bitmap paramBitmap, @Nullable OnPrintFinishCallback paramOnPrintFinishCallback) {
    if (Build.VERSION.SDK_INT >= 19) {
      PrintAttributes.MediaSize mediaSize;
      if (paramBitmap == null)
        return; 
      PrintManager printManager = (PrintManager)this.mContext.getSystemService("print");
      if (isPortrait(paramBitmap)) {
        mediaSize = PrintAttributes.MediaSize.UNKNOWN_PORTRAIT;
      } else {
        mediaSize = PrintAttributes.MediaSize.UNKNOWN_LANDSCAPE;
      } 
      PrintAttributes printAttributes = (new PrintAttributes.Builder()).setMediaSize(mediaSize).setColorMode(this.mColorMode).build();
      printManager.print(paramString, new PrintBitmapAdapter(this, paramString, this.mScaleMode, paramBitmap, paramOnPrintFinishCallback), printAttributes);
    } 
  }
  
  public void printBitmap(@NonNull String paramString, @NonNull Uri paramUri) throws FileNotFoundException { printBitmap(paramString, paramUri, null); }
  
  public void printBitmap(@NonNull String paramString, @NonNull Uri paramUri, @Nullable OnPrintFinishCallback paramOnPrintFinishCallback) throws FileNotFoundException {
    if (Build.VERSION.SDK_INT < 19)
      return; 
    PrintUriAdapter printUriAdapter = new PrintUriAdapter(this, paramString, paramUri, paramOnPrintFinishCallback, this.mScaleMode);
    PrintManager printManager = (PrintManager)this.mContext.getSystemService("print");
    PrintAttributes.Builder builder = new PrintAttributes.Builder();
    builder.setColorMode(this.mColorMode);
    int i = this.mOrientation;
    if (i == 1 || i == 0) {
      builder.setMediaSize(PrintAttributes.MediaSize.UNKNOWN_LANDSCAPE);
    } else if (i == 2) {
      builder.setMediaSize(PrintAttributes.MediaSize.UNKNOWN_PORTRAIT);
    } 
    printManager.print(paramString, printUriAdapter, builder.build());
  }
  
  public void setColorMode(int paramInt) { this.mColorMode = paramInt; }
  
  public void setOrientation(int paramInt) { this.mOrientation = paramInt; }
  
  public void setScaleMode(int paramInt) { this.mScaleMode = paramInt; }
  
  @RequiresApi(19)
  void writeBitmap(PrintAttributes paramPrintAttributes, int paramInt, Bitmap paramBitmap, ParcelFileDescriptor paramParcelFileDescriptor, CancellationSignal paramCancellationSignal, PrintDocumentAdapter.WriteResultCallback paramWriteResultCallback) {
    PrintAttributes printAttributes;
    if (IS_MIN_MARGINS_HANDLING_CORRECT) {
      printAttributes = paramPrintAttributes;
    } else {
      printAttributes = copyAttributes(paramPrintAttributes).setMinMargins(new PrintAttributes.Margins(0, 0, 0, 0)).build();
    } 
    (new Object(this, paramCancellationSignal, printAttributes, paramBitmap, paramPrintAttributes, paramInt, paramParcelFileDescriptor, paramWriteResultCallback)).execute(new Void[0]);
  }
}
