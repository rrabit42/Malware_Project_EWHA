package android.support.design.widget;

import android.support.annotation.NonNull;
import android.support.v4.widget.ViewDragHelper;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;

public class SwipeDismissBehavior<V extends View> extends CoordinatorLayout.Behavior<V> {
  private static final float DEFAULT_ALPHA_END_DISTANCE = 0.5F;
  
  private static final float DEFAULT_ALPHA_START_DISTANCE = 0.0F;
  
  private static final float DEFAULT_DRAG_DISMISS_THRESHOLD = 0.5F;
  
  public static final int STATE_DRAGGING = 1;
  
  public static final int STATE_IDLE = 0;
  
  public static final int STATE_SETTLING = 2;
  
  public static final int SWIPE_DIRECTION_ANY = 2;
  
  public static final int SWIPE_DIRECTION_END_TO_START = 1;
  
  public static final int SWIPE_DIRECTION_START_TO_END = 0;
  
  float alphaEndSwipeDistance = 0.5F;
  
  float alphaStartSwipeDistance = 0.0F;
  
  private final ViewDragHelper.Callback dragCallback = new Object(this);
  
  float dragDismissThreshold = 0.5F;
  
  private boolean interceptingEvents;
  
  OnDismissListener listener;
  
  private float sensitivity = 0.0F;
  
  private boolean sensitivitySet;
  
  int swipeDirection = 2;
  
  ViewDragHelper viewDragHelper;
  
  static float clamp(float paramFloat1, float paramFloat2, float paramFloat3) { return Math.min(Math.max(paramFloat1, paramFloat2), paramFloat3); }
  
  static int clamp(int paramInt1, int paramInt2, int paramInt3) { return Math.min(Math.max(paramInt1, paramInt2), paramInt3); }
  
  private void ensureViewDragHelper(ViewGroup paramViewGroup) {
    if (this.viewDragHelper == null) {
      ViewDragHelper viewDragHelper1;
      if (this.sensitivitySet) {
        viewDragHelper1 = ViewDragHelper.create(paramViewGroup, this.sensitivity, this.dragCallback);
      } else {
        viewDragHelper1 = ViewDragHelper.create(viewDragHelper1, this.dragCallback);
      } 
      this.viewDragHelper = viewDragHelper1;
    } 
  }
  
  static float fraction(float paramFloat1, float paramFloat2, float paramFloat3) { return (paramFloat3 - paramFloat1) / (paramFloat2 - paramFloat1); }
  
  public boolean canSwipeDismissView(@NonNull View paramView) { return true; }
  
  public int getDragState() {
    ViewDragHelper viewDragHelper1 = this.viewDragHelper;
    return (viewDragHelper1 != null) ? viewDragHelper1.getViewDragState() : 0;
  }
  
  public boolean onInterceptTouchEvent(CoordinatorLayout paramCoordinatorLayout, V paramV, MotionEvent paramMotionEvent) {
    boolean bool = this.interceptingEvents;
    int i = paramMotionEvent.getActionMasked();
    if (i != 0) {
      if (i == 1 || i == 3)
        this.interceptingEvents = false; 
    } else {
      this.interceptingEvents = paramCoordinatorLayout.isPointInChildBounds(paramV, (int)paramMotionEvent.getX(), (int)paramMotionEvent.getY());
      bool = this.interceptingEvents;
    } 
    if (bool) {
      ensureViewDragHelper(paramCoordinatorLayout);
      return this.viewDragHelper.shouldInterceptTouchEvent(paramMotionEvent);
    } 
    return false;
  }
  
  public boolean onTouchEvent(CoordinatorLayout paramCoordinatorLayout, V paramV, MotionEvent paramMotionEvent) {
    ViewDragHelper viewDragHelper1 = this.viewDragHelper;
    if (viewDragHelper1 != null) {
      viewDragHelper1.processTouchEvent(paramMotionEvent);
      return true;
    } 
    return false;
  }
  
  public void setDragDismissDistance(float paramFloat) { this.dragDismissThreshold = clamp(0.0F, paramFloat, 1.0F); }
  
  public void setEndAlphaSwipeDistance(float paramFloat) { this.alphaEndSwipeDistance = clamp(0.0F, paramFloat, 1.0F); }
  
  public void setListener(OnDismissListener paramOnDismissListener) { this.listener = paramOnDismissListener; }
  
  public void setSensitivity(float paramFloat) {
    this.sensitivity = paramFloat;
    this.sensitivitySet = true;
  }
  
  public void setStartAlphaSwipeDistance(float paramFloat) { this.alphaStartSwipeDistance = clamp(0.0F, paramFloat, 1.0F); }
  
  public void setSwipeDirection(int paramInt) { this.swipeDirection = paramInt; }
}
