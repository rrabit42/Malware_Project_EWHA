package com.squareup.otto;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

class EventProducer {
  private final int hashCode;
  
  private final Method method;
  
  final Object target;
  
  private boolean valid = true;
  
  EventProducer(Object paramObject, Method paramMethod) {
    if (paramObject != null) {
      if (paramMethod != null) {
        this.target = paramObject;
        this.method = paramMethod;
        paramMethod.setAccessible(true);
        this.hashCode = (paramMethod.hashCode() + 31) * 31 + paramObject.hashCode();
        return;
      } 
      throw new NullPointerException("EventProducer method cannot be null.");
    } 
    throw new NullPointerException("EventProducer target cannot be null.");
  }
  
  public boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (paramObject == null)
      return false; 
    if (getClass() != paramObject.getClass())
      return false; 
    paramObject = (EventProducer)paramObject;
    return (this.method.equals(paramObject.method) && this.target == paramObject.target);
  }
  
  public int hashCode() { return this.hashCode; }
  
  public void invalidate() { this.valid = false; }
  
  public boolean isValid() { return this.valid; }
  
  public Object produceEvent() throws InvocationTargetException {
    if (this.valid)
      try {
        return this.method.invoke(this.target, new Object[0]);
      } catch (IllegalAccessException illegalAccessException) {
        throw new AssertionError(illegalAccessException);
      } catch (InvocationTargetException invocationTargetException) {
        if (invocationTargetException.getCause() instanceof Error)
          throw (Error)invocationTargetException.getCause(); 
        throw invocationTargetException;
      }  
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(toString());
    stringBuilder.append(" has been invalidated and can no longer produce events.");
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  public String toString() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("[EventProducer ");
    stringBuilder.append(this.method);
    stringBuilder.append("]");
    return stringBuilder.toString();
  }
}
