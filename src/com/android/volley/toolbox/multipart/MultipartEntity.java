package com.android.volley.toolbox.multipart;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.apache.http.entity.AbstractHttpEntity;

public class MultipartEntity extends AbstractHttpEntity implements Cloneable {
  private Boundary boundary;
  
  private List<Part> parts = new ArrayList();
  
  public MultipartEntity() { this(null); }
  
  public MultipartEntity(String paramString) {
    this.boundary = new Boundary(paramString);
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("multipart/form-data; boundary=\"");
    stringBuilder.append(this.boundary.getBoundary());
    stringBuilder.append('"');
    setContentType(stringBuilder.toString());
  }
  
  public void addPart(Part paramPart) { this.parts.add(paramPart); }
  
  public Object clone() throws CloneNotSupportedException { throw new CloneNotSupportedException("MultipartEntity does not support cloning"); }
  
  public String getBoundary() { return this.boundary.getBoundary(); }
  
  public InputStream getContent() throws IOException { return null; }
  
  public long getContentLength() {
    Iterator iterator = this.parts.iterator();
    long l;
    for (l = 0L; iterator.hasNext(); l += ((Part)iterator.next()).getContentLength(this.boundary));
    return l + this.boundary.getClosingBoundary().length;
  }
  
  public boolean isRepeatable() { return true; }
  
  public boolean isStreaming() { return false; }
  
  public void writeTo(OutputStream paramOutputStream) throws IOException {
    if (paramOutputStream != null) {
      Iterator iterator = this.parts.iterator();
      while (iterator.hasNext())
        ((Part)iterator.next()).writeTo(paramOutputStream, this.boundary); 
      paramOutputStream.write(this.boundary.getClosingBoundary());
      paramOutputStream.flush();
      return;
    } 
    IllegalArgumentException illegalArgumentException = new IllegalArgumentException("Output stream may not be null");
    throw illegalArgumentException;
  }
}
