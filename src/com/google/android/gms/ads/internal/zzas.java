package com.google.android.gms.ads.internal;

import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.IBinder;
import android.os.RemoteException;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import android.util.Base64;
import android.view.View;
import com.google.android.gms.ads.internal.gmsg.zzv;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.dynamic.IObjectWrapper;
import com.google.android.gms.dynamic.ObjectWrapper;
import com.google.android.gms.internal.ads.zzadh;
import com.google.android.gms.internal.ads.zzajh;
import com.google.android.gms.internal.ads.zzakb;
import com.google.android.gms.internal.ads.zzaqw;
import com.google.android.gms.internal.ads.zzasc;
import com.google.android.gms.internal.ads.zzoo;
import com.google.android.gms.internal.ads.zzoq;
import com.google.android.gms.internal.ads.zzpw;
import com.google.android.gms.internal.ads.zzpx;
import com.google.android.gms.internal.ads.zzxe;
import com.google.android.gms.internal.ads.zzxz;
import com.google.android.gms.internal.ads.zzyc;
import java.io.ByteArrayOutputStream;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import javax.annotation.ParametersAreNonnullByDefault;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

@zzadh
@ParametersAreNonnullByDefault
public final class zzas {
  @VisibleForTesting
  static zzv<zzaqw> zza(@Nullable zzxz paramzzxz, @Nullable zzyc paramzzyc, zzac paramzzac) { return new zzax(paramzzxz, paramzzac, paramzzyc); }
  
  private static String zza(@Nullable Bitmap paramBitmap) {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    if (paramBitmap == null) {
      zzakb.zzdk("Bitmap is null. Returning empty string");
      return "";
    } 
    paramBitmap.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream);
    String str = String.valueOf(Base64.encodeToString(byteArrayOutputStream.toByteArray(), 0));
    return (str.length() != 0) ? "data:image/png;base64,".concat(str) : new String("data:image/png;base64,");
  }
  
  @VisibleForTesting
  private static String zza(@Nullable zzpw paramzzpw) {
    if (paramzzpw == null) {
      zzakb.zzdk("Image is null. Returning empty string");
      return "";
    } 
    try {
      Uri uri = paramzzpw.getUri();
      if (uri != null)
        return uri.toString(); 
    } catch (RemoteException remoteException) {
      zzakb.zzdk("Unable to get image uri. Trying data uri next");
    } 
    return zzb(paramzzpw);
  }
  
  private static JSONObject zza(@Nullable Bundle paramBundle, String paramString) throws JSONException {
    JSONObject jSONObject = new JSONObject();
    if (paramBundle != null) {
      if (TextUtils.isEmpty(paramString))
        return jSONObject; 
      JSONObject jSONObject1 = new JSONObject(paramString);
      Iterator iterator = jSONObject1.keys();
      while (true) {
        String str;
        if (iterator.hasNext()) {
          str = (String)iterator.next();
          if (paramBundle.containsKey(str)) {
            if ("image".equals(jSONObject1.getString(str))) {
              Object object = paramBundle.get(str);
              if (object instanceof Bitmap) {
                object = zza((Bitmap)object);
              } else {
                object = "Invalid type. An image type extra should return a bitmap";
                zzakb.zzdk(object);
              } 
            } else {
              if (paramBundle.get(str) instanceof Bitmap) {
                paramString = "Invalid asset type. Bitmap should be returned only for image type";
              } else {
                paramString = String.valueOf(paramBundle.get(str));
                jSONObject.put(str, paramString);
              } 
              zzakb.zzdk(paramString);
            } 
          } else {
            continue;
          } 
        } else {
          break;
        } 
        jSONObject.put(str, paramString);
      } 
    } 
    return jSONObject;
  }
  
  public static boolean zza(zzaqw paramzzaqw, zzxe paramzzxe, CountDownLatch paramCountDownLatch) {
    boolean bool = false;
    try {
      String str;
      View view = paramzzaqw.getView();
      if (view == null) {
        str = "AdWebView is null";
      } else {
        view.setVisibility(4);
        List list = paramzzxe.zzbtw.zzbsi;
        if (list == null || list.isEmpty()) {
          str = "No template ids present in mediation response";
        } else {
          String str3;
          zzasc zzasc;
          str.zza("/nativeExpressAssetsLoaded", new zzav(paramCountDownLatch));
          str.zza("/nativeExpressAssetsLoadingFailed", new zzaw(paramCountDownLatch));
          zzxz zzxz = paramzzxe.zzbtx.zzmo();
          List list1 = paramzzxe.zzbtx.zzmp();
          boolean bool1 = list.contains("2");
          zzau zzau = null;
          view = null;
          if (bool1 && zzxz != null) {
            zzau = zzxz.getHeadline();
            list1 = zzxz.getImages();
            str3 = zzxz.getBody();
            zzpw zzpw = zzxz.zzjz();
            String str5 = zzxz.getCallToAction();
            double d = zzxz.getStarRating();
            String str6 = zzxz.getStore();
            String str7 = zzxz.getPrice();
            Bundle bundle = zzxz.getExtras();
            if (zzxz.zzmw() != null)
              view = (View)ObjectWrapper.unwrap(zzxz.zzmw()); 
            zzoo zzoo = new zzoo(zzau, list1, str3, zzpw, str5, d, str6, str7, null, bundle, null, view, zzxz.zzke(), null);
            String str4 = paramzzxe.zzbtw.zzbsh;
            zzasc = str.zzuf();
            zzau = new zzat(zzoo, str4, str);
          } else if (str3.contains("1") && list1 != null) {
            String str4 = list1.getHeadline();
            List list2 = list1.getImages();
            String str5 = list1.getBody();
            zzpw zzpw = list1.zzkg();
            String str6 = list1.getCallToAction();
            String str7 = list1.getAdvertiser();
            Bundle bundle = list1.getExtras();
            View view1 = zzau;
            if (list1.zzmw() != null)
              view1 = (View)ObjectWrapper.unwrap(list1.zzmw()); 
            zzoq zzoq = new zzoq(str4, list2, str5, zzpw, str6, str7, null, bundle, null, view1, list1.zzke(), null);
            str4 = paramzzxe.zzbtw.zzbsh;
            zzasc = str.zzuf();
            zzau = new zzau(zzoq, str4, str);
          } else {
            str = "No matching template id and mapper";
            zzakb.zzdk(str);
          } 
          zzasc.zza(zzau);
          String str2 = paramzzxe.zzbtw.zzbsf;
          String str1 = paramzzxe.zzbtw.zzbsg;
          if (str1 != null) {
            str.loadDataWithBaseURL(str1, str2, "text/html", "UTF-8", null);
          } else {
            str.loadData(str2, "text/html", "UTF-8");
          } 
          bool = true;
          if (!bool)
            paramCountDownLatch.countDown(); 
        } 
      } 
      zzakb.zzdk(str);
    } catch (RemoteException paramzzaqw) {
      zzakb.zzc("Unable to invoke load assets", paramzzaqw);
    } catch (RuntimeException paramzzaqw) {
      paramCountDownLatch.countDown();
      throw paramzzaqw;
    } 
    if (!bool)
      paramCountDownLatch.countDown(); 
  }
  
  private static String zzb(zzpw paramzzpw) {
    try {
      IObjectWrapper iObjectWrapper = paramzzpw.zzjy();
      if (iObjectWrapper == null) {
        zzakb.zzdk("Drawable is null. Returning empty string");
        return "";
      } 
      String str = (Drawable)ObjectWrapper.unwrap(iObjectWrapper);
      if (!(str instanceof BitmapDrawable)) {
        str = "Drawable is not an instance of BitmapDrawable. Returning empty string";
        zzakb.zzdk(str);
        return "";
      } 
      return zza(((BitmapDrawable)str).getBitmap());
    } catch (RemoteException paramzzpw) {}
    zzakb.zzdk(paramzzpw);
    return "";
  }
  
  @Nullable
  private static zzpw zzd(Object paramObject) { return (paramObject instanceof IBinder) ? zzpx.zzh((IBinder)paramObject) : null; }
  
  private static void zzd(zzaqw paramzzaqw) {
    View.OnClickListener onClickListener = paramzzaqw.getOnClickListener();
    if (onClickListener != null)
      onClickListener.onClick(paramzzaqw.getView()); 
  }
  
  @Nullable
  public static View zze(@Nullable zzajh paramzzajh) {
    if (paramzzajh == null) {
      zzakb.e("AdState is null");
      return null;
    } 
    if (zzf(paramzzajh) && paramzzajh.zzbyo != null)
      return paramzzajh.zzbyo.getView(); 
    try {
      if (paramzzajh.zzbtx != null) {
        IObjectWrapper iObjectWrapper = paramzzajh.zzbtx.getView();
      } else {
        paramzzajh = null;
      } 
      if (paramzzajh == null) {
        zzakb.zzdk("View in mediation adapter is null.");
        return null;
      } 
      return (View)ObjectWrapper.unwrap(paramzzajh);
    } catch (RemoteException paramzzajh) {
      zzakb.zzc("Could not get View from mediation adapter.", paramzzajh);
      return null;
    } 
  }
  
  public static boolean zzf(@Nullable zzajh paramzzajh) { return (paramzzajh != null && paramzzajh.zzceq && paramzzajh.zzbtw != null && paramzzajh.zzbtw.zzbsf != null); }
}
