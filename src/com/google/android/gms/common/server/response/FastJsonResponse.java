package com.google.android.gms.common.server.response;

import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.ShowFirstParty;
import com.google.android.gms.common.util.Base64Utils;
import com.google.android.gms.common.util.JsonUtils;
import com.google.android.gms.common.util.MapUtils;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

@KeepForSdk
@ShowFirstParty
public abstract class FastJsonResponse {
  private final <I, O> void zaa(Field<I, O> paramField, I paramI) {
    int i;
    StringBuilder stringBuilder;
    String str = paramField.zapu;
    paramI = (I)paramField.convert(paramI);
    switch (paramField.zaps) {
      default:
        i = paramField.zaps;
        stringBuilder = new StringBuilder(44);
        stringBuilder.append("Unsupported type for conversion: ");
        stringBuilder.append(i);
        throw new IllegalStateException(stringBuilder.toString());
      case 8:
      case 9:
        if (zaa(str, paramI)) {
          setDecodedBytesInternal(stringBuilder, str, (byte[])paramI);
          return;
        } 
        return;
      case 7:
        setStringInternal(stringBuilder, str, (String)paramI);
        return;
      case 6:
        if (zaa(str, paramI)) {
          setBooleanInternal(stringBuilder, str, ((Boolean)paramI).booleanValue());
          return;
        } 
        return;
      case 5:
        zaa(stringBuilder, str, (BigDecimal)paramI);
        return;
      case 4:
        if (zaa(str, paramI)) {
          zaa(stringBuilder, str, ((Double)paramI).doubleValue());
          return;
        } 
        return;
      case 2:
        if (zaa(str, paramI)) {
          setLongInternal(stringBuilder, str, ((Long)paramI).longValue());
          return;
        } 
        return;
      case 1:
        zaa(stringBuilder, str, (BigInteger)paramI);
        return;
      case 0:
        break;
    } 
    if (zaa(str, paramI))
      setIntegerInternal(stringBuilder, str, ((Integer)paramI).intValue()); 
  }
  
  private static void zaa(StringBuilder paramStringBuilder, Field paramField, Object paramObject) {
    if (paramField.zapq == 11) {
      paramStringBuilder.append(((FastJsonResponse)paramField.zapw.cast(paramObject)).toString());
      return;
    } 
    if (paramField.zapq == 7) {
      paramStringBuilder.append("\"");
      paramStringBuilder.append(JsonUtils.escapeString((String)paramObject));
      paramStringBuilder.append("\"");
      return;
    } 
    paramStringBuilder.append(paramObject);
  }
  
  private static <O> boolean zaa(String paramString, O paramO) { // Byte code:
    //   0: aload_1
    //   1: ifnonnull -> 64
    //   4: ldc 'FastJsonResponse'
    //   6: bipush #6
    //   8: invokestatic isLoggable : (Ljava/lang/String;I)Z
    //   11: ifeq -> 62
    //   14: new java/lang/StringBuilder
    //   17: dup
    //   18: aload_0
    //   19: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   22: invokevirtual length : ()I
    //   25: bipush #58
    //   27: iadd
    //   28: invokespecial <init> : (I)V
    //   31: astore_1
    //   32: aload_1
    //   33: ldc 'Output field ('
    //   35: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   38: pop
    //   39: aload_1
    //   40: aload_0
    //   41: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   44: pop
    //   45: aload_1
    //   46: ldc ') has a null value, but expected a primitive'
    //   48: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   51: pop
    //   52: ldc 'FastJsonResponse'
    //   54: aload_1
    //   55: invokevirtual toString : ()Ljava/lang/String;
    //   58: invokestatic e : (Ljava/lang/String;Ljava/lang/String;)I
    //   61: pop
    //   62: iconst_0
    //   63: ireturn
    //   64: iconst_1
    //   65: ireturn }
  
  protected static <O, I> I zab(Field<I, O> paramField, Object paramObject) { return (Field.zaa(paramField) != null) ? (I)paramField.convertBack(paramObject) : (I)paramObject; }
  
  @KeepForSdk
  public <T extends FastJsonResponse> void addConcreteTypeArrayInternal(Field<?, ?> paramField, String paramString, ArrayList<T> paramArrayList) { throw new UnsupportedOperationException("Concrete type array not supported"); }
  
  @KeepForSdk
  public <T extends FastJsonResponse> void addConcreteTypeInternal(Field<?, ?> paramField, String paramString, T paramT) { throw new UnsupportedOperationException("Concrete type not supported"); }
  
  @KeepForSdk
  public abstract Map<String, Field<?, ?>> getFieldMappings();
  
  @KeepForSdk
  protected Object getFieldValue(Field paramField) {
    String str = paramField.zapu;
    if (paramField.zapw != null) {
      if (getValueObject(paramField.zapu) == null) {
        bool = true;
      } else {
        bool = false;
      } 
      Preconditions.checkState(bool, "Concrete field shouldn't be value object: %s", new Object[] { paramField.zapu });
      boolean bool = paramField.zapt;
      try {
        char c = Character.toUpperCase(str.charAt(0));
        String str1;
        StringBuilder stringBuilder = new StringBuilder((str1 = str.substring(1)).valueOf(str1).length() + 4);
        stringBuilder.append("get");
        stringBuilder.append(c);
        stringBuilder.append(str1);
        str1 = stringBuilder.toString();
        return getClass().getMethod(str1, new Class[0]).invoke(this, new Object[0]);
      } catch (Exception paramField) {
        throw new RuntimeException(paramField);
      } 
    } 
    return getValueObject(paramField.zapu);
  }
  
  @KeepForSdk
  protected abstract Object getValueObject(String paramString);
  
  @KeepForSdk
  protected boolean isFieldSet(Field paramField) {
    String str;
    if (paramField.zaps == 11) {
      if (paramField.zapt) {
        str = paramField.zapu;
        throw new UnsupportedOperationException("Concrete type arrays not supported");
      } 
      str = str.zapu;
      throw new UnsupportedOperationException("Concrete types not supported");
    } 
    return isPrimitiveFieldSet(str.zapu);
  }
  
  @KeepForSdk
  protected abstract boolean isPrimitiveFieldSet(String paramString);
  
  @KeepForSdk
  protected void setBooleanInternal(Field<?, ?> paramField, String paramString, boolean paramBoolean) { throw new UnsupportedOperationException("Boolean not supported"); }
  
  @KeepForSdk
  protected void setDecodedBytesInternal(Field<?, ?> paramField, String paramString, byte[] paramArrayOfByte) { throw new UnsupportedOperationException("byte[] not supported"); }
  
  @KeepForSdk
  protected void setIntegerInternal(Field<?, ?> paramField, String paramString, int paramInt) { throw new UnsupportedOperationException("Integer not supported"); }
  
  @KeepForSdk
  protected void setLongInternal(Field<?, ?> paramField, String paramString, long paramLong) { throw new UnsupportedOperationException("Long not supported"); }
  
  @KeepForSdk
  protected void setStringInternal(Field<?, ?> paramField, String paramString1, String paramString2) { throw new UnsupportedOperationException("String not supported"); }
  
  @KeepForSdk
  protected void setStringsInternal(Field<?, ?> paramField, String paramString, ArrayList<String> paramArrayList) { throw new UnsupportedOperationException("String list not supported"); }
  
  @KeepForSdk
  public String toString() {
    Map map = getFieldMappings();
    StringBuilder stringBuilder = new StringBuilder(100);
    for (String str : map.keySet()) {
      Field field = (Field)map.get(str);
      if (isFieldSet(field)) {
        Object object = zab(field, getFieldValue(field));
        if (stringBuilder.length() == 0) {
          stringBuilder.append("{");
        } else {
          stringBuilder.append(",");
        } 
        stringBuilder.append("\"");
        stringBuilder.append(str);
        stringBuilder.append("\":");
        if (object == null) {
          stringBuilder.append("null");
          continue;
        } 
        switch (field.zaps) {
          default:
            if (field.zapr) {
              ArrayList arrayList = (ArrayList)object;
              stringBuilder.append("[");
              byte b = 0;
              int i = arrayList.size();
              while (b < i) {
                if (b)
                  stringBuilder.append(","); 
                object = arrayList.get(b);
                if (object != null)
                  zaa(stringBuilder, field, object); 
                b++;
              } 
              stringBuilder.append("]");
              continue;
            } 
            break;
          case 10:
            MapUtils.writeStringMapToJson(stringBuilder, (HashMap)object);
            continue;
          case 9:
            stringBuilder.append("\"");
            stringBuilder.append(Base64Utils.encodeUrlSafe((byte[])object));
            stringBuilder.append("\"");
            continue;
          case 8:
            stringBuilder.append("\"");
            stringBuilder.append(Base64Utils.encode((byte[])object));
            stringBuilder.append("\"");
            continue;
        } 
        zaa(stringBuilder, field, object);
      } 
    } 
    if (stringBuilder.length() > 0) {
      stringBuilder.append("}");
    } else {
      stringBuilder.append("{}");
    } 
    return stringBuilder.toString();
  }
  
  public final <O> void zaa(Field<Double, O> paramField, double paramDouble) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, Double.valueOf(paramDouble));
      return;
    } 
    zaa(paramField, paramField.zapu, paramDouble);
  }
  
  public final <O> void zaa(Field<Float, O> paramField, float paramFloat) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, Float.valueOf(paramFloat));
      return;
    } 
    zaa(paramField, paramField.zapu, paramFloat);
  }
  
  public final <O> void zaa(Field<Integer, O> paramField, int paramInt) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, Integer.valueOf(paramInt));
      return;
    } 
    setIntegerInternal(paramField, paramField.zapu, paramInt);
  }
  
  public final <O> void zaa(Field<Long, O> paramField, long paramLong) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, Long.valueOf(paramLong));
      return;
    } 
    setLongInternal(paramField, paramField.zapu, paramLong);
  }
  
  public final <O> void zaa(Field<String, O> paramField, String paramString) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, paramString);
      return;
    } 
    setStringInternal(paramField, paramField.zapu, paramString);
  }
  
  protected void zaa(Field<?, ?> paramField, String paramString, double paramDouble) { throw new UnsupportedOperationException("Double not supported"); }
  
  protected void zaa(Field<?, ?> paramField, String paramString, float paramFloat) { throw new UnsupportedOperationException("Float not supported"); }
  
  protected void zaa(Field<?, ?> paramField, String paramString, BigDecimal paramBigDecimal) { throw new UnsupportedOperationException("BigDecimal not supported"); }
  
  protected void zaa(Field<?, ?> paramField, String paramString, BigInteger paramBigInteger) { throw new UnsupportedOperationException("BigInteger not supported"); }
  
  protected void zaa(Field<?, ?> paramField, String paramString, ArrayList<Integer> paramArrayList) { throw new UnsupportedOperationException("Integer list not supported"); }
  
  protected void zaa(Field<?, ?> paramField, String paramString, Map<String, String> paramMap) { throw new UnsupportedOperationException("String map not supported"); }
  
  public final <O> void zaa(Field<BigDecimal, O> paramField, BigDecimal paramBigDecimal) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, paramBigDecimal);
      return;
    } 
    zaa(paramField, paramField.zapu, paramBigDecimal);
  }
  
  public final <O> void zaa(Field<BigInteger, O> paramField, BigInteger paramBigInteger) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, paramBigInteger);
      return;
    } 
    zaa(paramField, paramField.zapu, paramBigInteger);
  }
  
  public final <O> void zaa(Field<ArrayList<Integer>, O> paramField, ArrayList<Integer> paramArrayList) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, paramArrayList);
      return;
    } 
    zaa(paramField, paramField.zapu, paramArrayList);
  }
  
  public final <O> void zaa(Field<Map<String, String>, O> paramField, Map<String, String> paramMap) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, paramMap);
      return;
    } 
    zaa(paramField, paramField.zapu, paramMap);
  }
  
  public final <O> void zaa(Field<Boolean, O> paramField, boolean paramBoolean) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, Boolean.valueOf(paramBoolean));
      return;
    } 
    setBooleanInternal(paramField, paramField.zapu, paramBoolean);
  }
  
  public final <O> void zaa(Field<byte[], O> paramField, byte[] paramArrayOfByte) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, paramArrayOfByte);
      return;
    } 
    setDecodedBytesInternal(paramField, paramField.zapu, paramArrayOfByte);
  }
  
  protected void zab(Field<?, ?> paramField, String paramString, ArrayList<BigInteger> paramArrayList) { throw new UnsupportedOperationException("BigInteger list not supported"); }
  
  public final <O> void zab(Field<ArrayList<BigInteger>, O> paramField, ArrayList<BigInteger> paramArrayList) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, paramArrayList);
      return;
    } 
    zab(paramField, paramField.zapu, paramArrayList);
  }
  
  protected void zac(Field<?, ?> paramField, String paramString, ArrayList<Long> paramArrayList) { throw new UnsupportedOperationException("Long list not supported"); }
  
  public final <O> void zac(Field<ArrayList<Long>, O> paramField, ArrayList<Long> paramArrayList) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, paramArrayList);
      return;
    } 
    zac(paramField, paramField.zapu, paramArrayList);
  }
  
  protected void zad(Field<?, ?> paramField, String paramString, ArrayList<Float> paramArrayList) { throw new UnsupportedOperationException("Float list not supported"); }
  
  public final <O> void zad(Field<ArrayList<Float>, O> paramField, ArrayList<Float> paramArrayList) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, paramArrayList);
      return;
    } 
    zad(paramField, paramField.zapu, paramArrayList);
  }
  
  protected void zae(Field<?, ?> paramField, String paramString, ArrayList<Double> paramArrayList) { throw new UnsupportedOperationException("Double list not supported"); }
  
  public final <O> void zae(Field<ArrayList<Double>, O> paramField, ArrayList<Double> paramArrayList) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, paramArrayList);
      return;
    } 
    zae(paramField, paramField.zapu, paramArrayList);
  }
  
  protected void zaf(Field<?, ?> paramField, String paramString, ArrayList<BigDecimal> paramArrayList) { throw new UnsupportedOperationException("BigDecimal list not supported"); }
  
  public final <O> void zaf(Field<ArrayList<BigDecimal>, O> paramField, ArrayList<BigDecimal> paramArrayList) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, paramArrayList);
      return;
    } 
    zaf(paramField, paramField.zapu, paramArrayList);
  }
  
  protected void zag(Field<?, ?> paramField, String paramString, ArrayList<Boolean> paramArrayList) { throw new UnsupportedOperationException("Boolean list not supported"); }
  
  public final <O> void zag(Field<ArrayList<Boolean>, O> paramField, ArrayList<Boolean> paramArrayList) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, paramArrayList);
      return;
    } 
    zag(paramField, paramField.zapu, paramArrayList);
  }
  
  public final <O> void zah(Field<ArrayList<String>, O> paramField, ArrayList<String> paramArrayList) {
    if (Field.zaa(paramField) != null) {
      zaa(paramField, paramArrayList);
      return;
    } 
    setStringsInternal(paramField, paramField.zapu, paramArrayList);
  }
}
