package com.google.firebase.messaging;

import android.annotation.TargetApi;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.graphics.Color;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.SystemClock;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.NotificationCompat;
import android.support.v4.content.ContextCompat;
import android.text.TextUtils;
import android.util.Log;
import com.google.android.gms.common.util.PlatformVersion;
import java.util.Arrays;
import java.util.Iterator;
import java.util.MissingFormatArgumentException;
import java.util.concurrent.atomic.AtomicInteger;
import javax.annotation.concurrent.GuardedBy;
import org.json.JSONArray;
import org.json.JSONException;

public final class zza {
  private static final AtomicInteger zzdt = new AtomicInteger((int)SystemClock.elapsedRealtime());
  
  private final Context zzag;
  
  private final String zzdu;
  
  @GuardedBy("this")
  private Bundle zzdv;
  
  public zza(Context paramContext, String paramString) {
    this.zzag = paramContext;
    this.zzdu = paramString;
  }
  
  private final PendingIntent zza(int paramInt, Intent paramIntent) { return PendingIntent.getBroadcast(this.zzag, paramInt, (new Intent("com.google.firebase.MESSAGING_EVENT")).setComponent(new ComponentName(this.zzag, "com.google.firebase.iid.FirebaseInstanceIdReceiver")).putExtra("wrapped_intent", paramIntent), 1073741824); }
  
  public static String zza(Bundle paramBundle, String paramString) {
    String str2 = paramBundle.getString(paramString);
    String str1 = str2;
    if (str2 == null)
      str1 = paramBundle.getString(paramString.replace("gcm.n.", "gcm.notification.")); 
    return str1;
  }
  
  private static void zza(Intent paramIntent, Bundle paramBundle) {
    for (String str : paramBundle.keySet()) {
      if (str.startsWith("google.c.a.") || str.equals("from"))
        paramIntent.putExtra(str, paramBundle.getString(str)); 
    } 
  }
  
  private final Bundle zzap() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield zzdv : Landroid/os/Bundle;
    //   6: ifnull -> 18
    //   9: aload_0
    //   10: getfield zzdv : Landroid/os/Bundle;
    //   13: astore_1
    //   14: aload_0
    //   15: monitorexit
    //   16: aload_1
    //   17: areturn
    //   18: aload_0
    //   19: sipush #128
    //   22: invokespecial zzc : (I)Landroid/content/pm/ApplicationInfo;
    //   25: astore_1
    //   26: aload_1
    //   27: ifnull -> 101
    //   30: aload_1
    //   31: getfield metaData : Landroid/os/Bundle;
    //   34: ifnull -> 101
    //   37: aload_0
    //   38: aload_1
    //   39: getfield metaData : Landroid/os/Bundle;
    //   42: putfield zzdv : Landroid/os/Bundle;
    //   45: aload_0
    //   46: getfield zzdv : Landroid/os/Bundle;
    //   49: astore_1
    //   50: aload_0
    //   51: monitorexit
    //   52: aload_1
    //   53: areturn
    //   54: astore_1
    //   55: aload_1
    //   56: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   59: astore_1
    //   60: new java/lang/StringBuilder
    //   63: dup
    //   64: aload_1
    //   65: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   68: invokevirtual length : ()I
    //   71: bipush #35
    //   73: iadd
    //   74: invokespecial <init> : (I)V
    //   77: astore_2
    //   78: aload_2
    //   79: ldc 'Couldn't get own application info: '
    //   81: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   84: pop
    //   85: aload_2
    //   86: aload_1
    //   87: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   90: pop
    //   91: ldc 'FirebaseMessaging'
    //   93: aload_2
    //   94: invokevirtual toString : ()Ljava/lang/String;
    //   97: invokestatic w : (Ljava/lang/String;Ljava/lang/String;)I
    //   100: pop
    //   101: getstatic android/os/Bundle.EMPTY : Landroid/os/Bundle;
    //   104: astore_1
    //   105: aload_0
    //   106: monitorexit
    //   107: aload_1
    //   108: areturn
    //   109: astore_1
    //   110: aload_0
    //   111: monitorexit
    //   112: aload_1
    //   113: athrow
    // Exception table:
    //   from	to	target	type
    //   2	14	109	finally
    //   18	26	54	android/content/pm/PackageManager$NameNotFoundException
    //   18	26	109	finally
    //   30	50	54	android/content/pm/PackageManager$NameNotFoundException
    //   30	50	109	finally
    //   55	101	109	finally
    //   101	105	109	finally }
  
  @TargetApi(26)
  private final boolean zzb(int paramInt) {
    if (Build.VERSION.SDK_INT != 26)
      return true; 
    resources = this.zzag.getResources();
    try {
      if (resources.getDrawable(paramInt, null) instanceof android.graphics.drawable.AdaptiveIconDrawable) {
        StringBuilder stringBuilder = new StringBuilder(77);
        stringBuilder.append("Adaptive icons cannot be used in notifications. Ignoring icon id: ");
        stringBuilder.append(paramInt);
        Log.e("FirebaseMessaging", stringBuilder.toString());
        return false;
      } 
      return true;
    } catch (android.content.res.Resources.NotFoundException resources) {
      StringBuilder stringBuilder = new StringBuilder(66);
      stringBuilder.append("Couldn't find resource ");
      stringBuilder.append(paramInt);
      stringBuilder.append(", treating it as an invalid icon");
      Log.e("FirebaseMessaging", stringBuilder.toString());
      return false;
    } 
  }
  
  public static Object[] zzb(Bundle paramBundle, String paramString) {
    String str = String.valueOf(paramString);
    if ("_loc_args".length() != 0) {
      str = str.concat("_loc_args");
    } else {
      str = new String(str);
    } 
    str = zza(paramBundle, str);
    if (TextUtils.isEmpty(str))
      return null; 
    try {
      JSONArray jSONArray = new JSONArray(str);
      String[] arrayOfString = new String[jSONArray.length()];
      for (byte b = 0; b < arrayOfString.length; b++)
        arrayOfString[b] = jSONArray.opt(b); 
      return arrayOfString;
    } catch (JSONException paramBundle) {
      String str1 = String.valueOf(paramString);
      if ("_loc_args".length() != 0) {
        str1 = str1.concat("_loc_args");
      } else {
        str1 = new String(str1);
      } 
      StringBuilder stringBuilder = new StringBuilder((str1 = str1.substring(6)).valueOf(str1).length() + 41 + String.valueOf(str).length());
      stringBuilder.append("Malformed ");
      stringBuilder.append(str1);
      stringBuilder.append(": ");
      stringBuilder.append(str);
      stringBuilder.append("  Default value will be used.");
      Log.w("FirebaseMessaging", stringBuilder.toString());
      return null;
    } 
  }
  
  private final ApplicationInfo zzc(int paramInt) throws PackageManager.NameNotFoundException { return this.zzag.getPackageManager().getApplicationInfo(this.zzdu, paramInt); }
  
  private final String zzc(Bundle paramBundle, String paramString) {
    String str = zza(paramBundle, paramString);
    return !TextUtils.isEmpty(str) ? str : zze(paramBundle, paramString);
  }
  
  public static String zzd(Bundle paramBundle, String paramString) {
    paramString = String.valueOf(paramString);
    if ("_loc_key".length() != 0) {
      paramString = paramString.concat("_loc_key");
    } else {
      paramString = new String(paramString);
    } 
    return zza(paramBundle, paramString);
  }
  
  private final String zze(Bundle paramBundle, String paramString) {
    String str1;
    String str2 = zzd(paramBundle, paramString);
    if (TextUtils.isEmpty(str2))
      return null; 
    stringBuilder = this.zzag.getResources();
    int i = stringBuilder.getIdentifier(str2, "string", this.zzdu);
    if (i == 0) {
      str1 = String.valueOf(paramString);
      if ("_loc_key".length() != 0) {
        str1 = str1.concat("_loc_key");
      } else {
        str1 = new String(str1);
      } 
      stringBuilder = new StringBuilder((str1 = str1.substring(6)).valueOf(str1).length() + 49 + String.valueOf(paramString).length());
      stringBuilder.append(str1);
      stringBuilder.append(" resource not found: ");
      stringBuilder.append(paramString);
      stringBuilder.append(" Default value will be used.");
      Log.w("FirebaseMessaging", stringBuilder.toString());
      return null;
    } 
    Object[] arrayOfObject = zzb(str1, paramString);
    if (arrayOfObject == null)
      return stringBuilder.getString(i); 
    try {
      return stringBuilder.getString(i, arrayOfObject);
    } catch (MissingFormatArgumentException stringBuilder) {
      String str;
      StringBuilder stringBuilder1 = new StringBuilder((str = Arrays.toString(arrayOfObject)).valueOf(paramString).length() + 58 + String.valueOf(str).length());
      stringBuilder1.append("Missing format argument for ");
      stringBuilder1.append(paramString);
      stringBuilder1.append(": ");
      stringBuilder1.append(str);
      stringBuilder1.append(" Default value will be used.");
      Log.w("FirebaseMessaging", stringBuilder1.toString(), stringBuilder);
      return null;
    } 
  }
  
  @NonNull
  private final CharSequence zzg(Bundle paramBundle) {
    str = zzc(paramBundle, "gcm.n.title");
    if (!TextUtils.isEmpty(str))
      return str; 
    try {
      return zzc(0).loadLabel(this.zzag.getPackageManager());
    } catch (android.content.pm.PackageManager.NameNotFoundException str) {
      StringBuilder stringBuilder = new StringBuilder((str = (str = null).valueOf(str)).valueOf(str).length() + 35);
      stringBuilder.append("Couldn't get own application info: ");
      stringBuilder.append(str);
      Log.e("FirebaseMessaging", stringBuilder.toString());
      return "";
    } 
  }
  
  public static boolean zzh(Bundle paramBundle) { return ("1".equals(zza(paramBundle, "gcm.n.e")) || zza(paramBundle, "gcm.n.icon") != null); }
  
  public static String zzi(Bundle paramBundle) {
    String str2 = zza(paramBundle, "gcm.n.sound2");
    String str1 = str2;
    if (TextUtils.isEmpty(str2))
      str1 = zza(paramBundle, "gcm.n.sound"); 
    return str1;
  }
  
  @Nullable
  static Uri zzj(@NonNull Bundle paramBundle) {
    String str2 = zza(paramBundle, "gcm.n.link_android");
    String str1 = str2;
    if (TextUtils.isEmpty(str2))
      str1 = zza(paramBundle, "gcm.n.link"); 
    return !TextUtils.isEmpty(str1) ? Uri.parse(str1) : null;
  }
  
  private final int zzk(String paramString) { // Byte code:
    //   0: aload_1
    //   1: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   4: ifne -> 127
    //   7: aload_0
    //   8: getfield zzag : Landroid/content/Context;
    //   11: invokevirtual getResources : ()Landroid/content/res/Resources;
    //   14: astore #4
    //   16: aload #4
    //   18: aload_1
    //   19: ldc_w 'drawable'
    //   22: aload_0
    //   23: getfield zzdu : Ljava/lang/String;
    //   26: invokevirtual getIdentifier : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
    //   29: istore_2
    //   30: iload_2
    //   31: ifeq -> 44
    //   34: aload_0
    //   35: iload_2
    //   36: invokespecial zzb : (I)Z
    //   39: ifeq -> 44
    //   42: iload_2
    //   43: ireturn
    //   44: aload #4
    //   46: aload_1
    //   47: ldc_w 'mipmap'
    //   50: aload_0
    //   51: getfield zzdu : Ljava/lang/String;
    //   54: invokevirtual getIdentifier : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
    //   57: istore_2
    //   58: iload_2
    //   59: ifeq -> 72
    //   62: aload_0
    //   63: iload_2
    //   64: invokespecial zzb : (I)Z
    //   67: ifeq -> 72
    //   70: iload_2
    //   71: ireturn
    //   72: new java/lang/StringBuilder
    //   75: dup
    //   76: aload_1
    //   77: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   80: invokevirtual length : ()I
    //   83: bipush #61
    //   85: iadd
    //   86: invokespecial <init> : (I)V
    //   89: astore #4
    //   91: aload #4
    //   93: ldc_w 'Icon resource '
    //   96: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   99: pop
    //   100: aload #4
    //   102: aload_1
    //   103: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   106: pop
    //   107: aload #4
    //   109: ldc_w ' not found. Notification will use default icon.'
    //   112: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   115: pop
    //   116: ldc 'FirebaseMessaging'
    //   118: aload #4
    //   120: invokevirtual toString : ()Ljava/lang/String;
    //   123: invokestatic w : (Ljava/lang/String;Ljava/lang/String;)I
    //   126: pop
    //   127: aload_0
    //   128: invokespecial zzap : ()Landroid/os/Bundle;
    //   131: ldc_w 'com.google.firebase.messaging.default_notification_icon'
    //   134: iconst_0
    //   135: invokevirtual getInt : (Ljava/lang/String;I)I
    //   138: istore_3
    //   139: iload_3
    //   140: ifeq -> 153
    //   143: iload_3
    //   144: istore_2
    //   145: aload_0
    //   146: iload_3
    //   147: invokespecial zzb : (I)Z
    //   150: ifne -> 218
    //   153: aload_0
    //   154: iconst_0
    //   155: invokespecial zzc : (I)Landroid/content/pm/ApplicationInfo;
    //   158: getfield icon : I
    //   161: istore_2
    //   162: goto -> 218
    //   165: astore_1
    //   166: aload_1
    //   167: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   170: astore_1
    //   171: new java/lang/StringBuilder
    //   174: dup
    //   175: aload_1
    //   176: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   179: invokevirtual length : ()I
    //   182: bipush #35
    //   184: iadd
    //   185: invokespecial <init> : (I)V
    //   188: astore #4
    //   190: aload #4
    //   192: ldc 'Couldn't get own application info: '
    //   194: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   197: pop
    //   198: aload #4
    //   200: aload_1
    //   201: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   204: pop
    //   205: ldc 'FirebaseMessaging'
    //   207: aload #4
    //   209: invokevirtual toString : ()Ljava/lang/String;
    //   212: invokestatic w : (Ljava/lang/String;Ljava/lang/String;)I
    //   215: pop
    //   216: iload_3
    //   217: istore_2
    //   218: iload_2
    //   219: ifeq -> 232
    //   222: iload_2
    //   223: istore_3
    //   224: aload_0
    //   225: iload_2
    //   226: invokespecial zzb : (I)Z
    //   229: ifne -> 236
    //   232: ldc_w 17301651
    //   235: istore_3
    //   236: iload_3
    //   237: ireturn
    // Exception table:
    //   from	to	target	type
    //   153	162	165	android/content/pm/PackageManager$NameNotFoundException }
  
  private static boolean zzk(Bundle paramBundle) { return (paramBundle != null && "1".equals(paramBundle.getString("google.c.a.e"))); }
  
  private final Integer zzl(String paramString) {
    if (Build.VERSION.SDK_INT < 21)
      return null; 
    if (!TextUtils.isEmpty(paramString))
      try {
        int j = Color.parseColor(paramString);
        return Integer.valueOf(j);
      } catch (IllegalArgumentException illegalArgumentException) {
        StringBuilder stringBuilder = new StringBuilder(String.valueOf(paramString).length() + 54);
        stringBuilder.append("Color ");
        stringBuilder.append(paramString);
        stringBuilder.append(" not valid. Notification will use default color.");
        Log.w("FirebaseMessaging", stringBuilder.toString());
      }  
    int i = zzap().getInt("com.google.firebase.messaging.default_notification_color", 0);
    if (i != 0)
      try {
        i = ContextCompat.getColor(this.zzag, i);
        return Integer.valueOf(i);
      } catch (android.content.res.Resources.NotFoundException paramString) {
        Log.w("FirebaseMessaging", "Cannot find the color resource referenced in AndroidManifest.");
      }  
    return null;
  }
  
  @TargetApi(26)
  private final String zzm(String paramString) {
    if (!PlatformVersion.isAtLeastO())
      return null; 
    int i = 0;
    try {
      int j = (zzc(0)).targetSdkVersion;
      i = j;
    } catch (android.content.pm.PackageManager.NameNotFoundException nameNotFoundException) {}
    if (i < 26)
      return null; 
    NotificationManager notificationManager = (NotificationManager)this.zzag.getSystemService(NotificationManager.class);
    if (!TextUtils.isEmpty(paramString)) {
      if (notificationManager.getNotificationChannel(paramString) != null)
        return paramString; 
      StringBuilder stringBuilder = new StringBuilder(String.valueOf(paramString).length() + 122);
      stringBuilder.append("Notification Channel requested (");
      stringBuilder.append(paramString);
      stringBuilder.append(") has not been created by the app. Manifest configuration, or default, value will be used.");
      Log.w("FirebaseMessaging", stringBuilder.toString());
    } 
    paramString = zzap().getString("com.google.firebase.messaging.default_notification_channel_id");
    if (!TextUtils.isEmpty(paramString)) {
      if (notificationManager.getNotificationChannel(paramString) != null)
        return paramString; 
      Log.w("FirebaseMessaging", "Notification Channel set in AndroidManifest.xml has not been created by the app. Default value will be used.");
    } else {
      Log.w("FirebaseMessaging", "Missing Default Notification Channel metadata in AndroidManifest. Default value will be used.");
    } 
    if (notificationManager.getNotificationChannel("fcm_fallback_notification_channel") == null) {
      i = this.zzag.getResources().getIdentifier("fcm_fallback_notification_channel_label", "string", this.zzdu);
      notificationManager.createNotificationChannel(new NotificationChannel("fcm_fallback_notification_channel", this.zzag.getString(i), 3));
    } 
    return "fcm_fallback_notification_channel";
  }
  
  public final zzc zzf(Bundle paramBundle) {
    NotificationCompat.Builder builder = new NotificationCompat.Builder(this.zzag, zzm(zza(paramBundle, "gcm.n.android_channel_id")));
    builder.setAutoCancel(true);
    builder.setContentTitle(zzg(paramBundle));
    Uri uri = zzc(paramBundle, "gcm.n.body");
    if (!TextUtils.isEmpty(uri)) {
      builder.setContentText(uri);
      builder.setStyle((new NotificationCompat.BigTextStyle()).bigText(uri));
    } 
    builder.setSmallIcon(zzk(zza(paramBundle, "gcm.n.icon")));
    uri = zzi(paramBundle);
    boolean bool = TextUtils.isEmpty(uri);
    PendingIntent pendingIntent2 = null;
    if (bool) {
      uri = null;
    } else if (!"default".equals(uri) && this.zzag.getResources().getIdentifier(uri, "raw", this.zzdu) != 0) {
      String str1;
      StringBuilder stringBuilder = new StringBuilder((str1 = this.zzdu).valueOf(str1).length() + 24 + String.valueOf(uri).length());
      stringBuilder.append("android.resource://");
      stringBuilder.append(str1);
      stringBuilder.append("/raw/");
      stringBuilder.append(uri);
      Uri uri1 = Uri.parse(stringBuilder.toString());
    } else {
      uri = RingtoneManager.getDefaultUri(2);
    } 
    if (uri != null)
      builder.setSound(uri); 
    PendingIntent pendingIntent1 = zza(paramBundle, "gcm.n.click_action");
    if (!TextUtils.isEmpty(pendingIntent1)) {
      Intent intent = new Intent(pendingIntent1);
      intent.setPackage(this.zzdu);
      intent.setFlags(268435456);
    } else {
      Uri uri1 = zzj(paramBundle);
      if (uri1 != null) {
        Intent intent = new Intent("android.intent.action.VIEW");
        intent.setPackage(this.zzdu);
        intent.setData(uri1);
      } else {
        Intent intent = this.zzag.getPackageManager().getLaunchIntentForPackage(this.zzdu);
        pendingIntent1 = intent;
        if (intent == null) {
          Log.w("FirebaseMessaging", "No activity found to launch app");
          pendingIntent1 = intent;
        } 
      } 
    } 
    if (pendingIntent1 == null) {
      pendingIntent1 = null;
    } else {
      pendingIntent1.addFlags(67108864);
      Bundle bundle = new Bundle(paramBundle);
      Iterator iterator = bundle.keySet().iterator();
      while (iterator.hasNext()) {
        String str1 = (String)iterator.next();
        if (str1 != null && str1.startsWith("google.c."))
          iterator.remove(); 
      } 
      pendingIntent1.putExtras(bundle);
      for (String str1 : bundle.keySet()) {
        if (str1.startsWith("gcm.n.") || str1.startsWith("gcm.notification."))
          pendingIntent1.removeExtra(str1); 
      } 
      PendingIntent pendingIntent4 = PendingIntent.getActivity(this.zzag, zzdt.incrementAndGet(), pendingIntent1, 1073741824);
      PendingIntent pendingIntent3 = pendingIntent4;
      if (zzk(paramBundle)) {
        Intent intent = new Intent("com.google.firebase.messaging.NOTIFICATION_OPEN");
        zza(intent, paramBundle);
        intent.putExtra("pending_intent", pendingIntent4);
        pendingIntent1 = zza(zzdt.incrementAndGet(), intent);
      } 
    } 
    builder.setContentIntent(pendingIntent1);
    if (!zzk(paramBundle)) {
      pendingIntent1 = pendingIntent2;
    } else {
      Intent intent = new Intent("com.google.firebase.messaging.NOTIFICATION_DISMISS");
      zza(intent, paramBundle);
      pendingIntent1 = zza(zzdt.incrementAndGet(), intent);
    } 
    if (pendingIntent1 != null)
      builder.setDeleteIntent(pendingIntent1); 
    Integer integer = zzl(zza(paramBundle, "gcm.n.color"));
    if (integer != null)
      builder.setColor(integer.intValue()); 
    String str = zza(paramBundle, "gcm.n.tag");
    if (TextUtils.isEmpty(str)) {
      long l = SystemClock.uptimeMillis();
      StringBuilder stringBuilder = new StringBuilder(37);
      stringBuilder.append("FCM-Notification:");
      stringBuilder.append(l);
      str = stringBuilder.toString();
    } 
    return new zzc(builder, str, 0);
  }
}
