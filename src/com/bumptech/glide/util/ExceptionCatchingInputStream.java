package com.bumptech.glide.util;

import java.io.IOException;
import java.io.InputStream;
import java.util.Queue;

public class ExceptionCatchingInputStream extends InputStream {
  private static final Queue<ExceptionCatchingInputStream> QUEUE = Util.createQueue(0);
  
  private IOException exception;
  
  private InputStream wrapped;
  
  static void clearQueue() {
    while (!QUEUE.isEmpty())
      QUEUE.remove(); 
  }
  
  public static ExceptionCatchingInputStream obtain(InputStream paramInputStream) {
    synchronized (QUEUE) {
      ExceptionCatchingInputStream exceptionCatchingInputStream = (ExceptionCatchingInputStream)QUEUE.poll();
      null = exceptionCatchingInputStream;
      if (exceptionCatchingInputStream == null)
        null = new ExceptionCatchingInputStream(); 
      null.setInputStream(paramInputStream);
      return null;
    } 
  }
  
  public int available() throws IOException { return this.wrapped.available(); }
  
  public void close() { this.wrapped.close(); }
  
  public IOException getException() { return this.exception; }
  
  public void mark(int paramInt) { this.wrapped.mark(paramInt); }
  
  public boolean markSupported() { return this.wrapped.markSupported(); }
  
  public int read() throws IOException {
    try {
      return this.wrapped.read();
    } catch (IOException iOException) {
      this.exception = iOException;
      return -1;
    } 
  }
  
  public int read(byte[] paramArrayOfByte) throws IOException {
    try {
      return this.wrapped.read(paramArrayOfByte);
    } catch (IOException paramArrayOfByte) {
      this.exception = paramArrayOfByte;
      return -1;
    } 
  }
  
  public int read(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws IOException {
    try {
      return this.wrapped.read(paramArrayOfByte, paramInt1, paramInt2);
    } catch (IOException paramArrayOfByte) {
      this.exception = paramArrayOfByte;
      return -1;
    } 
  }
  
  public void release() {
    this.exception = null;
    this.wrapped = null;
    synchronized (QUEUE) {
      QUEUE.offer(this);
      return;
    } 
  }
  
  public void reset() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield wrapped : Ljava/io/InputStream;
    //   6: invokevirtual reset : ()V
    //   9: aload_0
    //   10: monitorexit
    //   11: return
    //   12: astore_1
    //   13: aload_0
    //   14: monitorexit
    //   15: aload_1
    //   16: athrow
    // Exception table:
    //   from	to	target	type
    //   2	9	12	finally }
  
  void setInputStream(InputStream paramInputStream) { this.wrapped = paramInputStream; }
  
  public long skip(long paramLong) throws IOException {
    try {
      return this.wrapped.skip(paramLong);
    } catch (IOException iOException) {
      this.exception = iOException;
      return 0L;
    } 
  }
}
