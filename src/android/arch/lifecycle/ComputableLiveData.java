package android.arch.lifecycle;

import android.arch.core.executor.ArchTaskExecutor;
import android.support.annotation.NonNull;
import android.support.annotation.RestrictTo;
import android.support.annotation.VisibleForTesting;
import android.support.annotation.WorkerThread;
import java.util.concurrent.Executor;
import java.util.concurrent.atomic.AtomicBoolean;

@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
public abstract class ComputableLiveData<T> extends Object {
  private AtomicBoolean mComputing = new AtomicBoolean(false);
  
  private final Executor mExecutor;
  
  private AtomicBoolean mInvalid = new AtomicBoolean(true);
  
  @VisibleForTesting
  final Runnable mInvalidationRunnable = new Object(this);
  
  private final LiveData<T> mLiveData;
  
  @VisibleForTesting
  final Runnable mRefreshRunnable = new Object(this);
  
  public ComputableLiveData() { this(ArchTaskExecutor.getIOThreadExecutor()); }
  
  public ComputableLiveData(@NonNull Executor paramExecutor) {
    this.mExecutor = paramExecutor;
    this.mLiveData = new Object(this);
  }
  
  @WorkerThread
  protected abstract T compute();
  
  @NonNull
  public LiveData<T> getLiveData() { return this.mLiveData; }
  
  public void invalidate() { ArchTaskExecutor.getInstance().executeOnMainThread(this.mInvalidationRunnable); }
}
