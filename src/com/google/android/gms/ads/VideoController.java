package com.google.android.gms.ads;

import android.os.RemoteException;
import android.support.annotation.Nullable;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.internal.ads.zzadh;
import com.google.android.gms.internal.ads.zzane;
import com.google.android.gms.internal.ads.zzlo;
import com.google.android.gms.internal.ads.zzmt;
import javax.annotation.concurrent.GuardedBy;

@zzadh
public final class VideoController {
  @KeepForSdk
  public static final int PLAYBACK_STATE_ENDED = 3;
  
  @KeepForSdk
  public static final int PLAYBACK_STATE_PAUSED = 2;
  
  @KeepForSdk
  public static final int PLAYBACK_STATE_PLAYING = 1;
  
  @KeepForSdk
  public static final int PLAYBACK_STATE_READY = 5;
  
  @KeepForSdk
  public static final int PLAYBACK_STATE_UNKNOWN = 0;
  
  private final Object mLock = new Object();
  
  @Nullable
  @GuardedBy("mLock")
  private zzlo zzux;
  
  @Nullable
  @GuardedBy("mLock")
  private VideoLifecycleCallbacks zzuy;
  
  public final float getAspectRatio() {
    synchronized (this.mLock) {
      if (this.zzux == null)
        return 0.0F; 
      try {
        return this.zzux.getAspectRatio();
      } catch (RemoteException remoteException) {
        zzane.zzb("Unable to call getAspectRatio on video controller.", remoteException);
        return 0.0F;
      } 
    } 
  }
  
  @KeepForSdk
  public final int getPlaybackState() {
    synchronized (this.mLock) {
      if (this.zzux == null)
        return 0; 
      try {
        return this.zzux.getPlaybackState();
      } catch (RemoteException remoteException) {
        zzane.zzb("Unable to call getPlaybackState on video controller.", remoteException);
        return 0;
      } 
    } 
  }
  
  @Nullable
  public final VideoLifecycleCallbacks getVideoLifecycleCallbacks() {
    synchronized (this.mLock) {
      return this.zzuy;
    } 
  }
  
  public final boolean hasVideoContent() {
    synchronized (this.mLock) {
      if (this.zzux != null)
        return true; 
    } 
    boolean bool = false;
    /* monitor exit ClassFileLocalVariableReferenceExpression{type=ObjectType{java/lang/Object}, name=SYNTHETIC_LOCAL_VARIABLE_2} */
    return bool;
  }
  
  public final boolean isClickToExpandEnabled() {
    synchronized (this.mLock) {
      if (this.zzux == null)
        return false; 
      try {
        return this.zzux.isClickToExpandEnabled();
      } catch (RemoteException remoteException) {
        zzane.zzb("Unable to call isClickToExpandEnabled.", remoteException);
        return false;
      } 
    } 
  }
  
  public final boolean isCustomControlsEnabled() {
    synchronized (this.mLock) {
      if (this.zzux == null)
        return false; 
      try {
        return this.zzux.isCustomControlsEnabled();
      } catch (RemoteException remoteException) {
        zzane.zzb("Unable to call isUsingCustomPlayerControls.", remoteException);
        return false;
      } 
    } 
  }
  
  public final boolean isMuted() {
    synchronized (this.mLock) {
      if (this.zzux == null)
        return true; 
      try {
        return this.zzux.isMuted();
      } catch (RemoteException remoteException) {
        zzane.zzb("Unable to call isMuted on video controller.", remoteException);
        return true;
      } 
    } 
  }
  
  public final void mute(boolean paramBoolean) {
    synchronized (this.mLock) {
      if (this.zzux == null)
        return; 
      try {
        this.zzux.mute(paramBoolean);
      } catch (RemoteException remoteException) {
        zzane.zzb("Unable to call mute on video controller.", remoteException);
      } 
      return;
    } 
  }
  
  public final void pause() {
    synchronized (this.mLock) {
      if (this.zzux == null)
        return; 
      try {
        this.zzux.pause();
      } catch (RemoteException remoteException) {
        zzane.zzb("Unable to call pause on video controller.", remoteException);
      } 
      return;
    } 
  }
  
  public final void play() {
    synchronized (this.mLock) {
      if (this.zzux == null)
        return; 
      try {
        this.zzux.play();
      } catch (RemoteException remoteException) {
        zzane.zzb("Unable to call play on video controller.", remoteException);
      } 
      return;
    } 
  }
  
  public final void setVideoLifecycleCallbacks(VideoLifecycleCallbacks paramVideoLifecycleCallbacks) {
    Preconditions.checkNotNull(paramVideoLifecycleCallbacks, "VideoLifecycleCallbacks may not be null.");
    synchronized (this.mLock) {
      this.zzuy = paramVideoLifecycleCallbacks;
      if (this.zzux == null)
        return; 
      try {
        this.zzux.zza(new zzmt(paramVideoLifecycleCallbacks));
      } catch (RemoteException paramVideoLifecycleCallbacks) {
        zzane.zzb("Unable to call setVideoLifecycleCallbacks on video controller.", paramVideoLifecycleCallbacks);
      } 
      return;
    } 
  }
  
  public final void zza(zzlo paramzzlo) {
    synchronized (this.mLock) {
      this.zzux = paramzzlo;
      if (this.zzuy != null)
        setVideoLifecycleCallbacks(this.zzuy); 
      return;
    } 
  }
  
  public final zzlo zzbc() {
    synchronized (this.mLock) {
      return this.zzux;
    } 
  }
}
