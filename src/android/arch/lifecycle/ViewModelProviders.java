package android.arch.lifecycle;

import android.app.Activity;
import android.app.Application;
import android.support.annotation.MainThread;
import android.support.annotation.NonNull;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;

public class ViewModelProviders {
  private static Activity checkActivity(Fragment paramFragment) {
    FragmentActivity fragmentActivity = paramFragment.getActivity();
    if (fragmentActivity != null)
      return fragmentActivity; 
    throw new IllegalStateException("Can't create ViewModelProvider for detached fragment");
  }
  
  private static Application checkApplication(Activity paramActivity) {
    Application application = paramActivity.getApplication();
    if (application != null)
      return application; 
    throw new IllegalStateException("Your activity/fragment is not yet attached to Application. You can't request ViewModel before onCreate call.");
  }
  
  @MainThread
  @NonNull
  public static ViewModelProvider of(@NonNull Fragment paramFragment) {
    ViewModelProvider.AndroidViewModelFactory androidViewModelFactory = ViewModelProvider.AndroidViewModelFactory.getInstance(checkApplication(checkActivity(paramFragment)));
    return new ViewModelProvider(ViewModelStores.of(paramFragment), androidViewModelFactory);
  }
  
  @MainThread
  @NonNull
  public static ViewModelProvider of(@NonNull Fragment paramFragment, @NonNull ViewModelProvider.Factory paramFactory) {
    checkApplication(checkActivity(paramFragment));
    return new ViewModelProvider(ViewModelStores.of(paramFragment), paramFactory);
  }
  
  @MainThread
  @NonNull
  public static ViewModelProvider of(@NonNull FragmentActivity paramFragmentActivity) {
    ViewModelProvider.AndroidViewModelFactory androidViewModelFactory = ViewModelProvider.AndroidViewModelFactory.getInstance(checkApplication(paramFragmentActivity));
    return new ViewModelProvider(ViewModelStores.of(paramFragmentActivity), androidViewModelFactory);
  }
  
  @MainThread
  @NonNull
  public static ViewModelProvider of(@NonNull FragmentActivity paramFragmentActivity, @NonNull ViewModelProvider.Factory paramFactory) {
    checkApplication(paramFragmentActivity);
    return new ViewModelProvider(ViewModelStores.of(paramFragmentActivity), paramFactory);
  }
}
