package com.android.volley.toolbox;

import android.text.TextUtils;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.error.AuthFailureError;
import com.android.volley.misc.MultipartUtils;
import com.android.volley.request.MultiPartRequest;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.ProtocolVersion;
import org.apache.http.entity.BasicHttpEntity;
import org.apache.http.message.BasicHeader;
import org.apache.http.message.BasicHttpResponse;
import org.apache.http.message.BasicStatusLine;

public class HurlStack implements HttpStack {
  private final SSLSocketFactory mSslSocketFactory;
  
  private UrlRewriter mUrlRewriter;
  
  private String mUserAgent;
  
  public HurlStack() { this(null); }
  
  public HurlStack(UrlRewriter paramUrlRewriter) { this(paramUrlRewriter, null); }
  
  public HurlStack(UrlRewriter paramUrlRewriter, SSLSocketFactory paramSSLSocketFactory) {
    this.mUrlRewriter = paramUrlRewriter;
    this.mSslSocketFactory = paramSSLSocketFactory;
  }
  
  public HurlStack(UrlRewriter paramUrlRewriter, SSLSocketFactory paramSSLSocketFactory, String paramString) {
    this.mUrlRewriter = paramUrlRewriter;
    this.mSslSocketFactory = paramSSLSocketFactory;
    this.mUserAgent = paramString;
  }
  
  private static void addBodyIfExists(HttpURLConnection paramHttpURLConnection, Request<?> paramRequest) throws IOException, AuthFailureError {
    byte[] arrayOfByte = paramRequest.getBody();
    if (arrayOfByte != null) {
      Response.ProgressListener progressListener = null;
      if (paramRequest instanceof Response.ProgressListener)
        progressListener = (Response.ProgressListener)paramRequest; 
      paramHttpURLConnection.setDoOutput(true);
      paramHttpURLConnection.addRequestProperty("Content-Type", paramRequest.getBodyContentType());
      DataOutputStream dataOutputStream = new DataOutputStream(paramHttpURLConnection.getOutputStream());
      if (progressListener != null) {
        int m = arrayOfByte.length;
        int i = Math.min(2048, Math.max(m + 0, 0));
        int j = 0;
        int k = 0;
        while (i > 0) {
          int n = j + i;
          if (n <= m) {
            dataOutputStream.write(arrayOfByte, j, i);
            k += i;
            progressListener.onProgress(k, m);
            i = Math.min(i, Math.max(m - n, 0));
            j = n;
          } 
        } 
      } else {
        dataOutputStream.write(arrayOfByte);
      } 
      dataOutputStream.close();
    } 
  }
  
  private static HttpEntity entityFromConnection(HttpURLConnection paramHttpURLConnection) {
    InputStream inputStream;
    BasicHttpEntity basicHttpEntity = new BasicHttpEntity();
    try {
      inputStream = paramHttpURLConnection.getInputStream();
    } catch (IOException iOException) {
      inputStream = paramHttpURLConnection.getErrorStream();
    } 
    basicHttpEntity.setContent(inputStream);
    basicHttpEntity.setContentLength(paramHttpURLConnection.getContentLength());
    basicHttpEntity.setContentEncoding(paramHttpURLConnection.getContentEncoding());
    basicHttpEntity.setContentType(paramHttpURLConnection.getContentType());
    return basicHttpEntity;
  }
  
  private static boolean hasResponseBody(int paramInt1, int paramInt2) { return (paramInt1 != 4 && (100 > paramInt2 || paramInt2 >= 200) && paramInt2 != 204 && paramInt2 != 304); }
  
  private HttpURLConnection openConnection(URL paramURL, Request<?> paramRequest) throws IOException {
    HttpURLConnection httpURLConnection = createConnection(paramURL);
    int i = paramRequest.getTimeoutMs();
    httpURLConnection.setConnectTimeout(i);
    httpURLConnection.setReadTimeout(i);
    httpURLConnection.setUseCaches(false);
    httpURLConnection.setDoInput(true);
    if ("https".equals(paramURL.getProtocol())) {
      SSLSocketFactory sSLSocketFactory = this.mSslSocketFactory;
      if (sSLSocketFactory != null)
        ((HttpsURLConnection)httpURLConnection).setSSLSocketFactory(sSLSocketFactory); 
    } 
    return httpURLConnection;
  }
  
  private static void setConnectionParametersForMultipartRequest(HttpURLConnection paramHttpURLConnection, Request<?> paramRequest) throws IOException, AuthFailureError {
    MultiPartRequest multiPartRequest = (MultiPartRequest)paramRequest;
    String str2 = multiPartRequest.getProtocolCharset();
    i = (int)(System.currentTimeMillis() / 1000L);
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("--");
    stringBuilder.append(i);
    str1 = stringBuilder.toString();
    paramHttpURLConnection.setRequestMethod("POST");
    paramHttpURLConnection.setDoOutput(true);
    paramHttpURLConnection.setRequestProperty("Content-Type", String.format("multipart/form-data; charset=%s; boundary=%s", new Object[] { str2, Integer.valueOf(i) }));
    map2 = multiPartRequest.getMultipartParams();
    map3 = multiPartRequest.getFilesToUpload();
    if (multiPartRequest.isFixedStreamingMode()) {
      paramHttpURLConnection.setFixedLengthStreamingMode(MultipartUtils.getContentLengthForMultipartRequest(str1, map2, map3));
    } else {
      paramHttpURLConnection.setChunkedStreamingMode(0);
    } 
    progressListener = (Response.ProgressListener)paramRequest;
    try {
      map1 = paramHttpURLConnection.getOutputStream();
      httpURLConnection = new PrintWriter(new OutputStreamWriter(map1, str2), true);
    } catch (Exception paramRequest) {
    
    } finally {
      paramHttpURLConnection = null;
    } 
    try {
      return;
    } finally {
      map2 = null;
      httpURLConnection = paramHttpURLConnection;
    } 
    if (httpURLConnection != null)
      httpURLConnection.close(); 
    throw map1;
  }
  
  static void setConnectionParametersForRequest(HttpURLConnection paramHttpURLConnection, Request<?> paramRequest) throws IOException, AuthFailureError {
    switch (paramRequest.getMethod()) {
      default:
        throw new IllegalStateException("Unknown method type.");
      case 7:
        if (paramRequest.shouldOverridePatch()) {
          paramHttpURLConnection.setRequestMethod("POST");
          paramHttpURLConnection.setRequestProperty("X-HTTP-Method-Override", "PATCH");
        } else {
          paramHttpURLConnection.setRequestMethod("PATCH");
        } 
        addBodyIfExists(paramHttpURLConnection, paramRequest);
        return;
      case 6:
        paramHttpURLConnection.setRequestMethod("TRACE");
        return;
      case 5:
        paramHttpURLConnection.setRequestMethod("OPTIONS");
        return;
      case 4:
        paramHttpURLConnection.setRequestMethod("HEAD");
        return;
      case 3:
        paramHttpURLConnection.setRequestMethod("DELETE");
        return;
      case 2:
        paramHttpURLConnection.setRequestMethod("PUT");
        addBodyIfExists(paramHttpURLConnection, paramRequest);
        return;
      case 1:
        paramHttpURLConnection.setRequestMethod("POST");
        addBodyIfExists(paramHttpURLConnection, paramRequest);
        return;
      case 0:
        paramHttpURLConnection.setRequestMethod("GET");
        return;
      case -1:
        break;
    } 
    byte[] arrayOfByte = paramRequest.getPostBody();
    if (arrayOfByte != null) {
      paramHttpURLConnection.setDoOutput(true);
      paramHttpURLConnection.setRequestMethod("POST");
      paramHttpURLConnection.addRequestProperty("Content-Type", paramRequest.getPostBodyContentType());
      DataOutputStream dataOutputStream = new DataOutputStream(paramHttpURLConnection.getOutputStream());
      dataOutputStream.write(arrayOfByte);
      dataOutputStream.close();
    } 
  }
  
  protected HttpURLConnection createConnection(URL paramURL) throws IOException {
    HttpURLConnection httpURLConnection;
    httpURLConnection.setInstanceFollowRedirects((httpURLConnection = (HttpURLConnection)paramURL.openConnection()).getFollowRedirects());
    return httpURLConnection;
  }
  
  public HttpResponse performRequest(Request<?> paramRequest, Map<String, String> paramMap) throws AuthFailureError, IOException {
    StringBuilder stringBuilder;
    String str2 = paramRequest.getUrl();
    HashMap hashMap = new HashMap();
    hashMap.putAll(paramRequest.getHeaders());
    hashMap.putAll(paramMap);
    String str1 = this.mUrlRewriter;
    if (str1 != null) {
      String str = str1.rewriteUrl(str2);
      if (str == null) {
        stringBuilder = new StringBuilder();
        stringBuilder.append("URL blocked by rewriter: ");
        stringBuilder.append(str2);
        throw new IOException(stringBuilder.toString());
      } 
    } else {
      str1 = str2;
    } 
    HttpURLConnection httpURLConnection = openConnection(new URL(str1), stringBuilder);
    if (!TextUtils.isEmpty(this.mUserAgent))
      httpURLConnection.setRequestProperty("User-Agent", this.mUserAgent); 
    for (String str : hashMap.keySet())
      httpURLConnection.addRequestProperty(str, (String)hashMap.get(str)); 
    if (stringBuilder instanceof MultiPartRequest) {
      setConnectionParametersForMultipartRequest(httpURLConnection, stringBuilder);
    } else {
      setConnectionParametersForRequest(httpURLConnection, stringBuilder);
    } 
    ProtocolVersion protocolVersion = new ProtocolVersion("HTTP", 1, 1);
    if (httpURLConnection.getResponseCode() != -1) {
      BasicStatusLine basicStatusLine = new BasicStatusLine(protocolVersion, httpURLConnection.getResponseCode(), httpURLConnection.getResponseMessage());
      BasicHttpResponse basicHttpResponse = new BasicHttpResponse(basicStatusLine);
      if (hasResponseBody(stringBuilder.getMethod(), basicStatusLine.getStatusCode()))
        basicHttpResponse.setEntity(entityFromConnection(httpURLConnection)); 
      for (Map.Entry entry : httpURLConnection.getHeaderFields().entrySet()) {
        if (entry.getKey() != null)
          basicHttpResponse.addHeader(new BasicHeader((String)entry.getKey(), (String)((List)entry.getValue()).get(0))); 
      } 
      return basicHttpResponse;
    } 
    IOException iOException = new IOException("Could not retrieve response code from HttpUrlConnection.");
    throw iOException;
  }
}
