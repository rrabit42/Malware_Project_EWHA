package com.bumptech.glide.load.resource.gifbitmap;

import android.graphics.Bitmap;
import com.bumptech.glide.load.ResourceDecoder;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.model.ImageVideoWrapper;
import com.bumptech.glide.load.resource.bitmap.BitmapResource;
import com.bumptech.glide.load.resource.bitmap.ImageHeaderParser;
import com.bumptech.glide.load.resource.gif.GifDrawable;
import com.bumptech.glide.util.ByteArrayPool;
import java.io.IOException;
import java.io.InputStream;

public class GifBitmapWrapperResourceDecoder extends Object implements ResourceDecoder<ImageVideoWrapper, GifBitmapWrapper> {
  private static final ImageTypeParser DEFAULT_PARSER = new ImageTypeParser();
  
  private static final BufferedStreamFactory DEFAULT_STREAM_FACTORY = new BufferedStreamFactory();
  
  static final int MARK_LIMIT_BYTES = 2048;
  
  private final ResourceDecoder<ImageVideoWrapper, Bitmap> bitmapDecoder;
  
  private final BitmapPool bitmapPool;
  
  private final ResourceDecoder<InputStream, GifDrawable> gifDecoder;
  
  private String id;
  
  private final ImageTypeParser parser;
  
  private final BufferedStreamFactory streamFactory;
  
  public GifBitmapWrapperResourceDecoder(ResourceDecoder<ImageVideoWrapper, Bitmap> paramResourceDecoder1, ResourceDecoder<InputStream, GifDrawable> paramResourceDecoder2, BitmapPool paramBitmapPool) { this(paramResourceDecoder1, paramResourceDecoder2, paramBitmapPool, DEFAULT_PARSER, DEFAULT_STREAM_FACTORY); }
  
  GifBitmapWrapperResourceDecoder(ResourceDecoder<ImageVideoWrapper, Bitmap> paramResourceDecoder1, ResourceDecoder<InputStream, GifDrawable> paramResourceDecoder2, BitmapPool paramBitmapPool, ImageTypeParser paramImageTypeParser, BufferedStreamFactory paramBufferedStreamFactory) {
    this.bitmapDecoder = paramResourceDecoder1;
    this.gifDecoder = paramResourceDecoder2;
    this.bitmapPool = paramBitmapPool;
    this.parser = paramImageTypeParser;
    this.streamFactory = paramBufferedStreamFactory;
  }
  
  private GifBitmapWrapper decode(ImageVideoWrapper paramImageVideoWrapper, int paramInt1, int paramInt2, byte[] paramArrayOfByte) throws IOException { return (paramImageVideoWrapper.getStream() != null) ? decodeStream(paramImageVideoWrapper, paramInt1, paramInt2, paramArrayOfByte) : decodeBitmapWrapper(paramImageVideoWrapper, paramInt1, paramInt2); }
  
  private GifBitmapWrapper decodeBitmapWrapper(ImageVideoWrapper paramImageVideoWrapper, int paramInt1, int paramInt2) throws IOException {
    GifBitmapWrapper gifBitmapWrapper;
    Resource resource = this.bitmapDecoder.decode(paramImageVideoWrapper, paramInt1, paramInt2);
    paramImageVideoWrapper = null;
    if (resource != null)
      gifBitmapWrapper = new GifBitmapWrapper(resource, null); 
    return gifBitmapWrapper;
  }
  
  private GifBitmapWrapper decodeGifWrapper(InputStream paramInputStream, int paramInt1, int paramInt2) throws IOException {
    Resource resource = this.gifDecoder.decode(paramInputStream, paramInt1, paramInt2);
    if (resource != null) {
      GifDrawable gifDrawable = (GifDrawable)resource.get();
      return (gifDrawable.getFrameCount() > 1) ? new GifBitmapWrapper(null, resource) : new GifBitmapWrapper(new BitmapResource(gifDrawable.getFirstFrame(), this.bitmapPool), null);
    } 
    return null;
  }
  
  private GifBitmapWrapper decodeStream(ImageVideoWrapper paramImageVideoWrapper, int paramInt1, int paramInt2, byte[] paramArrayOfByte) throws IOException {
    InputStream inputStream = this.streamFactory.build(paramImageVideoWrapper.getStream(), paramArrayOfByte);
    inputStream.mark(2048);
    ImageHeaderParser.ImageType imageType = this.parser.parse(inputStream);
    inputStream.reset();
    if (imageType == ImageHeaderParser.ImageType.GIF) {
      GifBitmapWrapper gifBitmapWrapper1 = decodeGifWrapper(inputStream, paramInt1, paramInt2);
    } else {
      imageType = null;
    } 
    GifBitmapWrapper gifBitmapWrapper = imageType;
    if (imageType == null)
      gifBitmapWrapper = decodeBitmapWrapper(new ImageVideoWrapper(inputStream, paramImageVideoWrapper.getFileDescriptor()), paramInt1, paramInt2); 
    return gifBitmapWrapper;
  }
  
  public Resource<GifBitmapWrapper> decode(ImageVideoWrapper paramImageVideoWrapper, int paramInt1, int paramInt2) throws IOException {
    byteArrayPool = ByteArrayPool.get();
    arrayOfByte = byteArrayPool.getBytes();
    try {
      gifBitmapWrapper = decode(paramImageVideoWrapper, paramInt1, paramInt2, arrayOfByte);
      return (gifBitmapWrapper != null) ? new GifBitmapWrapperResource(gifBitmapWrapper) : null;
    } finally {
      byteArrayPool.releaseBytes(arrayOfByte);
    } 
  }
  
  public String getId() {
    if (this.id == null) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append(this.gifDecoder.getId());
      stringBuilder.append(this.bitmapDecoder.getId());
      this.id = stringBuilder.toString();
    } 
    return this.id;
  }
}
