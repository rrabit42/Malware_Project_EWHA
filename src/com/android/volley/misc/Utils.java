package com.android.volley.misc;

import android.annotation.SuppressLint;
import android.annotation.TargetApi;
import android.content.Context;
import android.os.Build;
import android.os.Environment;
import android.os.StatFs;
import android.os.StrictMode;
import android.text.TextUtils;
import android.util.Log;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.io.StringWriter;
import java.nio.charset.Charset;
import org.apache.http.Header;
import org.apache.http.HttpResponse;

public class Utils {
  public static final int ANIMATION_FADE_IN_TIME = 200;
  
  public static final String SCHEME_ANDROID_RESOURCE = "android.resource";
  
  public static final String SCHEME_ASSETS = "asset";
  
  public static final String SCHEME_CONTENT = "content";
  
  public static final String SCHEME_FILE = "file";
  
  public static final String SCHEME_VIDEO = "video";
  
  public static final Charset US_ASCII;
  
  public static final Charset UTF_8 = (US_ASCII = Charset.forName("US-ASCII")).forName("UTF-8");
  
  public static void closeQuietly(Closeable paramCloseable) {
    if (paramCloseable != null)
      try {
        paramCloseable.close();
        return;
      } catch (RuntimeException paramCloseable) {
        throw paramCloseable;
      } catch (Exception paramCloseable) {
        return;
      }  
  }
  
  public static void deleteContents(File paramFile) throws IOException {
    File[] arrayOfFile = paramFile.listFiles();
    if (arrayOfFile != null) {
      int i = arrayOfFile.length;
      byte b = 0;
      while (b < i) {
        paramFile = arrayOfFile[b];
        if (paramFile.isDirectory())
          deleteContents(paramFile); 
        if (paramFile.delete()) {
          b++;
          continue;
        } 
        StringBuilder stringBuilder1 = new StringBuilder();
        stringBuilder1.append("failed to delete file: ");
        stringBuilder1.append(paramFile);
        throw new IOException(stringBuilder1.toString());
      } 
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("not a readable directory: ");
    stringBuilder.append(paramFile);
    IOException iOException = new IOException(stringBuilder.toString());
    throw iOException;
  }
  
  @TargetApi(11)
  public static void enableStrictMode() {
    if (hasGingerbread()) {
      StrictMode.ThreadPolicy.Builder builder = (new StrictMode.ThreadPolicy.Builder()).detectAll().penaltyLog();
      StrictMode.VmPolicy.Builder builder1 = (new StrictMode.VmPolicy.Builder()).detectAll().penaltyLog();
      if (hasHoneycomb())
        builder.penaltyFlashScreen(); 
      StrictMode.setThreadPolicy(builder.build());
      StrictMode.setVmPolicy(builder1.build());
    } 
  }
  
  public static File getDiskCacheDir(Context paramContext, String paramString) {
    String str;
    if (isExternalMounted() && getExternalCacheDir(paramContext) != null) {
      str = getExternalCacheDir(paramContext).getPath();
    } else {
      str = str.getCacheDir().getPath();
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(str);
    stringBuilder.append(File.separator);
    stringBuilder.append(paramString);
    Log.i("Cache dir", stringBuilder.toString());
    stringBuilder = new StringBuilder();
    stringBuilder.append(str);
    stringBuilder.append(File.separator);
    stringBuilder.append(paramString);
    return new File(stringBuilder.toString());
  }
  
  private static File getExternalCacheDir(Context paramContext) { return paramContext.getExternalCacheDir(); }
  
  public static String getHeader(HttpResponse paramHttpResponse, String paramString) {
    Header header = paramHttpResponse.getFirstHeader(paramString);
    return (header == null) ? null : header.getValue();
  }
  
  public static String getSchemeBaseUrl(String paramString, int paramInt) {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(paramString);
    stringBuilder.append("://");
    stringBuilder.append(paramInt);
    return stringBuilder.toString();
  }
  
  public static String getSchemeBaseUrl(String paramString1, String paramString2) {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(paramString1);
    stringBuilder.append("://");
    stringBuilder.append(paramString2);
    return stringBuilder.toString();
  }
  
  @TargetApi(9)
  public static long getUsableSpace(File paramFile) {
    if (hasGingerbread())
      return paramFile.getUsableSpace(); 
    StatFs statFs = new StatFs(paramFile.getPath());
    return statFs.getBlockSize() * statFs.getAvailableBlocks();
  }
  
  public static boolean hasFroyo() { return (Build.VERSION.SDK_INT >= 8); }
  
  public static boolean hasGingerbread() { return (Build.VERSION.SDK_INT >= 9); }
  
  public static boolean hasGingerbreadMR1() { return (Build.VERSION.SDK_INT >= 10); }
  
  public static boolean hasHoneycomb() { return (Build.VERSION.SDK_INT >= 11); }
  
  public static boolean hasHoneycombMR1() { return (Build.VERSION.SDK_INT >= 12); }
  
  public static boolean hasJellyBean() { return (Build.VERSION.SDK_INT >= 16); }
  
  public static boolean hasJellyBeanMR2() { return (Build.VERSION.SDK_INT >= 18); }
  
  public static boolean hasKitKat() { return (Build.VERSION.SDK_INT >= 19); }
  
  @SuppressLint({"NewApi"})
  private static boolean isExternalMounted() { return hasGingerbread() ? (("mounted".equals(Environment.getExternalStorageState()) || !Environment.isExternalStorageRemovable())) : "mounted".equals(Environment.getExternalStorageState()); }
  
  public static boolean isGzipContent(HttpResponse paramHttpResponse) { return TextUtils.equals(getHeader(paramHttpResponse, "Content-Encoding"), "gzip"); }
  
  public static boolean isSpecialType(String paramString) { return (paramString.startsWith("file") || paramString.startsWith("video") || paramString.startsWith("content") || paramString.startsWith("android.resource")); }
  
  public static boolean isSupportRange(HttpResponse paramHttpResponse) {
    if (TextUtils.equals(getHeader(paramHttpResponse, "Accept-Ranges"), "bytes"))
      return true; 
    String str = getHeader(paramHttpResponse, "Content-Range");
    return (str != null && str.startsWith("bytes"));
  }
  
  public static String readFully(Reader paramReader) throws IOException {
    try {
      StringWriter stringWriter = new StringWriter();
      char[] arrayOfChar = new char[1024];
      while (true) {
        int i = paramReader.read(arrayOfChar);
        if (i != -1) {
          stringWriter.write(arrayOfChar, 0, i);
          continue;
        } 
        break;
      } 
      return stringWriter.toString();
    } finally {
      paramReader.close();
    } 
  }
}
