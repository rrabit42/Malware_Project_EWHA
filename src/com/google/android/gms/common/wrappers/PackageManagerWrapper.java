package com.google.android.gms.common.wrappers;

import android.annotation.TargetApi;
import android.app.AppOpsManager;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Binder;
import android.os.Process;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.util.PlatformVersion;

@KeepForSdk
public class PackageManagerWrapper {
  private final Context zzhw;
  
  public PackageManagerWrapper(Context paramContext) { this.zzhw = paramContext; }
  
  @KeepForSdk
  public int checkCallingOrSelfPermission(String paramString) { return this.zzhw.checkCallingOrSelfPermission(paramString); }
  
  @KeepForSdk
  public int checkPermission(String paramString1, String paramString2) { return this.zzhw.getPackageManager().checkPermission(paramString1, paramString2); }
  
  @KeepForSdk
  public ApplicationInfo getApplicationInfo(String paramString, int paramInt) throws PackageManager.NameNotFoundException { return this.zzhw.getPackageManager().getApplicationInfo(paramString, paramInt); }
  
  @KeepForSdk
  public CharSequence getApplicationLabel(String paramString) throws PackageManager.NameNotFoundException { return this.zzhw.getPackageManager().getApplicationLabel(this.zzhw.getPackageManager().getApplicationInfo(paramString, 0)); }
  
  @KeepForSdk
  public PackageInfo getPackageInfo(String paramString, int paramInt) throws PackageManager.NameNotFoundException { return this.zzhw.getPackageManager().getPackageInfo(paramString, paramInt); }
  
  public final String[] getPackagesForUid(int paramInt) { return this.zzhw.getPackageManager().getPackagesForUid(paramInt); }
  
  @KeepForSdk
  public boolean isCallerInstantApp() {
    if (Binder.getCallingUid() == Process.myUid())
      return InstantApps.isInstantApp(this.zzhw); 
    if (PlatformVersion.isAtLeastO()) {
      String str = this.zzhw.getPackageManager().getNameForUid(Binder.getCallingUid());
      if (str != null)
        return this.zzhw.getPackageManager().isInstantApp(str); 
    } 
    return false;
  }
  
  public final PackageInfo zza(String paramString, int paramInt1, int paramInt2) throws PackageManager.NameNotFoundException { return this.zzhw.getPackageManager().getPackageInfo(paramString, 64); }
  
  @TargetApi(19)
  public final boolean zzb(int paramInt, String paramString) {
    if (PlatformVersion.isAtLeastKitKat())
      try {
        ((AppOpsManager)this.zzhw.getSystemService("appops")).checkPackage(paramInt, paramString);
        return true;
      } catch (SecurityException paramString) {
        return false;
      }  
    String[] arrayOfString = this.zzhw.getPackageManager().getPackagesForUid(paramInt);
    if (paramString != null && arrayOfString != null)
      for (paramInt = 0; paramInt < arrayOfString.length; paramInt++) {
        if (paramString.equals(arrayOfString[paramInt]))
          return true; 
      }  
    return false;
  }
}
