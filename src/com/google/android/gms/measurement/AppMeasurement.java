package com.google.android.gms.measurement;

import android.content.Context;
import android.os.Bundle;
import android.support.annotation.Keep;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresPermission;
import android.support.annotation.Size;
import android.support.annotation.WorkerThread;
import android.support.v4.util.ArrayMap;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.ShowFirstParty;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.measurement.internal.zzbw;
import com.google.android.gms.measurement.internal.zzfv;
import java.util.List;
import java.util.Map;

@Deprecated
@ShowFirstParty
public class AppMeasurement {
  @KeepForSdk
  @ShowFirstParty
  public static final String CRASH_ORIGIN = "crash";
  
  @KeepForSdk
  @ShowFirstParty
  public static final String FCM_ORIGIN = "fcm";
  
  @KeepForSdk
  @ShowFirstParty
  public static final String FIAM_ORIGIN = "fiam";
  
  private final zzbw zzada;
  
  public AppMeasurement(zzbw paramzzbw) {
    Preconditions.checkNotNull(paramzzbw);
    this.zzada = paramzzbw;
  }
  
  @Deprecated
  @Keep
  @RequiresPermission(allOf = {"android.permission.INTERNET", "android.permission.ACCESS_NETWORK_STATE", "android.permission.WAKE_LOCK"})
  @ShowFirstParty
  public static AppMeasurement getInstance(Context paramContext) { return zzbw.zza(paramContext, null).zzkm(); }
  
  @Keep
  public void beginAdUnitExposure(@NonNull @Size(min = 1L) String paramString) { this.zzada.zzgi().beginAdUnitExposure(paramString, this.zzada.zzbx().elapsedRealtime()); }
  
  @Keep
  @KeepForSdk
  @ShowFirstParty
  public void clearConditionalUserProperty(@NonNull @Size(max = 24L, min = 1L) String paramString1, @Nullable String paramString2, @Nullable Bundle paramBundle) { this.zzada.zzgj().clearConditionalUserProperty(paramString1, paramString2, paramBundle); }
  
  @Keep
  @VisibleForTesting
  protected void clearConditionalUserPropertyAs(@NonNull @Size(min = 1L) String paramString1, @NonNull @Size(max = 24L, min = 1L) String paramString2, @Nullable String paramString3, @Nullable Bundle paramBundle) { this.zzada.zzgj().clearConditionalUserPropertyAs(paramString1, paramString2, paramString3, paramBundle); }
  
  @Keep
  public void endAdUnitExposure(@NonNull @Size(min = 1L) String paramString) { this.zzada.zzgi().endAdUnitExposure(paramString, this.zzada.zzbx().elapsedRealtime()); }
  
  @Keep
  public long generateEventId() { return this.zzada.zzgr().zzmj(); }
  
  @Keep
  @Nullable
  public String getAppInstanceId() { return this.zzada.zzgj().zzgc(); }
  
  @KeepForSdk
  public Boolean getBoolean() { return this.zzada.zzgj().zzkx(); }
  
  @Keep
  @WorkerThread
  @KeepForSdk
  @ShowFirstParty
  public List<ConditionalUserProperty> getConditionalUserProperties(@Nullable String paramString1, @Nullable @Size(max = 23L, min = 1L) String paramString2) { return this.zzada.zzgj().getConditionalUserProperties(paramString1, paramString2); }
  
  @Keep
  @WorkerThread
  @VisibleForTesting
  protected List<ConditionalUserProperty> getConditionalUserPropertiesAs(@NonNull @Size(min = 1L) String paramString1, @Nullable String paramString2, @Nullable @Size(max = 23L, min = 1L) String paramString3) { return this.zzada.zzgj().getConditionalUserPropertiesAs(paramString1, paramString2, paramString3); }
  
  @Keep
  @Nullable
  public String getCurrentScreenClass() { return this.zzada.zzgj().getCurrentScreenClass(); }
  
  @Keep
  @Nullable
  public String getCurrentScreenName() { return this.zzada.zzgj().getCurrentScreenName(); }
  
  @KeepForSdk
  public Double getDouble() { return this.zzada.zzgj().zzlb(); }
  
  @Keep
  @Nullable
  public String getGmpAppId() { return this.zzada.zzgj().getGmpAppId(); }
  
  @KeepForSdk
  public Integer getInteger() { return this.zzada.zzgj().zzla(); }
  
  @KeepForSdk
  public Long getLong() { return this.zzada.zzgj().zzkz(); }
  
  @Keep
  @WorkerThread
  @KeepForSdk
  @ShowFirstParty
  public int getMaxUserProperties(@NonNull @Size(min = 1L) String paramString) {
    this.zzada.zzgj();
    Preconditions.checkNotEmpty(paramString);
    return 25;
  }
  
  @KeepForSdk
  public String getString() { return this.zzada.zzgj().zzky(); }
  
  @Keep
  @WorkerThread
  @VisibleForTesting
  protected Map<String, Object> getUserProperties(@Nullable String paramString1, @Nullable @Size(max = 24L, min = 1L) String paramString2, boolean paramBoolean) { return this.zzada.zzgj().getUserProperties(paramString1, paramString2, paramBoolean); }
  
  @WorkerThread
  @KeepForSdk
  @ShowFirstParty
  public Map<String, Object> getUserProperties(boolean paramBoolean) {
    List list = this.zzada.zzgj().zzk(paramBoolean);
    ArrayMap arrayMap = new ArrayMap(list.size());
    for (zzfv zzfv : list)
      arrayMap.put(zzfv.name, zzfv.getValue()); 
    return arrayMap;
  }
  
  @Keep
  @WorkerThread
  @VisibleForTesting
  protected Map<String, Object> getUserPropertiesAs(@NonNull @Size(min = 1L) String paramString1, @Nullable String paramString2, @Nullable @Size(max = 23L, min = 1L) String paramString3, boolean paramBoolean) { return this.zzada.zzgj().getUserPropertiesAs(paramString1, paramString2, paramString3, paramBoolean); }
  
  @ShowFirstParty
  public final void logEvent(@NonNull @Size(max = 40L, min = 1L) String paramString, Bundle paramBundle) { this.zzada.zzgj().zza("app", paramString, paramBundle, true); }
  
  @Keep
  @ShowFirstParty
  public void logEventInternal(String paramString1, String paramString2, Bundle paramBundle) { this.zzada.zzgj().logEvent(paramString1, paramString2, paramBundle); }
  
  @KeepForSdk
  @ShowFirstParty
  public void logEventInternalNoInterceptor(String paramString1, String paramString2, Bundle paramBundle, long paramLong) { this.zzada.zzgj().logEvent(paramString1, paramString2, paramBundle, true, false, paramLong); }
  
  @KeepForSdk
  @ShowFirstParty
  public void registerOnMeasurementEventListener(OnEventListener paramOnEventListener) { this.zzada.zzgj().zza(paramOnEventListener); }
  
  @Keep
  @KeepForSdk
  @ShowFirstParty
  public void setConditionalUserProperty(@NonNull ConditionalUserProperty paramConditionalUserProperty) { this.zzada.zzgj().setConditionalUserProperty(paramConditionalUserProperty); }
  
  @Keep
  @VisibleForTesting
  protected void setConditionalUserPropertyAs(@NonNull ConditionalUserProperty paramConditionalUserProperty) { this.zzada.zzgj().setConditionalUserPropertyAs(paramConditionalUserProperty); }
  
  @WorkerThread
  @KeepForSdk
  @ShowFirstParty
  public void setEventInterceptor(EventInterceptor paramEventInterceptor) { this.zzada.zzgj().zza(paramEventInterceptor); }
  
  @Deprecated
  @KeepForSdk
  public void setMeasurementEnabled(boolean paramBoolean) { this.zzada.zzgj().setMeasurementEnabled(paramBoolean); }
  
  @ShowFirstParty
  public final void setMinimumSessionDuration(long paramLong) { this.zzada.zzgj().setMinimumSessionDuration(paramLong); }
  
  @ShowFirstParty
  public final void setSessionTimeoutDuration(long paramLong) { this.zzada.zzgj().setSessionTimeoutDuration(paramLong); }
  
  @ShowFirstParty
  public final void setUserProperty(@NonNull @Size(max = 24L, min = 1L) String paramString1, @Nullable @Size(max = 36L) String paramString2) { this.zzada.zzgj().zzb("app", paramString1, paramString2, false); }
  
  @KeepForSdk
  @ShowFirstParty
  public void setUserPropertyInternal(String paramString1, String paramString2, Object paramObject) {
    Preconditions.checkNotEmpty(paramString1);
    this.zzada.zzgj().zzb(paramString1, paramString2, paramObject, true);
  }
  
  @KeepForSdk
  @ShowFirstParty
  public void unregisterOnMeasurementEventListener(OnEventListener paramOnEventListener) { this.zzada.zzgj().zzb(paramOnEventListener); }
  
  public final void zzd(boolean paramBoolean) { this.zzada.zzgj().zzd(paramBoolean); }
}
