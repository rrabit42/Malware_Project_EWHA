package com.google.android.gms.internal.measurement;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.logging.Level;
import java.util.logging.Logger;

public abstract class zztv extends zztd {
  private static final Logger logger = Logger.getLogger(zztv.class.getName());
  
  private static final boolean zzbum = zzxj.zzyo();
  
  zztx zzbun;
  
  private zztv() {}
  
  public static int zza(int paramInt, zzvc paramzzvc) {
    paramInt = zzbd(paramInt);
    int i = paramzzvc.zzvx();
    return paramInt + zzbf(i) + i;
  }
  
  public static int zza(zzvc paramzzvc) {
    int i = paramzzvc.zzvx();
    return zzbf(i) + i;
  }
  
  public static zztv zza(ByteBuffer paramByteBuffer) {
    if (paramByteBuffer.hasArray())
      return new zzb(paramByteBuffer); 
    if (paramByteBuffer.isDirect() && !paramByteBuffer.isReadOnly())
      return zzxj.zzyp() ? new zze(paramByteBuffer) : new zzd(paramByteBuffer); 
    throw new IllegalArgumentException("ByteBuffer is read-only");
  }
  
  public static int zzaw(long paramLong) { return zzax(paramLong); }
  
  public static int zzax(long paramLong) {
    if ((0xFFFFFFFFFFFFFF80L & paramLong) == 0L)
      return 1; 
    if (paramLong < 0L)
      return 10; 
    if ((0xFFFFFFF800000000L & paramLong) != 0L) {
      b2 = 6;
      paramLong >>>= 28;
    } else {
      b2 = 2;
    } 
    byte b1 = b2;
    long l = paramLong;
    if ((0xFFFFFFFFFFE00000L & paramLong) != 0L) {
      b1 = b2 + 2;
      l = paramLong >>> 14;
    } 
    byte b2 = b1;
    if ((l & 0xFFFFFFFFFFFFC000L) != 0L)
      b2 = b1 + 1; 
    return b2;
  }
  
  public static int zzay(long paramLong) { return zzax(zzbb(paramLong)); }
  
  public static int zzaz(long paramLong) { return 8; }
  
  public static int zzb(float paramFloat) { return 4; }
  
  public static int zzb(int paramInt, double paramDouble) { return zzbd(paramInt) + 8; }
  
  public static int zzb(int paramInt, float paramFloat) { return zzbd(paramInt) + 4; }
  
  public static int zzb(int paramInt, zzvc paramzzvc) { return (zzbd(1) << 1) + zzi(2, paramInt) + zza(3, paramzzvc); }
  
  static int zzb(int paramInt, zzvv paramzzvv, zzwl paramzzwl) { return zzbd(paramInt) + zzb(paramzzvv, paramzzwl); }
  
  public static int zzb(zzte paramzzte) {
    int i = paramzzte.size();
    return zzbf(i) + i;
  }
  
  static int zzb(zzvv paramzzvv, zzwl paramzzwl) {
    zzsx zzsx = (zzsx)paramzzvv;
    int j = zzsx.zztx();
    int i = j;
    if (j == -1) {
      i = paramzzwl.zzai(zzsx);
      zzsx.zzai(i);
    } 
    return zzbf(i) + i;
  }
  
  public static int zzba(long paramLong) { return 8; }
  
  private static long zzbb(long paramLong) { return paramLong >> 63 ^ paramLong << true; }
  
  public static int zzbd(int paramInt) { return zzbf(paramInt << 3); }
  
  public static int zzbe(int paramInt) { return (paramInt >= 0) ? zzbf(paramInt) : 10; }
  
  public static int zzbf(int paramInt) { return ((paramInt & 0xFFFFFF80) == 0) ? 1 : (((paramInt & 0xFFFFC000) == 0) ? 2 : (((0xFFE00000 & paramInt) == 0) ? 3 : (((paramInt & 0xF0000000) == 0) ? 4 : 5))); }
  
  public static int zzbg(int paramInt) { return zzbf(zzbk(paramInt)); }
  
  public static int zzbh(int paramInt) { return 4; }
  
  public static int zzbi(int paramInt) { return 4; }
  
  public static int zzbj(int paramInt) { return zzbe(paramInt); }
  
  private static int zzbk(int paramInt) { return paramInt >> 31 ^ paramInt << 1; }
  
  @Deprecated
  public static int zzbl(int paramInt) { return zzbf(paramInt); }
  
  public static int zzc(double paramDouble) { return 8; }
  
  public static int zzc(int paramInt, zzte paramzzte) {
    paramInt = zzbd(paramInt);
    int i = paramzzte.size();
    return paramInt + zzbf(i) + i;
  }
  
  public static int zzc(int paramInt, zzvv paramzzvv) { return zzbd(paramInt) + zzc(paramzzvv); }
  
  @Deprecated
  static int zzc(int paramInt, zzvv paramzzvv, zzwl paramzzwl) {
    int j = zzbd(paramInt);
    zzsx zzsx = (zzsx)paramzzvv;
    int i = zzsx.zztx();
    paramInt = i;
    if (i == -1) {
      paramInt = paramzzwl.zzai(zzsx);
      zzsx.zzai(paramInt);
    } 
    return (j << 1) + paramInt;
  }
  
  public static int zzc(int paramInt, String paramString) { return zzbd(paramInt) + zzgc(paramString); }
  
  public static int zzc(int paramInt, boolean paramBoolean) { return zzbd(paramInt) + 1; }
  
  public static int zzc(zzvv paramzzvv) {
    int i = paramzzvv.zzvx();
    return zzbf(i) + i;
  }
  
  public static int zzd(int paramInt, long paramLong) { return zzbd(paramInt) + zzax(paramLong); }
  
  public static int zzd(int paramInt, zzte paramzzte) { return (zzbd(1) << 1) + zzi(2, paramInt) + zzc(3, paramzzte); }
  
  public static int zzd(int paramInt, zzvv paramzzvv) { return (zzbd(1) << 1) + zzi(2, paramInt) + zzc(3, paramzzvv); }
  
  @Deprecated
  public static int zzd(zzvv paramzzvv) { return paramzzvv.zzvx(); }
  
  public static int zze(int paramInt, long paramLong) { return zzbd(paramInt) + zzax(paramLong); }
  
  public static int zzf(int paramInt, long paramLong) { return zzbd(paramInt) + zzax(zzbb(paramLong)); }
  
  public static int zzg(int paramInt, long paramLong) { return zzbd(paramInt) + 8; }
  
  public static int zzgc(String paramString) {
    int i;
    try {
      i = zzxl.zza(paramString);
    } catch (zzxp zzxp) {
      i = paramString.getBytes(zzuq.UTF_8).length;
    } 
    return zzbf(i) + i;
  }
  
  public static int zzh(int paramInt1, int paramInt2) { return zzbd(paramInt1) + zzbe(paramInt2); }
  
  public static int zzh(int paramInt, long paramLong) { return zzbd(paramInt) + 8; }
  
  public static int zzi(int paramInt1, int paramInt2) { return zzbd(paramInt1) + zzbf(paramInt2); }
  
  public static int zzj(int paramInt1, int paramInt2) { return zzbd(paramInt1) + zzbf(zzbk(paramInt2)); }
  
  public static zztv zzj(byte[] paramArrayOfByte) { return new zza(paramArrayOfByte, 0, paramArrayOfByte.length); }
  
  public static int zzk(int paramInt1, int paramInt2) { return zzbd(paramInt1) + 4; }
  
  public static int zzk(byte[] paramArrayOfByte) {
    int i = paramArrayOfByte.length;
    return zzbf(i) + i;
  }
  
  public static int zzl(int paramInt1, int paramInt2) { return zzbd(paramInt1) + 4; }
  
  public static int zzm(int paramInt1, int paramInt2) { return zzbd(paramInt1) + zzbe(paramInt2); }
  
  public static int zzt(boolean paramBoolean) { return 1; }
  
  public abstract void flush();
  
  public abstract void write(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws IOException;
  
  public final void zza(float paramFloat) throws IOException { zzbc(Float.floatToRawIntBits(paramFloat)); }
  
  public final void zza(int paramInt, double paramDouble) throws IOException { zzc(paramInt, Double.doubleToRawLongBits(paramDouble)); }
  
  public final void zza(int paramInt, float paramFloat) throws IOException { zzg(paramInt, Float.floatToRawIntBits(paramFloat)); }
  
  public abstract void zza(int paramInt, long paramLong) throws IOException;
  
  public abstract void zza(int paramInt, zzte paramzzte) throws IOException;
  
  public abstract void zza(int paramInt, zzvv paramzzvv) throws IOException;
  
  abstract void zza(int paramInt, zzvv paramzzvv, zzwl paramzzwl) throws IOException;
  
  public abstract void zza(zzte paramzzte) throws IOException;
  
  abstract void zza(zzvv paramzzvv, zzwl paramzzwl) throws IOException;
  
  final void zza(String paramString, zzxp paramzzxp) throws IOException {
    logger.logp(Level.WARNING, "com.google.protobuf.CodedOutputStream", "inefficientWriteStringNoTag", "Converting ill-formed UTF-16. Your Protocol Buffer will not round trip correctly!", paramzzxp);
    arrayOfByte = paramString.getBytes(zzuq.UTF_8);
    try {
      zzba(arrayOfByte.length);
      zza(arrayOfByte, 0, arrayOfByte.length);
      return;
    } catch (IndexOutOfBoundsException arrayOfByte) {
      throw new zzc(arrayOfByte);
    } catch (zzc arrayOfByte) {
      throw arrayOfByte;
    } 
  }
  
  public abstract void zzat(long paramLong) throws IOException;
  
  public final void zzau(long paramLong) throws IOException { zzat(zzbb(paramLong)); }
  
  public abstract void zzav(long paramLong) throws IOException;
  
  public abstract void zzaz(int paramInt) throws IOException;
  
  public final void zzb(double paramDouble) throws IOException { zzav(Double.doubleToRawLongBits(paramDouble)); }
  
  public final void zzb(int paramInt, long paramLong) throws IOException { zza(paramInt, zzbb(paramLong)); }
  
  public abstract void zzb(int paramInt, zzte paramzzte) throws IOException;
  
  public abstract void zzb(int paramInt, zzvv paramzzvv) throws IOException;
  
  public abstract void zzb(int paramInt, String paramString) throws IOException;
  
  public abstract void zzb(int paramInt, boolean paramBoolean) throws IOException;
  
  public abstract void zzb(zzvv paramzzvv) throws IOException;
  
  public abstract void zzba(int paramInt) throws IOException;
  
  public final void zzbb(int paramInt) throws IOException { zzba(zzbk(paramInt)); }
  
  public abstract void zzbc(int paramInt) throws IOException;
  
  public abstract void zzc(byte paramByte) throws IOException;
  
  public abstract void zzc(int paramInt1, int paramInt2) throws IOException;
  
  public abstract void zzc(int paramInt, long paramLong) throws IOException;
  
  public abstract void zzd(int paramInt1, int paramInt2) throws IOException;
  
  public abstract void zze(int paramInt1, int paramInt2) throws IOException;
  
  abstract void zze(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws IOException;
  
  public final void zzf(int paramInt1, int paramInt2) throws IOException { zze(paramInt1, zzbk(paramInt2)); }
  
  public abstract void zzg(int paramInt1, int paramInt2) throws IOException;
  
  public abstract void zzgb(String paramString) throws IOException;
  
  public final void zzs(boolean paramBoolean) throws IOException { zzc((byte)paramBoolean); }
  
  public abstract int zzvj();
}
