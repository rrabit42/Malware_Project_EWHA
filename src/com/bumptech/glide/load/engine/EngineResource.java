package com.bumptech.glide.load.engine;

import android.os.Looper;
import com.bumptech.glide.load.Key;

class EngineResource<Z> extends Object implements Resource<Z> {
  private int acquired;
  
  private final boolean isCacheable;
  
  private boolean isRecycled;
  
  private Key key;
  
  private ResourceListener listener;
  
  private final Resource<Z> resource;
  
  EngineResource(Resource<Z> paramResource, boolean paramBoolean) {
    if (paramResource != null) {
      this.resource = paramResource;
      this.isCacheable = paramBoolean;
      return;
    } 
    throw new NullPointerException("Wrapped resource must not be null");
  }
  
  void acquire() {
    if (!this.isRecycled) {
      if (Looper.getMainLooper().equals(Looper.myLooper())) {
        this.acquired++;
        return;
      } 
      throw new IllegalThreadStateException("Must call acquire on the main thread");
    } 
    throw new IllegalStateException("Cannot acquire a recycled resource");
  }
  
  public Z get() { return (Z)this.resource.get(); }
  
  public int getSize() { return this.resource.getSize(); }
  
  boolean isCacheable() { return this.isCacheable; }
  
  public void recycle() {
    if (this.acquired <= 0) {
      if (!this.isRecycled) {
        this.isRecycled = true;
        this.resource.recycle();
        return;
      } 
      throw new IllegalStateException("Cannot recycle a resource that has already been recycled");
    } 
    throw new IllegalStateException("Cannot recycle a resource while it is still acquired");
  }
  
  void release() {
    if (this.acquired > 0) {
      if (Looper.getMainLooper().equals(Looper.myLooper())) {
        int i = this.acquired - 1;
        this.acquired = i;
        if (i == 0)
          this.listener.onResourceReleased(this.key, this); 
        return;
      } 
      throw new IllegalThreadStateException("Must call release on the main thread");
    } 
    throw new IllegalStateException("Cannot release a recycled or not yet acquired resource");
  }
  
  void setResourceListener(Key paramKey, ResourceListener paramResourceListener) {
    this.key = paramKey;
    this.listener = paramResourceListener;
  }
}
