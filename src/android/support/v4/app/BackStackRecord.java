package android.support.v4.app;

import android.support.annotation.Nullable;
import android.support.v4.util.LogWriter;
import android.support.v4.view.ViewCompat;
import android.util.Log;
import android.view.View;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.lang.reflect.Modifier;
import java.util.ArrayList;

final class BackStackRecord extends FragmentTransaction implements FragmentManager.BackStackEntry, FragmentManagerImpl.OpGenerator {
  static final int OP_ADD = 1;
  
  static final int OP_ATTACH = 7;
  
  static final int OP_DETACH = 6;
  
  static final int OP_HIDE = 4;
  
  static final int OP_NULL = 0;
  
  static final int OP_REMOVE = 3;
  
  static final int OP_REPLACE = 2;
  
  static final int OP_SET_PRIMARY_NAV = 8;
  
  static final int OP_SHOW = 5;
  
  static final int OP_UNSET_PRIMARY_NAV = 9;
  
  static final String TAG = "FragmentManager";
  
  boolean mAddToBackStack;
  
  boolean mAllowAddToBackStack = true;
  
  int mBreadCrumbShortTitleRes;
  
  CharSequence mBreadCrumbShortTitleText;
  
  int mBreadCrumbTitleRes;
  
  CharSequence mBreadCrumbTitleText;
  
  ArrayList<Runnable> mCommitRunnables;
  
  boolean mCommitted;
  
  int mEnterAnim;
  
  int mExitAnim;
  
  int mIndex = -1;
  
  final FragmentManagerImpl mManager;
  
  @Nullable
  String mName;
  
  ArrayList<Op> mOps = new ArrayList();
  
  int mPopEnterAnim;
  
  int mPopExitAnim;
  
  boolean mReorderingAllowed = false;
  
  ArrayList<String> mSharedElementSourceNames;
  
  ArrayList<String> mSharedElementTargetNames;
  
  int mTransition;
  
  int mTransitionStyle;
  
  public BackStackRecord(FragmentManagerImpl paramFragmentManagerImpl) { this.mManager = paramFragmentManagerImpl; }
  
  private void doAddOp(int paramInt1, Fragment paramFragment, @Nullable String paramString, int paramInt2) {
    StringBuilder stringBuilder2 = paramFragment.getClass();
    int i = stringBuilder2.getModifiers();
    if (!stringBuilder2.isAnonymousClass() && Modifier.isPublic(i) && (!stringBuilder2.isMemberClass() || Modifier.isStatic(i))) {
      paramFragment.mFragmentManager = this.mManager;
      if (paramString != null)
        if (paramFragment.mTag == null || paramString.equals(paramFragment.mTag)) {
          paramFragment.mTag = paramString;
        } else {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("Can't change tag of fragment ");
          stringBuilder.append(paramFragment);
          stringBuilder.append(": was ");
          stringBuilder.append(paramFragment.mTag);
          stringBuilder.append(" now ");
          stringBuilder.append(paramString);
          throw new IllegalStateException(stringBuilder.toString());
        }  
      if (paramInt1 != 0) {
        StringBuilder stringBuilder;
        if (paramInt1 != -1) {
          if (paramFragment.mFragmentId == 0 || paramFragment.mFragmentId == paramInt1) {
            paramFragment.mFragmentId = paramInt1;
            paramFragment.mContainerId = paramInt1;
          } else {
            stringBuilder = new StringBuilder();
            stringBuilder.append("Can't change container ID of fragment ");
            stringBuilder.append(paramFragment);
            stringBuilder.append(": was ");
            stringBuilder.append(paramFragment.mFragmentId);
            stringBuilder.append(" now ");
            stringBuilder.append(paramInt1);
            throw new IllegalStateException(stringBuilder.toString());
          } 
        } else {
          stringBuilder2 = new StringBuilder();
          stringBuilder2.append("Can't add fragment ");
          stringBuilder2.append(paramFragment);
          stringBuilder2.append(" with tag ");
          stringBuilder2.append(stringBuilder);
          stringBuilder2.append(" to container view with no id");
          throw new IllegalArgumentException(stringBuilder2.toString());
        } 
      } 
      addOp(new Op(paramInt2, paramFragment));
      return;
    } 
    StringBuilder stringBuilder1 = new StringBuilder();
    stringBuilder1.append("Fragment ");
    stringBuilder1.append(stringBuilder2.getCanonicalName());
    stringBuilder1.append(" must be a public static class to be  properly recreated from");
    stringBuilder1.append(" instance state.");
    throw new IllegalStateException(stringBuilder1.toString());
  }
  
  private static boolean isFragmentPostponed(Op paramOp) {
    Fragment fragment = paramOp.fragment;
    return (fragment != null && fragment.mAdded && fragment.mView != null && !fragment.mDetached && !fragment.mHidden && fragment.isPostponed());
  }
  
  public FragmentTransaction add(int paramInt, Fragment paramFragment) {
    doAddOp(paramInt, paramFragment, null, 1);
    return this;
  }
  
  public FragmentTransaction add(int paramInt, Fragment paramFragment, @Nullable String paramString) {
    doAddOp(paramInt, paramFragment, paramString, 1);
    return this;
  }
  
  public FragmentTransaction add(Fragment paramFragment, @Nullable String paramString) {
    doAddOp(0, paramFragment, paramString, 1);
    return this;
  }
  
  void addOp(Op paramOp) {
    this.mOps.add(paramOp);
    paramOp.enterAnim = this.mEnterAnim;
    paramOp.exitAnim = this.mExitAnim;
    paramOp.popEnterAnim = this.mPopEnterAnim;
    paramOp.popExitAnim = this.mPopExitAnim;
  }
  
  public FragmentTransaction addSharedElement(View paramView, String paramString) {
    if (FragmentTransition.supportsTransition()) {
      String str = ViewCompat.getTransitionName(paramView);
      if (str != null) {
        StringBuilder stringBuilder2;
        StringBuilder stringBuilder1;
        if (this.mSharedElementSourceNames == null) {
          this.mSharedElementSourceNames = new ArrayList();
          this.mSharedElementTargetNames = new ArrayList();
        } else {
          if (!this.mSharedElementTargetNames.contains(paramString)) {
            if (this.mSharedElementSourceNames.contains(str)) {
              stringBuilder2 = new StringBuilder();
              stringBuilder2.append("A shared element with the source name '");
              stringBuilder2.append(str);
              stringBuilder2.append(" has already been added to the transaction.");
              throw new IllegalArgumentException(stringBuilder2.toString());
            } 
            this.mSharedElementSourceNames.add(str);
            this.mSharedElementTargetNames.add(stringBuilder2);
            return this;
          } 
          stringBuilder1 = new StringBuilder();
          stringBuilder1.append("A shared element with the target name '");
          stringBuilder1.append(stringBuilder2);
          stringBuilder1.append("' has already been added to the transaction.");
          throw new IllegalArgumentException(stringBuilder1.toString());
        } 
        this.mSharedElementSourceNames.add(stringBuilder1);
        this.mSharedElementTargetNames.add(stringBuilder2);
        return this;
      } 
      throw new IllegalArgumentException("Unique transitionNames are required for all sharedElements");
    } 
    return this;
  }
  
  public FragmentTransaction addToBackStack(@Nullable String paramString) {
    if (this.mAllowAddToBackStack) {
      this.mAddToBackStack = true;
      this.mName = paramString;
      return this;
    } 
    throw new IllegalStateException("This FragmentTransaction is not allowed to be added to the back stack.");
  }
  
  public FragmentTransaction attach(Fragment paramFragment) {
    addOp(new Op(7, paramFragment));
    return this;
  }
  
  void bumpBackStackNesting(int paramInt) {
    if (!this.mAddToBackStack)
      return; 
    if (FragmentManagerImpl.DEBUG) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Bump nesting in ");
      stringBuilder.append(this);
      stringBuilder.append(" by ");
      stringBuilder.append(paramInt);
      Log.v("FragmentManager", stringBuilder.toString());
    } 
    int i = this.mOps.size();
    for (byte b = 0; b < i; b++) {
      Op op = (Op)this.mOps.get(b);
      if (op.fragment != null) {
        Fragment fragment = op.fragment;
        fragment.mBackStackNesting += paramInt;
        if (FragmentManagerImpl.DEBUG) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("Bump nesting of ");
          stringBuilder.append(op.fragment);
          stringBuilder.append(" to ");
          stringBuilder.append(op.fragment.mBackStackNesting);
          Log.v("FragmentManager", stringBuilder.toString());
        } 
      } 
    } 
  }
  
  public int commit() { return commitInternal(false); }
  
  public int commitAllowingStateLoss() { return commitInternal(true); }
  
  int commitInternal(boolean paramBoolean) {
    if (!this.mCommitted) {
      if (FragmentManagerImpl.DEBUG) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Commit: ");
        stringBuilder.append(this);
        Log.v("FragmentManager", stringBuilder.toString());
        PrintWriter printWriter = new PrintWriter(new LogWriter("FragmentManager"));
        dump("  ", null, printWriter, null);
        printWriter.close();
      } 
      this.mCommitted = true;
      if (this.mAddToBackStack) {
        this.mIndex = this.mManager.allocBackStackIndex(this);
      } else {
        this.mIndex = -1;
      } 
      this.mManager.enqueueAction(this, paramBoolean);
      return this.mIndex;
    } 
    throw new IllegalStateException("commit already called");
  }
  
  public void commitNow() {
    disallowAddToBackStack();
    this.mManager.execSingleAction(this, false);
  }
  
  public void commitNowAllowingStateLoss() {
    disallowAddToBackStack();
    this.mManager.execSingleAction(this, true);
  }
  
  public FragmentTransaction detach(Fragment paramFragment) {
    addOp(new Op(6, paramFragment));
    return this;
  }
  
  public FragmentTransaction disallowAddToBackStack() {
    if (!this.mAddToBackStack) {
      this.mAllowAddToBackStack = false;
      return this;
    } 
    throw new IllegalStateException("This transaction is already being added to the back stack");
  }
  
  public void dump(String paramString, FileDescriptor paramFileDescriptor, PrintWriter paramPrintWriter, String[] paramArrayOfString) { dump(paramString, paramPrintWriter, true); }
  
  public void dump(String paramString, PrintWriter paramPrintWriter, boolean paramBoolean) {
    if (paramBoolean) {
      paramPrintWriter.print(paramString);
      paramPrintWriter.print("mName=");
      paramPrintWriter.print(this.mName);
      paramPrintWriter.print(" mIndex=");
      paramPrintWriter.print(this.mIndex);
      paramPrintWriter.print(" mCommitted=");
      paramPrintWriter.println(this.mCommitted);
      if (this.mTransition != 0) {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("mTransition=#");
        paramPrintWriter.print(Integer.toHexString(this.mTransition));
        paramPrintWriter.print(" mTransitionStyle=#");
        paramPrintWriter.println(Integer.toHexString(this.mTransitionStyle));
      } 
      if (this.mEnterAnim != 0 || this.mExitAnim != 0) {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("mEnterAnim=#");
        paramPrintWriter.print(Integer.toHexString(this.mEnterAnim));
        paramPrintWriter.print(" mExitAnim=#");
        paramPrintWriter.println(Integer.toHexString(this.mExitAnim));
      } 
      if (this.mPopEnterAnim != 0 || this.mPopExitAnim != 0) {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("mPopEnterAnim=#");
        paramPrintWriter.print(Integer.toHexString(this.mPopEnterAnim));
        paramPrintWriter.print(" mPopExitAnim=#");
        paramPrintWriter.println(Integer.toHexString(this.mPopExitAnim));
      } 
      if (this.mBreadCrumbTitleRes != 0 || this.mBreadCrumbTitleText != null) {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("mBreadCrumbTitleRes=#");
        paramPrintWriter.print(Integer.toHexString(this.mBreadCrumbTitleRes));
        paramPrintWriter.print(" mBreadCrumbTitleText=");
        paramPrintWriter.println(this.mBreadCrumbTitleText);
      } 
      if (this.mBreadCrumbShortTitleRes != 0 || this.mBreadCrumbShortTitleText != null) {
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("mBreadCrumbShortTitleRes=#");
        paramPrintWriter.print(Integer.toHexString(this.mBreadCrumbShortTitleRes));
        paramPrintWriter.print(" mBreadCrumbShortTitleText=");
        paramPrintWriter.println(this.mBreadCrumbShortTitleText);
      } 
    } 
    if (!this.mOps.isEmpty()) {
      paramPrintWriter.print(paramString);
      paramPrintWriter.println("Operations:");
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append(paramString);
      stringBuilder.append("    ");
      stringBuilder.toString();
      int i = this.mOps.size();
      byte b;
      for (b = 0; b < i; b++) {
        String str;
        Op op = (Op)this.mOps.get(b);
        switch (op.cmd) {
          default:
            stringBuilder = new StringBuilder();
            stringBuilder.append("cmd=");
            stringBuilder.append(op.cmd);
            str = stringBuilder.toString();
            break;
          case 9:
            str = "UNSET_PRIMARY_NAV";
            break;
          case 8:
            str = "SET_PRIMARY_NAV";
            break;
          case 7:
            str = "ATTACH";
            break;
          case 6:
            str = "DETACH";
            break;
          case 5:
            str = "SHOW";
            break;
          case 4:
            str = "HIDE";
            break;
          case 3:
            str = "REMOVE";
            break;
          case 2:
            str = "REPLACE";
            break;
          case 1:
            str = "ADD";
            break;
          case 0:
            str = "NULL";
            break;
        } 
        paramPrintWriter.print(paramString);
        paramPrintWriter.print("  Op #");
        paramPrintWriter.print(b);
        paramPrintWriter.print(": ");
        paramPrintWriter.print(str);
        paramPrintWriter.print(" ");
        paramPrintWriter.println(op.fragment);
        if (paramBoolean) {
          if (op.enterAnim != 0 || op.exitAnim != 0) {
            paramPrintWriter.print(paramString);
            paramPrintWriter.print("enterAnim=#");
            paramPrintWriter.print(Integer.toHexString(op.enterAnim));
            paramPrintWriter.print(" exitAnim=#");
            paramPrintWriter.println(Integer.toHexString(op.exitAnim));
          } 
          if (op.popEnterAnim != 0 || op.popExitAnim != 0) {
            paramPrintWriter.print(paramString);
            paramPrintWriter.print("popEnterAnim=#");
            paramPrintWriter.print(Integer.toHexString(op.popEnterAnim));
            paramPrintWriter.print(" popExitAnim=#");
            paramPrintWriter.println(Integer.toHexString(op.popExitAnim));
          } 
        } 
      } 
    } 
  }
  
  void executeOps() {
    int i = this.mOps.size();
    for (byte b = 0; b < i; b++) {
      StringBuilder stringBuilder;
      Op op = (Op)this.mOps.get(b);
      Fragment fragment = op.fragment;
      if (fragment != null)
        fragment.setNextTransition(this.mTransition, this.mTransitionStyle); 
      switch (op.cmd) {
        default:
          stringBuilder = new StringBuilder();
          stringBuilder.append("Unknown cmd: ");
          stringBuilder.append(op.cmd);
          throw new IllegalArgumentException(stringBuilder.toString());
        case 9:
          this.mManager.setPrimaryNavigationFragment(null);
          break;
        case 8:
          this.mManager.setPrimaryNavigationFragment(stringBuilder);
          break;
        case 7:
          stringBuilder.setNextAnim(op.enterAnim);
          this.mManager.attachFragment(stringBuilder);
          break;
        case 6:
          stringBuilder.setNextAnim(op.exitAnim);
          this.mManager.detachFragment(stringBuilder);
          break;
        case 5:
          stringBuilder.setNextAnim(op.enterAnim);
          this.mManager.showFragment(stringBuilder);
          break;
        case 4:
          stringBuilder.setNextAnim(op.exitAnim);
          this.mManager.hideFragment(stringBuilder);
          break;
        case 3:
          stringBuilder.setNextAnim(op.exitAnim);
          this.mManager.removeFragment(stringBuilder);
          break;
        case 1:
          stringBuilder.setNextAnim(op.enterAnim);
          this.mManager.addFragment(stringBuilder, false);
          break;
      } 
      if (!this.mReorderingAllowed && op.cmd != 1 && stringBuilder != null)
        this.mManager.moveFragmentToExpectedState(stringBuilder); 
    } 
    if (!this.mReorderingAllowed) {
      FragmentManagerImpl fragmentManagerImpl = this.mManager;
      fragmentManagerImpl.moveToState(fragmentManagerImpl.mCurState, true);
    } 
  }
  
  void executePopOps(boolean paramBoolean) {
    for (int i = this.mOps.size() - 1; i >= 0; i--) {
      StringBuilder stringBuilder;
      Op op = (Op)this.mOps.get(i);
      Fragment fragment = op.fragment;
      if (fragment != null)
        fragment.setNextTransition(FragmentManagerImpl.reverseTransit(this.mTransition), this.mTransitionStyle); 
      switch (op.cmd) {
        default:
          stringBuilder = new StringBuilder();
          stringBuilder.append("Unknown cmd: ");
          stringBuilder.append(op.cmd);
          throw new IllegalArgumentException(stringBuilder.toString());
        case 9:
          this.mManager.setPrimaryNavigationFragment(stringBuilder);
          break;
        case 8:
          this.mManager.setPrimaryNavigationFragment(null);
          break;
        case 7:
          stringBuilder.setNextAnim(op.popExitAnim);
          this.mManager.detachFragment(stringBuilder);
          break;
        case 6:
          stringBuilder.setNextAnim(op.popEnterAnim);
          this.mManager.attachFragment(stringBuilder);
          break;
        case 5:
          stringBuilder.setNextAnim(op.popExitAnim);
          this.mManager.hideFragment(stringBuilder);
          break;
        case 4:
          stringBuilder.setNextAnim(op.popEnterAnim);
          this.mManager.showFragment(stringBuilder);
          break;
        case 3:
          stringBuilder.setNextAnim(op.popEnterAnim);
          this.mManager.addFragment(stringBuilder, false);
          break;
        case 1:
          stringBuilder.setNextAnim(op.popExitAnim);
          this.mManager.removeFragment(stringBuilder);
          break;
      } 
      if (!this.mReorderingAllowed && op.cmd != 3 && stringBuilder != null)
        this.mManager.moveFragmentToExpectedState(stringBuilder); 
    } 
    if (!this.mReorderingAllowed && paramBoolean) {
      FragmentManagerImpl fragmentManagerImpl = this.mManager;
      fragmentManagerImpl.moveToState(fragmentManagerImpl.mCurState, true);
    } 
  }
  
  Fragment expandOps(ArrayList<Fragment> paramArrayList, Fragment paramFragment) { // Byte code:
    //   0: iconst_0
    //   1: istore_3
    //   2: aload_2
    //   3: astore #9
    //   5: iload_3
    //   6: aload_0
    //   7: getfield mOps : Ljava/util/ArrayList;
    //   10: invokevirtual size : ()I
    //   13: if_icmpge -> 457
    //   16: aload_0
    //   17: getfield mOps : Ljava/util/ArrayList;
    //   20: iload_3
    //   21: invokevirtual get : (I)Ljava/lang/Object;
    //   24: checkcast android/support/v4/app/BackStackRecord$Op
    //   27: astore #10
    //   29: aload #10
    //   31: getfield cmd : I
    //   34: istore #4
    //   36: iload #4
    //   38: iconst_1
    //   39: if_icmpeq -> 430
    //   42: iload #4
    //   44: iconst_2
    //   45: if_icmpeq -> 175
    //   48: iload #4
    //   50: iconst_3
    //   51: if_icmpeq -> 117
    //   54: iload #4
    //   56: bipush #6
    //   58: if_icmpeq -> 117
    //   61: iload #4
    //   63: bipush #7
    //   65: if_icmpeq -> 430
    //   68: iload #4
    //   70: bipush #8
    //   72: if_icmpeq -> 84
    //   75: iload_3
    //   76: istore #4
    //   78: aload #9
    //   80: astore_2
    //   81: goto -> 446
    //   84: aload_0
    //   85: getfield mOps : Ljava/util/ArrayList;
    //   88: iload_3
    //   89: new android/support/v4/app/BackStackRecord$Op
    //   92: dup
    //   93: bipush #9
    //   95: aload #9
    //   97: invokespecial <init> : (ILandroid/support/v4/app/Fragment;)V
    //   100: invokevirtual add : (ILjava/lang/Object;)V
    //   103: iload_3
    //   104: iconst_1
    //   105: iadd
    //   106: istore #4
    //   108: aload #10
    //   110: getfield fragment : Landroid/support/v4/app/Fragment;
    //   113: astore_2
    //   114: goto -> 446
    //   117: aload_1
    //   118: aload #10
    //   120: getfield fragment : Landroid/support/v4/app/Fragment;
    //   123: invokevirtual remove : (Ljava/lang/Object;)Z
    //   126: pop
    //   127: iload_3
    //   128: istore #4
    //   130: aload #9
    //   132: astore_2
    //   133: aload #10
    //   135: getfield fragment : Landroid/support/v4/app/Fragment;
    //   138: aload #9
    //   140: if_acmpne -> 446
    //   143: aload_0
    //   144: getfield mOps : Ljava/util/ArrayList;
    //   147: iload_3
    //   148: new android/support/v4/app/BackStackRecord$Op
    //   151: dup
    //   152: bipush #9
    //   154: aload #10
    //   156: getfield fragment : Landroid/support/v4/app/Fragment;
    //   159: invokespecial <init> : (ILandroid/support/v4/app/Fragment;)V
    //   162: invokevirtual add : (ILjava/lang/Object;)V
    //   165: iload_3
    //   166: iconst_1
    //   167: iadd
    //   168: istore #4
    //   170: aconst_null
    //   171: astore_2
    //   172: goto -> 446
    //   175: aload #10
    //   177: getfield fragment : Landroid/support/v4/app/Fragment;
    //   180: astore #11
    //   182: aload #11
    //   184: getfield mContainerId : I
    //   187: istore #8
    //   189: aload_1
    //   190: invokevirtual size : ()I
    //   193: iconst_1
    //   194: isub
    //   195: istore #4
    //   197: aload #9
    //   199: astore_2
    //   200: iconst_0
    //   201: istore #5
    //   203: iload #4
    //   205: iflt -> 390
    //   208: aload_1
    //   209: iload #4
    //   211: invokevirtual get : (I)Ljava/lang/Object;
    //   214: checkcast android/support/v4/app/Fragment
    //   217: astore #12
    //   219: iload #5
    //   221: istore #6
    //   223: iload_3
    //   224: istore #7
    //   226: aload_2
    //   227: astore #9
    //   229: aload #12
    //   231: getfield mContainerId : I
    //   234: iload #8
    //   236: if_icmpne -> 371
    //   239: aload #12
    //   241: aload #11
    //   243: if_acmpne -> 258
    //   246: iconst_1
    //   247: istore #6
    //   249: iload_3
    //   250: istore #7
    //   252: aload_2
    //   253: astore #9
    //   255: goto -> 371
    //   258: iload_3
    //   259: istore #6
    //   261: aload_2
    //   262: astore #9
    //   264: aload #12
    //   266: aload_2
    //   267: if_acmpne -> 297
    //   270: aload_0
    //   271: getfield mOps : Ljava/util/ArrayList;
    //   274: iload_3
    //   275: new android/support/v4/app/BackStackRecord$Op
    //   278: dup
    //   279: bipush #9
    //   281: aload #12
    //   283: invokespecial <init> : (ILandroid/support/v4/app/Fragment;)V
    //   286: invokevirtual add : (ILjava/lang/Object;)V
    //   289: iload_3
    //   290: iconst_1
    //   291: iadd
    //   292: istore #6
    //   294: aconst_null
    //   295: astore #9
    //   297: new android/support/v4/app/BackStackRecord$Op
    //   300: dup
    //   301: iconst_3
    //   302: aload #12
    //   304: invokespecial <init> : (ILandroid/support/v4/app/Fragment;)V
    //   307: astore_2
    //   308: aload_2
    //   309: aload #10
    //   311: getfield enterAnim : I
    //   314: putfield enterAnim : I
    //   317: aload_2
    //   318: aload #10
    //   320: getfield popEnterAnim : I
    //   323: putfield popEnterAnim : I
    //   326: aload_2
    //   327: aload #10
    //   329: getfield exitAnim : I
    //   332: putfield exitAnim : I
    //   335: aload_2
    //   336: aload #10
    //   338: getfield popExitAnim : I
    //   341: putfield popExitAnim : I
    //   344: aload_0
    //   345: getfield mOps : Ljava/util/ArrayList;
    //   348: iload #6
    //   350: aload_2
    //   351: invokevirtual add : (ILjava/lang/Object;)V
    //   354: aload_1
    //   355: aload #12
    //   357: invokevirtual remove : (Ljava/lang/Object;)Z
    //   360: pop
    //   361: iload #6
    //   363: iconst_1
    //   364: iadd
    //   365: istore #7
    //   367: iload #5
    //   369: istore #6
    //   371: iload #4
    //   373: iconst_1
    //   374: isub
    //   375: istore #4
    //   377: iload #6
    //   379: istore #5
    //   381: iload #7
    //   383: istore_3
    //   384: aload #9
    //   386: astore_2
    //   387: goto -> 203
    //   390: iload #5
    //   392: ifeq -> 411
    //   395: aload_0
    //   396: getfield mOps : Ljava/util/ArrayList;
    //   399: iload_3
    //   400: invokevirtual remove : (I)Ljava/lang/Object;
    //   403: pop
    //   404: iload_3
    //   405: iconst_1
    //   406: isub
    //   407: istore_3
    //   408: goto -> 424
    //   411: aload #10
    //   413: iconst_1
    //   414: putfield cmd : I
    //   417: aload_1
    //   418: aload #11
    //   420: invokevirtual add : (Ljava/lang/Object;)Z
    //   423: pop
    //   424: iload_3
    //   425: istore #4
    //   427: goto -> 446
    //   430: aload_1
    //   431: aload #10
    //   433: getfield fragment : Landroid/support/v4/app/Fragment;
    //   436: invokevirtual add : (Ljava/lang/Object;)Z
    //   439: pop
    //   440: aload #9
    //   442: astore_2
    //   443: iload_3
    //   444: istore #4
    //   446: iload #4
    //   448: iconst_1
    //   449: iadd
    //   450: istore_3
    //   451: aload_2
    //   452: astore #9
    //   454: goto -> 5
    //   457: aload #9
    //   459: areturn }
  
  public boolean generateOps(ArrayList<BackStackRecord> paramArrayList1, ArrayList<Boolean> paramArrayList2) {
    if (FragmentManagerImpl.DEBUG) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Run: ");
      stringBuilder.append(this);
      Log.v("FragmentManager", stringBuilder.toString());
    } 
    paramArrayList1.add(this);
    paramArrayList2.add(Boolean.valueOf(false));
    if (this.mAddToBackStack)
      this.mManager.addBackStackState(this); 
    return true;
  }
  
  @Nullable
  public CharSequence getBreadCrumbShortTitle() { return (this.mBreadCrumbShortTitleRes != 0) ? this.mManager.mHost.getContext().getText(this.mBreadCrumbShortTitleRes) : this.mBreadCrumbShortTitleText; }
  
  public int getBreadCrumbShortTitleRes() { return this.mBreadCrumbShortTitleRes; }
  
  @Nullable
  public CharSequence getBreadCrumbTitle() { return (this.mBreadCrumbTitleRes != 0) ? this.mManager.mHost.getContext().getText(this.mBreadCrumbTitleRes) : this.mBreadCrumbTitleText; }
  
  public int getBreadCrumbTitleRes() { return this.mBreadCrumbTitleRes; }
  
  public int getId() { return this.mIndex; }
  
  @Nullable
  public String getName() { return this.mName; }
  
  public int getTransition() { return this.mTransition; }
  
  public int getTransitionStyle() { return this.mTransitionStyle; }
  
  public FragmentTransaction hide(Fragment paramFragment) {
    addOp(new Op(4, paramFragment));
    return this;
  }
  
  boolean interactsWith(int paramInt) {
    int i = this.mOps.size();
    for (byte b = 0; b < i; b++) {
      boolean bool;
      Op op = (Op)this.mOps.get(b);
      if (op.fragment != null) {
        bool = op.fragment.mContainerId;
      } else {
        bool = false;
      } 
      if (bool && bool == paramInt)
        return true; 
    } 
    return false;
  }
  
  boolean interactsWith(ArrayList<BackStackRecord> paramArrayList, int paramInt1, int paramInt2) {
    if (paramInt2 == paramInt1)
      return false; 
    int j = this.mOps.size();
    byte b = 0;
    int i;
    for (i = -1; b < j; i = k) {
      byte b1;
      Op op = (Op)this.mOps.get(b);
      if (op.fragment != null) {
        b1 = op.fragment.mContainerId;
      } else {
        b1 = 0;
      } 
      int k = i;
      if (b1) {
        k = i;
        if (b1 != i) {
          for (i = paramInt1; i < paramInt2; i++) {
            BackStackRecord backStackRecord = (BackStackRecord)paramArrayList.get(i);
            int m = backStackRecord.mOps.size();
            for (k = 0; k < m; k++) {
              boolean bool;
              Op op1 = (Op)backStackRecord.mOps.get(k);
              if (op1.fragment != null) {
                bool = op1.fragment.mContainerId;
              } else {
                bool = false;
              } 
              if (bool == b1)
                return true; 
            } 
          } 
          k = b1;
        } 
      } 
      b++;
    } 
    return false;
  }
  
  public boolean isAddToBackStackAllowed() { return this.mAllowAddToBackStack; }
  
  public boolean isEmpty() { return this.mOps.isEmpty(); }
  
  boolean isPostponed() {
    for (byte b = 0; b < this.mOps.size(); b++) {
      if (isFragmentPostponed((Op)this.mOps.get(b)))
        return true; 
    } 
    return false;
  }
  
  public FragmentTransaction remove(Fragment paramFragment) {
    addOp(new Op(3, paramFragment));
    return this;
  }
  
  public FragmentTransaction replace(int paramInt, Fragment paramFragment) { return replace(paramInt, paramFragment, null); }
  
  public FragmentTransaction replace(int paramInt, Fragment paramFragment, @Nullable String paramString) {
    if (paramInt != 0) {
      doAddOp(paramInt, paramFragment, paramString, 2);
      return this;
    } 
    throw new IllegalArgumentException("Must use non-zero containerViewId");
  }
  
  public FragmentTransaction runOnCommit(Runnable paramRunnable) {
    if (paramRunnable != null) {
      disallowAddToBackStack();
      if (this.mCommitRunnables == null)
        this.mCommitRunnables = new ArrayList(); 
      this.mCommitRunnables.add(paramRunnable);
      return this;
    } 
    throw new IllegalArgumentException("runnable cannot be null");
  }
  
  public void runOnCommitRunnables() {
    ArrayList arrayList = this.mCommitRunnables;
    if (arrayList != null) {
      byte b = 0;
      int i = arrayList.size();
      while (b < i) {
        ((Runnable)this.mCommitRunnables.get(b)).run();
        b++;
      } 
      this.mCommitRunnables = null;
    } 
  }
  
  public FragmentTransaction setAllowOptimization(boolean paramBoolean) { return setReorderingAllowed(paramBoolean); }
  
  public FragmentTransaction setBreadCrumbShortTitle(int paramInt) {
    this.mBreadCrumbShortTitleRes = paramInt;
    this.mBreadCrumbShortTitleText = null;
    return this;
  }
  
  public FragmentTransaction setBreadCrumbShortTitle(@Nullable CharSequence paramCharSequence) {
    this.mBreadCrumbShortTitleRes = 0;
    this.mBreadCrumbShortTitleText = paramCharSequence;
    return this;
  }
  
  public FragmentTransaction setBreadCrumbTitle(int paramInt) {
    this.mBreadCrumbTitleRes = paramInt;
    this.mBreadCrumbTitleText = null;
    return this;
  }
  
  public FragmentTransaction setBreadCrumbTitle(@Nullable CharSequence paramCharSequence) {
    this.mBreadCrumbTitleRes = 0;
    this.mBreadCrumbTitleText = paramCharSequence;
    return this;
  }
  
  public FragmentTransaction setCustomAnimations(int paramInt1, int paramInt2) { return setCustomAnimations(paramInt1, paramInt2, 0, 0); }
  
  public FragmentTransaction setCustomAnimations(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    this.mEnterAnim = paramInt1;
    this.mExitAnim = paramInt2;
    this.mPopEnterAnim = paramInt3;
    this.mPopExitAnim = paramInt4;
    return this;
  }
  
  void setOnStartPostponedListener(Fragment.OnStartEnterTransitionListener paramOnStartEnterTransitionListener) {
    for (byte b = 0; b < this.mOps.size(); b++) {
      Op op = (Op)this.mOps.get(b);
      if (isFragmentPostponed(op))
        op.fragment.setOnStartEnterTransitionListener(paramOnStartEnterTransitionListener); 
    } 
  }
  
  public FragmentTransaction setPrimaryNavigationFragment(@Nullable Fragment paramFragment) {
    addOp(new Op(8, paramFragment));
    return this;
  }
  
  public FragmentTransaction setReorderingAllowed(boolean paramBoolean) {
    this.mReorderingAllowed = paramBoolean;
    return this;
  }
  
  public FragmentTransaction setTransition(int paramInt) {
    this.mTransition = paramInt;
    return this;
  }
  
  public FragmentTransaction setTransitionStyle(int paramInt) {
    this.mTransitionStyle = paramInt;
    return this;
  }
  
  public FragmentTransaction show(Fragment paramFragment) {
    addOp(new Op(5, paramFragment));
    return this;
  }
  
  public String toString() {
    StringBuilder stringBuilder = new StringBuilder(128);
    stringBuilder.append("BackStackEntry{");
    stringBuilder.append(Integer.toHexString(System.identityHashCode(this)));
    if (this.mIndex >= 0) {
      stringBuilder.append(" #");
      stringBuilder.append(this.mIndex);
    } 
    if (this.mName != null) {
      stringBuilder.append(" ");
      stringBuilder.append(this.mName);
    } 
    stringBuilder.append("}");
    return stringBuilder.toString();
  }
  
  Fragment trackAddedFragmentsInPop(ArrayList<Fragment> paramArrayList, Fragment paramFragment) {
    byte b = 0;
    while (b < this.mOps.size()) {
      Op op = (Op)this.mOps.get(b);
      int i = op.cmd;
      if (i != 1)
        if (i != 3) {
          switch (i) {
            case 9:
              paramFragment = op.fragment;
              break;
            case 8:
              paramFragment = null;
              break;
            case 6:
              paramArrayList.add(op.fragment);
              break;
            case 7:
              paramArrayList.remove(op.fragment);
              break;
          } 
          b++;
        }  
    } 
    return paramFragment;
  }
}
