package com.bumptech.glide.load.engine.prefill;

import android.graphics.Bitmap;
import android.os.Handler;
import android.os.Looper;
import com.bumptech.glide.load.DecodeFormat;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.engine.cache.MemoryCache;
import com.bumptech.glide.util.Util;
import java.util.HashMap;

public final class BitmapPreFiller {
  private final BitmapPool bitmapPool;
  
  private BitmapPreFillRunner current;
  
  private final DecodeFormat defaultFormat;
  
  private final Handler handler = new Handler(Looper.getMainLooper());
  
  private final MemoryCache memoryCache;
  
  public BitmapPreFiller(MemoryCache paramMemoryCache, BitmapPool paramBitmapPool, DecodeFormat paramDecodeFormat) {
    this.memoryCache = paramMemoryCache;
    this.bitmapPool = paramBitmapPool;
    this.defaultFormat = paramDecodeFormat;
  }
  
  private static int getSizeInBytes(PreFillType paramPreFillType) { return Util.getBitmapByteSize(paramPreFillType.getWidth(), paramPreFillType.getHeight(), paramPreFillType.getConfig()); }
  
  PreFillQueue generateAllocationOrder(PreFillType[] paramArrayOfPreFillType) {
    int j = this.memoryCache.getMaxSize();
    int k = this.memoryCache.getCurrentSize();
    int m = this.bitmapPool.getMaxSize();
    int n = paramArrayOfPreFillType.length;
    byte b2 = 0;
    byte b1 = 0;
    int i = 0;
    while (b1 < n) {
      i += paramArrayOfPreFillType[b1].getWeight();
      b1++;
    } 
    float f = (j - k + m) / i;
    HashMap hashMap = new HashMap();
    i = paramArrayOfPreFillType.length;
    for (b1 = b2; b1 < i; b1++) {
      PreFillType preFillType = paramArrayOfPreFillType[b1];
      hashMap.put(preFillType, Integer.valueOf(Math.round(preFillType.getWeight() * f) / getSizeInBytes(preFillType)));
    } 
    return new PreFillQueue(hashMap);
  }
  
  public void preFill(PreFillType.Builder... paramVarArgs) {
    BitmapPreFillRunner bitmapPreFillRunner = this.current;
    if (bitmapPreFillRunner != null)
      bitmapPreFillRunner.cancel(); 
    PreFillType[] arrayOfPreFillType = new PreFillType[paramVarArgs.length];
    for (byte b = 0; b < paramVarArgs.length; b++) {
      PreFillType.Builder builder = paramVarArgs[b];
      if (builder.getConfig() == null) {
        Bitmap.Config config;
        if (this.defaultFormat == DecodeFormat.ALWAYS_ARGB_8888 || this.defaultFormat == DecodeFormat.PREFER_ARGB_8888) {
          config = Bitmap.Config.ARGB_8888;
        } else {
          config = Bitmap.Config.RGB_565;
        } 
        builder.setConfig(config);
      } 
      arrayOfPreFillType[b] = builder.build();
    } 
    PreFillQueue preFillQueue = generateAllocationOrder(arrayOfPreFillType);
    this.current = new BitmapPreFillRunner(this.bitmapPool, this.memoryCache, preFillQueue);
    this.handler.post(this.current);
  }
}
