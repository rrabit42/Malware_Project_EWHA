package android.arch.lifecycle;

import android.app.Application;
import android.content.Context;
import android.os.Handler;
import android.support.annotation.NonNull;
import android.support.annotation.VisibleForTesting;

public class ProcessLifecycleOwner implements LifecycleOwner {
  @VisibleForTesting
  static final long TIMEOUT_MS = 700L;
  
  private static final ProcessLifecycleOwner sInstance = new ProcessLifecycleOwner();
  
  private Runnable mDelayedPauseRunnable = new Object(this);
  
  private Handler mHandler;
  
  private ReportFragment.ActivityInitializationListener mInitializationListener = new Object(this);
  
  private boolean mPauseSent = true;
  
  private final LifecycleRegistry mRegistry = new LifecycleRegistry(this);
  
  private int mResumedCounter = 0;
  
  private int mStartedCounter = 0;
  
  private boolean mStopSent = true;
  
  private void dispatchPauseIfNeeded() {
    if (this.mResumedCounter == 0) {
      this.mPauseSent = true;
      this.mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE);
    } 
  }
  
  private void dispatchStopIfNeeded() {
    if (this.mStartedCounter == 0 && this.mPauseSent) {
      this.mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP);
      this.mStopSent = true;
    } 
  }
  
  public static LifecycleOwner get() { return sInstance; }
  
  static void init(Context paramContext) { sInstance.attach(paramContext); }
  
  void activityPaused() {
    this.mResumedCounter--;
    if (this.mResumedCounter == 0)
      this.mHandler.postDelayed(this.mDelayedPauseRunnable, 700L); 
  }
  
  void activityResumed() {
    this.mResumedCounter++;
    if (this.mResumedCounter == 1) {
      if (this.mPauseSent) {
        this.mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);
        this.mPauseSent = false;
        return;
      } 
      this.mHandler.removeCallbacks(this.mDelayedPauseRunnable);
    } 
  }
  
  void activityStarted() {
    this.mStartedCounter++;
    if (this.mStartedCounter == 1 && this.mStopSent) {
      this.mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);
      this.mStopSent = false;
    } 
  }
  
  void activityStopped() {
    this.mStartedCounter--;
    dispatchStopIfNeeded();
  }
  
  void attach(Context paramContext) {
    this.mHandler = new Handler();
    this.mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);
    ((Application)paramContext.getApplicationContext()).registerActivityLifecycleCallbacks(new Object(this));
  }
  
  @NonNull
  public Lifecycle getLifecycle() { return this.mRegistry; }
}
