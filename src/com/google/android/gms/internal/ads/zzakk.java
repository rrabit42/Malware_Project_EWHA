package com.google.android.gms.internal.ads;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.ActivityManager;
import android.app.AlertDialog;
import android.app.KeyguardManager;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Debug;
import android.os.Handler;
import android.os.Looper;
import android.os.PowerManager;
import android.os.Process;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.Window;
import android.view.WindowManager;
import android.webkit.WebResourceResponse;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.widget.AdapterView;
import android.widget.PopupWindow;
import com.google.android.gms.ads.internal.zzbv;
import com.google.android.gms.common.util.CrashUtils;
import com.google.android.gms.common.util.IOUtils;
import com.google.android.gms.common.util.PlatformVersion;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.common.wrappers.Wrappers;
import java.io.ByteArrayInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.regex.Pattern;
import javax.annotation.concurrent.GuardedBy;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

@zzadh
public final class zzakk {
  public static final Handler zzcrm = new zzakc(Looper.getMainLooper());
  
  private final Object mLock = new Object();
  
  @GuardedBy("mLock")
  private String zzcpq;
  
  private boolean zzcrn = true;
  
  private boolean zzcro = false;
  
  private boolean zzcrp = false;
  
  @GuardedBy("this")
  private Pattern zzcrq;
  
  @GuardedBy("this")
  private Pattern zzcrr;
  
  @VisibleForTesting
  public static Bundle zza(zzgk paramzzgk) {
    String str2;
    if (paramzzgk == null)
      return null; 
    String str1 = zznk.zzawq;
    if (!((Boolean)zzkb.zzik().zzd(str1)).booleanValue()) {
      str1 = zznk.zzaws;
      if (!((Boolean)zzkb.zzik().zzd(str1)).booleanValue())
        return null; 
    } 
    if (zzbv.zzeo().zzqh().zzqu() && zzbv.zzeo().zzqh().zzqw())
      return null; 
    if (paramzzgk.zzha())
      paramzzgk.wakeup(); 
    zzge zzge = paramzzgk.zzgy();
    if (zzge != null) {
      String str5 = zzge.getSignature();
      String str6 = zzge.zzgo();
      String str7 = zzge.zzgp();
      if (str5 != null)
        zzbv.zzeo().zzqh().zzcn(str5); 
      str2 = str5;
      String str3 = str6;
      String str4 = str7;
      if (str7 != null) {
        zzbv.zzeo().zzqh().zzco(str7);
        str2 = str5;
        str3 = str6;
        str4 = str7;
      } 
    } else {
      str2 = zzbv.zzeo().zzqh().zzqv();
      str1 = zzbv.zzeo().zzqh().zzqx();
      zzge = null;
    } 
    Bundle bundle = new Bundle(1);
    if (str1 != null) {
      zzna zzna = zznk.zzaws;
      if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue() && !zzbv.zzeo().zzqh().zzqw())
        bundle.putString("v_fp_vertical", str1); 
    } 
    if (str2 != null) {
      zzna zzna = zznk.zzawq;
      if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue() && !zzbv.zzeo().zzqh().zzqu()) {
        bundle.putString("fingerprint", str2);
        if (!str2.equals(zzge))
          bundle.putString("v_fp", zzge); 
      } 
    } 
    return !bundle.isEmpty() ? bundle : null;
  }
  
  public static DisplayMetrics zza(WindowManager paramWindowManager) {
    DisplayMetrics displayMetrics = new DisplayMetrics();
    paramWindowManager.getDefaultDisplay().getMetrics(displayMetrics);
    return displayMetrics;
  }
  
  public static PopupWindow zza(View paramView, int paramInt1, int paramInt2, boolean paramBoolean) { return new PopupWindow(paramView, paramInt1, paramInt2, false); }
  
  public static String zza(Context paramContext, View paramView, zzjn paramzzjn) {
    zzna zzna = zznk.zzaxi;
    if (!((Boolean)zzkb.zzik().zzd(zzna)).booleanValue())
      return null; 
    try {
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.put("width", paramzzjn.width);
      jSONObject2.put("height", paramzzjn.height);
      jSONObject1.put("size", jSONObject2);
      jSONObject1.put("activity", zzap(paramContext));
      if (!paramzzjn.zzarc) {
        JSONArray jSONArray = new JSONArray();
        while (true) {
          if (paramView != null) {
            ViewParent viewParent = paramView.getParent();
            if (viewParent != null) {
              int i = -1;
              if (viewParent instanceof ViewGroup)
                i = ((ViewGroup)viewParent).indexOfChild(paramView); 
              JSONObject jSONObject = new JSONObject();
              jSONObject.put("type", viewParent.getClass().getName());
              jSONObject.put("index_of_child", i);
              jSONArray.put(jSONObject);
            } 
            if (viewParent != null && viewParent instanceof View) {
              paramView = (View)viewParent;
              continue;
            } 
          } else {
            if (jSONArray.length() > 0)
              jSONObject1.put("parents", jSONArray); 
            return jSONObject1.toString();
          } 
          paramView = null;
        } 
      } 
      return jSONObject1.toString();
    } catch (JSONException paramContext) {
      zzakb.zzc("Fail to get view hierarchy json", paramContext);
      return null;
    } 
  }
  
  public static String zza(InputStreamReader paramInputStreamReader) throws IOException {
    StringBuilder stringBuilder = new StringBuilder(8192);
    char[] arrayOfChar = new char[2048];
    while (true) {
      int i = paramInputStreamReader.read(arrayOfChar);
      if (i != -1) {
        stringBuilder.append(arrayOfChar, 0, i);
        continue;
      } 
      break;
    } 
    return stringBuilder.toString();
  }
  
  private final JSONArray zza(Collection<?> paramCollection) throws JSONException {
    JSONArray jSONArray = new JSONArray();
    Iterator iterator = paramCollection.iterator();
    while (iterator.hasNext())
      zza(jSONArray, iterator.next()); 
    return jSONArray;
  }
  
  public static void zza(Context paramContext, Intent paramIntent) {
    try {
      paramContext.startActivity(paramIntent);
      return;
    } catch (Throwable throwable) {
      paramIntent.addFlags(268435456);
      paramContext.startActivity(paramIntent);
      return;
    } 
  }
  
  @TargetApi(18)
  public static void zza(Context paramContext, Uri paramUri) {
    try {
      Intent intent = new Intent("android.intent.action.VIEW", paramUri);
      Bundle bundle = new Bundle();
      intent.putExtras(bundle);
      zzna zzna = zznk.zzbdy;
      if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue())
        zzb(paramContext, intent); 
      bundle.putString("com.android.browser.application_id", paramContext.getPackageName());
      paramContext.startActivity(intent);
      String str;
      StringBuilder stringBuilder = new StringBuilder((str = paramUri.toString()).valueOf(str).length() + 26);
      stringBuilder.append("Opening ");
      stringBuilder.append(str);
      stringBuilder.append(" in a new browser.");
      zzakb.zzck(stringBuilder.toString());
      return;
    } catch (ActivityNotFoundException paramContext) {
      zzakb.zzb("No browser is found.", paramContext);
      return;
    } 
  }
  
  public static void zza(Context paramContext, String paramString, List<String> paramList) {
    Iterator iterator = paramList.iterator();
    while (iterator.hasNext())
      (new zzami(paramContext, paramString, (String)iterator.next())).zznt(); 
  }
  
  public static void zza(Context paramContext, Throwable paramThrowable) {
    if (paramContext == null)
      return; 
    boolean bool = false;
    try {
      zzna zzna = zznk.zzaui;
      boolean bool1 = ((Boolean)zzkb.zzik().zzd(zzna)).booleanValue();
      bool = bool1;
    } catch (IllegalStateException illegalStateException) {}
    if (bool)
      CrashUtils.addDynamiteErrorToDropBox(paramContext, paramThrowable); 
  }
  
  private final void zza(JSONArray paramJSONArray, Object paramObject) throws JSONException {
    Object[] arrayOfObject;
    if (paramObject instanceof Bundle) {
      paramObject = zzf((Bundle)paramObject);
    } else if (paramObject instanceof Map) {
      paramObject = zzn((Map)paramObject);
    } else if (paramObject instanceof Collection) {
      paramObject = zza((Collection)paramObject);
    } else {
      if (paramObject instanceof Object[]) {
        arrayOfObject = (Object[])paramObject;
        JSONArray jSONArray = new JSONArray();
        int i = arrayOfObject.length;
        for (byte b = 0; b < i; b++)
          zza(jSONArray, arrayOfObject[b]); 
        paramJSONArray.put(jSONArray);
        return;
      } 
      paramJSONArray.put(arrayOfObject);
      return;
    } 
    paramJSONArray.put(arrayOfObject);
  }
  
  private final void zza(JSONObject paramJSONObject, String paramString, Object paramObject) throws JSONException {
    if (paramObject instanceof Bundle) {
      paramObject = zzf((Bundle)paramObject);
    } else if (paramObject instanceof Map) {
      paramObject = zzn((Map)paramObject);
    } else {
      if (paramObject instanceof Collection) {
        if (paramString == null)
          paramString = "null"; 
        paramObject = (Collection)paramObject;
      } else if (paramObject instanceof Object[]) {
        paramObject = Arrays.asList((Object[])paramObject);
      } else {
        paramJSONObject.put(paramString, paramObject);
        return;
      } 
      paramObject = zza(paramObject);
    } 
    paramJSONObject.put(paramString, paramObject);
  }
  
  @TargetApi(24)
  public static boolean zza(Activity paramActivity, Configuration paramConfiguration) {
    int j = zzkb.zzif().zza(paramActivity, paramConfiguration.screenHeightDp);
    int k = zzamu.zza(paramActivity, paramConfiguration.screenWidthDp);
    DisplayMetrics displayMetrics = zza((WindowManager)paramActivity.getApplicationContext().getSystemService("window"));
    int m = displayMetrics.heightPixels;
    int n = displayMetrics.widthPixels;
    int i = paramActivity.getResources().getIdentifier("status_bar_height", "dimen", "android");
    if (i > 0) {
      i = paramActivity.getResources().getDimensionPixelSize(i);
    } else {
      i = 0;
    } 
    double d = (paramActivity.getResources().getDisplayMetrics()).density;
    Double.isNaN(d);
    int i1 = (int)Math.round(d + 0.5D);
    zzna zzna = zznk.zzbek;
    i1 *= ((Integer)zzkb.zzik().zzd(zzna)).intValue();
    return (zzb(m, j + i, i1) && zzb(n, k, i1));
  }
  
  public static boolean zza(ClassLoader paramClassLoader, Class<?> paramClass, String paramString) {
    try {
      return paramClass.isAssignableFrom(Class.forName(paramString, false, paramClassLoader));
    } catch (Throwable paramClassLoader) {
      return false;
    } 
  }
  
  public static boolean zzaj(Context paramContext) {
    Intent intent = new Intent();
    intent.setClassName(paramContext, "com.google.android.gms.ads.AdActivity");
    packageManager = paramContext.getPackageManager();
    try {
      boolean bool;
      String str = packageManager.resolveActivity(intent, 65536);
      if (str == null || str.activityInfo == null) {
        str = "Could not find com.google.android.gms.ads.AdActivity, please make sure it is declared in AndroidManifest.xml.";
        zzakb.zzdk(str);
        return false;
      } 
      if ((str.activityInfo.configChanges & 0x10) == 0) {
        zzakb.zzdk(String.format("com.google.android.gms.ads.AdActivity requires the android:configChanges value to contain \"%s\".", new Object[] { "keyboard" }));
        bool = false;
      } else {
        bool = true;
      } 
      if ((str.activityInfo.configChanges & 0x20) == 0) {
        zzakb.zzdk(String.format("com.google.android.gms.ads.AdActivity requires the android:configChanges value to contain \"%s\".", new Object[] { "keyboardHidden" }));
        bool = false;
      } 
      if ((str.activityInfo.configChanges & 0x80) == 0) {
        zzakb.zzdk(String.format("com.google.android.gms.ads.AdActivity requires the android:configChanges value to contain \"%s\".", new Object[] { "orientation" }));
        bool = false;
      } 
      if ((str.activityInfo.configChanges & 0x100) == 0) {
        zzakb.zzdk(String.format("com.google.android.gms.ads.AdActivity requires the android:configChanges value to contain \"%s\".", new Object[] { "screenLayout" }));
        bool = false;
      } 
      if ((str.activityInfo.configChanges & 0x200) == 0) {
        zzakb.zzdk(String.format("com.google.android.gms.ads.AdActivity requires the android:configChanges value to contain \"%s\".", new Object[] { "uiMode" }));
        bool = false;
      } 
      if ((str.activityInfo.configChanges & 0x400) == 0) {
        zzakb.zzdk(String.format("com.google.android.gms.ads.AdActivity requires the android:configChanges value to contain \"%s\".", new Object[] { "screenSize" }));
        bool = false;
      } 
      if ((str.activityInfo.configChanges & 0x800) == 0) {
        str = String.format("com.google.android.gms.ads.AdActivity requires the android:configChanges value to contain \"%s\".", new Object[] { "smallestScreenSize" });
      } else {
        return bool;
      } 
      zzakb.zzdk(str);
      return false;
    } catch (Exception packageManager) {
      zzakb.zzc("Could not verify that com.google.android.gms.ads.AdActivity is declared in AndroidManifest.xml", packageManager);
      zzbv.zzeo().zza(packageManager, "AdUtil.hasAdActivity");
      return false;
    } 
  }
  
  @VisibleForTesting
  protected static String zzam(Context paramContext) {
    try {
      return (new WebView(paramContext)).getSettings().getUserAgentString();
    } catch (Throwable paramContext) {
      return zzrg();
    } 
  }
  
  public static AlertDialog.Builder zzan(Context paramContext) { return new AlertDialog.Builder(paramContext); }
  
  public static zzmw zzao(Context paramContext) { return new zzmw(paramContext); }
  
  private static String zzap(Context paramContext) {
    try {
      ActivityManager activityManager = (ActivityManager)paramContext.getSystemService("activity");
      if (activityManager == null)
        return null; 
      List list = activityManager.getRunningTasks(1);
      if (list != null && !list.isEmpty()) {
        ActivityManager.RunningTaskInfo runningTaskInfo = (ActivityManager.RunningTaskInfo)list.get(0);
        if (runningTaskInfo != null && runningTaskInfo.topActivity != null)
          return runningTaskInfo.topActivity.getClassName(); 
      } 
      return null;
    } catch (Exception paramContext) {
      return null;
    } 
  }
  
  public static boolean zzaq(Context paramContext) {
    try {
      ActivityManager activityManager = (ActivityManager)paramContext.getSystemService("activity");
      KeyguardManager keyguardManager = (KeyguardManager)paramContext.getSystemService("keyguard");
      if (activityManager != null) {
        if (keyguardManager == null)
          return false; 
        List list = activityManager.getRunningAppProcesses();
        if (list == null)
          return false; 
        for (ActivityManager.RunningAppProcessInfo runningAppProcessInfo : list) {
          if (Process.myPid() == runningAppProcessInfo.pid) {
            if (runningAppProcessInfo.importance == 100 && !keyguardManager.inKeyguardRestrictedInputMode()) {
              boolean bool;
              PowerManager powerManager = (PowerManager)paramContext.getSystemService("power");
              if (powerManager == null) {
                bool = false;
              } else {
                bool = powerManager.isScreenOn();
              } 
              if (bool)
                return true; 
            } 
            break;
          } 
        } 
      } 
      return false;
    } catch (Throwable paramContext) {
      return false;
    } 
  }
  
  public static Bitmap zzar(Context paramContext) {
    if (!(paramContext instanceof Activity))
      return null; 
    try {
      Window window;
      zzna zzna = zznk.zzbbh;
      if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue()) {
        window = ((Activity)paramContext).getWindow();
        if (window != null)
          return zzv(window.getDecorView().getRootView()); 
      } else {
        return zzu(((Activity)window).getWindow().getDecorView());
      } 
    } catch (RuntimeException paramContext) {
      zzakb.zzb("Fail to capture screen shot", paramContext);
    } 
    return null;
  }
  
  public static int zzas(Context paramContext) {
    ApplicationInfo applicationInfo = paramContext.getApplicationInfo();
    return (applicationInfo == null) ? 0 : applicationInfo.targetSdkVersion;
  }
  
  @Nullable
  private static KeyguardManager zzat(Context paramContext) {
    Object object = paramContext.getSystemService("keyguard");
    return (object != null && object instanceof KeyguardManager) ? (KeyguardManager)object : null;
  }
  
  @TargetApi(16)
  public static boolean zzau(Context paramContext) {
    if (paramContext != null) {
      if (!PlatformVersion.isAtLeastJellyBean())
        return false; 
      KeyguardManager keyguardManager = zzat(paramContext);
      if (keyguardManager != null && keyguardManager.isKeyguardLocked())
        return true; 
    } 
    return false;
  }
  
  public static boolean zzav(Context paramContext) {
    try {
      paramContext.getClassLoader().loadClass("com.google.android.gms.ads.internal.ClientApi");
      return false;
    } catch (ClassNotFoundException paramContext) {
      return true;
    } catch (Throwable paramContext) {
      zzakb.zzb("Error loading class.", paramContext);
      zzbv.zzeo().zza(paramContext, "AdUtil.isLiteSdk");
      return false;
    } 
  }
  
  public static WebResourceResponse zzb(HttpURLConnection paramHttpURLConnection) throws IOException {
    zzbv.zzek();
    String str1 = paramHttpURLConnection.getContentType();
    boolean bool = TextUtils.isEmpty(str1);
    String str3 = "";
    if (bool) {
      str1 = "";
    } else {
      str1 = str1.split(";")[0].trim();
    } 
    zzbv.zzek();
    String str4 = paramHttpURLConnection.getContentType();
    String str2 = str3;
    if (!TextUtils.isEmpty(str4)) {
      String[] arrayOfString = str4.split(";");
      str2 = str3;
      if (arrayOfString.length != 1) {
        byte b = 1;
        while (true) {
          str2 = str3;
          if (b < arrayOfString.length) {
            if (arrayOfString[b].trim().startsWith("charset")) {
              String[] arrayOfString1 = arrayOfString[b].trim().split("=");
              if (arrayOfString1.length > 1) {
                str2 = arrayOfString1[1].trim();
                break;
              } 
            } 
            b++;
            continue;
          } 
          break;
        } 
      } 
    } 
    Map map = paramHttpURLConnection.getHeaderFields();
    HashMap hashMap = new HashMap(map.size());
    for (Map.Entry entry : map.entrySet()) {
      if (entry.getKey() != null && entry.getValue() != null && ((List)entry.getValue()).size() > 0)
        hashMap.put((String)entry.getKey(), (String)((List)entry.getValue()).get(0)); 
    } 
    return zzbv.zzem().zza(str1, str2, paramHttpURLConnection.getResponseCode(), paramHttpURLConnection.getResponseMessage(), hashMap, paramHttpURLConnection.getInputStream());
  }
  
  @TargetApi(18)
  public static void zzb(Context paramContext, Intent paramIntent) {
    if (paramIntent == null)
      return; 
    if (PlatformVersion.isAtLeastJellyBeanMR2()) {
      Bundle bundle;
      if (paramIntent.getExtras() != null) {
        bundle = paramIntent.getExtras();
      } else {
        bundle = new Bundle();
      } 
      bundle.putBinder("android.support.customtabs.extra.SESSION", null);
      bundle.putString("com.android.browser.application_id", paramContext.getPackageName());
      paramIntent.putExtras(bundle);
    } 
  }
  
  @VisibleForTesting
  private static boolean zzb(int paramInt1, int paramInt2, int paramInt3) { return (Math.abs(paramInt1 - paramInt2) <= paramInt3); }
  
  public static String zzcu(String paramString) { return Uri.parse(paramString).buildUpon().query(null).build().toString(); }
  
  public static int zzcv(String paramString) {
    try {
      return Integer.parseInt(paramString);
    } catch (NumberFormatException paramString) {
      StringBuilder stringBuilder = new StringBuilder((paramString = (paramString = null).valueOf(paramString)).valueOf(paramString).length() + 22);
      stringBuilder.append("Could not parse value:");
      stringBuilder.append(paramString);
      zzakb.zzdk(stringBuilder.toString());
      return 0;
    } 
  }
  
  public static boolean zzcw(String paramString) { return TextUtils.isEmpty(paramString) ? false : paramString.matches("([^\\s]+(\\.(?i)(jpg|png|gif|bmp|webp))$)"); }
  
  public static void zzd(Context paramContext, String paramString1, String paramString2) {
    ArrayList arrayList = new ArrayList();
    arrayList.add(paramString2);
    zza(paramContext, paramString1, arrayList);
  }
  
  public static void zzd(Runnable paramRunnable) {
    if (Looper.getMainLooper().getThread() != Thread.currentThread()) {
      paramRunnable.run();
      return;
    } 
    zzaki.zzb(paramRunnable);
  }
  
  public static void zze(Context paramContext, String paramString1, String paramString2) {
    try {
      FileOutputStream fileOutputStream = paramContext.openFileOutput(paramString1, 0);
      fileOutputStream.write(paramString2.getBytes("UTF-8"));
      fileOutputStream.close();
      return;
    } catch (Exception paramContext) {
      zzakb.zzb("Error writing to file in internal storage.", paramContext);
      return;
    } 
  }
  
  @Nullable
  public static WebResourceResponse zzf(Context paramContext, String paramString1, String paramString2) {
    try {
      HashMap hashMap = new HashMap();
      hashMap.put("User-Agent", zzbv.zzek().zzm(paramContext, paramString1));
      hashMap.put("Cache-Control", "max-stale=3600");
      String str = (String)(new zzalt(paramContext)).zzc(paramString2, hashMap).get(60L, TimeUnit.SECONDS);
      if (str != null)
        return new WebResourceResponse("application/javascript", "UTF-8", new ByteArrayInputStream(str.getBytes("UTF-8"))); 
    } catch (IOException paramContext) {
      zzakb.zzc("Could not fetch MRAID JS.", paramContext);
    } catch (ExecutionException paramContext) {
    
    } catch (InterruptedException paramContext) {
    
    } catch (TimeoutException paramContext) {}
    return null;
  }
  
  private final JSONObject zzf(Bundle paramBundle) throws JSONException {
    JSONObject jSONObject = new JSONObject();
    for (String str : paramBundle.keySet())
      zza(jSONObject, str, paramBundle.get(str)); 
    return jSONObject;
  }
  
  public static int[] zzf(Activity paramActivity) {
    Window window = paramActivity.getWindow();
    if (window != null) {
      View view = window.findViewById(16908290);
      if (view != null)
        return new int[] { view.getWidth(), view.getHeight() }; 
    } 
    return zzrj();
  }
  
  public static Map<String, String> zzg(Uri paramUri) {
    if (paramUri == null)
      return null; 
    HashMap hashMap = new HashMap();
    for (String str : zzbv.zzem().zzh(paramUri))
      hashMap.put(str, paramUri.getQueryParameter(str)); 
    return hashMap;
  }
  
  public static boolean zzl(Context paramContext, String paramString) {
    String str = paramContext.getPackageName();
    return (Wrappers.packageManager(paramContext).checkPermission(paramString, str) == 0);
  }
  
  public static String zzn(Context paramContext, String paramString) {
    try {
      return new String(IOUtils.readInputStreamFully(paramContext.openFileInput(paramString), true), "UTF-8");
    } catch (IOException paramContext) {
      zzakb.zzck("Error reading from internal storage.");
      return "";
    } 
  }
  
  private static String zzrg() {
    StringBuilder stringBuilder = new StringBuilder(256);
    stringBuilder.append("Mozilla/5.0 (Linux; U; Android");
    if (Build.VERSION.RELEASE != null) {
      stringBuilder.append(" ");
      stringBuilder.append(Build.VERSION.RELEASE);
    } 
    stringBuilder.append("; ");
    stringBuilder.append(Locale.getDefault());
    if (Build.DEVICE != null) {
      stringBuilder.append("; ");
      stringBuilder.append(Build.DEVICE);
      if (Build.DISPLAY != null) {
        stringBuilder.append(" Build/");
        stringBuilder.append(Build.DISPLAY);
      } 
    } 
    stringBuilder.append(") AppleWebKit/533 Version/4.0 Safari/533");
    return stringBuilder.toString();
  }
  
  public static String zzrh() { return UUID.randomUUID().toString(); }
  
  public static String zzri() {
    String str1 = Build.MANUFACTURER;
    String str2 = Build.MODEL;
    if (str2.startsWith(str1))
      return str2; 
    StringBuilder stringBuilder = new StringBuilder(String.valueOf(str1).length() + 1 + String.valueOf(str2).length());
    stringBuilder.append(str1);
    stringBuilder.append(" ");
    stringBuilder.append(str2);
    return stringBuilder.toString();
  }
  
  private static int[] zzrj() { return new int[] { 0, 0 }; }
  
  public static Bundle zzrk() {
    Bundle bundle = new Bundle();
    try {
      zzna zzna = zznk.zzavm;
      if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue()) {
        Debug.MemoryInfo memoryInfo = new Debug.MemoryInfo();
        Debug.getMemoryInfo(memoryInfo);
        bundle.putParcelable("debug_memory_info", memoryInfo);
      } 
      zzna = zznk.zzavn;
      if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue()) {
        Runtime runtime = Runtime.getRuntime();
        bundle.putLong("runtime_free_memory", runtime.freeMemory());
        bundle.putLong("runtime_max_memory", runtime.maxMemory());
        bundle.putLong("runtime_total_memory", runtime.totalMemory());
      } 
      bundle.putInt("web_view_count", zzbv.zzeo().zzqg());
      return bundle;
    } catch (Exception exception) {
      zzakb.zzc("Unable to gather memory stats", exception);
      return bundle;
    } 
  }
  
  public static Bitmap zzs(View paramView) {
    paramView.setDrawingCacheEnabled(true);
    Bitmap bitmap = Bitmap.createBitmap(paramView.getDrawingCache());
    paramView.setDrawingCacheEnabled(false);
    return bitmap;
  }
  
  public static Bitmap zzt(View paramView) {
    if (paramView == null)
      return null; 
    Bitmap bitmap2 = zzv(paramView);
    Bitmap bitmap1 = bitmap2;
    if (bitmap2 == null)
      bitmap1 = zzu(paramView); 
    return bitmap1;
  }
  
  private static Bitmap zzu(@NonNull View paramView) {
    try {
      int i = paramView.getWidth();
      int j = paramView.getHeight();
      if (i == 0 || j == 0) {
        zzakb.zzdk("Width or height of view is zero");
        return null;
      } 
      Bitmap bitmap = Bitmap.createBitmap(paramView.getWidth(), paramView.getHeight(), Bitmap.Config.RGB_565);
      Canvas canvas = new Canvas(bitmap);
      paramView.layout(0, 0, i, j);
      paramView.draw(canvas);
      return bitmap;
    } catch (RuntimeException paramView) {
      zzakb.zzb("Fail to capture the webview", paramView);
      return null;
    } 
  }
  
  private static Bitmap zzv(@NonNull View paramView) {
    Object object = null;
    Bitmap bitmap1 = null;
    Bitmap bitmap2 = object;
    try {
      boolean bool = paramView.isDrawingCacheEnabled();
      bitmap2 = object;
      paramView.setDrawingCacheEnabled(true);
      bitmap2 = object;
      Bitmap bitmap = paramView.getDrawingCache();
      if (bitmap != null) {
        bitmap2 = object;
        bitmap1 = Bitmap.createBitmap(bitmap);
      } 
      bitmap2 = bitmap1;
      paramView.setDrawingCacheEnabled(bool);
      return bitmap1;
    } catch (RuntimeException paramView) {
      zzakb.zzb("Fail to capture the web view", paramView);
      return bitmap2;
    } 
  }
  
  public static boolean zzw(View paramView) { // Byte code:
    //   0: aload_0
    //   1: invokevirtual getRootView : ()Landroid/view/View;
    //   4: astore_0
    //   5: aconst_null
    //   6: astore_1
    //   7: aload_0
    //   8: ifnull -> 31
    //   11: aload_0
    //   12: invokevirtual getContext : ()Landroid/content/Context;
    //   15: astore_0
    //   16: aload_0
    //   17: instanceof android/app/Activity
    //   20: ifeq -> 31
    //   23: aload_0
    //   24: checkcast android/app/Activity
    //   27: astore_0
    //   28: goto -> 33
    //   31: aconst_null
    //   32: astore_0
    //   33: aload_0
    //   34: ifnonnull -> 39
    //   37: iconst_0
    //   38: ireturn
    //   39: aload_0
    //   40: invokevirtual getWindow : ()Landroid/view/Window;
    //   43: astore_0
    //   44: aload_0
    //   45: ifnonnull -> 53
    //   48: aload_1
    //   49: astore_0
    //   50: goto -> 58
    //   53: aload_0
    //   54: invokevirtual getAttributes : ()Landroid/view/WindowManager$LayoutParams;
    //   57: astore_0
    //   58: aload_0
    //   59: ifnull -> 75
    //   62: aload_0
    //   63: getfield flags : I
    //   66: ldc_w 524288
    //   69: iand
    //   70: ifeq -> 75
    //   73: iconst_1
    //   74: ireturn
    //   75: iconst_0
    //   76: ireturn }
  
  public static int zzx(@Nullable View paramView) {
    if (paramView == null)
      return -1; 
    ViewParent viewParent;
    for (viewParent = paramView.getParent(); viewParent != null && !(viewParent instanceof AdapterView); viewParent = viewParent.getParent());
    return (viewParent == null) ? -1 : ((AdapterView)viewParent).getPositionForView(paramView);
  }
  
  public final JSONObject zza(@Nullable Bundle paramBundle, JSONObject paramJSONObject) {
    if (paramBundle != null)
      try {
        return zzf(paramBundle);
      } catch (JSONException paramBundle) {
        zzakb.zzb("Error converting Bundle to JSON", paramBundle);
      }  
    return null;
  }
  
  public final void zza(Context paramContext, String paramString, WebSettings paramWebSettings) { paramWebSettings.setUserAgentString(zzm(paramContext, paramString)); }
  
  public final void zza(Context paramContext, @Nullable String paramString1, String paramString2, Bundle paramBundle, boolean paramBoolean) {
    if (paramBoolean) {
      paramBundle.putString("device", zzbv.zzek().zzri());
      paramBundle.putString("eids", TextUtils.join(",", zznk.zzjb()));
    } 
    zzkb.zzif().zza(paramContext, paramString1, paramString2, paramBundle, paramBoolean, new zzakn(this, paramContext, paramString1));
  }
  
  public final void zza(Context paramContext, String paramString, boolean paramBoolean, HttpURLConnection paramHttpURLConnection) {
    paramHttpURLConnection.setConnectTimeout(60000);
    paramHttpURLConnection.setInstanceFollowRedirects(false);
    paramHttpURLConnection.setReadTimeout(60000);
    paramHttpURLConnection.setRequestProperty("User-Agent", zzm(paramContext, paramString));
    paramHttpURLConnection.setUseCaches(false);
  }
  
  public final void zza(Context paramContext, List<String> paramList) {
    if (!(paramContext instanceof Activity))
      return; 
    Activity activity = (Activity)paramContext;
    if (TextUtils.isEmpty(zzbfw.zzbn(activity)))
      return; 
    if (paramList == null) {
      zzakb.v("Cannot ping urls: empty list.");
      return;
    } 
    if (!zzoh.zzh(paramContext)) {
      zzakb.v("Cannot ping url because custom tabs is not supported");
      return;
    } 
    zzoh zzoh = new zzoh();
    zzoh.zza(new zzakl(this, paramList, zzoh, paramContext));
    zzoh.zzd(activity);
  }
  
  public final boolean zza(View paramView, Context paramContext) {
    Context context = paramContext.getApplicationContext();
    if (context != null) {
      PowerManager powerManager = (PowerManager)context.getSystemService("power");
    } else {
      context = null;
    } 
    return zza(paramView, context, zzat(paramContext));
  }
  
  public final boolean zza(View paramView, PowerManager paramPowerManager, KeyguardManager paramKeyguardManager) { // Byte code:
    //   0: invokestatic zzek : ()Lcom/google/android/gms/internal/ads/zzakk;
    //   3: getfield zzcrn : Z
    //   6: ifne -> 66
    //   9: aload_3
    //   10: ifnonnull -> 19
    //   13: iconst_0
    //   14: istore #6
    //   16: goto -> 25
    //   19: aload_3
    //   20: invokevirtual inKeyguardRestrictedInputMode : ()Z
    //   23: istore #6
    //   25: iload #6
    //   27: ifeq -> 66
    //   30: getstatic com/google/android/gms/internal/ads/zznk.zzazu : Lcom/google/android/gms/internal/ads/zzna;
    //   33: astore_3
    //   34: invokestatic zzik : ()Lcom/google/android/gms/internal/ads/zzni;
    //   37: aload_3
    //   38: invokevirtual zzd : (Lcom/google/android/gms/internal/ads/zzna;)Ljava/lang/Object;
    //   41: checkcast java/lang/Boolean
    //   44: invokevirtual booleanValue : ()Z
    //   47: ifeq -> 60
    //   50: aload_1
    //   51: invokestatic zzw : (Landroid/view/View;)Z
    //   54: ifeq -> 60
    //   57: goto -> 66
    //   60: iconst_0
    //   61: istore #4
    //   63: goto -> 69
    //   66: iconst_1
    //   67: istore #4
    //   69: aload_1
    //   70: invokevirtual getVisibility : ()I
    //   73: ifne -> 166
    //   76: aload_1
    //   77: invokevirtual isShown : ()Z
    //   80: ifeq -> 166
    //   83: aload_2
    //   84: ifnull -> 103
    //   87: aload_2
    //   88: invokevirtual isScreenOn : ()Z
    //   91: ifeq -> 97
    //   94: goto -> 103
    //   97: iconst_0
    //   98: istore #5
    //   100: goto -> 106
    //   103: iconst_1
    //   104: istore #5
    //   106: iload #5
    //   108: ifeq -> 166
    //   111: iload #4
    //   113: ifeq -> 166
    //   116: getstatic com/google/android/gms/internal/ads/zznk.zzazs : Lcom/google/android/gms/internal/ads/zzna;
    //   119: astore_2
    //   120: invokestatic zzik : ()Lcom/google/android/gms/internal/ads/zzni;
    //   123: aload_2
    //   124: invokevirtual zzd : (Lcom/google/android/gms/internal/ads/zzna;)Ljava/lang/Object;
    //   127: checkcast java/lang/Boolean
    //   130: invokevirtual booleanValue : ()Z
    //   133: ifeq -> 164
    //   136: aload_1
    //   137: new android/graphics/Rect
    //   140: dup
    //   141: invokespecial <init> : ()V
    //   144: invokevirtual getLocalVisibleRect : (Landroid/graphics/Rect;)Z
    //   147: ifne -> 164
    //   150: aload_1
    //   151: new android/graphics/Rect
    //   154: dup
    //   155: invokespecial <init> : ()V
    //   158: invokevirtual getGlobalVisibleRect : (Landroid/graphics/Rect;)Z
    //   161: ifeq -> 166
    //   164: iconst_1
    //   165: ireturn
    //   166: iconst_0
    //   167: ireturn }
  
  public final boolean zzak(Context paramContext) {
    if (this.zzcro)
      return false; 
    IntentFilter intentFilter = new IntentFilter();
    intentFilter.addAction("android.intent.action.USER_PRESENT");
    intentFilter.addAction("android.intent.action.SCREEN_OFF");
    paramContext.getApplicationContext().registerReceiver(new zzakp(this, null), intentFilter);
    this.zzcro = true;
    return true;
  }
  
  public final boolean zzal(Context paramContext) {
    if (this.zzcrp)
      return false; 
    IntentFilter intentFilter = new IntentFilter();
    intentFilter.addAction("com.google.android.ads.intent.DEBUG_LOGGING_ENABLEMENT_CHANGED");
    paramContext.getApplicationContext().registerReceiver(new zzako(this, null), intentFilter);
    this.zzcrp = true;
    return true;
  }
  
  public final void zzb(Context paramContext, String paramString1, String paramString2, Bundle paramBundle, boolean paramBoolean) {
    zzna zzna = zznk.zzazx;
    if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue())
      zza(paramContext, paramString1, paramString2, paramBundle, paramBoolean); 
  }
  
  public final boolean zzcx(String paramString) { // Byte code:
    //   0: aload_1
    //   1: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   4: ifeq -> 9
    //   7: iconst_0
    //   8: ireturn
    //   9: aload_0
    //   10: monitorenter
    //   11: aload_0
    //   12: getfield zzcrq : Ljava/util/regex/Pattern;
    //   15: ifnull -> 45
    //   18: getstatic com/google/android/gms/internal/ads/zznk.zzaxo : Lcom/google/android/gms/internal/ads/zzna;
    //   21: astore_3
    //   22: invokestatic zzik : ()Lcom/google/android/gms/internal/ads/zzni;
    //   25: aload_3
    //   26: invokevirtual zzd : (Lcom/google/android/gms/internal/ads/zzna;)Ljava/lang/Object;
    //   29: checkcast java/lang/String
    //   32: aload_0
    //   33: getfield zzcrq : Ljava/util/regex/Pattern;
    //   36: invokevirtual pattern : ()Ljava/lang/String;
    //   39: invokevirtual equals : (Ljava/lang/Object;)Z
    //   42: ifne -> 66
    //   45: getstatic com/google/android/gms/internal/ads/zznk.zzaxo : Lcom/google/android/gms/internal/ads/zzna;
    //   48: astore_3
    //   49: aload_0
    //   50: invokestatic zzik : ()Lcom/google/android/gms/internal/ads/zzni;
    //   53: aload_3
    //   54: invokevirtual zzd : (Lcom/google/android/gms/internal/ads/zzna;)Ljava/lang/Object;
    //   57: checkcast java/lang/String
    //   60: invokestatic compile : (Ljava/lang/String;)Ljava/util/regex/Pattern;
    //   63: putfield zzcrq : Ljava/util/regex/Pattern;
    //   66: aload_0
    //   67: getfield zzcrq : Ljava/util/regex/Pattern;
    //   70: aload_1
    //   71: invokevirtual matcher : (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
    //   74: invokevirtual matches : ()Z
    //   77: istore_2
    //   78: aload_0
    //   79: monitorexit
    //   80: iload_2
    //   81: ireturn
    //   82: astore_1
    //   83: aload_0
    //   84: monitorexit
    //   85: aload_1
    //   86: athrow
    //   87: astore_1
    //   88: iconst_0
    //   89: ireturn
    // Exception table:
    //   from	to	target	type
    //   9	11	87	java/util/regex/PatternSyntaxException
    //   11	45	82	finally
    //   45	66	82	finally
    //   66	80	82	finally
    //   83	85	82	finally
    //   85	87	87	java/util/regex/PatternSyntaxException }
  
  public final boolean zzcy(String paramString) { // Byte code:
    //   0: aload_1
    //   1: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   4: ifeq -> 9
    //   7: iconst_0
    //   8: ireturn
    //   9: aload_0
    //   10: monitorenter
    //   11: aload_0
    //   12: getfield zzcrr : Ljava/util/regex/Pattern;
    //   15: ifnull -> 45
    //   18: getstatic com/google/android/gms/internal/ads/zznk.zzaxp : Lcom/google/android/gms/internal/ads/zzna;
    //   21: astore_3
    //   22: invokestatic zzik : ()Lcom/google/android/gms/internal/ads/zzni;
    //   25: aload_3
    //   26: invokevirtual zzd : (Lcom/google/android/gms/internal/ads/zzna;)Ljava/lang/Object;
    //   29: checkcast java/lang/String
    //   32: aload_0
    //   33: getfield zzcrr : Ljava/util/regex/Pattern;
    //   36: invokevirtual pattern : ()Ljava/lang/String;
    //   39: invokevirtual equals : (Ljava/lang/Object;)Z
    //   42: ifne -> 66
    //   45: getstatic com/google/android/gms/internal/ads/zznk.zzaxp : Lcom/google/android/gms/internal/ads/zzna;
    //   48: astore_3
    //   49: aload_0
    //   50: invokestatic zzik : ()Lcom/google/android/gms/internal/ads/zzni;
    //   53: aload_3
    //   54: invokevirtual zzd : (Lcom/google/android/gms/internal/ads/zzna;)Ljava/lang/Object;
    //   57: checkcast java/lang/String
    //   60: invokestatic compile : (Ljava/lang/String;)Ljava/util/regex/Pattern;
    //   63: putfield zzcrr : Ljava/util/regex/Pattern;
    //   66: aload_0
    //   67: getfield zzcrr : Ljava/util/regex/Pattern;
    //   70: aload_1
    //   71: invokevirtual matcher : (Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
    //   74: invokevirtual matches : ()Z
    //   77: istore_2
    //   78: aload_0
    //   79: monitorexit
    //   80: iload_2
    //   81: ireturn
    //   82: astore_1
    //   83: aload_0
    //   84: monitorexit
    //   85: aload_1
    //   86: athrow
    //   87: astore_1
    //   88: iconst_0
    //   89: ireturn
    // Exception table:
    //   from	to	target	type
    //   9	11	87	java/util/regex/PatternSyntaxException
    //   11	45	82	finally
    //   45	66	82	finally
    //   66	80	82	finally
    //   83	85	82	finally
    //   85	87	87	java/util/regex/PatternSyntaxException }
  
  public final int[] zzg(Activity paramActivity) {
    int[] arrayOfInt = zzf(paramActivity);
    int i = zzkb.zzif().zzb(paramActivity, arrayOfInt[0]);
    zzkb.zzif();
    return new int[] { i, zzamu.zzb(paramActivity, arrayOfInt[1]) };
  }
  
  public final int[] zzh(Activity paramActivity) {
    Window window = paramActivity.getWindow();
    if (window != null) {
      View view = window.findViewById(16908290);
      if (view != null) {
        int[] arrayOfInt1 = new int[2];
        arrayOfInt1[0] = view.getTop();
        arrayOfInt1[1] = view.getBottom();
        int j = zzkb.zzif().zzb(paramActivity, arrayOfInt1[0]);
        zzkb.zzif();
        return new int[] { j, zzamu.zzb(paramActivity, arrayOfInt1[1]) };
      } 
    } 
    int[] arrayOfInt = zzrj();
    int i = zzkb.zzif().zzb(paramActivity, arrayOfInt[0]);
    zzkb.zzif();
    return new int[] { i, zzamu.zzb(paramActivity, arrayOfInt[1]) };
  }
  
  public final String zzm(Context paramContext, String paramString) { // Byte code:
    //   0: aload_0
    //   1: getfield mLock : Ljava/lang/Object;
    //   4: astore #4
    //   6: aload #4
    //   8: monitorenter
    //   9: aload_0
    //   10: getfield zzcpq : Ljava/lang/String;
    //   13: ifnull -> 26
    //   16: aload_0
    //   17: getfield zzcpq : Ljava/lang/String;
    //   20: astore_1
    //   21: aload #4
    //   23: monitorexit
    //   24: aload_1
    //   25: areturn
    //   26: aload_2
    //   27: ifnonnull -> 39
    //   30: invokestatic zzrg : ()Ljava/lang/String;
    //   33: astore_1
    //   34: aload #4
    //   36: monitorexit
    //   37: aload_1
    //   38: areturn
    //   39: aload_0
    //   40: invokestatic zzem : ()Lcom/google/android/gms/internal/ads/zzakq;
    //   43: aload_1
    //   44: invokevirtual getDefaultUserAgent : (Landroid/content/Context;)Ljava/lang/String;
    //   47: putfield zzcpq : Ljava/lang/String;
    //   50: aload_0
    //   51: getfield zzcpq : Ljava/lang/String;
    //   54: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   57: ifeq -> 169
    //   60: invokestatic zzif : ()Lcom/google/android/gms/internal/ads/zzamu;
    //   63: pop
    //   64: invokestatic zzsh : ()Z
    //   67: ifne -> 161
    //   70: aload_0
    //   71: aconst_null
    //   72: putfield zzcpq : Ljava/lang/String;
    //   75: getstatic com/google/android/gms/internal/ads/zzakk.zzcrm : Landroid/os/Handler;
    //   78: new com/google/android/gms/internal/ads/zzakm
    //   81: dup
    //   82: aload_0
    //   83: aload_1
    //   84: invokespecial <init> : (Lcom/google/android/gms/internal/ads/zzakk;Landroid/content/Context;)V
    //   87: invokevirtual post : (Ljava/lang/Runnable;)Z
    //   90: pop
    //   91: aload_0
    //   92: getfield zzcpq : Ljava/lang/String;
    //   95: astore_3
    //   96: aload_3
    //   97: ifnonnull -> 169
    //   100: aload_0
    //   101: getfield mLock : Ljava/lang/Object;
    //   104: invokevirtual wait : ()V
    //   107: goto -> 91
    //   110: aload_0
    //   111: invokestatic zzrg : ()Ljava/lang/String;
    //   114: putfield zzcpq : Ljava/lang/String;
    //   117: aload_0
    //   118: getfield zzcpq : Ljava/lang/String;
    //   121: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   124: astore_3
    //   125: aload_3
    //   126: invokevirtual length : ()I
    //   129: ifeq -> 143
    //   132: ldc_w 'Interrupted, use default user agent: '
    //   135: aload_3
    //   136: invokevirtual concat : (Ljava/lang/String;)Ljava/lang/String;
    //   139: astore_3
    //   140: goto -> 154
    //   143: new java/lang/String
    //   146: dup
    //   147: ldc_w 'Interrupted, use default user agent: '
    //   150: invokespecial <init> : (Ljava/lang/String;)V
    //   153: astore_3
    //   154: aload_3
    //   155: invokestatic zzdk : (Ljava/lang/String;)V
    //   158: goto -> 91
    //   161: aload_0
    //   162: aload_1
    //   163: invokestatic zzam : (Landroid/content/Context;)Ljava/lang/String;
    //   166: putfield zzcpq : Ljava/lang/String;
    //   169: aload_0
    //   170: getfield zzcpq : Ljava/lang/String;
    //   173: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   176: astore_3
    //   177: new java/lang/StringBuilder
    //   180: dup
    //   181: aload_3
    //   182: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   185: invokevirtual length : ()I
    //   188: bipush #10
    //   190: iadd
    //   191: aload_2
    //   192: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   195: invokevirtual length : ()I
    //   198: iadd
    //   199: invokespecial <init> : (I)V
    //   202: astore #5
    //   204: aload #5
    //   206: aload_3
    //   207: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   210: pop
    //   211: aload #5
    //   213: ldc_w ' (Mobile; '
    //   216: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   219: pop
    //   220: aload #5
    //   222: aload_2
    //   223: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   226: pop
    //   227: aload_0
    //   228: aload #5
    //   230: invokevirtual toString : ()Ljava/lang/String;
    //   233: putfield zzcpq : Ljava/lang/String;
    //   236: aload_1
    //   237: invokestatic packageManager : (Landroid/content/Context;)Lcom/google/android/gms/common/wrappers/PackageManagerWrapper;
    //   240: invokevirtual isCallerInstantApp : ()Z
    //   243: ifeq -> 277
    //   246: aload_0
    //   247: aload_0
    //   248: getfield zzcpq : Ljava/lang/String;
    //   251: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   254: ldc_w ';aia'
    //   257: invokevirtual concat : (Ljava/lang/String;)Ljava/lang/String;
    //   260: putfield zzcpq : Ljava/lang/String;
    //   263: goto -> 277
    //   266: astore_1
    //   267: invokestatic zzeo : ()Lcom/google/android/gms/internal/ads/zzajm;
    //   270: aload_1
    //   271: ldc_w 'AdUtil.getUserAgent'
    //   274: invokevirtual zza : (Ljava/lang/Throwable;Ljava/lang/String;)V
    //   277: aload_0
    //   278: aload_0
    //   279: getfield zzcpq : Ljava/lang/String;
    //   282: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   285: ldc_w ')'
    //   288: invokevirtual concat : (Ljava/lang/String;)Ljava/lang/String;
    //   291: putfield zzcpq : Ljava/lang/String;
    //   294: aload_0
    //   295: getfield zzcpq : Ljava/lang/String;
    //   298: astore_1
    //   299: aload #4
    //   301: monitorexit
    //   302: aload_1
    //   303: areturn
    //   304: astore_1
    //   305: aload #4
    //   307: monitorexit
    //   308: goto -> 313
    //   311: aload_1
    //   312: athrow
    //   313: goto -> 311
    //   316: astore_3
    //   317: goto -> 50
    //   320: astore_3
    //   321: goto -> 110
    // Exception table:
    //   from	to	target	type
    //   9	24	304	finally
    //   30	37	304	finally
    //   39	50	316	java/lang/Exception
    //   39	50	304	finally
    //   50	91	304	finally
    //   91	96	304	finally
    //   100	107	320	java/lang/InterruptedException
    //   100	107	304	finally
    //   110	140	304	finally
    //   143	154	304	finally
    //   154	158	304	finally
    //   161	169	304	finally
    //   169	236	304	finally
    //   236	263	266	java/lang/Exception
    //   236	263	304	finally
    //   267	277	304	finally
    //   277	302	304	finally
    //   305	308	304	finally }
  
  public final JSONObject zzn(Map<String, ?> paramMap) throws JSONException {
    try {
      JSONObject jSONObject = new JSONObject();
      for (String str : paramMap.keySet())
        zza(jSONObject, str, paramMap.get(str)); 
      return jSONObject;
    } catch (ClassCastException paramMap) {
      String str = String.valueOf(paramMap.getMessage());
      if (str.length() != 0) {
        str = "Could not convert map to JSON: ".concat(str);
      } else {
        str = new String("Could not convert map to JSON: ");
      } 
      JSONException jSONException = new JSONException(str);
      throw jSONException;
    } 
  }
}
