package com.bumptech.glide.load.model;

import android.content.Context;
import android.content.res.Resources;
import android.net.Uri;
import android.util.Log;
import com.bumptech.glide.load.data.DataFetcher;

public class ResourceLoader<T> extends Object implements ModelLoader<Integer, T> {
  private static final String TAG = "ResourceLoader";
  
  private final Resources resources;
  
  private final ModelLoader<Uri, T> uriLoader;
  
  public ResourceLoader(Context paramContext, ModelLoader<Uri, T> paramModelLoader) { this(paramContext.getResources(), paramModelLoader); }
  
  public ResourceLoader(Resources paramResources, ModelLoader<Uri, T> paramModelLoader) {
    this.resources = paramResources;
    this.uriLoader = paramModelLoader;
  }
  
  public DataFetcher<T> getResourceFetcher(Integer paramInteger, int paramInt1, int paramInt2) {
    Uri uri;
    try {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("android.resource://");
      stringBuilder.append(this.resources.getResourcePackageName(paramInteger.intValue()));
      stringBuilder.append('/');
      stringBuilder.append(this.resources.getResourceTypeName(paramInteger.intValue()));
      stringBuilder.append('/');
      stringBuilder.append(this.resources.getResourceEntryName(paramInteger.intValue()));
      Uri uri1 = Uri.parse(stringBuilder.toString());
      uri = uri1;
    } catch (android.content.res.Resources.NotFoundException notFoundException) {
      if (Log.isLoggable("ResourceLoader", 5)) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Received invalid resource id: ");
        stringBuilder.append(uri);
        Log.w("ResourceLoader", stringBuilder.toString(), notFoundException);
      } 
      uri = null;
    } 
    return (uri != null) ? this.uriLoader.getResourceFetcher(uri, paramInt1, paramInt2) : null;
  }
}
