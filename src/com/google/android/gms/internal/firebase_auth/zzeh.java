package com.google.android.gms.internal.firebase_auth;

import java.io.IOException;
import java.io.Serializable;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;

public abstract class zzeh extends Object implements Serializable, Iterable<Byte> {
  public static final zzeh zzso;
  
  private static final zzen zzsp;
  
  private static final Comparator<zzeh> zzsr;
  
  private int zzsq = 0;
  
  static  {
    zzel zzel;
    zzso = new zzer(zzfv.EMPTY_BYTE_ARRAY);
    if (zzee.zzex()) {
      zzel = new zzes(null);
    } else {
      zzel = new zzel(null);
    } 
    zzsp = zzel;
    zzsr = new zzej();
  }
  
  private static int zza(byte paramByte) { return paramByte & 0xFF; }
  
  private static zzeh zza(Iterator<zzeh> paramIterator, int paramInt) {
    if (paramInt > 0) {
      if (paramInt == 1)
        return (zzeh)paramIterator.next(); 
      int i = paramInt >>> 1;
      zzeh zzeh2;
      zzeh zzeh1 = (zzeh2 = zza(paramIterator, i)).zza(paramIterator, paramInt - i);
      if (Integer.MAX_VALUE - zzeh2.size() >= zzeh1.size())
        return zzhs.zza(zzeh2, zzeh1); 
      paramInt = zzeh2.size();
      i = zzeh1.size();
      StringBuilder stringBuilder = new StringBuilder(53);
      stringBuilder.append("ByteString would be too long: ");
      stringBuilder.append(paramInt);
      stringBuilder.append("+");
      stringBuilder.append(i);
      throw new IllegalArgumentException(stringBuilder.toString());
    } 
    throw new IllegalArgumentException(String.format("length (%s) must be >= 1", new Object[] { Integer.valueOf(paramInt) }));
  }
  
  static zzeh zza(byte[] paramArrayOfByte) { return new zzer(paramArrayOfByte); }
  
  public static zzeh zzb(byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    zzd(paramInt1, paramInt1 + paramInt2, paramArrayOfByte.length);
    return new zzer(zzsp.zzc(paramArrayOfByte, paramInt1, paramInt2));
  }
  
  public static zzeh zzcz(String paramString) { return new zzer(paramString.getBytes(zzfv.UTF_8)); }
  
  static int zzd(int paramInt1, int paramInt2, int paramInt3) {
    int i = paramInt2 - paramInt1;
    if ((paramInt1 | paramInt2 | i | paramInt3 - paramInt2) < 0) {
      if (paramInt1 >= 0) {
        if (paramInt2 < paramInt1) {
          StringBuilder stringBuilder2 = new StringBuilder(66);
          stringBuilder2.append("Beginning index larger than ending index: ");
          stringBuilder2.append(paramInt1);
          stringBuilder2.append(", ");
          stringBuilder2.append(paramInt2);
          throw new IndexOutOfBoundsException(stringBuilder2.toString());
        } 
        StringBuilder stringBuilder1 = new StringBuilder(37);
        stringBuilder1.append("End index: ");
        stringBuilder1.append(paramInt2);
        stringBuilder1.append(" >= ");
        stringBuilder1.append(paramInt3);
        throw new IndexOutOfBoundsException(stringBuilder1.toString());
      } 
      StringBuilder stringBuilder = new StringBuilder(32);
      stringBuilder.append("Beginning index: ");
      stringBuilder.append(paramInt1);
      stringBuilder.append(" < 0");
      throw new IndexOutOfBoundsException(stringBuilder.toString());
    } 
    return i;
  }
  
  public static zzeh zze(Iterable<zzeh> paramIterable) {
    int i = ((Collection)paramIterable).size();
    return (i == 0) ? zzso : zza(paramIterable.iterator(), i);
  }
  
  static void zze(int paramInt1, int paramInt2) {
    if ((paramInt2 - paramInt1 + 1 | paramInt1) < 0) {
      if (paramInt1 < 0) {
        StringBuilder stringBuilder1 = new StringBuilder(22);
        stringBuilder1.append("Index < 0: ");
        stringBuilder1.append(paramInt1);
        throw new ArrayIndexOutOfBoundsException(stringBuilder1.toString());
      } 
      StringBuilder stringBuilder = new StringBuilder(40);
      stringBuilder.append("Index > length: ");
      stringBuilder.append(paramInt1);
      stringBuilder.append(", ");
      stringBuilder.append(paramInt2);
      throw new ArrayIndexOutOfBoundsException(stringBuilder.toString());
    } 
  }
  
  static zzep zzm(int paramInt) { return new zzep(paramInt, null); }
  
  public abstract boolean equals(Object paramObject);
  
  public final int hashCode() {
    int j = this.zzsq;
    int i = j;
    if (j == 0) {
      i = size();
      j = zzc(i, 0, i);
      i = j;
      if (j == 0)
        i = 1; 
      this.zzsq = i;
    } 
    return i;
  }
  
  public abstract int size();
  
  public final String toString() { return String.format("<ByteString@%s size=%d>", new Object[] { Integer.toHexString(System.identityHashCode(this)), Integer.valueOf(size()) }); }
  
  protected abstract String zza(Charset paramCharset);
  
  abstract void zza(zzeg paramzzeg) throws IOException;
  
  @Deprecated
  public final void zza(byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3) {
    zzd(0, paramInt3 + 0, size());
    zzd(paramInt2, paramInt2 + paramInt3, paramArrayOfByte.length);
    if (paramInt3 > 0)
      zzb(paramArrayOfByte, 0, paramInt2, paramInt3); 
  }
  
  protected abstract int zzb(int paramInt1, int paramInt2, int paramInt3);
  
  protected abstract void zzb(byte[] paramArrayOfByte, int paramInt1, int paramInt2, int paramInt3);
  
  protected abstract int zzc(int paramInt1, int paramInt2, int paramInt3);
  
  public abstract zzeh zzd(int paramInt1, int paramInt2);
  
  public zzeo zzez() { return new zzei(this); }
  
  public final String zzfa() {
    Charset charset = zzfv.UTF_8;
    return (size() == 0) ? "" : zza(charset);
  }
  
  public abstract boolean zzfb();
  
  protected abstract int zzfc();
  
  protected abstract boolean zzfd();
  
  protected final int zzfe() { return this.zzsq; }
  
  public abstract byte zzk(int paramInt);
  
  abstract byte zzl(int paramInt);
}
