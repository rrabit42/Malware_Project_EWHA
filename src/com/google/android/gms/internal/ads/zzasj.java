package com.google.android.gms.internal.ads;

import android.content.Context;
import android.net.Uri;
import android.support.annotation.Nullable;
import android.support.v4.view.ViewCompat;
import android.view.View;
import android.view.ViewTreeObserver;
import android.webkit.WebResourceResponse;
import android.webkit.WebView;
import com.google.android.gms.ads.internal.gmsg.zza;
import com.google.android.gms.ads.internal.gmsg.zzab;
import com.google.android.gms.ads.internal.gmsg.zzac;
import com.google.android.gms.ads.internal.gmsg.zzad;
import com.google.android.gms.ads.internal.gmsg.zzb;
import com.google.android.gms.ads.internal.gmsg.zzc;
import com.google.android.gms.ads.internal.gmsg.zzd;
import com.google.android.gms.ads.internal.gmsg.zzf;
import com.google.android.gms.ads.internal.gmsg.zzy;
import com.google.android.gms.ads.internal.gmsg.zzz;
import com.google.android.gms.ads.internal.overlay.AdOverlayInfoParcel;
import com.google.android.gms.ads.internal.overlay.zzc;
import com.google.android.gms.ads.internal.overlay.zzd;
import com.google.android.gms.ads.internal.overlay.zzl;
import com.google.android.gms.ads.internal.overlay.zzn;
import com.google.android.gms.ads.internal.overlay.zzt;
import com.google.android.gms.ads.internal.zzbv;
import com.google.android.gms.ads.internal.zzx;
import com.google.android.gms.common.util.VisibleForTesting;
import java.io.File;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.Map;
import javax.annotation.ParametersAreNonnullByDefault;

@zzadh
@ParametersAreNonnullByDefault
@VisibleForTesting
public final class zzasj extends zzus<zzaqw> implements zzasc, zzasx, zzasz, zzata, zzatb {
  private final Object mLock = new Object();
  
  private boolean zzaek;
  
  private zzjd zzapt;
  
  private zzb zzbll;
  
  private zzd zzblm;
  
  private zzz zzbmu;
  
  private zzx zzbmw;
  
  private zzaab zzbmx;
  
  private zzaam zzbmy;
  
  private zzt zzbnb;
  
  private zzn zzbnc;
  
  private zzaqw zzbnd;
  
  private zzasd zzdbr;
  
  private zzase zzdbs;
  
  private zzasf zzdbt;
  
  private boolean zzdbu = false;
  
  private boolean zzdbv;
  
  private ViewTreeObserver.OnGlobalLayoutListener zzdbw;
  
  private ViewTreeObserver.OnScrollChangedListener zzdbx;
  
  private boolean zzdby;
  
  private final zzaak zzdbz;
  
  private zzasg zzdca;
  
  private boolean zzdcb;
  
  private boolean zzdcc;
  
  private int zzdcd;
  
  private View.OnAttachStateChangeListener zzdce;
  
  @Nullable
  private zzait zzxd;
  
  public zzasj(zzaqw paramzzaqw, boolean paramBoolean) { this(paramzzaqw, paramBoolean, new zzaak(paramzzaqw, paramzzaqw.zzua(), new zzmw(paramzzaqw.getContext())), null); }
  
  @VisibleForTesting
  private zzasj(zzaqw paramzzaqw, boolean paramBoolean, zzaak paramzzaak, zzaab paramzzaab) {
    this.zzbnd = paramzzaqw;
    this.zzaek = paramBoolean;
    this.zzdbz = paramzzaak;
    this.zzbmx = null;
  }
  
  private final void zza(View paramView, zzait paramzzait, int paramInt) {
    if (paramzzait.zzph() && paramInt > 0) {
      paramzzait.zzr(paramView);
      if (paramzzait.zzph())
        zzakk.zzcrm.postDelayed(new zzasl(this, paramView, paramzzait, paramInt), 100L); 
    } 
  }
  
  private final void zza(AdOverlayInfoParcel paramAdOverlayInfoParcel) {
    boolean bool;
    zzaab zzaab1 = this.zzbmx;
    boolean bool1 = false;
    if (zzaab1 != null) {
      bool = zzaab1.zznf();
    } else {
      bool = false;
    } 
    zzbv.zzei();
    Context context = this.zzbnd.getContext();
    if (!bool)
      bool1 = true; 
    zzl.zza(context, paramAdOverlayInfoParcel, bool1);
    if (this.zzxd != null) {
      String str2 = paramAdOverlayInfoParcel.url;
      String str1 = str2;
      if (str2 == null) {
        str1 = str2;
        if (paramAdOverlayInfoParcel.zzbyl != null)
          str1 = paramAdOverlayInfoParcel.zzbyl.url; 
      } 
      this.zzxd.zzcf(str1);
    } 
  }
  
  private final WebResourceResponse zze(zzasu paramzzasu) throws IOException {
    URL uRL = new URL(paramzzasu.url);
    byte b = 0;
    while (true) {
      if (++b <= 20) {
        URLConnection uRLConnection = uRL.openConnection();
        uRLConnection.setConnectTimeout(10000);
        uRLConnection.setReadTimeout(10000);
        for (Map.Entry entry : paramzzasu.zzab.entrySet())
          uRLConnection.addRequestProperty((String)entry.getKey(), (String)entry.getValue()); 
        if (uRLConnection instanceof HttpURLConnection) {
          HttpURLConnection httpURLConnection = (HttpURLConnection)uRLConnection;
          zzbv.zzek().zza(this.zzbnd.getContext(), (this.zzbnd.zztq()).zzcw, false, httpURLConnection);
          zzamy zzamy = new zzamy();
          zzamy.zza(httpURLConnection, null);
          int i = httpURLConnection.getResponseCode();
          zzamy.zza(httpURLConnection, i);
          if (i >= 300 && i < 400) {
            String str = httpURLConnection.getHeaderField("Location");
            if (str != null) {
              URL uRL2 = new URL(uRL, str);
              String str1 = uRL2.getProtocol();
              if (str1 == null) {
                zzakb.zzdk("Protocol is null");
                return null;
              } 
              if (!str1.equals("http") && !str1.equals("https")) {
                String str2 = String.valueOf(str1);
                if (str2.length() != 0) {
                  str2 = "Unsupported scheme: ".concat(str2);
                } else {
                  str2 = new String("Unsupported scheme: ");
                } 
                zzakb.zzdk(str2);
                return null;
              } 
              str1 = String.valueOf(str);
              if (str1.length() != 0) {
                str1 = "Redirecting to ".concat(str1);
              } else {
                str1 = new String("Redirecting to ");
              } 
              zzakb.zzck(str1);
              httpURLConnection.disconnect();
              URL uRL1 = uRL2;
              continue;
            } 
            throw new IOException("Missing Location header in redirect");
          } 
          return zzbv.zzek().zzb(httpURLConnection);
        } 
        throw new IOException("Invalid protocol.");
      } 
      break;
    } 
    StringBuilder stringBuilder = new StringBuilder(32);
    stringBuilder.append("Too many redirects (20)");
    IOException iOException = new IOException(stringBuilder.toString());
    throw iOException;
  }
  
  private final void zzuy() {
    if (this.zzdce == null)
      return; 
    this.zzbnd.getView().removeOnAttachStateChangeListener(this.zzdce);
  }
  
  private final void zzvd() {
    if (this.zzdbr != null && ((this.zzdcb && this.zzdcd <= 0) || this.zzdcc)) {
      this.zzdbr.zze(this.zzdcc ^ true);
      this.zzdbr = null;
    } 
    this.zzbnd.zzup();
  }
  
  public final void reset() {
    zzait zzait1 = this.zzxd;
    if (zzait1 != null) {
      zzait1.zzpj();
      this.zzxd = null;
    } 
    zzuy();
    super.reset();
    synchronized (this.mLock) {
      this.zzapt = null;
      this.zzbnc = null;
      this.zzdbr = null;
      this.zzdbs = null;
      this.zzbll = null;
      this.zzblm = null;
      this.zzdbu = false;
      this.zzaek = false;
      this.zzdbv = false;
      this.zzdby = false;
      this.zzbnb = null;
      this.zzdbt = null;
      if (this.zzbmx != null) {
        this.zzbmx.zzm(true);
        this.zzbmx = null;
      } 
      return;
    } 
  }
  
  public final void zza(int paramInt1, int paramInt2, boolean paramBoolean) {
    this.zzdbz.zzc(paramInt1, paramInt2);
    zzaab zzaab1 = this.zzbmx;
    if (zzaab1 != null)
      zzaab1.zza(paramInt1, paramInt2, paramBoolean); 
  }
  
  public final void zza(ViewTreeObserver.OnGlobalLayoutListener paramOnGlobalLayoutListener, ViewTreeObserver.OnScrollChangedListener paramOnScrollChangedListener) {
    synchronized (this.mLock) {
      this.zzdbv = true;
      this.zzbnd.zzuo();
      this.zzdbw = paramOnGlobalLayoutListener;
      this.zzdbx = paramOnScrollChangedListener;
      return;
    } 
  }
  
  public final void zza(zzc paramzzc) {
    zzn zzn1;
    zzjd zzjd1;
    boolean bool = this.zzbnd.zzuj();
    if (bool && !this.zzbnd.zzud().zzvs()) {
      zzjd1 = null;
    } else {
      zzjd1 = this.zzapt;
    } 
    if (bool) {
      zzn1 = null;
    } else {
      zzn1 = this.zzbnc;
    } 
    zza(new AdOverlayInfoParcel(paramzzc, zzjd1, zzn1, this.zzbnb, this.zzbnd.zztq()));
  }
  
  public final void zza(zzasd paramzzasd) { this.zzdbr = paramzzasd; }
  
  public final void zza(zzase paramzzase) { this.zzdbs = paramzzase; }
  
  public final void zza(zzasf paramzzasf) { this.zzdbt = paramzzasf; }
  
  public final void zza(zzasg paramzzasg) { this.zzdca = paramzzasg; }
  
  public final void zza(zzjd paramzzjd, zzb paramzzb, zzn paramzzn, zzd paramzzd, zzt paramzzt, boolean paramBoolean, @Nullable zzz paramzzz, zzx paramzzx, zzaam paramzzaam, @Nullable zzait paramzzait) {
    if (paramzzx == null)
      paramzzx = new zzx(this.zzbnd.getContext(), paramzzait, null); 
    this.zzbmx = new zzaab(this.zzbnd, paramzzaam);
    this.zzxd = paramzzait;
    zzna zzna = zznk.zzayf;
    if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue())
      zza("/adMetadata", new zza(paramzzb)); 
    zza("/appEvent", new zzc(paramzzd));
    zza("/backButton", zzf.zzblx);
    zza("/refresh", zzf.zzbly);
    zza("/canOpenURLs", zzf.zzblo);
    zza("/canOpenIntents", zzf.zzblp);
    zza("/click", zzf.zzblq);
    zza("/close", zzf.zzblr);
    zza("/customClose", zzf.zzbls);
    zza("/instrument", zzf.zzbmb);
    zza("/delayPageLoaded", zzf.zzbmd);
    zza("/delayPageClosed", zzf.zzbme);
    zza("/getLocationInfo", zzf.zzbmf);
    zza("/httpTrack", zzf.zzblt);
    zza("/log", zzf.zzblu);
    zza("/mraid", new zzac(paramzzx, this.zzbmx, paramzzaam));
    zza("/mraidLoaded", this.zzdbz);
    zza("/open", new zzad(this.zzbnd.getContext(), this.zzbnd.zztq(), this.zzbnd.zzui(), paramzzt, paramzzjd, paramzzb, paramzzd, paramzzn, paramzzx, this.zzbmx));
    zza("/precache", new zzaql());
    zza("/touch", zzf.zzblw);
    zza("/video", zzf.zzblz);
    zza("/videoMeta", zzf.zzbma);
    if (zzbv.zzfh().zzs(this.zzbnd.getContext()))
      zza("/logScionEvent", new zzab(this.zzbnd.getContext())); 
    if (paramzzz != null)
      zza("/setInterstitialProperties", new zzy(paramzzz)); 
    this.zzapt = paramzzjd;
    this.zzbnc = paramzzn;
    this.zzbll = paramzzb;
    this.zzblm = paramzzd;
    this.zzbnb = paramzzt;
    this.zzbmw = paramzzx;
    this.zzbmy = paramzzaam;
    this.zzbmu = paramzzz;
    this.zzdbu = paramBoolean;
  }
  
  public final void zza(boolean paramBoolean, int paramInt) {
    zzjd zzjd1;
    if (this.zzbnd.zzuj() && !this.zzbnd.zzud().zzvs()) {
      zzjd1 = null;
    } else {
      zzjd1 = this.zzapt;
    } 
    zzn zzn1 = this.zzbnc;
    zzt zzt1 = this.zzbnb;
    zzaqw zzaqw1 = this.zzbnd;
    zza(new AdOverlayInfoParcel(zzjd1, zzn1, zzt1, zzaqw1, paramBoolean, paramInt, zzaqw1.zztq()));
  }
  
  public final void zza(boolean paramBoolean, int paramInt, String paramString) {
    zzasn zzasn;
    zzjd zzjd1;
    boolean bool = this.zzbnd.zzuj();
    if (bool && !this.zzbnd.zzud().zzvs()) {
      zzjd1 = null;
    } else {
      zzjd1 = this.zzapt;
    } 
    if (bool) {
      zzasn = null;
    } else {
      zzasn = new zzasn(this.zzbnd, this.zzbnc);
    } 
    zzb zzb1 = this.zzbll;
    zzd zzd1 = this.zzblm;
    zzt zzt1 = this.zzbnb;
    zzaqw zzaqw1 = this.zzbnd;
    zza(new AdOverlayInfoParcel(zzjd1, zzasn, zzb1, zzd1, zzt1, zzaqw1, paramBoolean, paramInt, paramString, zzaqw1.zztq()));
  }
  
  public final void zza(boolean paramBoolean, int paramInt, String paramString1, String paramString2) {
    zzasn zzasn;
    zzjd zzjd1;
    boolean bool = this.zzbnd.zzuj();
    if (bool && !this.zzbnd.zzud().zzvs()) {
      zzjd1 = null;
    } else {
      zzjd1 = this.zzapt;
    } 
    if (bool) {
      zzasn = null;
    } else {
      zzasn = new zzasn(this.zzbnd, this.zzbnc);
    } 
    zzb zzb1 = this.zzbll;
    zzd zzd1 = this.zzblm;
    zzt zzt1 = this.zzbnb;
    zzaqw zzaqw1 = this.zzbnd;
    zza(new AdOverlayInfoParcel(zzjd1, zzasn, zzb1, zzd1, zzt1, zzaqw1, paramBoolean, paramInt, paramString1, paramString2, zzaqw1.zztq()));
  }
  
  public final boolean zza(zzasu paramzzasu) {
    str2 = String.valueOf(paramzzasu.url);
    if (str2.length() != 0) {
      str2 = "AdWebView shouldOverrideUrlLoading: ".concat(str2);
    } else {
      str2 = new String("AdWebView shouldOverrideUrlLoading: ");
    } 
    zzakb.v(str2);
    Uri uri = paramzzasu.uri;
    if (zzf(uri))
      return true; 
    if (this.zzdbu) {
      boolean bool;
      str2 = uri.getScheme();
      if ("http".equalsIgnoreCase(str2) || "https".equalsIgnoreCase(str2)) {
        bool = true;
      } else {
        bool = false;
      } 
      if (bool) {
        if (this.zzapt != null) {
          zzna zzna = zznk.zzaxf;
          if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue()) {
            this.zzapt.onAdClicked();
            zzait zzait1 = this.zzxd;
            if (zzait1 != null)
              zzait1.zzcf(paramzzasu.url); 
            this.zzapt = null;
          } 
        } 
        return false;
      } 
    } 
    if (!this.zzbnd.getWebView().willNotDraw()) {
      Uri uri1;
      try {
        zzci zzci = this.zzbnd.zzui();
        uri1 = uri;
        if (zzci != null) {
          uri1 = uri;
          if (zzci.zzb(uri))
            uri1 = zzci.zza(uri, this.zzbnd.getContext(), this.zzbnd.getView(), this.zzbnd.zzto()); 
        } 
      } catch (zzcj str2) {
        str2 = (str2 = null).valueOf(paramzzasu.url);
        if (str2.length() != 0) {
          str2 = "Unable to append parameter to URL: ".concat(str2);
        } else {
          str2 = new String("Unable to append parameter to URL: ");
        } 
        zzakb.zzdk(str2);
        uri1 = uri;
      } 
      zzx zzx1 = this.zzbmw;
      if (zzx1 == null || zzx1.zzcy()) {
        zza(new zzc("android.intent.action.VIEW", uri1.toString(), null, null, null, null, null));
        return true;
      } 
      this.zzbmw.zzs(paramzzasu.url);
      return true;
    } 
    String str1 = String.valueOf(paramzzasu.url);
    if (str1.length() != 0) {
      str1 = "AdWebView unable to handle URL: ".concat(str1);
    } else {
      str1 = new String("AdWebView unable to handle URL: ");
    } 
    zzakb.zzdk(str1);
    return true;
  }
  
  public final void zzah(boolean paramBoolean) { this.zzdbu = paramBoolean; }
  
  public final void zzb(int paramInt1, int paramInt2) {
    zzaab zzaab1 = this.zzbmx;
    if (zzaab1 != null)
      zzaab1.zzb(paramInt1, paramInt2); 
  }
  
  public final void zzb(zzasu paramzzasu) { zzf(paramzzasu.uri); }
  
  public final void zzc(zzasu paramzzasu) {
    this.zzdcb = true;
    zzase zzase1 = this.zzdbs;
    if (zzase1 != null) {
      zzase1.zzly();
      this.zzdbs = null;
    } 
    zzvd();
  }
  
  @Nullable
  public final WebResourceResponse zzd(zzasu paramzzasu) throws IOException {
    WebResourceResponse webResourceResponse = this.zzxd;
    if (webResourceResponse != null)
      webResourceResponse.zza(paramzzasu.url, paramzzasu.zzab, 1); 
    if (!"mraid.js".equalsIgnoreCase((new File(paramzzasu.url)).getName())) {
      webResourceResponse = null;
    } else {
      zzna zzna;
      zznk();
      if (this.zzbnd.zzud().zzvs()) {
        zzna = zznk.zzawe;
      } else if (this.zzbnd.zzuj()) {
        zzna = zznk.zzawd;
      } else {
        zzna = zznk.zzawc;
      } 
      String str = (String)zzkb.zzik().zzd(zzna);
      webResourceResponse = zzbv.zzek().zzf(this.zzbnd.getContext(), (this.zzbnd.zztq()).zzcw, str);
    } 
    if (webResourceResponse != null)
      return webResourceResponse; 
    try {
      if (!zzajb.zzb(paramzzasu.url, this.zzbnd.getContext()).equals(paramzzasu.url))
        return zze(paramzzasu); 
      zzhl zzhl = zzhl.zzaa(paramzzasu.url);
      if (zzhl != null) {
        zzhi zzhi = zzbv.zzeq().zza(zzhl);
        if (zzhi != null && zzhi.zzhi())
          return new WebResourceResponse("", "", zzhi.zzhj()); 
      } 
      if (zzamy.isEnabled()) {
        zzna zzna = zznk.zzazn;
        if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue())
          return zze(paramzzasu); 
      } 
      return null;
    } catch (Exception paramzzasu) {
    
    } catch (NoClassDefFoundError paramzzasu) {}
    zzbv.zzeo().zza(paramzzasu, "AdWebViewClient.interceptRequest");
    return null;
  }
  
  public final boolean zzfz() {
    synchronized (this.mLock) {
      return this.zzaek;
    } 
  }
  
  public final void zznk() {
    synchronized (this.mLock) {
      this.zzdbu = false;
      this.zzaek = true;
      zzaoe.zzcvy.execute(new zzask(this));
      return;
    } 
  }
  
  public final zzx zzut() { return this.zzbmw; }
  
  public final boolean zzuu() {
    synchronized (this.mLock) {
      return this.zzdbv;
    } 
  }
  
  public final ViewTreeObserver.OnGlobalLayoutListener zzuv() {
    synchronized (this.mLock) {
      return this.zzdbw;
    } 
  }
  
  public final ViewTreeObserver.OnScrollChangedListener zzuw() {
    synchronized (this.mLock) {
      return this.zzdbx;
    } 
  }
  
  public final boolean zzux() {
    synchronized (this.mLock) {
      return this.zzdby;
    } 
  }
  
  public final void zzuz() {
    zzait zzait1 = this.zzxd;
    if (zzait1 != null) {
      WebView webView = this.zzbnd.getWebView();
      if (ViewCompat.isAttachedToWindow(webView)) {
        zza(webView, zzait1, 10);
        return;
      } 
      zzuy();
      this.zzdce = new zzasm(this, zzait1);
      this.zzbnd.getView().addOnAttachStateChangeListener(this.zzdce);
    } 
  }
  
  public final void zzva() {
    synchronized (this.mLock) {
      this.zzdby = true;
      this.zzdcd++;
      zzvd();
      return;
    } 
  }
  
  public final void zzvb() {
    this.zzdcd--;
    zzvd();
  }
  
  public final void zzvc() {
    this.zzdcc = true;
    zzvd();
  }
  
  public final zzasg zzve() { return this.zzdca; }
  
  public final zzait zzvf() { return this.zzxd; }
}
