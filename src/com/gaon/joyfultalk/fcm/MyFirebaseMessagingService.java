package com.gaon.joyfultalk.fcm;

import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.Build;
import android.support.v4.app.NotificationCompat;
import android.util.Log;
import androidx.work.OneTimeWorkRequest;
import androidx.work.WorkManager;
import com.gaon.joyfultalk.common.Util;
import com.google.firebase.messaging.FirebaseMessagingService;
import com.google.firebase.messaging.RemoteMessage;
import java.net.URL;

public class MyFirebaseMessagingService extends FirebaseMessagingService {
  private static final String TAG = "MyFirebaseMsgService";
  
  private Bitmap bigPicture;
  
  private void handleNow() { Log.d("MyFirebaseMsgService", "Short lived task is done."); }
  
  private void scheduleJob() {
    OneTimeWorkRequest oneTimeWorkRequest = (OneTimeWorkRequest)(new OneTimeWorkRequest.Builder(MyWorker.class)).build();
    WorkManager.getInstance().beginWith(oneTimeWorkRequest).enqueue();
  }
  
  private void sendNotification(RemoteMessage paramRemoteMessage) {
    if (Util.loadSharedPreferences(this, "push").equals("true")) {
      intent = new Intent(this, com.gaon.joyfultalk.activity.IntroActivity.class);
      intent.addFlags(872415232);
      PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, 134217728);
      try {
        this.bigPicture = BitmapFactory.decodeStream((new URL((String)paramRemoteMessage.getData().get("image"))).openConnection().getInputStream());
      } catch (Exception intent) {
        intent.printStackTrace();
      } 
      String str = getString(2131624000);
      Uri uri = RingtoneManager.getDefaultUri(2);
      NotificationCompat.Builder builder = (new NotificationCompat.Builder(this, str)).setSmallIcon(2131230859).setContentTitle((CharSequence)paramRemoteMessage.getData().get("title")).setContentText((CharSequence)paramRemoteMessage.getData().get("msg")).setAutoCancel(true).setSound(uri).setContentIntent(pendingIntent);
      NotificationManager notificationManager = (NotificationManager)getSystemService("notification");
      if (Build.VERSION.SDK_INT >= 26)
        notificationManager.createNotificationChannel(new NotificationChannel(str, "Channel human readable title", 3)); 
      notificationManager.notify(0, builder.build());
    } 
  }
  
  private void sendRegistrationToServer(String paramString) {}
  
  public void onMessageReceived(RemoteMessage paramRemoteMessage) {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("From: ");
    stringBuilder.append(paramRemoteMessage.getFrom());
    Log.d("MyFirebaseMsgService", stringBuilder.toString());
    if (paramRemoteMessage.getData().size() > 0) {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Message data payload: ");
      stringBuilder.append(paramRemoteMessage.getData());
      Log.d("MyFirebaseMsgService", stringBuilder.toString());
      scheduleJob();
      sendNotification(paramRemoteMessage);
    } 
    if (paramRemoteMessage.getNotification() != null) {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Message Notification Body: ");
      stringBuilder.append(paramRemoteMessage.getNotification().getBody());
      Log.d("MyFirebaseMsgService", stringBuilder.toString());
    } 
  }
  
  public void onNewToken(String paramString) {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Refreshed token: ");
    stringBuilder.append(paramString);
    Log.d("MyFirebaseMsgService", stringBuilder.toString());
    sendRegistrationToServer(paramString);
  }
}
