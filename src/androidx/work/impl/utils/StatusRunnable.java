package androidx.work.impl.utils;

import android.support.annotation.NonNull;
import android.support.annotation.RestrictTo;
import android.support.annotation.WorkerThread;
import androidx.work.WorkInfo;
import androidx.work.impl.WorkManagerImpl;
import androidx.work.impl.utils.futures.SettableFuture;
import com.google.common.util.concurrent.ListenableFuture;
import java.util.List;
import java.util.UUID;

@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
public abstract class StatusRunnable<T> extends Object implements Runnable {
  private final SettableFuture<T> mFuture = SettableFuture.create();
  
  public static StatusRunnable<List<WorkInfo>> forStringIds(@NonNull WorkManagerImpl paramWorkManagerImpl, @NonNull List<String> paramList) { return new Object(paramWorkManagerImpl, paramList); }
  
  public static StatusRunnable<List<WorkInfo>> forTag(@NonNull WorkManagerImpl paramWorkManagerImpl, @NonNull String paramString) { return new Object(paramWorkManagerImpl, paramString); }
  
  public static StatusRunnable<WorkInfo> forUUID(@NonNull WorkManagerImpl paramWorkManagerImpl, @NonNull UUID paramUUID) { return new Object(paramWorkManagerImpl, paramUUID); }
  
  public static StatusRunnable<List<WorkInfo>> forUniqueWork(@NonNull WorkManagerImpl paramWorkManagerImpl, @NonNull String paramString) { return new Object(paramWorkManagerImpl, paramString); }
  
  public ListenableFuture<T> getFuture() { return this.mFuture; }
  
  public void run() {
    try {
      Object object = runInternal();
      this.mFuture.set(object);
      return;
    } catch (Throwable throwable) {
      this.mFuture.setException(throwable);
      return;
    } 
  }
  
  @WorkerThread
  abstract T runInternal();
}
