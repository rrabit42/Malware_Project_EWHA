package com.android.volley.request;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.NetworkResponse;
import com.android.volley.Request;
import com.android.volley.Response;
import java.util.HashMap;
import java.util.Map;

public abstract class MultiPartRequest<T> extends Request<T> implements Response.ProgressListener {
  private static final String PROTOCOL_CHARSET = "utf-8";
  
  public static final int TIMEOUT_MS = 30000;
  
  private boolean isFixedStreamingMode;
  
  private Map<String, String> mFileUploads = null;
  
  private Response.Listener<T> mListener;
  
  private Map<String, MultiPartParam> mMultipartParams = null;
  
  private Response.ProgressListener mProgressListener;
  
  public MultiPartRequest(int paramInt, String paramString, Response.Listener<T> paramListener, Response.ErrorListener paramErrorListener) {
    super(paramInt, paramString, Request.Priority.NORMAL, paramErrorListener, new DefaultRetryPolicy(30000, 0, 1.0F));
    this.mListener = paramListener;
    this.mMultipartParams = new HashMap();
    this.mFileUploads = new HashMap();
  }
  
  public MultiPartRequest<T> addFile(String paramString1, String paramString2) {
    this.mFileUploads.put(paramString1, paramString2);
    return this;
  }
  
  public MultiPartRequest<T> addMultipartParam(String paramString1, String paramString2, String paramString3) {
    this.mMultipartParams.put(paramString1, new MultiPartParam(paramString2, paramString3));
    return this;
  }
  
  public MultiPartRequest<T> addStringParam(String paramString1, String paramString2) {
    this.mMultipartParams.put(paramString1, new MultiPartParam("text/plain", paramString2));
    return this;
  }
  
  protected void deliverResponse(T paramT) {
    Response.Listener listener = this.mListener;
    if (listener != null)
      listener.onResponse(paramT); 
  }
  
  public Map<String, String> getFilesToUpload() { return this.mFileUploads; }
  
  public Map<String, MultiPartParam> getMultipartParams() { return this.mMultipartParams; }
  
  public String getProtocolCharset() { return "utf-8"; }
  
  public boolean isFixedStreamingMode() { return this.isFixedStreamingMode; }
  
  public void onProgress(long paramLong1, long paramLong2) {
    Response.ProgressListener progressListener = this.mProgressListener;
    if (progressListener != null)
      progressListener.onProgress(paramLong1, paramLong2); 
  }
  
  protected abstract Response<T> parseNetworkResponse(NetworkResponse paramNetworkResponse);
  
  public void setFixedStreamingMode(boolean paramBoolean) { this.isFixedStreamingMode = paramBoolean; }
  
  public void setOnProgressListener(Response.ProgressListener paramProgressListener) { this.mProgressListener = paramProgressListener; }
}
