package com.bumptech.glide.gifdecoder;

import android.util.Log;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.Arrays;

public class GifHeaderParser {
  static final int DEFAULT_FRAME_DELAY = 10;
  
  private static final int MAX_BLOCK_SIZE = 256;
  
  static final int MIN_FRAME_DELAY = 3;
  
  public static final String TAG = "GifHeaderParser";
  
  private final byte[] block = new byte[256];
  
  private int blockSize = 0;
  
  private GifHeader header;
  
  private ByteBuffer rawData;
  
  private boolean err() { return (this.header.status != 0); }
  
  private int read() {
    try {
      byte b = this.rawData.get();
      return b & 0xFF;
    } catch (Exception exception) {
      this.header.status = 1;
      return 0;
    } 
  }
  
  private void readBitmap() {
    boolean bool1;
    this.header.currentFrame.ix = readShort();
    this.header.currentFrame.iy = readShort();
    this.header.currentFrame.iw = readShort();
    this.header.currentFrame.ih = readShort();
    int i = read();
    boolean bool2 = false;
    if ((i & 0x80) != 0) {
      bool1 = true;
    } else {
      bool1 = false;
    } 
    int j = (int)Math.pow(2.0D, ((i & 0x7) + 1));
    GifFrame gifFrame = this.header.currentFrame;
    if ((i & 0x40) != 0)
      bool2 = true; 
    gifFrame.interlace = bool2;
    if (bool1) {
      this.header.currentFrame.lct = readColorTable(j);
    } else {
      this.header.currentFrame.lct = null;
    } 
    this.header.currentFrame.bufferFrameStart = this.rawData.position();
    skipImageData();
    if (err())
      return; 
    GifHeader gifHeader = this.header;
    gifHeader.frameCount++;
    this.header.frames.add(this.header.currentFrame);
  }
  
  private int readBlock() {
    this.blockSize = read();
    int j = this.blockSize;
    int k = 0;
    int i = 0;
    if (j > 0) {
      j = 0;
      while (true) {
        int m = j;
        k = i;
        try {
          if (i < this.blockSize) {
            m = j;
            j = this.blockSize - i;
            m = j;
            this.rawData.get(this.block, i, j);
            i += j;
            continue;
          } 
          break;
        } catch (Exception exception) {
          if (Log.isLoggable("GifHeaderParser", 3)) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("Error Reading Block n: ");
            stringBuilder.append(i);
            stringBuilder.append(" count: ");
            stringBuilder.append(m);
            stringBuilder.append(" blockSize: ");
            stringBuilder.append(this.blockSize);
            Log.d("GifHeaderParser", stringBuilder.toString(), exception);
          } 
          this.header.status = 1;
          k = i;
        } 
        return k;
      } 
    } 
    return k;
  }
  
  private int[] readColorTable(int paramInt) {
    byte[] arrayOfByte = new byte[paramInt * 3];
    int[] arrayOfInt = null;
    try {
      this.rawData.get(arrayOfByte);
      int[] arrayOfInt1 = new int[256];
      byte b = 0;
      byte b1 = 0;
      while (true) {
        arrayOfInt = arrayOfInt1;
        if (b < paramInt) {
          boolean bool1 = b1 + true;
          b1 = arrayOfByte[b1];
          boolean bool2 = bool1 + true;
          arrayOfInt1[b] = (b1 & 0xFF) << 16 | 0xFF000000 | (arrayOfByte[bool1] & 0xFF) << 8 | arrayOfByte[bool2] & 0xFF;
          b1 = bool2 + true;
          b++;
          continue;
        } 
        break;
      } 
    } catch (BufferUnderflowException bufferUnderflowException) {
      if (Log.isLoggable("GifHeaderParser", 3))
        Log.d("GifHeaderParser", "Format Error Reading Color Table", bufferUnderflowException); 
      this.header.status = 1;
    } 
    return arrayOfInt;
  }
  
  private void readContents() {
    boolean bool = false;
    while (!bool && !err()) {
      int i = read();
      if (i != 33) {
        if (i != 44) {
          if (i != 59) {
            this.header.status = 1;
            continue;
          } 
          bool = true;
          continue;
        } 
        if (this.header.currentFrame == null)
          this.header.currentFrame = new GifFrame(); 
        readBitmap();
        continue;
      } 
      i = read();
      if (i != 1) {
        if (i != 249) {
          if (i != 254) {
            if (i != 255) {
              skip();
              continue;
            } 
            readBlock();
            String str = "";
            for (i = 0; i < 11; i++) {
              StringBuilder stringBuilder = new StringBuilder();
              stringBuilder.append(str);
              stringBuilder.append((char)this.block[i]);
              str = stringBuilder.toString();
            } 
            if (str.equals("NETSCAPE2.0")) {
              readNetscapeExt();
              continue;
            } 
            skip();
            continue;
          } 
          skip();
          continue;
        } 
        this.header.currentFrame = new GifFrame();
        readGraphicControlExt();
        continue;
      } 
      skip();
    } 
  }
  
  private void readGraphicControlExt() {
    read();
    int i = read();
    this.header.currentFrame.dispose = (i & 0x1C) >> 2;
    int j = this.header.currentFrame.dispose;
    boolean bool = true;
    if (j == 0)
      this.header.currentFrame.dispose = 1; 
    GifFrame gifFrame = this.header.currentFrame;
    if ((i & true) == 0)
      bool = false; 
    gifFrame.transparency = bool;
    j = readShort();
    i = j;
    if (j < 3)
      i = 10; 
    this.header.currentFrame.delay = i * 10;
    this.header.currentFrame.transIndex = read();
    read();
  }
  
  private void readHeader() {
    String str = "";
    for (byte b = 0; b < 6; b++) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append(str);
      stringBuilder.append((char)read());
      str = stringBuilder.toString();
    } 
    if (!str.startsWith("GIF")) {
      this.header.status = 1;
      return;
    } 
    readLSD();
    if (this.header.gctFlag && !err()) {
      GifHeader gifHeader = this.header;
      gifHeader.gct = readColorTable(gifHeader.gctSize);
      gifHeader = this.header;
      gifHeader.bgColor = gifHeader.gct[this.header.bgIndex];
    } 
  }
  
  private void readLSD() {
    boolean bool;
    this.header.width = readShort();
    this.header.height = readShort();
    int i = read();
    GifHeader gifHeader = this.header;
    if ((i & 0x80) != 0) {
      bool = true;
    } else {
      bool = false;
    } 
    gifHeader.gctFlag = bool;
    gifHeader = this.header;
    gifHeader.gctSize = 2 << (i & 0x7);
    gifHeader.bgIndex = read();
    this.header.pixelAspect = read();
  }
  
  private void readNetscapeExt() {
    do {
      readBlock();
      byte[] arrayOfByte = this.block;
      if (arrayOfByte[0] != 1)
        continue; 
      byte b1 = arrayOfByte[1];
      byte b2 = arrayOfByte[2];
      this.header.loopCount = (b2 & 0xFF) << 8 | b1 & 0xFF;
    } while (this.blockSize > 0 && !err());
  }
  
  private int readShort() { return this.rawData.getShort(); }
  
  private void reset() {
    this.rawData = null;
    Arrays.fill(this.block, (byte)0);
    this.header = new GifHeader();
    this.blockSize = 0;
  }
  
  private void skip() {
    int i;
    do {
      i = read();
      ByteBuffer byteBuffer = this.rawData;
      byteBuffer.position(byteBuffer.position() + i);
    } while (i > 0);
  }
  
  private void skipImageData() {
    read();
    skip();
  }
  
  public void clear() {
    this.rawData = null;
    this.header = null;
  }
  
  public GifHeader parseHeader() {
    if (this.rawData != null) {
      if (err())
        return this.header; 
      readHeader();
      if (!err()) {
        readContents();
        if (this.header.frameCount < 0)
          this.header.status = 1; 
      } 
      return this.header;
    } 
    throw new IllegalStateException("You must call setData() before parseHeader()");
  }
  
  public GifHeaderParser setData(byte[] paramArrayOfByte) {
    reset();
    if (paramArrayOfByte != null) {
      this.rawData = ByteBuffer.wrap(paramArrayOfByte);
      this.rawData.rewind();
      this.rawData.order(ByteOrder.LITTLE_ENDIAN);
      return this;
    } 
    this.rawData = null;
    this.header.status = 2;
    return this;
  }
}
