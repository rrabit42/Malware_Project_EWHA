package android.support.design.internal;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.TypedArray;
import android.support.annotation.RestrictTo;
import android.support.design.R;
import android.support.v4.view.MarginLayoutParamsCompat;
import android.support.v4.view.ViewCompat;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;

@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
public class FlowLayout extends ViewGroup {
  private int itemSpacing;
  
  private int lineSpacing;
  
  private boolean singleLine = false;
  
  public FlowLayout(Context paramContext) { this(paramContext, null); }
  
  public FlowLayout(Context paramContext, AttributeSet paramAttributeSet) { this(paramContext, paramAttributeSet, 0); }
  
  public FlowLayout(Context paramContext, AttributeSet paramAttributeSet, int paramInt) {
    super(paramContext, paramAttributeSet, paramInt);
    loadFromAttributes(paramContext, paramAttributeSet);
  }
  
  @TargetApi(21)
  public FlowLayout(Context paramContext, AttributeSet paramAttributeSet, int paramInt1, int paramInt2) {
    super(paramContext, paramAttributeSet, paramInt1, paramInt2);
    loadFromAttributes(paramContext, paramAttributeSet);
  }
  
  private static int getMeasuredDimension(int paramInt1, int paramInt2, int paramInt3) { return (paramInt2 != Integer.MIN_VALUE) ? ((paramInt2 != 1073741824) ? paramInt3 : paramInt1) : Math.min(paramInt3, paramInt1); }
  
  private void loadFromAttributes(Context paramContext, AttributeSet paramAttributeSet) {
    TypedArray typedArray = paramContext.getTheme().obtainStyledAttributes(paramAttributeSet, R.styleable.FlowLayout, 0, 0);
    this.lineSpacing = typedArray.getDimensionPixelSize(R.styleable.FlowLayout_lineSpacing, 0);
    this.itemSpacing = typedArray.getDimensionPixelSize(R.styleable.FlowLayout_itemSpacing, 0);
    typedArray.recycle();
  }
  
  protected int getItemSpacing() { return this.itemSpacing; }
  
  protected int getLineSpacing() { return this.lineSpacing; }
  
  protected boolean isSingleLine() { return this.singleLine; }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    if (getChildCount() == 0)
      return; 
    paramInt2 = ViewCompat.getLayoutDirection(this);
    boolean bool = true;
    if (paramInt2 != 1)
      bool = false; 
    if (bool) {
      paramInt2 = getPaddingRight();
    } else {
      paramInt2 = getPaddingLeft();
    } 
    if (bool) {
      paramInt4 = getPaddingLeft();
    } else {
      paramInt4 = getPaddingRight();
    } 
    int i = getPaddingTop();
    int j = paramInt3 - paramInt1 - paramInt4;
    paramInt3 = paramInt2;
    paramInt1 = i;
    byte b;
    for (b = 0; b < getChildCount(); b++) {
      View view = getChildAt(b);
      if (view.getVisibility() != 8) {
        int m;
        int k;
        ViewGroup.LayoutParams layoutParams = view.getLayoutParams();
        if (layoutParams instanceof ViewGroup.MarginLayoutParams) {
          ViewGroup.MarginLayoutParams marginLayoutParams = (ViewGroup.MarginLayoutParams)layoutParams;
          m = MarginLayoutParamsCompat.getMarginStart(marginLayoutParams);
          k = MarginLayoutParamsCompat.getMarginEnd(marginLayoutParams);
        } else {
          k = 0;
          m = 0;
        } 
        int i1 = view.getMeasuredWidth();
        int n = paramInt3;
        paramInt4 = paramInt1;
        if (!this.singleLine) {
          n = paramInt3;
          paramInt4 = paramInt1;
          if (paramInt3 + m + i1 > j) {
            paramInt4 = i + this.lineSpacing;
            n = paramInt2;
          } 
        } 
        paramInt1 = n + m;
        paramInt3 = view.getMeasuredWidth() + paramInt1;
        i = view.getMeasuredHeight() + paramInt4;
        if (bool) {
          view.layout(j - paramInt3, paramInt4, j - n - m, i);
        } else {
          view.layout(paramInt1, paramInt4, paramInt3, i);
        } 
        paramInt3 = n + m + k + view.getMeasuredWidth() + this.itemSpacing;
        paramInt1 = paramInt4;
      } 
    } 
  }
  
  protected void onMeasure(int paramInt1, int paramInt2) {
    int n;
    int i2 = View.MeasureSpec.getSize(paramInt1);
    int i3 = View.MeasureSpec.getMode(paramInt1);
    int i4 = View.MeasureSpec.getSize(paramInt2);
    int i5 = View.MeasureSpec.getMode(paramInt2);
    if (i3 == Integer.MIN_VALUE || i3 == 1073741824) {
      n = i2;
    } else {
      n = Integer.MAX_VALUE;
    } 
    int k = getPaddingLeft();
    int i = getPaddingTop();
    int i6 = getPaddingRight();
    int j = i;
    byte b = 0;
    int m = 0;
    int i1 = i;
    i = m;
    while (b < getChildCount()) {
      View view = getChildAt(b);
      if (view.getVisibility() == 8) {
        m = j;
      } else {
        int i8;
        int i7;
        measureChild(view, paramInt1, paramInt2);
        ViewGroup.LayoutParams layoutParams = view.getLayoutParams();
        if (layoutParams instanceof ViewGroup.MarginLayoutParams) {
          ViewGroup.MarginLayoutParams marginLayoutParams = (ViewGroup.MarginLayoutParams)layoutParams;
          i7 = marginLayoutParams.leftMargin + 0;
          i8 = marginLayoutParams.rightMargin + 0;
        } else {
          i7 = 0;
          i8 = 0;
        } 
        int i11 = view.getMeasuredWidth();
        int i10 = k;
        m = j;
        int i9 = i10;
        if (k + i7 + i11 > n - i6) {
          m = j;
          i9 = i10;
          if (!isSingleLine()) {
            i9 = getPaddingLeft();
            m = this.lineSpacing + i1;
          } 
        } 
        k = i9 + i7 + view.getMeasuredWidth();
        i1 = view.getMeasuredHeight();
        j = i;
        if (k > i)
          j = k; 
        i = view.getMeasuredWidth();
        k = this.itemSpacing;
        i1 += m;
        k = i9 + i7 + i8 + i + k;
        i = j;
      } 
      b++;
      j = m;
    } 
    setMeasuredDimension(getMeasuredDimension(i2, i3, i), getMeasuredDimension(i4, i5, i1));
  }
  
  protected void setItemSpacing(int paramInt) { this.itemSpacing = paramInt; }
  
  protected void setLineSpacing(int paramInt) { this.lineSpacing = paramInt; }
  
  public void setSingleLine(boolean paramBoolean) { this.singleLine = paramBoolean; }
}
