package com.bumptech.glide.provider;

import com.bumptech.glide.load.Encoder;
import com.bumptech.glide.load.ResourceDecoder;
import com.bumptech.glide.load.ResourceEncoder;
import com.bumptech.glide.load.model.ModelLoader;
import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
import java.io.File;

public class ChildLoadProvider<A, T, Z, R> extends Object implements LoadProvider<A, T, Z, R>, Cloneable {
  private ResourceDecoder<File, Z> cacheDecoder;
  
  private ResourceEncoder<Z> encoder;
  
  private final LoadProvider<A, T, Z, R> parent;
  
  private ResourceDecoder<T, Z> sourceDecoder;
  
  private Encoder<T> sourceEncoder;
  
  private ResourceTranscoder<Z, R> transcoder;
  
  public ChildLoadProvider(LoadProvider<A, T, Z, R> paramLoadProvider) { this.parent = paramLoadProvider; }
  
  public ChildLoadProvider<A, T, Z, R> clone() {
    try {
      return (ChildLoadProvider)super.clone();
    } catch (CloneNotSupportedException cloneNotSupportedException) {
      throw new RuntimeException(cloneNotSupportedException);
    } 
  }
  
  public ResourceDecoder<File, Z> getCacheDecoder() {
    ResourceDecoder resourceDecoder = this.cacheDecoder;
    return (resourceDecoder != null) ? resourceDecoder : this.parent.getCacheDecoder();
  }
  
  public ResourceEncoder<Z> getEncoder() {
    ResourceEncoder resourceEncoder = this.encoder;
    return (resourceEncoder != null) ? resourceEncoder : this.parent.getEncoder();
  }
  
  public ModelLoader<A, T> getModelLoader() { return this.parent.getModelLoader(); }
  
  public ResourceDecoder<T, Z> getSourceDecoder() {
    ResourceDecoder resourceDecoder = this.sourceDecoder;
    return (resourceDecoder != null) ? resourceDecoder : this.parent.getSourceDecoder();
  }
  
  public Encoder<T> getSourceEncoder() {
    Encoder encoder1 = this.sourceEncoder;
    return (encoder1 != null) ? encoder1 : this.parent.getSourceEncoder();
  }
  
  public ResourceTranscoder<Z, R> getTranscoder() {
    ResourceTranscoder resourceTranscoder = this.transcoder;
    return (resourceTranscoder != null) ? resourceTranscoder : this.parent.getTranscoder();
  }
  
  public void setCacheDecoder(ResourceDecoder<File, Z> paramResourceDecoder) { this.cacheDecoder = paramResourceDecoder; }
  
  public void setEncoder(ResourceEncoder<Z> paramResourceEncoder) { this.encoder = paramResourceEncoder; }
  
  public void setSourceDecoder(ResourceDecoder<T, Z> paramResourceDecoder) { this.sourceDecoder = paramResourceDecoder; }
  
  public void setSourceEncoder(Encoder<T> paramEncoder) { this.sourceEncoder = paramEncoder; }
  
  public void setTranscoder(ResourceTranscoder<Z, R> paramResourceTranscoder) { this.transcoder = paramResourceTranscoder; }
}
