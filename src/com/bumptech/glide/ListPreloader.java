package com.bumptech.glide;

import android.widget.AbsListView;
import java.util.List;

public class ListPreloader<T> extends Object implements AbsListView.OnScrollListener {
  private boolean isIncreasing = true;
  
  private int lastEnd;
  
  private int lastFirstVisible;
  
  private int lastStart;
  
  private final int maxPreload;
  
  private final PreloadSizeProvider<T> preloadDimensionProvider = new Object(this);
  
  private final PreloadModelProvider<T> preloadModelProvider = new Object(this);
  
  private final PreloadTargetQueue preloadTargetQueue;
  
  private int totalItemCount;
  
  @Deprecated
  public ListPreloader(int paramInt) {
    this.maxPreload = paramInt;
    this.preloadTargetQueue = new PreloadTargetQueue(paramInt + 1);
  }
  
  public ListPreloader(PreloadModelProvider<T> paramPreloadModelProvider, PreloadSizeProvider<T> paramPreloadSizeProvider, int paramInt) {
    this.maxPreload = paramInt;
    this.preloadTargetQueue = new PreloadTargetQueue(paramInt + 1);
  }
  
  private void cancelAll() {
    for (byte b = 0; b < this.maxPreload; b++)
      Glide.clear(this.preloadTargetQueue.next(0, 0)); 
  }
  
  private void preload(int paramInt1, int paramInt2) {
    if (paramInt1 < paramInt2) {
      i = Math.max(this.lastEnd, paramInt1);
      j = paramInt2;
    } else {
      j = Math.min(this.lastStart, paramInt1);
      i = paramInt2;
    } 
    int j = Math.min(this.totalItemCount, j);
    int i = Math.min(this.totalItemCount, Math.max(0, i));
    if (paramInt1 < paramInt2) {
      for (paramInt1 = i; paramInt1 < j; paramInt1++)
        preloadAdapterPosition(this.preloadModelProvider.getPreloadItems(paramInt1), paramInt1, true); 
    } else {
      for (paramInt1 = j - 1; paramInt1 >= i; paramInt1--)
        preloadAdapterPosition(this.preloadModelProvider.getPreloadItems(paramInt1), paramInt1, false); 
    } 
    this.lastStart = i;
    this.lastEnd = j;
  }
  
  private void preload(int paramInt, boolean paramBoolean) {
    int i;
    if (this.isIncreasing != paramBoolean) {
      this.isIncreasing = paramBoolean;
      cancelAll();
    } 
    if (paramBoolean) {
      i = this.maxPreload;
    } else {
      i = -this.maxPreload;
    } 
    preload(paramInt, i + paramInt);
  }
  
  private void preloadAdapterPosition(List<T> paramList, int paramInt, boolean paramBoolean) {
    int i = paramList.size();
    if (paramBoolean) {
      byte b;
      for (b = 0; b < i; b++)
        preloadItem(paramList.get(b), paramInt, b); 
    } else {
      int j;
      for (j = i - 1; j >= 0; j--)
        preloadItem(paramList.get(j), paramInt, j); 
    } 
  }
  
  private void preloadItem(T paramT, int paramInt1, int paramInt2) {
    int[] arrayOfInt = this.preloadDimensionProvider.getPreloadSize(paramT, paramInt1, paramInt2);
    if (arrayOfInt != null)
      this.preloadModelProvider.getPreloadRequestBuilder(paramT).into(this.preloadTargetQueue.next(arrayOfInt[0], arrayOfInt[1])); 
  }
  
  @Deprecated
  protected int[] getDimensions(T paramT) { throw new IllegalStateException("You must either provide a PreloadDimensionProvider or override getDimensions()"); }
  
  @Deprecated
  protected List<T> getItems(int paramInt1, int paramInt2) { throw new IllegalStateException("You must either provide a PreloadModelProvider or override getItems()"); }
  
  @Deprecated
  protected GenericRequestBuilder getRequestBuilder(T paramT) { throw new IllegalStateException("You must either provide a PreloadModelProvider, or override getRequestBuilder()"); }
  
  public void onScroll(AbsListView paramAbsListView, int paramInt1, int paramInt2, int paramInt3) {
    this.totalItemCount = paramInt3;
    paramInt3 = this.lastFirstVisible;
    if (paramInt1 > paramInt3) {
      preload(paramInt2 + paramInt1, true);
    } else if (paramInt1 < paramInt3) {
      preload(paramInt1, false);
    } 
    this.lastFirstVisible = paramInt1;
  }
  
  public void onScrollStateChanged(AbsListView paramAbsListView, int paramInt) {}
}
