package com.google.android.gms.internal.firebase_auth;

import java.util.ArrayDeque;
import java.util.Arrays;

final class zzhu {
  private final ArrayDeque<zzeh> zzaar = new ArrayDeque();
  
  private zzhu() {}
  
  private static int zzba(int paramInt) {
    int i = Arrays.binarySearch(zzhs.zziy(), paramInt);
    paramInt = i;
    if (i < 0)
      paramInt = -(i + 1) - 1; 
    return paramInt;
  }
  
  private final zzeh zzc(zzeh paramzzeh1, zzeh paramzzeh2) {
    zzhs zzhs;
    zzd(paramzzeh1);
    zzd(paramzzeh2);
    paramzzeh1 = (zzeh)this.zzaar.pop();
    while (!this.zzaar.isEmpty())
      zzhs = new zzhs((zzeh)this.zzaar.pop(), paramzzeh1, null); 
    return zzhs;
  }
  
  private final void zzd(zzeh paramzzeh) {
    zzeh zzeh1;
    while (true) {
      if (paramzzeh.zzfd()) {
        int i = zzba(paramzzeh.size());
        int j = zzhs.zziy()[i + 1];
        if (this.zzaar.isEmpty() || ((zzeh)this.zzaar.peek()).size() >= j) {
          this.zzaar.push(paramzzeh);
          return;
        } 
        i = zzhs.zziy()[i];
        zzhs zzhs = (zzeh)this.zzaar.pop();
        while (!this.zzaar.isEmpty() && ((zzeh)this.zzaar.peek()).size() < i)
          zzhs = new zzhs((zzeh)this.zzaar.pop(), zzhs, null); 
        zzeh1 = new zzhs(zzhs, paramzzeh, null);
        while (!this.zzaar.isEmpty()) {
          i = zzba(zzeh1.size());
          i = zzhs.zziy()[i + 1];
          if (((zzeh)this.zzaar.peek()).size() < i)
            zzeh1 = new zzhs((zzeh)this.zzaar.pop(), zzeh1, null); 
        } 
        this.zzaar.push(zzeh1);
        return;
      } 
      if (zzeh1 instanceof zzhs) {
        zzd((zzeh1 = (zzhs)zzeh1).zza(zzeh1));
        zzeh1 = zzhs.zzb(zzeh1);
        continue;
      } 
      break;
    } 
    String str;
    StringBuilder stringBuilder = new StringBuilder((str = String.valueOf(zzeh1.getClass())).valueOf(str).length() + 49);
    stringBuilder.append("Has a new type of ByteString been created? Found ");
    stringBuilder.append(str);
    IllegalArgumentException illegalArgumentException = new IllegalArgumentException(stringBuilder.toString());
    throw illegalArgumentException;
  }
}
