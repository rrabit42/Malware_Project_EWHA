package com.bumptech.glide.load;

import com.bumptech.glide.load.engine.Resource;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;

public class MultiTransformation<T> extends Object implements Transformation<T> {
  private String id;
  
  private final Collection<? extends Transformation<T>> transformations;
  
  public MultiTransformation(Collection<? extends Transformation<T>> paramCollection) {
    if (paramCollection.size() >= 1) {
      this.transformations = paramCollection;
      return;
    } 
    throw new IllegalArgumentException("MultiTransformation must contain at least one Transformation");
  }
  
  @SafeVarargs
  public MultiTransformation(Transformation<T>... paramVarArgs) {
    if (paramVarArgs.length >= 1) {
      this.transformations = Arrays.asList(paramVarArgs);
      return;
    } 
    throw new IllegalArgumentException("MultiTransformation must contain at least one Transformation");
  }
  
  public String getId() {
    if (this.id == null) {
      StringBuilder stringBuilder = new StringBuilder();
      Iterator iterator = this.transformations.iterator();
      while (iterator.hasNext())
        stringBuilder.append(((Transformation)iterator.next()).getId()); 
      this.id = stringBuilder.toString();
    } 
    return this.id;
  }
  
  public Resource<T> transform(Resource<T> paramResource, int paramInt1, int paramInt2) {
    Iterator iterator = this.transformations.iterator();
    Resource<T> resource;
    for (resource = paramResource; iterator.hasNext(); resource = resource1) {
      Resource resource1 = ((Transformation)iterator.next()).transform(resource, paramInt1, paramInt2);
      if (resource != null && !resource.equals(paramResource) && !resource.equals(resource1))
        resource.recycle(); 
    } 
    return resource;
  }
}
