package com.bumptech.glide.load.resource.bitmap;

import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.view.Gravity;
import com.bumptech.glide.load.resource.drawable.GlideDrawable;

public class GlideBitmapDrawable extends GlideDrawable {
  private boolean applyGravity;
  
  private final Rect destRect = new Rect();
  
  private int height;
  
  private boolean mutated;
  
  private BitmapState state;
  
  private int width;
  
  public GlideBitmapDrawable(Resources paramResources, Bitmap paramBitmap) { this(paramResources, new BitmapState(paramBitmap)); }
  
  GlideBitmapDrawable(Resources paramResources, BitmapState paramBitmapState) {
    if (paramBitmapState != null) {
      int i;
      this.state = paramBitmapState;
      if (paramResources != null) {
        int j = (paramResources.getDisplayMetrics()).densityDpi;
        i = j;
        if (j == 0)
          i = 160; 
        paramBitmapState.targetDensity = i;
      } else {
        i = paramBitmapState.targetDensity;
      } 
      this.width = paramBitmapState.bitmap.getScaledWidth(i);
      this.height = paramBitmapState.bitmap.getScaledHeight(i);
      return;
    } 
    throw new NullPointerException("BitmapState must not be null");
  }
  
  public void draw(Canvas paramCanvas) {
    if (this.applyGravity) {
      Gravity.apply(119, this.width, this.height, getBounds(), this.destRect);
      this.applyGravity = false;
    } 
    paramCanvas.drawBitmap(this.state.bitmap, null, this.destRect, this.state.paint);
  }
  
  public Bitmap getBitmap() { return this.state.bitmap; }
  
  public Drawable.ConstantState getConstantState() { return this.state; }
  
  public int getIntrinsicHeight() { return this.height; }
  
  public int getIntrinsicWidth() { return this.width; }
  
  public int getOpacity() {
    Bitmap bitmap = this.state.bitmap;
    return (bitmap == null || bitmap.hasAlpha() || this.state.paint.getAlpha() < 255) ? -3 : -1;
  }
  
  public boolean isAnimated() { return false; }
  
  public boolean isRunning() { return false; }
  
  public Drawable mutate() {
    if (!this.mutated && super.mutate() == this) {
      this.state = new BitmapState(this.state);
      this.mutated = true;
    } 
    return this;
  }
  
  protected void onBoundsChange(Rect paramRect) {
    super.onBoundsChange(paramRect);
    this.applyGravity = true;
  }
  
  public void setAlpha(int paramInt) {
    if (this.state.paint.getAlpha() != paramInt) {
      this.state.setAlpha(paramInt);
      invalidateSelf();
    } 
  }
  
  public void setColorFilter(ColorFilter paramColorFilter) {
    this.state.setColorFilter(paramColorFilter);
    invalidateSelf();
  }
  
  public void setLoopCount(int paramInt) {}
  
  public void start() {}
  
  public void stop() {}
}
