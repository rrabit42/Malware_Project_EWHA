package com.android.volley.cache.plus;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.TransitionDrawable;
import android.net.http.AndroidHttpClient;
import android.support.v4.app.FragmentActivity;
import android.view.ViewPropertyAnimator;
import android.widget.ImageView;
import com.android.volley.RequestQueue;
import com.android.volley.cache.DiskLruBasedCache;
import com.android.volley.misc.NetUtils;
import com.android.volley.misc.Utils;
import com.android.volley.toolbox.BasicNetwork;
import com.android.volley.toolbox.HttpClientStack;
import com.android.volley.toolbox.HurlStack;
import com.android.volley.ui.PhotoView;
import java.util.ArrayList;

public class SimpleImageLoader extends ImageLoader {
  protected static final String CACHE_DIR = "images";
  
  private static final int HALF_FADE_IN_TIME = 100;
  
  private static final ColorDrawable transparentDrawable = new ColorDrawable(17170445);
  
  private boolean mFadeInImage = true;
  
  private int mMaxImageHeight = 0;
  
  private int mMaxImageWidth = 0;
  
  private ArrayList<Drawable> mPlaceHolderDrawables;
  
  public SimpleImageLoader(Context paramContext) { super(newRequestQueue(paramContext, null), BitmapImageCache.getInstance(null), paramContext.getResources()); }
  
  public SimpleImageLoader(Context paramContext, DiskLruBasedCache.ImageCacheParams paramImageCacheParams) { super(newRequestQueue(paramContext, paramImageCacheParams), BitmapImageCache.getInstance(null, paramImageCacheParams), paramContext.getResources()); }
  
  public SimpleImageLoader(FragmentActivity paramFragmentActivity) { super(newRequestQueue(paramFragmentActivity, null), BitmapImageCache.getInstance(paramFragmentActivity.getSupportFragmentManager()), paramFragmentActivity.getResources()); }
  
  public SimpleImageLoader(FragmentActivity paramFragmentActivity, DiskLruBasedCache.ImageCacheParams paramImageCacheParams) { super(newRequestQueue(paramFragmentActivity, paramImageCacheParams), BitmapImageCache.getInstance(paramFragmentActivity.getSupportFragmentManager(), paramImageCacheParams), paramFragmentActivity.getResources()); }
  
  public SimpleImageLoader(RequestQueue paramRequestQueue) { this(paramRequestQueue, BitmapImageCache.getInstance(null)); }
  
  public SimpleImageLoader(RequestQueue paramRequestQueue, ImageCache paramImageCache) { this(paramRequestQueue, paramImageCache, null); }
  
  public SimpleImageLoader(RequestQueue paramRequestQueue, ImageCache paramImageCache, Resources paramResources) { super(paramRequestQueue, paramImageCache, paramResources); }
  
  private static ImageLoader.ImageListener getImageListener(Resources paramResources, ImageView paramImageView, Drawable paramDrawable, boolean paramBoolean) { return new Object(paramImageView, paramResources, paramBoolean, paramDrawable); }
  
  private static RequestQueue newRequestQueue(Context paramContext, DiskLruBasedCache.ImageCacheParams paramImageCacheParams) {
    HttpClientStack httpClientStack;
    DiskLruBasedCache diskLruBasedCache;
    if (Utils.hasHoneycomb()) {
      httpClientStack = new HurlStack();
    } else {
      httpClientStack = new HttpClientStack(AndroidHttpClient.newInstance(NetUtils.getUserAgent(paramContext)));
    } 
    BasicNetwork basicNetwork = new BasicNetwork(httpClientStack);
    if (paramImageCacheParams != null) {
      diskLruBasedCache = new DiskLruBasedCache(paramImageCacheParams);
    } else {
      diskLruBasedCache = new DiskLruBasedCache(Utils.getDiskCacheDir(diskLruBasedCache, "images"));
    } 
    RequestQueue requestQueue = new RequestQueue(diskLruBasedCache, basicNetwork);
    requestQueue.start();
    return requestQueue;
  }
  
  @TargetApi(12)
  private static void setImageBitmap(ImageView paramImageView, BitmapDrawable paramBitmapDrawable, Resources paramResources, boolean paramBoolean) {
    TransitionDrawable transitionDrawable;
    if (paramBoolean && Utils.hasHoneycombMR1()) {
      long l;
      ViewPropertyAnimator viewPropertyAnimator = paramImageView.animate().scaleY(0.95F).scaleX(0.95F).alpha(0.0F);
      if (paramImageView.getDrawable() == null) {
        l = 0L;
      } else {
        l = 100L;
      } 
      viewPropertyAnimator.setDuration(l).setListener(new Object(paramImageView, paramBitmapDrawable));
      return;
    } 
    if (paramBoolean) {
      ColorDrawable colorDrawable;
      if (paramImageView.getDrawable() != null) {
        colorDrawable = paramImageView.getDrawable();
      } else {
        colorDrawable = transparentDrawable;
      } 
      transitionDrawable = new TransitionDrawable(new Drawable[] { colorDrawable, paramBitmapDrawable });
      paramImageView.setImageDrawable(transitionDrawable);
      transitionDrawable.startTransition(200);
      return;
    } 
    paramImageView.setImageDrawable(transitionDrawable);
  }
  
  @TargetApi(12)
  private static void setPhotoImageBitmap(PhotoView paramPhotoView, BitmapDrawable paramBitmapDrawable, Resources paramResources, boolean paramBoolean) {
    TransitionDrawable transitionDrawable;
    if (paramBoolean && Utils.hasHoneycombMR1()) {
      long l;
      ViewPropertyAnimator viewPropertyAnimator = paramPhotoView.animate().scaleY(0.95F).scaleX(0.95F).alpha(0.0F);
      if (paramPhotoView.getDrawable() == null) {
        l = 0L;
      } else {
        l = 100L;
      } 
      viewPropertyAnimator.setDuration(l).setListener(new Object(paramPhotoView, paramBitmapDrawable));
      return;
    } 
    if (paramBoolean) {
      ColorDrawable colorDrawable;
      if (paramPhotoView.getDrawable() != null) {
        colorDrawable = paramPhotoView.getDrawable();
      } else {
        colorDrawable = transparentDrawable;
      } 
      transitionDrawable = new TransitionDrawable(new Drawable[] { colorDrawable, paramBitmapDrawable });
      paramPhotoView.bindDrawable(transitionDrawable);
      transitionDrawable.startTransition(200);
      return;
    } 
    paramPhotoView.bindDrawable(transitionDrawable);
  }
  
  public void clearCache() { getCache().clear(); }
  
  public void closeCache() { getCache().close(); }
  
  public void flushCache() {
    getImageCache().clear();
    getCache().flush();
  }
  
  public ImageLoader.ImageContainer get(String paramString, ImageView paramImageView) { return get(paramString, paramImageView, 0); }
  
  public ImageLoader.ImageContainer get(String paramString, ImageView paramImageView, int paramInt) {
    ArrayList arrayList = this.mPlaceHolderDrawables;
    if (arrayList != null) {
      Drawable drawable = (Drawable)arrayList.get(paramInt);
    } else {
      arrayList = null;
    } 
    return get(paramString, paramImageView, arrayList, this.mMaxImageWidth, this.mMaxImageHeight);
  }
  
  public ImageLoader.ImageContainer get(String paramString, ImageView paramImageView, int paramInt1, int paramInt2) {
    ArrayList arrayList = this.mPlaceHolderDrawables;
    if (arrayList != null) {
      Drawable drawable = (Drawable)arrayList.get(0);
    } else {
      arrayList = null;
    } 
    return get(paramString, paramImageView, arrayList, paramInt1, paramInt2);
  }
  
  public ImageLoader.ImageContainer get(String paramString, ImageView paramImageView, Drawable paramDrawable) { return get(paramString, paramImageView, paramDrawable, this.mMaxImageWidth, this.mMaxImageHeight); }
  
  public ImageLoader.ImageContainer get(String paramString, ImageView paramImageView, Drawable paramDrawable, int paramInt1, int paramInt2) {
    Object object;
    ImageLoader.ImageContainer imageContainer;
    if (paramImageView.getTag() != null && paramImageView.getTag() instanceof ImageLoader.ImageContainer) {
      imageContainer = (ImageLoader.ImageContainer)paramImageView.getTag();
    } else {
      imageContainer = null;
    } 
    if (imageContainer != null) {
      object = imageContainer.getRequestUrl();
    } else {
      object = null;
    } 
    if (paramString == null || !paramString.equals(object)) {
      if (imageContainer != null) {
        imageContainer.cancelRequest();
        paramImageView.setTag(null);
      } 
      if (paramString != null) {
        ImageLoader.ImageContainer imageContainer1 = get(paramString, getImageListener(getResources(), paramImageView, paramDrawable, this.mFadeInImage), paramInt1, paramInt2);
        paramImageView.setTag(imageContainer1);
        return imageContainer1;
      } 
      if (!(paramImageView instanceof PhotoView))
        paramImageView.setImageDrawable(paramDrawable); 
      paramImageView.setTag(null);
    } 
    return imageContainer;
  }
  
  public int getMaxImageHeight() { return this.mMaxImageHeight; }
  
  public int getMaxImageWidth() { return this.mMaxImageWidth; }
  
  public void invalidate(String paramString) {
    String str = getCacheKey(paramString, this.mMaxImageWidth, this.mMaxImageHeight);
    getImageCache().invalidateBitmap(str);
    getCache().invalidate(paramString, true);
  }
  
  public ImageLoader.ImageContainer set(String paramString, ImageView paramImageView, int paramInt, Bitmap paramBitmap) {
    ArrayList arrayList = this.mPlaceHolderDrawables;
    if (arrayList != null) {
      Drawable drawable = (Drawable)arrayList.get(paramInt);
    } else {
      arrayList = null;
    } 
    return set(paramString, paramImageView, arrayList, this.mMaxImageWidth, this.mMaxImageHeight, paramBitmap);
  }
  
  public ImageLoader.ImageContainer set(String paramString, ImageView paramImageView, Bitmap paramBitmap) { return set(paramString, paramImageView, 0, paramBitmap); }
  
  public ImageLoader.ImageContainer set(String paramString, ImageView paramImageView, Drawable paramDrawable, int paramInt1, int paramInt2, Bitmap paramBitmap) {
    ImageLoader.ImageContainer imageContainer;
    if (paramImageView.getTag() != null && paramImageView.getTag() instanceof ImageLoader.ImageContainer) {
      imageContainer = (ImageLoader.ImageContainer)paramImageView.getTag();
    } else {
      imageContainer = null;
    } 
    if (imageContainer != null) {
      imageContainer.cancelRequest();
      paramImageView.setTag(null);
    } 
    if (paramString != null) {
      ImageLoader.ImageContainer imageContainer1 = set(paramString, getImageListener(getResources(), paramImageView, paramDrawable, this.mFadeInImage), paramInt1, paramInt2, paramBitmap);
      paramImageView.setTag(imageContainer1);
      return imageContainer1;
    } 
    if (!(paramImageView instanceof PhotoView))
      paramImageView.setImageDrawable(paramDrawable); 
    paramImageView.setTag(null);
    return imageContainer;
  }
  
  public ImageLoader.ImageContainer set(String paramString, ImageView paramImageView, Drawable paramDrawable, Bitmap paramBitmap) { return set(paramString, paramImageView, paramDrawable, this.mMaxImageWidth, this.mMaxImageHeight, paramBitmap); }
  
  public SimpleImageLoader setDefaultDrawable(int paramInt) {
    Drawable drawable;
    this.mPlaceHolderDrawables = new ArrayList(1);
    ArrayList arrayList = this.mPlaceHolderDrawables;
    if (paramInt == -1) {
      drawable = null;
    } else {
      drawable = getResources().getDrawable(paramInt);
    } 
    arrayList.add(drawable);
    return this;
  }
  
  public SimpleImageLoader setDefaultDrawables(ArrayList<Drawable> paramArrayList) {
    this.mPlaceHolderDrawables = paramArrayList;
    return this;
  }
  
  public SimpleImageLoader setFadeInImage(boolean paramBoolean) {
    this.mFadeInImage = paramBoolean;
    return this;
  }
  
  public SimpleImageLoader setMaxImageSize(int paramInt) { return setMaxImageSize(paramInt, paramInt); }
  
  public SimpleImageLoader setMaxImageSize(int paramInt1, int paramInt2) {
    this.mMaxImageWidth = paramInt1;
    this.mMaxImageHeight = paramInt2;
    return this;
  }
  
  public void startProcessingQueue() { getRequestQueue().start(); }
  
  public void stopProcessingQueue() { getRequestQueue().stop(); }
}
