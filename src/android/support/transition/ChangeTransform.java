package android.support.transition;

import android.animation.Animator;
import android.animation.ObjectAnimator;
import android.animation.PropertyValuesHolder;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Matrix;
import android.graphics.Path;
import android.graphics.PointF;
import android.os.Build;
import android.support.annotation.NonNull;
import android.support.v4.content.res.TypedArrayUtils;
import android.support.v4.view.ViewCompat;
import android.util.AttributeSet;
import android.util.Property;
import android.view.View;
import android.view.ViewGroup;
import org.xmlpull.v1.XmlPullParser;

public class ChangeTransform extends Transition {
  private static final Property<PathAnimatorMatrix, float[]> NON_TRANSLATIONS_PROPERTY;
  
  private static final String PROPNAME_INTERMEDIATE_MATRIX = "android:changeTransform:intermediateMatrix";
  
  private static final String PROPNAME_INTERMEDIATE_PARENT_MATRIX = "android:changeTransform:intermediateParentMatrix";
  
  private static final String PROPNAME_MATRIX = "android:changeTransform:matrix";
  
  private static final String PROPNAME_PARENT = "android:changeTransform:parent";
  
  private static final String PROPNAME_PARENT_MATRIX = "android:changeTransform:parentMatrix";
  
  private static final String PROPNAME_TRANSFORMS = "android:changeTransform:transforms";
  
  private static final boolean SUPPORTS_VIEW_REMOVAL_SUPPRESSION;
  
  private static final Property<PathAnimatorMatrix, PointF> TRANSLATIONS_PROPERTY;
  
  private static final String[] sTransitionProperties;
  
  private boolean mReparent = true;
  
  private Matrix mTempMatrix = new Matrix();
  
  boolean mUseOverlay = true;
  
  static  {
    boolean bool;
    sTransitionProperties = new String[] { "android:changeTransform:matrix", "android:changeTransform:transforms", "android:changeTransform:parentMatrix" };
    NON_TRANSLATIONS_PROPERTY = new Object(float[].class, "nonTranslations");
    TRANSLATIONS_PROPERTY = new Object(PointF.class, "translations");
    if (Build.VERSION.SDK_INT >= 21) {
      bool = true;
    } else {
      bool = false;
    } 
    SUPPORTS_VIEW_REMOVAL_SUPPRESSION = bool;
  }
  
  public ChangeTransform() {}
  
  public ChangeTransform(Context paramContext, AttributeSet paramAttributeSet) {
    super(paramContext, paramAttributeSet);
    TypedArray typedArray = paramContext.obtainStyledAttributes(paramAttributeSet, Styleable.CHANGE_TRANSFORM);
    XmlPullParser xmlPullParser = (XmlPullParser)paramAttributeSet;
    this.mUseOverlay = TypedArrayUtils.getNamedBoolean(typedArray, xmlPullParser, "reparentWithOverlay", 1, true);
    this.mReparent = TypedArrayUtils.getNamedBoolean(typedArray, xmlPullParser, "reparent", 0, true);
    typedArray.recycle();
  }
  
  private void captureValues(TransitionValues paramTransitionValues) {
    View view = paramTransitionValues.view;
    if (view.getVisibility() == 8)
      return; 
    paramTransitionValues.values.put("android:changeTransform:parent", view.getParent());
    Transforms transforms = new Transforms(view);
    paramTransitionValues.values.put("android:changeTransform:transforms", transforms);
    Matrix matrix = view.getMatrix();
    if (matrix == null || matrix.isIdentity()) {
      matrix = null;
    } else {
      matrix = new Matrix(matrix);
    } 
    paramTransitionValues.values.put("android:changeTransform:matrix", matrix);
    if (this.mReparent) {
      matrix = new Matrix();
      ViewGroup viewGroup = (ViewGroup)view.getParent();
      ViewUtils.transformMatrixToGlobal(viewGroup, matrix);
      matrix.preTranslate(-viewGroup.getScrollX(), -viewGroup.getScrollY());
      paramTransitionValues.values.put("android:changeTransform:parentMatrix", matrix);
      paramTransitionValues.values.put("android:changeTransform:intermediateMatrix", view.getTag(R.id.transition_transform));
      paramTransitionValues.values.put("android:changeTransform:intermediateParentMatrix", view.getTag(R.id.parent_matrix));
    } 
  }
  
  private void createGhostView(ViewGroup paramViewGroup, TransitionValues paramTransitionValues1, TransitionValues paramTransitionValues2) {
    View view = paramTransitionValues2.view;
    Matrix matrix = new Matrix((Matrix)paramTransitionValues2.values.get("android:changeTransform:parentMatrix"));
    ViewUtils.transformMatrixToLocal(paramViewGroup, matrix);
    GhostViewImpl ghostViewImpl = GhostViewUtils.addGhost(view, paramViewGroup, matrix);
    if (ghostViewImpl == null)
      return; 
    ghostViewImpl.reserveEndViewTransition((ViewGroup)paramTransitionValues1.values.get("android:changeTransform:parent"), paramTransitionValues1.view);
    TransitionSet transitionSet = this;
    while (transitionSet.mParent != null)
      transitionSet = transitionSet.mParent; 
    transitionSet.addListener(new GhostListener(view, ghostViewImpl));
    if (SUPPORTS_VIEW_REMOVAL_SUPPRESSION) {
      if (paramTransitionValues1.view != paramTransitionValues2.view)
        ViewUtils.setTransitionAlpha(paramTransitionValues1.view, 0.0F); 
      ViewUtils.setTransitionAlpha(view, 1.0F);
    } 
  }
  
  private ObjectAnimator createTransformAnimator(TransitionValues paramTransitionValues1, TransitionValues paramTransitionValues2, boolean paramBoolean) {
    Matrix matrix1 = (Matrix)paramTransitionValues1.values.get("android:changeTransform:matrix");
    Matrix matrix3 = (Matrix)paramTransitionValues2.values.get("android:changeTransform:matrix");
    Matrix matrix2 = matrix1;
    if (matrix1 == null)
      matrix2 = MatrixUtils.IDENTITY_MATRIX; 
    matrix1 = matrix3;
    if (matrix3 == null)
      matrix1 = MatrixUtils.IDENTITY_MATRIX; 
    if (matrix2.equals(matrix1))
      return null; 
    Transforms transforms = (Transforms)paramTransitionValues2.values.get("android:changeTransform:transforms");
    View view = paramTransitionValues2.view;
    setIdentityTransforms(view);
    float[] arrayOfFloat1 = new float[9];
    matrix2.getValues(arrayOfFloat1);
    float[] arrayOfFloat2 = new float[9];
    matrix1.getValues(arrayOfFloat2);
    PathAnimatorMatrix pathAnimatorMatrix = new PathAnimatorMatrix(view, arrayOfFloat1);
    PropertyValuesHolder propertyValuesHolder = PropertyValuesHolder.ofObject(NON_TRANSLATIONS_PROPERTY, new FloatArrayEvaluator(new float[9]), new float[][] { arrayOfFloat1, arrayOfFloat2 });
    Path path = getPathMotion().getPath(arrayOfFloat1[2], arrayOfFloat1[5], arrayOfFloat2[2], arrayOfFloat2[5]);
    ObjectAnimator objectAnimator = ObjectAnimator.ofPropertyValuesHolder(pathAnimatorMatrix, new PropertyValuesHolder[] { propertyValuesHolder, PropertyValuesHolderUtils.ofPointF(TRANSLATIONS_PROPERTY, path) });
    Object object = new Object(this, paramBoolean, matrix1, view, transforms, pathAnimatorMatrix);
    objectAnimator.addListener(object);
    AnimatorUtils.addPauseListener(objectAnimator, object);
    return objectAnimator;
  }
  
  private boolean parentsMatch(ViewGroup paramViewGroup1, ViewGroup paramViewGroup2) {
    if (!isValidTarget(paramViewGroup1) || !isValidTarget(paramViewGroup2))
      return (paramViewGroup1 == paramViewGroup2); 
    TransitionValues transitionValues = getMatchedTransitionValues(paramViewGroup1, true);
    return (transitionValues != null && paramViewGroup2 == transitionValues.view);
  }
  
  static void setIdentityTransforms(View paramView) { setTransforms(paramView, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F); }
  
  private void setMatricesForParent(TransitionValues paramTransitionValues1, TransitionValues paramTransitionValues2) {
    Matrix matrix2 = (Matrix)paramTransitionValues2.values.get("android:changeTransform:parentMatrix");
    paramTransitionValues2.view.setTag(R.id.parent_matrix, matrix2);
    Matrix matrix3 = this.mTempMatrix;
    matrix3.reset();
    matrix2.invert(matrix3);
    matrix2 = (Matrix)paramTransitionValues1.values.get("android:changeTransform:matrix");
    Matrix matrix1 = matrix2;
    if (matrix2 == null) {
      matrix1 = new Matrix();
      paramTransitionValues1.values.put("android:changeTransform:matrix", matrix1);
    } 
    matrix1.postConcat((Matrix)paramTransitionValues1.values.get("android:changeTransform:parentMatrix"));
    matrix1.postConcat(matrix3);
  }
  
  static void setTransforms(View paramView, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, float paramFloat5, float paramFloat6, float paramFloat7, float paramFloat8) {
    paramView.setTranslationX(paramFloat1);
    paramView.setTranslationY(paramFloat2);
    ViewCompat.setTranslationZ(paramView, paramFloat3);
    paramView.setScaleX(paramFloat4);
    paramView.setScaleY(paramFloat5);
    paramView.setRotationX(paramFloat6);
    paramView.setRotationY(paramFloat7);
    paramView.setRotation(paramFloat8);
  }
  
  public void captureEndValues(@NonNull TransitionValues paramTransitionValues) { captureValues(paramTransitionValues); }
  
  public void captureStartValues(@NonNull TransitionValues paramTransitionValues) {
    captureValues(paramTransitionValues);
    if (!SUPPORTS_VIEW_REMOVAL_SUPPRESSION)
      ((ViewGroup)paramTransitionValues.view.getParent()).startViewTransition(paramTransitionValues.view); 
  }
  
  public Animator createAnimator(@NonNull ViewGroup paramViewGroup, TransitionValues paramTransitionValues1, TransitionValues paramTransitionValues2) {
    boolean bool;
    if (paramTransitionValues1 == null || paramTransitionValues2 == null || !paramTransitionValues1.values.containsKey("android:changeTransform:parent") || !paramTransitionValues2.values.containsKey("android:changeTransform:parent"))
      return null; 
    ViewGroup viewGroup1 = (ViewGroup)paramTransitionValues1.values.get("android:changeTransform:parent");
    ViewGroup viewGroup2 = (ViewGroup)paramTransitionValues2.values.get("android:changeTransform:parent");
    if (this.mReparent && !parentsMatch(viewGroup1, viewGroup2)) {
      bool = true;
    } else {
      bool = false;
    } 
    Matrix matrix = (Matrix)paramTransitionValues1.values.get("android:changeTransform:intermediateMatrix");
    if (matrix != null)
      paramTransitionValues1.values.put("android:changeTransform:matrix", matrix); 
    matrix = (Matrix)paramTransitionValues1.values.get("android:changeTransform:intermediateParentMatrix");
    if (matrix != null)
      paramTransitionValues1.values.put("android:changeTransform:parentMatrix", matrix); 
    if (bool)
      setMatricesForParent(paramTransitionValues1, paramTransitionValues2); 
    ObjectAnimator objectAnimator = createTransformAnimator(paramTransitionValues1, paramTransitionValues2, bool);
    if (bool && objectAnimator != null && this.mUseOverlay) {
      createGhostView(paramViewGroup, paramTransitionValues1, paramTransitionValues2);
      return objectAnimator;
    } 
    if (!SUPPORTS_VIEW_REMOVAL_SUPPRESSION)
      viewGroup1.endViewTransition(paramTransitionValues1.view); 
    return objectAnimator;
  }
  
  public boolean getReparent() { return this.mReparent; }
  
  public boolean getReparentWithOverlay() { return this.mUseOverlay; }
  
  public String[] getTransitionProperties() { return sTransitionProperties; }
  
  public void setReparent(boolean paramBoolean) { this.mReparent = paramBoolean; }
  
  public void setReparentWithOverlay(boolean paramBoolean) { this.mUseOverlay = paramBoolean; }
}
