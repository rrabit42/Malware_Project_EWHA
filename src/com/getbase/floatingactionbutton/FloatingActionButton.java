package com.getbase.floatingactionbutton;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.LayerDrawable;
import android.graphics.drawable.ShapeDrawable;
import android.graphics.drawable.StateListDrawable;
import android.graphics.drawable.shapes.OvalShape;
import android.os.Build;
import android.support.annotation.ColorRes;
import android.support.annotation.DimenRes;
import android.support.annotation.DrawableRes;
import android.support.annotation.NonNull;
import android.util.AttributeSet;
import android.widget.ImageButton;
import android.widget.TextView;

public class FloatingActionButton extends ImageButton {
  public static final int SIZE_MINI = 1;
  
  public static final int SIZE_NORMAL = 0;
  
  private float mCircleSize;
  
  int mColorDisabled;
  
  int mColorNormal;
  
  int mColorPressed;
  
  private int mDrawableSize;
  
  @DrawableRes
  private int mIcon;
  
  private Drawable mIconDrawable;
  
  private float mShadowOffset;
  
  private float mShadowRadius;
  
  private int mSize;
  
  boolean mStrokeVisible;
  
  String mTitle;
  
  public FloatingActionButton(Context paramContext) { this(paramContext, null); }
  
  public FloatingActionButton(Context paramContext, AttributeSet paramAttributeSet) {
    super(paramContext, paramAttributeSet);
    init(paramContext, paramAttributeSet);
  }
  
  public FloatingActionButton(Context paramContext, AttributeSet paramAttributeSet, int paramInt) {
    super(paramContext, paramAttributeSet, paramInt);
    init(paramContext, paramAttributeSet);
  }
  
  private int adjustColorBrightness(int paramInt, float paramFloat) {
    float[] arrayOfFloat = new float[3];
    Color.colorToHSV(paramInt, arrayOfFloat);
    arrayOfFloat[2] = Math.min(arrayOfFloat[2] * paramFloat, 1.0F);
    return Color.HSVToColor(Color.alpha(paramInt), arrayOfFloat);
  }
  
  private Drawable createCircleDrawable(int paramInt, float paramFloat) {
    int i = Color.alpha(paramInt);
    paramInt = opaque(paramInt);
    ShapeDrawable shapeDrawable = new ShapeDrawable(new OvalShape());
    Paint paint = shapeDrawable.getPaint();
    paint.setAntiAlias(true);
    paint.setColor(paramInt);
    Drawable[] arrayOfDrawable = new Drawable[2];
    arrayOfDrawable[0] = shapeDrawable;
    arrayOfDrawable[1] = createInnerStrokesDrawable(paramInt, paramFloat);
    if (i == 255 || !this.mStrokeVisible) {
      LayerDrawable layerDrawable = new LayerDrawable(arrayOfDrawable);
      paramInt = (int)(paramFloat / 2.0F);
      layerDrawable.setLayerInset(1, paramInt, paramInt, paramInt, paramInt);
      return layerDrawable;
    } 
    TranslucentLayerDrawable translucentLayerDrawable = new TranslucentLayerDrawable(i, arrayOfDrawable);
    paramInt = (int)(paramFloat / 2.0F);
    translucentLayerDrawable.setLayerInset(1, paramInt, paramInt, paramInt, paramInt);
    return translucentLayerDrawable;
  }
  
  private StateListDrawable createFillDrawable(float paramFloat) {
    StateListDrawable stateListDrawable = new StateListDrawable();
    Drawable drawable = createCircleDrawable(this.mColorDisabled, paramFloat);
    stateListDrawable.addState(new int[] { -16842910 }, drawable);
    drawable = createCircleDrawable(this.mColorPressed, paramFloat);
    stateListDrawable.addState(new int[] { 16842919 }, drawable);
    drawable = createCircleDrawable(this.mColorNormal, paramFloat);
    stateListDrawable.addState(new int[0], drawable);
    return stateListDrawable;
  }
  
  private Drawable createInnerStrokesDrawable(int paramInt, float paramFloat) {
    if (!this.mStrokeVisible)
      return new ColorDrawable(0); 
    ShapeDrawable shapeDrawable = new ShapeDrawable(new OvalShape());
    int i = darkenColor(paramInt);
    int j = halfTransparent(i);
    int k = lightenColor(paramInt);
    int m = halfTransparent(k);
    Paint paint = shapeDrawable.getPaint();
    paint.setAntiAlias(true);
    paint.setStrokeWidth(paramFloat);
    paint.setStyle(Paint.Style.STROKE);
    shapeDrawable.setShaderFactory(new Object(this, k, m, paramInt, j, i));
    return shapeDrawable;
  }
  
  private Drawable createOuterStrokeDrawable(float paramFloat) {
    ShapeDrawable shapeDrawable = new ShapeDrawable(new OvalShape());
    Paint paint = shapeDrawable.getPaint();
    paint.setAntiAlias(true);
    paint.setStrokeWidth(paramFloat);
    paint.setStyle(Paint.Style.STROKE);
    paint.setColor(-16777216);
    paint.setAlpha(opacityToAlpha(0.02F));
    return shapeDrawable;
  }
  
  private int darkenColor(int paramInt) { return adjustColorBrightness(paramInt, 0.9F); }
  
  private int halfTransparent(int paramInt) { return Color.argb(Color.alpha(paramInt) / 2, Color.red(paramInt), Color.green(paramInt), Color.blue(paramInt)); }
  
  private int lightenColor(int paramInt) { return adjustColorBrightness(paramInt, 1.1F); }
  
  private int opacityToAlpha(float paramFloat) { return (int)(paramFloat * 255.0F); }
  
  private int opaque(int paramInt) { return Color.rgb(Color.red(paramInt), Color.green(paramInt), Color.blue(paramInt)); }
  
  @SuppressLint({"NewApi"})
  private void setBackgroundCompat(Drawable paramDrawable) {
    if (Build.VERSION.SDK_INT >= 16) {
      setBackground(paramDrawable);
      return;
    } 
    setBackgroundDrawable(paramDrawable);
  }
  
  private void updateCircleSize() {
    int i;
    if (this.mSize == 0) {
      i = R.dimen.fab_size_normal;
    } else {
      i = R.dimen.fab_size_mini;
    } 
    this.mCircleSize = getDimension(i);
  }
  
  private void updateDrawableSize() { this.mDrawableSize = (int)(this.mCircleSize + this.mShadowRadius * 2.0F); }
  
  int getColor(@ColorRes int paramInt) { return getResources().getColor(paramInt); }
  
  public int getColorDisabled() { return this.mColorDisabled; }
  
  public int getColorNormal() { return this.mColorNormal; }
  
  public int getColorPressed() { return this.mColorPressed; }
  
  float getDimension(@DimenRes int paramInt) { return getResources().getDimension(paramInt); }
  
  Drawable getIconDrawable() {
    Drawable drawable = this.mIconDrawable;
    return (drawable != null) ? drawable : ((this.mIcon != 0) ? getResources().getDrawable(this.mIcon) : new ColorDrawable(0));
  }
  
  TextView getLabelView() { return (TextView)getTag(R.id.fab_label); }
  
  public int getSize() { return this.mSize; }
  
  public String getTitle() { return this.mTitle; }
  
  void init(Context paramContext, AttributeSet paramAttributeSet) {
    TypedArray typedArray = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.FloatingActionButton, 0, 0);
    this.mColorNormal = typedArray.getColor(R.styleable.FloatingActionButton_fab_colorNormal, getColor(17170451));
    this.mColorPressed = typedArray.getColor(R.styleable.FloatingActionButton_fab_colorPressed, getColor(17170450));
    this.mColorDisabled = typedArray.getColor(R.styleable.FloatingActionButton_fab_colorDisabled, getColor(17170432));
    this.mSize = typedArray.getInt(R.styleable.FloatingActionButton_fab_size, 0);
    this.mIcon = typedArray.getResourceId(R.styleable.FloatingActionButton_fab_icon, 0);
    this.mTitle = typedArray.getString(R.styleable.FloatingActionButton_fab_title);
    this.mStrokeVisible = typedArray.getBoolean(R.styleable.FloatingActionButton_fab_stroke_visible, true);
    typedArray.recycle();
    updateCircleSize();
    this.mShadowRadius = getDimension(R.dimen.fab_shadow_radius);
    this.mShadowOffset = getDimension(R.dimen.fab_shadow_offset);
    updateDrawableSize();
    updateBackground();
  }
  
  public boolean isStrokeVisible() { return this.mStrokeVisible; }
  
  protected void onMeasure(int paramInt1, int paramInt2) {
    super.onMeasure(paramInt1, paramInt2);
    paramInt1 = this.mDrawableSize;
    setMeasuredDimension(paramInt1, paramInt1);
  }
  
  public void setColorDisabled(int paramInt) {
    if (this.mColorDisabled != paramInt) {
      this.mColorDisabled = paramInt;
      updateBackground();
    } 
  }
  
  public void setColorDisabledResId(@ColorRes int paramInt) { setColorDisabled(getColor(paramInt)); }
  
  public void setColorNormal(int paramInt) {
    if (this.mColorNormal != paramInt) {
      this.mColorNormal = paramInt;
      updateBackground();
    } 
  }
  
  public void setColorNormalResId(@ColorRes int paramInt) { setColorNormal(getColor(paramInt)); }
  
  public void setColorPressed(int paramInt) {
    if (this.mColorPressed != paramInt) {
      this.mColorPressed = paramInt;
      updateBackground();
    } 
  }
  
  public void setColorPressedResId(@ColorRes int paramInt) { setColorPressed(getColor(paramInt)); }
  
  public void setIcon(@DrawableRes int paramInt) {
    if (this.mIcon != paramInt) {
      this.mIcon = paramInt;
      this.mIconDrawable = null;
      updateBackground();
    } 
  }
  
  public void setIconDrawable(@NonNull Drawable paramDrawable) {
    if (this.mIconDrawable != paramDrawable) {
      this.mIcon = 0;
      this.mIconDrawable = paramDrawable;
      updateBackground();
    } 
  }
  
  public void setSize(int paramInt) {
    if (paramInt == 1 || paramInt == 0) {
      if (this.mSize != paramInt) {
        this.mSize = paramInt;
        updateCircleSize();
        updateDrawableSize();
        updateBackground();
      } 
      return;
    } 
    throw new IllegalArgumentException("Use @FAB_SIZE constants only!");
  }
  
  public void setStrokeVisible(boolean paramBoolean) {
    if (this.mStrokeVisible != paramBoolean) {
      this.mStrokeVisible = paramBoolean;
      updateBackground();
    } 
  }
  
  public void setTitle(String paramString) {
    this.mTitle = paramString;
    TextView textView = getLabelView();
    if (textView != null)
      textView.setText(paramString); 
  }
  
  public void setVisibility(int paramInt) {
    TextView textView = getLabelView();
    if (textView != null)
      textView.setVisibility(paramInt); 
    super.setVisibility(paramInt);
  }
  
  void updateBackground() {
    float f2 = getDimension(R.dimen.fab_stroke_width);
    float f1 = f2 / 2.0F;
    Resources resources = getResources();
    if (this.mSize == 0) {
      i = R.drawable.fab_bg_normal;
    } else {
      i = R.drawable.fab_bg_mini;
    } 
    LayerDrawable layerDrawable = new LayerDrawable(new Drawable[] { resources.getDrawable(i), createFillDrawable(f2), createOuterStrokeDrawable(f2), getIconDrawable() });
    int i = (int)(this.mCircleSize - getDimension(R.dimen.fab_icon_size)) / 2;
    f2 = this.mShadowRadius;
    int m = (int)f2;
    float f3 = this.mShadowOffset;
    int j = (int)(f2 - f3);
    int k = (int)(f2 + f3);
    layerDrawable.setLayerInset(1, m, j, m, k);
    int n = (int)(m - f1);
    layerDrawable.setLayerInset(2, n, (int)(j - f1), n, (int)(k - f1));
    m += i;
    layerDrawable.setLayerInset(3, m, j + i, m, k + i);
    setBackgroundCompat(layerDrawable);
  }
}
