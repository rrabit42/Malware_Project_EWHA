package com.google.android.gms.internal.ads;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

final class zzbbg<FieldDescriptorType extends zzbbi<FieldDescriptorType>> extends Object {
  private static final zzbbg zzdra = new zzbbg(true);
  
  private final zzbdp<FieldDescriptorType, Object> zzdqx = zzbdp.zzcx(16);
  
  private boolean zzdqy;
  
  private boolean zzdqz = false;
  
  private zzbbg() {}
  
  private zzbbg(boolean paramBoolean) { zzaaz(); }
  
  static int zza(zzbes paramzzbes, int paramInt, Object paramObject) {
    int i = zzbav.zzcd(paramInt);
    paramInt = i;
    if (paramzzbes == zzbes.zzeaj) {
      zzbbq.zzi((zzbcu)paramObject);
      paramInt = i << 1;
    } 
    return paramInt + zzb(paramzzbes, paramObject);
  }
  
  private final Object zza(FieldDescriptorType paramFieldDescriptorType) {
    Object object = this.zzdqx.get(paramFieldDescriptorType);
    paramFieldDescriptorType = (FieldDescriptorType)object;
    if (object instanceof zzbbx)
      paramFieldDescriptorType = (FieldDescriptorType)zzbbx.zzadu(); 
    return paramFieldDescriptorType;
  }
  
  static void zza(zzbav paramzzbav, zzbes paramzzbes, int paramInt, Object paramObject) throws IOException {
    zzbcu zzbcu;
    byte[] arrayOfByte;
    if (paramzzbes == zzbes.zzeaj) {
      zzbcu = (zzbcu)paramObject;
      zzbbq.zzi(zzbcu);
      paramzzbav.zzl(paramInt, 3);
      zzbcu.zzb(paramzzbav);
      paramzzbav.zzl(paramInt, 4);
      return;
    } 
    paramzzbav.zzl(paramInt, zzbcu.zzagm());
    switch (zzbbh.zzdql[zzbcu.ordinal()]) {
      default:
        return;
      case 18:
        if (paramObject instanceof zzbbr) {
          paramzzbav.zzbz(((zzbbr)paramObject).zzhq());
          return;
        } 
        paramzzbav.zzbz(((Integer)paramObject).intValue());
        return;
      case 17:
        paramzzbav.zzn(((Long)paramObject).longValue());
        return;
      case 16:
        paramzzbav.zzcb(((Integer)paramObject).intValue());
        return;
      case 15:
        paramzzbav.zzo(((Long)paramObject).longValue());
        return;
      case 14:
        paramzzbav.zzcc(((Integer)paramObject).intValue());
        return;
      case 13:
        paramzzbav.zzca(((Integer)paramObject).intValue());
        return;
      case 12:
        if (paramObject instanceof zzbah) {
          paramzzbav.zzan((zzbah)paramObject);
          return;
        } 
        arrayOfByte = (byte[])paramObject;
        paramzzbav.zze(arrayOfByte, 0, arrayOfByte.length);
        return;
      case 11:
        if (paramObject instanceof zzbah) {
          paramzzbav.zzan((zzbah)paramObject);
          return;
        } 
        paramzzbav.zzen((String)paramObject);
        return;
      case 10:
        paramzzbav.zze((zzbcu)paramObject);
        return;
      case 9:
        ((zzbcu)paramObject).zzb(paramzzbav);
        return;
      case 8:
        paramzzbav.zzap(((Boolean)paramObject).booleanValue());
        return;
      case 7:
        paramzzbav.zzcc(((Integer)paramObject).intValue());
        return;
      case 6:
        paramzzbav.zzo(((Long)paramObject).longValue());
        return;
      case 5:
        paramzzbav.zzbz(((Integer)paramObject).intValue());
        return;
      case 4:
        paramzzbav.zzm(((Long)paramObject).longValue());
        return;
      case 3:
        paramzzbav.zzm(((Long)paramObject).longValue());
        return;
      case 2:
        paramzzbav.zzb(((Float)paramObject).floatValue());
        return;
      case 1:
        break;
    } 
    paramzzbav.zzb(((Double)paramObject).doubleValue());
  }
  
  private final void zza(FieldDescriptorType paramFieldDescriptorType, Object paramObject) {
    if (paramFieldDescriptorType.zzada()) {
      if (paramObject instanceof List) {
        ArrayList arrayList = new ArrayList();
        arrayList.addAll((List)paramObject);
        paramObject = (ArrayList)arrayList;
        int i = paramObject.size();
        byte b = 0;
        while (b < i) {
          Object object = paramObject.get(b);
          b++;
          zza(paramFieldDescriptorType.zzacy(), object);
        } 
        paramObject = arrayList;
      } else {
        throw new IllegalArgumentException("Wrong object type used with protocol message reflection.");
      } 
    } else {
      zza(paramFieldDescriptorType.zzacy(), paramObject);
    } 
    if (paramObject instanceof zzbbx)
      this.zzdqz = true; 
    this.zzdqx.zza(paramFieldDescriptorType, paramObject);
  }
  
  private static void zza(zzbes paramzzbes, Object paramObject) { // Byte code:
    //   0: aload_1
    //   1: invokestatic checkNotNull : (Ljava/lang/Object;)Ljava/lang/Object;
    //   4: pop
    //   5: getstatic com/google/android/gms/internal/ads/zzbbh.zzdrb : [I
    //   8: aload_0
    //   9: invokevirtual zzagl : ()Lcom/google/android/gms/internal/ads/zzbex;
    //   12: invokevirtual ordinal : ()I
    //   15: iaload
    //   16: istore_2
    //   17: iconst_0
    //   18: istore_3
    //   19: iload_2
    //   20: tableswitch default -> 72, 1 -> 168, 2 -> 160, 3 -> 152, 4 -> 144, 5 -> 136, 6 -> 128, 7 -> 111, 8 -> 92, 9 -> 75
    //   72: goto -> 173
    //   75: aload_1
    //   76: instanceof com/google/android/gms/internal/ads/zzbcu
    //   79: ifne -> 106
    //   82: aload_1
    //   83: instanceof com/google/android/gms/internal/ads/zzbbx
    //   86: ifeq -> 173
    //   89: goto -> 106
    //   92: aload_1
    //   93: instanceof java/lang/Integer
    //   96: ifne -> 106
    //   99: aload_1
    //   100: instanceof com/google/android/gms/internal/ads/zzbbr
    //   103: ifeq -> 173
    //   106: iconst_1
    //   107: istore_3
    //   108: goto -> 173
    //   111: aload_1
    //   112: instanceof com/google/android/gms/internal/ads/zzbah
    //   115: ifne -> 106
    //   118: aload_1
    //   119: instanceof [B
    //   122: ifeq -> 173
    //   125: goto -> 106
    //   128: aload_1
    //   129: instanceof java/lang/String
    //   132: istore_3
    //   133: goto -> 173
    //   136: aload_1
    //   137: instanceof java/lang/Boolean
    //   140: istore_3
    //   141: goto -> 173
    //   144: aload_1
    //   145: instanceof java/lang/Double
    //   148: istore_3
    //   149: goto -> 173
    //   152: aload_1
    //   153: instanceof java/lang/Float
    //   156: istore_3
    //   157: goto -> 173
    //   160: aload_1
    //   161: instanceof java/lang/Long
    //   164: istore_3
    //   165: goto -> 173
    //   168: aload_1
    //   169: instanceof java/lang/Integer
    //   172: istore_3
    //   173: iload_3
    //   174: ifeq -> 178
    //   177: return
    //   178: new java/lang/IllegalArgumentException
    //   181: dup
    //   182: ldc 'Wrong object type used with protocol message reflection.'
    //   184: invokespecial <init> : (Ljava/lang/String;)V
    //   187: astore_0
    //   188: goto -> 193
    //   191: aload_0
    //   192: athrow
    //   193: goto -> 191 }
  
  public static <T extends zzbbi<T>> zzbbg<T> zzacv() { return zzdra; }
  
  private static int zzb(zzbbi<?> paramzzbbi, Object paramObject) {
    zzbes zzbes = paramzzbbi.zzacy();
    int i = paramzzbbi.zzhq();
    if (paramzzbbi.zzada()) {
      boolean bool = paramzzbbi.zzadb();
      int k = 0;
      int j = 0;
      if (bool) {
        Iterator iterator1 = ((List)paramObject).iterator();
        while (iterator1.hasNext())
          j += zzb(zzbes, iterator1.next()); 
        return zzbav.zzcd(i) + j + zzbav.zzcl(j);
      } 
      Iterator iterator = ((List)paramObject).iterator();
      for (j = k; iterator.hasNext(); j += zza(zzbes, i, iterator.next()));
      return j;
    } 
    return zza(zzbes, i, paramObject);
  }
  
  private static int zzb(zzbes paramzzbes, Object paramObject) {
    switch (zzbbh.zzdql[paramzzbes.ordinal()]) {
      default:
        throw new RuntimeException("There is no way to get here, but the compiler thinks otherwise.");
      case 18:
        return (paramObject instanceof zzbbr) ? zzbav.zzcj(((zzbbr)paramObject).zzhq()) : zzbav.zzcj(((Integer)paramObject).intValue());
      case 17:
        return zzbav.zzr(((Long)paramObject).longValue());
      case 16:
        return zzbav.zzcg(((Integer)paramObject).intValue());
      case 15:
        return zzbav.zzt(((Long)paramObject).longValue());
      case 14:
        return zzbav.zzci(((Integer)paramObject).intValue());
      case 13:
        return zzbav.zzcf(((Integer)paramObject).intValue());
      case 12:
        return (paramObject instanceof zzbah) ? zzbav.zzao((zzbah)paramObject) : zzbav.zzr((byte[])paramObject);
      case 11:
        return (paramObject instanceof zzbah) ? zzbav.zzao((zzbah)paramObject) : zzbav.zzeo((String)paramObject);
      case 10:
        return (paramObject instanceof zzbbx) ? zzbav.zza((zzbbx)paramObject) : zzbav.zzf((zzbcu)paramObject);
      case 9:
        return zzbav.zzg((zzbcu)paramObject);
      case 8:
        return zzbav.zzaq(((Boolean)paramObject).booleanValue());
      case 7:
        return zzbav.zzch(((Integer)paramObject).intValue());
      case 6:
        return zzbav.zzs(((Long)paramObject).longValue());
      case 5:
        return zzbav.zzce(((Integer)paramObject).intValue());
      case 4:
        return zzbav.zzq(((Long)paramObject).longValue());
      case 3:
        return zzbav.zzp(((Long)paramObject).longValue());
      case 2:
        return zzbav.zzc(((Float)paramObject).floatValue());
      case 1:
        break;
    } 
    return zzbav.zzc(((Double)paramObject).doubleValue());
  }
  
  private static boolean zzb(Map.Entry<FieldDescriptorType, Object> paramEntry) {
    zzbbi zzbbi = (zzbbi)paramEntry.getKey();
    if (zzbbi.zzacz() == zzbex.zzebd) {
      Iterator iterator;
      if (zzbbi.zzada()) {
        iterator = ((List)paramEntry.getValue()).iterator();
        while (iterator.hasNext()) {
          if (!((zzbcu)iterator.next()).isInitialized())
            return false; 
        } 
      } else {
        Object object = iterator.getValue();
        if (object instanceof zzbcu) {
          if (!((zzbcu)object).isInitialized())
            return false; 
        } else {
          if (object instanceof zzbbx)
            return true; 
          throw new IllegalArgumentException("Wrong object type used with protocol message reflection.");
        } 
      } 
    } 
    return true;
  }
  
  private final void zzc(Map.Entry<FieldDescriptorType, Object> paramEntry) {
    zzbbi zzbbi = (zzbbi)paramEntry.getKey();
    Object object2 = paramEntry.getValue();
    Object object1 = object2;
    if (object2 instanceof zzbbx)
      object1 = zzbbx.zzadu(); 
    if (zzbbi.zzada()) {
      object = zza(zzbbi);
      object2 = object;
      if (object == null)
        object2 = new ArrayList(); 
      for (Object object : (List)object1)
        ((List)object2).add(zzp(object)); 
      this.zzdqx.zza(zzbbi, object2);
      return;
    } 
    if (zzbbi.zzacz() == zzbex.zzebd) {
      object2 = zza(zzbbi);
      if (object2 == null) {
        this.zzdqx.zza(zzbbi, zzp(object1));
        return;
      } 
      if (object2 instanceof zzbdb) {
        object1 = zzbbi.zza((zzbdb)object2, (zzbdb)object1);
      } else {
        object1 = zzbbi.zza(((zzbcu)object2).zzade(), (zzbcu)object1).zzadk();
      } 
      this.zzdqx.zza(zzbbi, object1);
      return;
    } 
    this.zzdqx.zza(zzbbi, zzp(object1));
  }
  
  private static int zzd(Map.Entry<FieldDescriptorType, Object> paramEntry) {
    zzbbi zzbbi = (zzbbi)paramEntry.getKey();
    Object object = paramEntry.getValue();
    return (zzbbi.zzacz() == zzbex.zzebd && !zzbbi.zzada() && !zzbbi.zzadb()) ? ((object instanceof zzbbx) ? zzbav.zzb(((zzbbi)paramEntry.getKey()).zzhq(), (zzbbx)object) : zzbav.zzb(((zzbbi)paramEntry.getKey()).zzhq(), (zzbcu)object)) : zzb(zzbbi, object);
  }
  
  private static Object zzp(Object paramObject) {
    byte[] arrayOfByte;
    if (paramObject instanceof zzbdb)
      return ((zzbdb)paramObject).zzaek(); 
    if (paramObject instanceof byte[]) {
      arrayOfByte = (byte[])paramObject;
      byte[] arrayOfByte1 = new byte[arrayOfByte.length];
      System.arraycopy(arrayOfByte, 0, arrayOfByte1, 0, arrayOfByte.length);
      return arrayOfByte1;
    } 
    return arrayOfByte;
  }
  
  final Iterator<Map.Entry<FieldDescriptorType, Object>> descendingIterator() { return this.zzdqz ? new zzbca(this.zzdqx.zzafu().iterator()) : this.zzdqx.zzafu().iterator(); }
  
  public final boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (!(paramObject instanceof zzbbg))
      return false; 
    paramObject = (zzbbg)paramObject;
    return this.zzdqx.equals(paramObject.zzdqx);
  }
  
  public final int hashCode() { return this.zzdqx.hashCode(); }
  
  final boolean isEmpty() { return this.zzdqx.isEmpty(); }
  
  public final boolean isImmutable() { return this.zzdqy; }
  
  public final boolean isInitialized() {
    for (byte b = 0; b < this.zzdqx.zzafs(); b++) {
      if (!zzb(this.zzdqx.zzcy(b)))
        return false; 
    } 
    Iterator iterator = this.zzdqx.zzaft().iterator();
    while (iterator.hasNext()) {
      if (!zzb((Map.Entry)iterator.next()))
        return false; 
    } 
    return true;
  }
  
  public final Iterator<Map.Entry<FieldDescriptorType, Object>> iterator() { return this.zzdqz ? new zzbca(this.zzdqx.entrySet().iterator()) : this.zzdqx.entrySet().iterator(); }
  
  public final void zza(zzbbg<FieldDescriptorType> paramzzbbg) {
    for (byte b = 0; b < paramzzbbg.zzdqx.zzafs(); b++)
      zzc(paramzzbbg.zzdqx.zzcy(b)); 
    Iterator iterator = paramzzbbg.zzdqx.zzaft().iterator();
    while (iterator.hasNext())
      zzc((Map.Entry)iterator.next()); 
  }
  
  public final void zzaaz() {
    if (this.zzdqy)
      return; 
    this.zzdqx.zzaaz();
    this.zzdqy = true;
  }
  
  public final int zzacw() {
    byte b = 0;
    int i = 0;
    while (b < this.zzdqx.zzafs()) {
      Map.Entry entry = this.zzdqx.zzcy(b);
      i += zzb((zzbbi)entry.getKey(), entry.getValue());
      b++;
    } 
    for (Map.Entry entry : this.zzdqx.zzaft())
      i += zzb((zzbbi)entry.getKey(), entry.getValue()); 
    return i;
  }
  
  public final int zzacx() {
    byte b = 0;
    int i = 0;
    while (b < this.zzdqx.zzafs()) {
      i += zzd(this.zzdqx.zzcy(b));
      b++;
    } 
    Iterator iterator = this.zzdqx.zzaft().iterator();
    while (iterator.hasNext())
      i += zzd((Map.Entry)iterator.next()); 
    return i;
  }
}
