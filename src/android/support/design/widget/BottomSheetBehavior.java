package android.support.design.widget;

import android.content.Context;
import android.content.res.TypedArray;
import android.os.Build;
import android.os.Parcelable;
import android.support.annotation.NonNull;
import android.support.annotation.VisibleForTesting;
import android.support.design.R;
import android.support.v4.view.ViewCompat;
import android.support.v4.widget.ViewDragHelper;
import android.util.AttributeSet;
import android.util.TypedValue;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewParent;
import java.lang.ref.WeakReference;
import java.util.HashMap;
import java.util.Map;

public class BottomSheetBehavior<V extends View> extends CoordinatorLayout.Behavior<V> {
  private static final float HIDE_FRICTION = 0.1F;
  
  private static final float HIDE_THRESHOLD = 0.5F;
  
  public static final int PEEK_HEIGHT_AUTO = -1;
  
  public static final int STATE_COLLAPSED = 4;
  
  public static final int STATE_DRAGGING = 1;
  
  public static final int STATE_EXPANDED = 3;
  
  public static final int STATE_HALF_EXPANDED = 6;
  
  public static final int STATE_HIDDEN = 5;
  
  public static final int STATE_SETTLING = 2;
  
  int activePointerId;
  
  private BottomSheetCallback callback;
  
  int collapsedOffset;
  
  private final ViewDragHelper.Callback dragCallback = new Object(this);
  
  private boolean fitToContents = true;
  
  int fitToContentsOffset;
  
  int halfExpandedOffset;
  
  boolean hideable;
  
  private boolean ignoreEvents;
  
  private Map<View, Integer> importantForAccessibilityMap;
  
  private int initialY;
  
  private int lastNestedScrollDy;
  
  private int lastPeekHeight;
  
  private float maximumVelocity;
  
  private boolean nestedScrolled;
  
  WeakReference<View> nestedScrollingChildRef;
  
  int parentHeight;
  
  private int peekHeight;
  
  private boolean peekHeightAuto;
  
  private int peekHeightMin;
  
  private boolean skipCollapsed;
  
  int state = 4;
  
  boolean touchingScrollingChild;
  
  private VelocityTracker velocityTracker;
  
  ViewDragHelper viewDragHelper;
  
  WeakReference<V> viewRef;
  
  public BottomSheetBehavior() {}
  
  public BottomSheetBehavior(Context paramContext, AttributeSet paramAttributeSet) {
    super(paramContext, paramAttributeSet);
    TypedArray typedArray = paramContext.obtainStyledAttributes(paramAttributeSet, R.styleable.BottomSheetBehavior_Layout);
    TypedValue typedValue = typedArray.peekValue(R.styleable.BottomSheetBehavior_Layout_behavior_peekHeight);
    if (typedValue != null && typedValue.data == -1) {
      setPeekHeight(typedValue.data);
    } else {
      setPeekHeight(typedArray.getDimensionPixelSize(R.styleable.BottomSheetBehavior_Layout_behavior_peekHeight, -1));
    } 
    setHideable(typedArray.getBoolean(R.styleable.BottomSheetBehavior_Layout_behavior_hideable, false));
    setFitToContents(typedArray.getBoolean(R.styleable.BottomSheetBehavior_Layout_behavior_fitToContents, true));
    setSkipCollapsed(typedArray.getBoolean(R.styleable.BottomSheetBehavior_Layout_behavior_skipCollapsed, false));
    typedArray.recycle();
    this.maximumVelocity = ViewConfiguration.get(paramContext).getScaledMaximumFlingVelocity();
  }
  
  private void calculateCollapsedOffset() {
    if (this.fitToContents) {
      this.collapsedOffset = Math.max(this.parentHeight - this.lastPeekHeight, this.fitToContentsOffset);
      return;
    } 
    this.collapsedOffset = this.parentHeight - this.lastPeekHeight;
  }
  
  public static <V extends View> BottomSheetBehavior<V> from(V paramV) {
    paramV = (V)paramV.getLayoutParams();
    if (paramV instanceof CoordinatorLayout.LayoutParams) {
      paramV = (V)((CoordinatorLayout.LayoutParams)paramV).getBehavior();
      if (paramV instanceof BottomSheetBehavior)
        return (BottomSheetBehavior)paramV; 
      throw new IllegalArgumentException("The view is not associated with BottomSheetBehavior");
    } 
    throw new IllegalArgumentException("The view is not a child of CoordinatorLayout");
  }
  
  private int getExpandedOffset() { return this.fitToContents ? this.fitToContentsOffset : 0; }
  
  private float getYVelocity() {
    VelocityTracker velocityTracker1 = this.velocityTracker;
    if (velocityTracker1 == null)
      return 0.0F; 
    velocityTracker1.computeCurrentVelocity(1000, this.maximumVelocity);
    return this.velocityTracker.getYVelocity(this.activePointerId);
  }
  
  private void reset() {
    this.activePointerId = -1;
    VelocityTracker velocityTracker1 = this.velocityTracker;
    if (velocityTracker1 != null) {
      velocityTracker1.recycle();
      this.velocityTracker = null;
    } 
  }
  
  private void updateImportantForAccessibility(boolean paramBoolean) {
    WeakReference weakReference = this.viewRef;
    if (weakReference == null)
      return; 
    ViewParent viewParent = ((View)weakReference.get()).getParent();
    if (!(viewParent instanceof CoordinatorLayout))
      return; 
    CoordinatorLayout coordinatorLayout = (CoordinatorLayout)viewParent;
    int i = coordinatorLayout.getChildCount();
    if (Build.VERSION.SDK_INT >= 16 && paramBoolean)
      if (this.importantForAccessibilityMap == null) {
        this.importantForAccessibilityMap = new HashMap(i);
      } else {
        return;
      }  
    for (byte b = 0; b < i; b++) {
      View view = coordinatorLayout.getChildAt(b);
      if (view != this.viewRef.get())
        if (!paramBoolean) {
          Map map = this.importantForAccessibilityMap;
          if (map != null && map.containsKey(view))
            ViewCompat.setImportantForAccessibility(view, ((Integer)this.importantForAccessibilityMap.get(view)).intValue()); 
        } else {
          if (Build.VERSION.SDK_INT >= 16)
            this.importantForAccessibilityMap.put(view, Integer.valueOf(view.getImportantForAccessibility())); 
          ViewCompat.setImportantForAccessibility(view, 4);
        }  
    } 
    if (!paramBoolean)
      this.importantForAccessibilityMap = null; 
  }
  
  void dispatchOnSlide(int paramInt) {
    View view = (View)this.viewRef.get();
    if (view != null) {
      BottomSheetCallback bottomSheetCallback = this.callback;
      if (bottomSheetCallback != null) {
        int i = this.collapsedOffset;
        if (paramInt > i) {
          bottomSheetCallback.onSlide(view, (i - paramInt) / (this.parentHeight - i));
          return;
        } 
        bottomSheetCallback.onSlide(view, (i - paramInt) / (i - getExpandedOffset()));
      } 
    } 
  }
  
  @VisibleForTesting
  View findScrollingChild(View paramView) {
    if (ViewCompat.isNestedScrollingEnabled(paramView))
      return paramView; 
    if (paramView instanceof ViewGroup) {
      ViewGroup viewGroup = (ViewGroup)paramView;
      byte b = 0;
      int i = viewGroup.getChildCount();
      while (b < i) {
        View view = findScrollingChild(viewGroup.getChildAt(b));
        if (view != null)
          return view; 
        b++;
      } 
    } 
    return null;
  }
  
  public final int getPeekHeight() { return this.peekHeightAuto ? -1 : this.peekHeight; }
  
  @VisibleForTesting
  int getPeekHeightMin() { return this.peekHeightMin; }
  
  public boolean getSkipCollapsed() { return this.skipCollapsed; }
  
  public final int getState() { return this.state; }
  
  public boolean isFitToContents() { return this.fitToContents; }
  
  public boolean isHideable() { return this.hideable; }
  
  public boolean onInterceptTouchEvent(CoordinatorLayout paramCoordinatorLayout, V paramV, MotionEvent paramMotionEvent) {
    boolean bool = paramV.isShown();
    boolean bool1 = false;
    if (!bool) {
      this.ignoreEvents = true;
      return false;
    } 
    int i = paramMotionEvent.getActionMasked();
    if (i == 0)
      reset(); 
    if (this.velocityTracker == null)
      this.velocityTracker = VelocityTracker.obtain(); 
    this.velocityTracker.addMovement(paramMotionEvent);
    Object object = null;
    if (i != 0) {
      if (i == 1 || i == 3) {
        this.touchingScrollingChild = false;
        this.activePointerId = -1;
        if (this.ignoreEvents) {
          this.ignoreEvents = false;
          return false;
        } 
      } 
    } else {
      int j = (int)paramMotionEvent.getX();
      this.initialY = (int)paramMotionEvent.getY();
      WeakReference weakReference1 = this.nestedScrollingChildRef;
      if (weakReference1 != null) {
        View view = (View)weakReference1.get();
      } else {
        weakReference1 = null;
      } 
      if (weakReference1 != null && paramCoordinatorLayout.isPointInChildBounds(weakReference1, j, this.initialY)) {
        this.activePointerId = paramMotionEvent.getPointerId(paramMotionEvent.getActionIndex());
        this.touchingScrollingChild = true;
      } 
      if (this.activePointerId == -1 && !paramCoordinatorLayout.isPointInChildBounds(paramV, j, this.initialY)) {
        bool = true;
      } else {
        bool = false;
      } 
      this.ignoreEvents = bool;
    } 
    if (!this.ignoreEvents) {
      paramV = (V)this.viewDragHelper;
      if (paramV != null && paramV.shouldInterceptTouchEvent(paramMotionEvent))
        return true; 
    } 
    WeakReference weakReference = this.nestedScrollingChildRef;
    paramV = (V)object;
    if (weakReference != null)
      paramV = (V)(View)weakReference.get(); 
    bool = bool1;
    if (i == 2) {
      bool = bool1;
      if (paramV != null) {
        bool = bool1;
        if (!this.ignoreEvents) {
          bool = bool1;
          if (this.state != 1) {
            bool = bool1;
            if (!paramCoordinatorLayout.isPointInChildBounds(paramV, (int)paramMotionEvent.getX(), (int)paramMotionEvent.getY())) {
              bool = bool1;
              if (this.viewDragHelper != null) {
                bool = bool1;
                if (Math.abs(this.initialY - paramMotionEvent.getY()) > this.viewDragHelper.getTouchSlop())
                  bool = true; 
              } 
            } 
          } 
        } 
      } 
    } 
    return bool;
  }
  
  public boolean onLayoutChild(CoordinatorLayout paramCoordinatorLayout, V paramV, int paramInt) {
    if (ViewCompat.getFitsSystemWindows(paramCoordinatorLayout) && !ViewCompat.getFitsSystemWindows(paramV))
      paramV.setFitsSystemWindows(true); 
    int i = paramV.getTop();
    paramCoordinatorLayout.onLayoutChild(paramV, paramInt);
    this.parentHeight = paramCoordinatorLayout.getHeight();
    if (this.peekHeightAuto) {
      if (this.peekHeightMin == 0)
        this.peekHeightMin = paramCoordinatorLayout.getResources().getDimensionPixelSize(R.dimen.design_bottom_sheet_peek_height_min); 
      this.lastPeekHeight = Math.max(this.peekHeightMin, this.parentHeight - paramCoordinatorLayout.getWidth() * 9 / 16);
    } else {
      this.lastPeekHeight = this.peekHeight;
    } 
    this.fitToContentsOffset = Math.max(0, this.parentHeight - paramV.getHeight());
    this.halfExpandedOffset = this.parentHeight / 2;
    calculateCollapsedOffset();
    paramInt = this.state;
    if (paramInt == 3) {
      ViewCompat.offsetTopAndBottom(paramV, getExpandedOffset());
    } else if (paramInt == 6) {
      ViewCompat.offsetTopAndBottom(paramV, this.halfExpandedOffset);
    } else if (this.hideable && paramInt == 5) {
      ViewCompat.offsetTopAndBottom(paramV, this.parentHeight);
    } else {
      paramInt = this.state;
      if (paramInt == 4) {
        ViewCompat.offsetTopAndBottom(paramV, this.collapsedOffset);
      } else if (paramInt == 1 || paramInt == 2) {
        ViewCompat.offsetTopAndBottom(paramV, i - paramV.getTop());
      } 
    } 
    if (this.viewDragHelper == null)
      this.viewDragHelper = ViewDragHelper.create(paramCoordinatorLayout, this.dragCallback); 
    this.viewRef = new WeakReference(paramV);
    this.nestedScrollingChildRef = new WeakReference(findScrollingChild(paramV));
    return true;
  }
  
  public boolean onNestedPreFling(@NonNull CoordinatorLayout paramCoordinatorLayout, @NonNull V paramV, @NonNull View paramView, float paramFloat1, float paramFloat2) { return (paramView == this.nestedScrollingChildRef.get() && (this.state != 3 || super.onNestedPreFling(paramCoordinatorLayout, paramV, paramView, paramFloat1, paramFloat2))); }
  
  public void onNestedPreScroll(@NonNull CoordinatorLayout paramCoordinatorLayout, @NonNull V paramV, @NonNull View paramView, int paramInt1, int paramInt2, @NonNull int[] paramArrayOfInt, int paramInt3) {
    if (paramInt3 == 1)
      return; 
    if (paramView != (View)this.nestedScrollingChildRef.get())
      return; 
    paramInt1 = paramV.getTop();
    paramInt3 = paramInt1 - paramInt2;
    if (paramInt2 > 0) {
      if (paramInt3 < getExpandedOffset()) {
        paramArrayOfInt[1] = paramInt1 - getExpandedOffset();
        ViewCompat.offsetTopAndBottom(paramV, -paramArrayOfInt[1]);
        setStateInternal(3);
      } else {
        paramArrayOfInt[1] = paramInt2;
        ViewCompat.offsetTopAndBottom(paramV, -paramInt2);
        setStateInternal(1);
      } 
    } else if (paramInt2 < 0 && !paramView.canScrollVertically(-1)) {
      int i = this.collapsedOffset;
      if (paramInt3 <= i || this.hideable) {
        paramArrayOfInt[1] = paramInt2;
        ViewCompat.offsetTopAndBottom(paramV, -paramInt2);
        setStateInternal(1);
      } else {
        paramArrayOfInt[1] = paramInt1 - i;
        ViewCompat.offsetTopAndBottom(paramV, -paramArrayOfInt[1]);
        setStateInternal(4);
      } 
    } 
    dispatchOnSlide(paramV.getTop());
    this.lastNestedScrollDy = paramInt2;
    this.nestedScrolled = true;
  }
  
  public void onRestoreInstanceState(CoordinatorLayout paramCoordinatorLayout, V paramV, Parcelable paramParcelable) {
    SavedState savedState = (SavedState)paramParcelable;
    super.onRestoreInstanceState(paramCoordinatorLayout, paramV, savedState.getSuperState());
    if (savedState.state == 1 || savedState.state == 2) {
      this.state = 4;
      return;
    } 
    this.state = savedState.state;
  }
  
  public Parcelable onSaveInstanceState(CoordinatorLayout paramCoordinatorLayout, V paramV) { return new SavedState(super.onSaveInstanceState(paramCoordinatorLayout, paramV), this.state); }
  
  public boolean onStartNestedScroll(@NonNull CoordinatorLayout paramCoordinatorLayout, @NonNull V paramV, @NonNull View paramView1, @NonNull View paramView2, int paramInt1, int paramInt2) {
    boolean bool = false;
    this.lastNestedScrollDy = 0;
    this.nestedScrolled = false;
    if ((paramInt1 & 0x2) != 0)
      bool = true; 
    return bool;
  }
  
  public void onStopNestedScroll(@NonNull CoordinatorLayout paramCoordinatorLayout, @NonNull V paramV, @NonNull View paramView, int paramInt) {
    paramInt = paramV.getTop();
    int i = getExpandedOffset();
    byte b = 3;
    if (paramInt == i) {
      setStateInternal(3);
      return;
    } 
    if (paramView == this.nestedScrollingChildRef.get()) {
      if (!this.nestedScrolled)
        return; 
      if (this.lastNestedScrollDy > 0) {
        paramInt = getExpandedOffset();
      } else if (this.hideable && shouldHide(paramV, getYVelocity())) {
        paramInt = this.parentHeight;
        b = 5;
      } else if (this.lastNestedScrollDy == 0) {
        paramInt = paramV.getTop();
        if (this.fitToContents) {
          if (Math.abs(paramInt - this.fitToContentsOffset) < Math.abs(paramInt - this.collapsedOffset)) {
            paramInt = this.fitToContentsOffset;
          } else {
            paramInt = this.collapsedOffset;
            b = 4;
          } 
        } else {
          i = this.halfExpandedOffset;
          if (paramInt < i) {
            if (paramInt < Math.abs(paramInt - this.collapsedOffset)) {
              paramInt = 0;
            } else {
              paramInt = this.halfExpandedOffset;
              b = 6;
            } 
          } else {
            if (Math.abs(paramInt - i) < Math.abs(paramInt - this.collapsedOffset)) {
              paramInt = this.halfExpandedOffset;
            } else {
              paramInt = this.collapsedOffset;
              b = 4;
            } 
            b = 6;
          } 
        } 
      } else {
        paramInt = this.collapsedOffset;
        b = 4;
      } 
      if (this.viewDragHelper.smoothSlideViewTo(paramV, paramV.getLeft(), paramInt)) {
        setStateInternal(2);
        ViewCompat.postOnAnimation(paramV, new SettleRunnable(this, paramV, b));
      } else {
        setStateInternal(b);
      } 
      this.nestedScrolled = false;
    } 
  }
  
  public boolean onTouchEvent(CoordinatorLayout paramCoordinatorLayout, V paramV, MotionEvent paramMotionEvent) {
    if (!paramV.isShown())
      return false; 
    int i = paramMotionEvent.getActionMasked();
    if (this.state == 1 && i == 0)
      return true; 
    ViewDragHelper viewDragHelper1 = this.viewDragHelper;
    if (viewDragHelper1 != null)
      viewDragHelper1.processTouchEvent(paramMotionEvent); 
    if (i == 0)
      reset(); 
    if (this.velocityTracker == null)
      this.velocityTracker = VelocityTracker.obtain(); 
    this.velocityTracker.addMovement(paramMotionEvent);
    if (i == 2 && !this.ignoreEvents && Math.abs(this.initialY - paramMotionEvent.getY()) > this.viewDragHelper.getTouchSlop())
      this.viewDragHelper.captureChildView(paramV, paramMotionEvent.getPointerId(paramMotionEvent.getActionIndex())); 
    return this.ignoreEvents ^ true;
  }
  
  public void setBottomSheetCallback(BottomSheetCallback paramBottomSheetCallback) { this.callback = paramBottomSheetCallback; }
  
  public void setFitToContents(boolean paramBoolean) {
    int i;
    if (this.fitToContents == paramBoolean)
      return; 
    this.fitToContents = paramBoolean;
    if (this.viewRef != null)
      calculateCollapsedOffset(); 
    if (this.fitToContents && this.state == 6) {
      i = 3;
    } else {
      i = this.state;
    } 
    setStateInternal(i);
  }
  
  public void setHideable(boolean paramBoolean) { this.hideable = paramBoolean; }
  
  public final void setPeekHeight(int paramInt) { // Byte code:
    //   0: iconst_1
    //   1: istore_2
    //   2: iload_1
    //   3: iconst_m1
    //   4: if_icmpne -> 24
    //   7: aload_0
    //   8: getfield peekHeightAuto : Z
    //   11: ifne -> 42
    //   14: aload_0
    //   15: iconst_1
    //   16: putfield peekHeightAuto : Z
    //   19: iload_2
    //   20: istore_1
    //   21: goto -> 73
    //   24: aload_0
    //   25: getfield peekHeightAuto : Z
    //   28: ifne -> 47
    //   31: aload_0
    //   32: getfield peekHeight : I
    //   35: iload_1
    //   36: if_icmpeq -> 42
    //   39: goto -> 47
    //   42: iconst_0
    //   43: istore_1
    //   44: goto -> 73
    //   47: aload_0
    //   48: iconst_0
    //   49: putfield peekHeightAuto : Z
    //   52: aload_0
    //   53: iconst_0
    //   54: iload_1
    //   55: invokestatic max : (II)I
    //   58: putfield peekHeight : I
    //   61: aload_0
    //   62: aload_0
    //   63: getfield parentHeight : I
    //   66: iload_1
    //   67: isub
    //   68: putfield collapsedOffset : I
    //   71: iload_2
    //   72: istore_1
    //   73: iload_1
    //   74: ifeq -> 110
    //   77: aload_0
    //   78: getfield state : I
    //   81: iconst_4
    //   82: if_icmpne -> 110
    //   85: aload_0
    //   86: getfield viewRef : Ljava/lang/ref/WeakReference;
    //   89: astore_3
    //   90: aload_3
    //   91: ifnull -> 110
    //   94: aload_3
    //   95: invokevirtual get : ()Ljava/lang/Object;
    //   98: checkcast android/view/View
    //   101: astore_3
    //   102: aload_3
    //   103: ifnull -> 110
    //   106: aload_3
    //   107: invokevirtual requestLayout : ()V
    //   110: return }
  
  public void setSkipCollapsed(boolean paramBoolean) { this.skipCollapsed = paramBoolean; }
  
  public final void setState(int paramInt) {
    if (paramInt == this.state)
      return; 
    WeakReference weakReference = this.viewRef;
    if (weakReference == null) {
      if (paramInt == 4 || paramInt == 3 || paramInt == 6 || (this.hideable && paramInt == 5))
        this.state = paramInt; 
      return;
    } 
    View view = (View)weakReference.get();
    if (view == null)
      return; 
    ViewParent viewParent = view.getParent();
    if (viewParent != null && viewParent.isLayoutRequested() && ViewCompat.isAttachedToWindow(view)) {
      view.post(new Object(this, view, paramInt));
      return;
    } 
    startSettlingAnimation(view, paramInt);
  }
  
  void setStateInternal(int paramInt) {
    if (this.state == paramInt)
      return; 
    this.state = paramInt;
    if (paramInt == 6 || paramInt == 3) {
      updateImportantForAccessibility(true);
    } else if (paramInt == 5 || paramInt == 4) {
      updateImportantForAccessibility(false);
    } 
    View view = (View)this.viewRef.get();
    if (view != null) {
      BottomSheetCallback bottomSheetCallback = this.callback;
      if (bottomSheetCallback != null)
        bottomSheetCallback.onStateChanged(view, paramInt); 
    } 
  }
  
  boolean shouldHide(View paramView, float paramFloat) { return this.skipCollapsed ? true : ((paramView.getTop() < this.collapsedOffset) ? false : ((Math.abs(paramView.getTop() + paramFloat * 0.1F - this.collapsedOffset) / this.peekHeight > 0.5F))); }
  
  void startSettlingAnimation(View paramView, int paramInt) {
    int i;
    StringBuilder stringBuilder;
    if (paramInt == 4) {
      i = this.collapsedOffset;
    } else if (paramInt == 6) {
      i = this.halfExpandedOffset;
      if (this.fitToContents) {
        int j = this.fitToContentsOffset;
        if (i <= j) {
          i = j;
          paramInt = 3;
        } 
      } 
    } else if (paramInt == 3) {
      i = getExpandedOffset();
    } else if (this.hideable && paramInt == 5) {
      i = this.parentHeight;
    } else {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Illegal state argument: ");
      stringBuilder.append(paramInt);
      throw new IllegalArgumentException(stringBuilder.toString());
    } 
    if (this.viewDragHelper.smoothSlideViewTo(stringBuilder, stringBuilder.getLeft(), i)) {
      setStateInternal(2);
      ViewCompat.postOnAnimation(stringBuilder, new SettleRunnable(this, stringBuilder, paramInt));
      return;
    } 
    setStateInternal(paramInt);
  }
}
