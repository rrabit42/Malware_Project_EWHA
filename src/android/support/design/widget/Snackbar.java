package android.support.design.widget;

import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.TypedArray;
import android.support.annotation.ColorInt;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.StringRes;
import android.support.design.R;
import android.support.design.snackbar.ContentViewCallback;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.accessibility.AccessibilityManager;
import android.widget.Button;

public final class Snackbar extends BaseTransientBottomBar<Snackbar> {
  public static final int LENGTH_INDEFINITE = -2;
  
  public static final int LENGTH_LONG = 0;
  
  public static final int LENGTH_SHORT = -1;
  
  private static final int[] SNACKBAR_BUTTON_STYLE_ATTR = { R.attr.snackbarButtonStyle };
  
  private final AccessibilityManager accessibilityManager;
  
  @Nullable
  private BaseTransientBottomBar.BaseCallback<Snackbar> callback;
  
  private boolean hasAction;
  
  private Snackbar(ViewGroup paramViewGroup, View paramView, ContentViewCallback paramContentViewCallback) {
    super(paramViewGroup, paramView, paramContentViewCallback);
    this.accessibilityManager = (AccessibilityManager)paramViewGroup.getContext().getSystemService("accessibility");
  }
  
  private static ViewGroup findSuitableParent(View paramView) {
    ViewGroup viewGroup1;
    ViewParent viewParent;
    ViewGroup viewGroup2 = null;
    View view = paramView;
    do {
      if (view instanceof CoordinatorLayout)
        return (ViewGroup)view; 
      viewGroup1 = viewGroup2;
      if (view instanceof android.widget.FrameLayout) {
        if (view.getId() == 16908290)
          return (ViewGroup)view; 
        viewGroup1 = (ViewGroup)view;
      } 
      paramView = view;
      if (view != null) {
        viewParent = view.getParent();
        if (viewParent instanceof View) {
          View view1 = (View)viewParent;
        } else {
          viewParent = null;
        } 
      } 
      viewGroup2 = viewGroup1;
      ViewParent viewParent1 = viewParent;
    } while (viewParent != null);
    return viewGroup1;
  }
  
  protected static boolean hasSnackbarButtonStyleAttr(Context paramContext) {
    TypedArray typedArray = paramContext.obtainStyledAttributes(SNACKBAR_BUTTON_STYLE_ATTR);
    boolean bool = false;
    int i = typedArray.getResourceId(0, -1);
    typedArray.recycle();
    if (i != -1)
      bool = true; 
    return bool;
  }
  
  @NonNull
  public static Snackbar make(@NonNull View paramView, @StringRes int paramInt1, int paramInt2) { return make(paramView, paramView.getResources().getText(paramInt1), paramInt2); }
  
  @NonNull
  public static Snackbar make(@NonNull View paramView, @NonNull CharSequence paramCharSequence, int paramInt) {
    ViewGroup viewGroup = findSuitableParent(paramView);
    if (viewGroup != null) {
      int i;
      LayoutInflater layoutInflater = LayoutInflater.from(viewGroup.getContext());
      if (hasSnackbarButtonStyleAttr(viewGroup.getContext())) {
        i = R.layout.mtrl_layout_snackbar_include;
      } else {
        i = R.layout.design_layout_snackbar_include;
      } 
      SnackbarContentLayout snackbarContentLayout = (SnackbarContentLayout)layoutInflater.inflate(i, viewGroup, false);
      Snackbar snackbar = new Snackbar(viewGroup, snackbarContentLayout, snackbarContentLayout);
      snackbar.setText(paramCharSequence);
      snackbar.setDuration(paramInt);
      return snackbar;
    } 
    throw new IllegalArgumentException("No suitable parent found from the given view. Please provide a valid view.");
  }
  
  public void dismiss() { super.dismiss(); }
  
  public int getDuration() { return (this.hasAction && this.accessibilityManager.isTouchExplorationEnabled()) ? -2 : super.getDuration(); }
  
  public boolean isShown() { return super.isShown(); }
  
  @NonNull
  public Snackbar setAction(@StringRes int paramInt, View.OnClickListener paramOnClickListener) { return setAction(getContext().getText(paramInt), paramOnClickListener); }
  
  @NonNull
  public Snackbar setAction(CharSequence paramCharSequence, View.OnClickListener paramOnClickListener) {
    Button button = ((SnackbarContentLayout)this.view.getChildAt(0)).getActionView();
    if (TextUtils.isEmpty(paramCharSequence) || paramOnClickListener == null) {
      button.setVisibility(8);
      button.setOnClickListener(null);
      this.hasAction = false;
      return this;
    } 
    this.hasAction = true;
    button.setVisibility(0);
    button.setText(paramCharSequence);
    button.setOnClickListener(new Object(this, paramOnClickListener));
    return this;
  }
  
  @NonNull
  public Snackbar setActionTextColor(@ColorInt int paramInt) {
    ((SnackbarContentLayout)this.view.getChildAt(0)).getActionView().setTextColor(paramInt);
    return this;
  }
  
  @NonNull
  public Snackbar setActionTextColor(ColorStateList paramColorStateList) {
    ((SnackbarContentLayout)this.view.getChildAt(0)).getActionView().setTextColor(paramColorStateList);
    return this;
  }
  
  @Deprecated
  @NonNull
  public Snackbar setCallback(Callback paramCallback) {
    BaseTransientBottomBar.BaseCallback baseCallback = this.callback;
    if (baseCallback != null)
      removeCallback(baseCallback); 
    if (paramCallback != null)
      addCallback(paramCallback); 
    this.callback = paramCallback;
    return this;
  }
  
  @NonNull
  public Snackbar setText(@StringRes int paramInt) { return setText(getContext().getText(paramInt)); }
  
  @NonNull
  public Snackbar setText(@NonNull CharSequence paramCharSequence) {
    ((SnackbarContentLayout)this.view.getChildAt(0)).getMessageView().setText(paramCharSequence);
    return this;
  }
  
  public void show() { super.show(); }
}
