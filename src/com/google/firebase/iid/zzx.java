package com.google.firebase.iid;

import android.content.Context;
import android.content.SharedPreferences;
import android.support.annotation.Nullable;
import android.support.annotation.WorkerThread;
import android.support.v4.content.ContextCompat;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;
import com.google.android.gms.internal.firebase_messaging.zzn;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Properties;

final class zzx {
  @Nullable
  private final zzaa zza(Context paramContext, String paramString, zzaa paramzzaa, boolean paramBoolean) {
    if (Log.isLoggable("FirebaseInstanceId", 3))
      Log.d("FirebaseInstanceId", "Writing key to properties file"); 
    Properties properties = new Properties();
    properties.setProperty("pub", zzaa.zza(paramzzaa));
    properties.setProperty("pri", zzaa.zzb(paramzzaa));
    properties.setProperty("cre", String.valueOf(zzaa.zzc(paramzzaa)));
    file = zzf(paramContext, paramString);
    try {
      file.createNewFile();
      randomAccessFile = new RandomAccessFile(file, "rw");
      try {
        fileChannel = randomAccessFile.getChannel();
        try {
          fileChannel.lock();
          if (paramBoolean) {
            long l = fileChannel.size();
            if (l > 0L) {
              try {
                fileChannel.position(0L);
                return zza(fileChannel);
              } catch (IOException file) {
              
              } catch (zzz file) {}
              if (Log.isLoggable("FirebaseInstanceId", 3)) {
                String str;
                StringBuilder stringBuilder = new StringBuilder((str = String.valueOf(file)).valueOf(str).length() + 64);
                stringBuilder.append("Tried reading key pair before writing new one, but failed with: ");
                stringBuilder.append(str);
                Log.d("FirebaseInstanceId", stringBuilder.toString());
              } 
            } 
          } 
          fileChannel.position(0L);
          properties.store(Channels.newOutputStream(fileChannel), null);
          return paramzzaa;
        } catch (Throwable file) {
          try {
            throw file;
          } finally {}
        } finally {
          paramString = null;
        } 
        if (fileChannel != null)
          zza(file, fileChannel); 
        throw paramString;
      } catch (Throwable file) {
        try {
          throw file;
        } finally {}
      } finally {
        paramString = null;
      } 
      zza(file, randomAccessFile);
      throw paramString;
    } catch (IOException file) {
      String str;
      StringBuilder stringBuilder = new StringBuilder((str = String.valueOf(file)).valueOf(str).length() + 21);
      stringBuilder.append("Failed to write key: ");
      stringBuilder.append(str);
      Log.w("FirebaseInstanceId", stringBuilder.toString());
      return null;
    } 
  }
  
  @Nullable
  private static zzaa zza(SharedPreferences paramSharedPreferences, String paramString) throws zzz {
    String str1 = zzax.zzd(paramString, "|P|");
    zzaa zzaa = null;
    str1 = paramSharedPreferences.getString(str1, null);
    String str2 = paramSharedPreferences.getString(zzax.zzd(paramString, "|K|"), null);
    if (str1 != null) {
      if (str2 == null)
        return null; 
      zzaa = new zzaa(zzc(str1, str2), zzb(paramSharedPreferences, paramString));
    } 
    return zzaa;
  }
  
  private final zzaa zza(File paramFile) throws zzz, IOException {
    Throwable throwable;
    fileInputStream = new FileInputStream(paramFile);
    File file = null;
    paramFile = file;
    try {
      Throwable throwable1;
      FileChannel fileChannel = fileInputStream.getChannel();
      try {
        fileChannel.lock(0L, Float.MAX_VALUE, true);
        str = zza(fileChannel);
        if (fileChannel != null) {
          paramFile = file;
          zza(null, fileChannel);
        } 
        return str;
      } catch (Throwable null) {
        try {
          throw throwable1;
        } finally {}
      } finally {
        str = null;
      } 
      if (fileChannel != null) {
        paramFile = file;
        zza(throwable1, fileChannel);
      } 
      paramFile = file;
      throw str;
    } catch (Throwable null) {
      throwable = str;
      throw str;
    } finally {}
    zza(throwable, fileInputStream);
    throw str;
  }
  
  private static zzaa zza(FileChannel paramFileChannel) throws zzz, IOException {
    Properties properties = new Properties();
    properties.load(Channels.newInputStream(paramFileChannel));
    String str1 = properties.getProperty("pub");
    String str2 = properties.getProperty("pri");
    if (str1 != null && str2 != null) {
      keyPair = zzc(str1, str2);
      try {
        long l = Long.parseLong(properties.getProperty("cre"));
        return new zzaa(keyPair, l);
      } catch (NumberFormatException keyPair) {
        throw new zzz(keyPair);
      } 
    } 
    throw new zzz("Invalid properties file");
  }
  
  static void zza(Context paramContext) {
    for (File file : zzb(paramContext).listFiles()) {
      if (file.getName().startsWith("com.google.InstanceId"))
        file.delete(); 
    } 
  }
  
  private final void zza(Context paramContext, String paramString, zzaa paramzzaa) {
    SharedPreferences sharedPreferences = paramContext.getSharedPreferences("com.google.android.gms.appid", 0);
    try {
      boolean bool = paramzzaa.equals(zza(sharedPreferences, paramString));
      if (bool)
        return; 
    } catch (zzz zzz) {}
    if (Log.isLoggable("FirebaseInstanceId", 3))
      Log.d("FirebaseInstanceId", "Writing key to shared preferences"); 
    SharedPreferences.Editor editor = sharedPreferences.edit();
    editor.putString(zzax.zzd(paramString, "|P|"), zzaa.zza(paramzzaa));
    editor.putString(zzax.zzd(paramString, "|K|"), zzaa.zzb(paramzzaa));
    editor.putString(zzax.zzd(paramString, "cre"), String.valueOf(zzaa.zzc(paramzzaa)));
    editor.commit();
  }
  
  private static long zzb(SharedPreferences paramSharedPreferences, String paramString) {
    str = paramSharedPreferences.getString(zzax.zzd(paramString, "cre"), null);
    if (str != null)
      try {
        return Long.parseLong(str);
      } catch (NumberFormatException str) {} 
    return 0L;
  }
  
  private static File zzb(Context paramContext) {
    File file = ContextCompat.getNoBackupFilesDir(paramContext);
    if (file != null && file.isDirectory())
      return file; 
    Log.w("FirebaseInstanceId", "noBackupFilesDir doesn't exist, using regular files directory instead");
    return paramContext.getFilesDir();
  }
  
  private static KeyPair zzc(String paramString1, String paramString2) throws zzz {
    try {
      arrayOfByte1 = Base64.decode(paramString1, 8);
      byte[] arrayOfByte2 = Base64.decode(paramString2, 8);
      try {
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        return new KeyPair(keyFactory.generatePublic(new X509EncodedKeySpec(arrayOfByte1)), keyFactory.generatePrivate(new PKCS8EncodedKeySpec(arrayOfByte2)));
      } catch (InvalidKeySpecException arrayOfByte1) {
      
      } catch (NoSuchAlgorithmException arrayOfByte1) {}
      String str;
      StringBuilder stringBuilder = new StringBuilder((str = String.valueOf(arrayOfByte1)).valueOf(str).length() + 19);
      stringBuilder.append("Invalid key stored ");
      stringBuilder.append(str);
      Log.w("FirebaseInstanceId", stringBuilder.toString());
      throw new zzz(arrayOfByte1);
    } catch (IllegalArgumentException paramString1) {
      throw new zzz(paramString1);
    } 
  }
  
  @Nullable
  private final zzaa zzd(Context paramContext, String paramString) throws zzz {
    try {
      zzz = zze(paramContext, paramString);
      if (zzz != null) {
        zza(paramContext, paramString, zzz);
        return zzz;
      } 
      zzz = null;
    } catch (zzz null) {}
    try {
      zzaa zzaa = zza(paramContext.getSharedPreferences("com.google.android.gms.appid", 0), paramString);
      if (zzaa != null) {
        zza(paramContext, paramString, zzaa, false);
        return zzaa;
      } 
    } catch (zzz zzz) {}
    if (zzz == null)
      return null; 
    throw zzz;
  }
  
  @Nullable
  private final zzaa zze(Context paramContext, String paramString) throws zzz {
    File file = zzf(paramContext, paramString);
    if (!file.exists())
      return null; 
    try {
      return zza(file);
    } catch (zzz paramContext) {
    
    } catch (IOException paramContext) {}
    if (Log.isLoggable("FirebaseInstanceId", 3)) {
      String str;
      StringBuilder stringBuilder = new StringBuilder((str = String.valueOf(paramContext)).valueOf(str).length() + 40);
      stringBuilder.append("Failed to read key from file, retrying: ");
      stringBuilder.append(str);
      Log.d("FirebaseInstanceId", stringBuilder.toString());
    } 
    try {
      return zza(file);
    } catch (IOException paramContext) {
      String str;
      StringBuilder stringBuilder = new StringBuilder((str = String.valueOf(paramContext)).valueOf(str).length() + 45);
      stringBuilder.append("IID file exists, but failed to read from it: ");
      stringBuilder.append(str);
      Log.w("FirebaseInstanceId", stringBuilder.toString());
      throw new zzz(paramContext);
    } 
  }
  
  private static File zzf(Context paramContext, String paramString) {
    if (TextUtils.isEmpty(paramString)) {
      paramString = "com.google.InstanceId.properties";
    } else {
      try {
        StringBuilder stringBuilder = new StringBuilder((paramString = Base64.encodeToString(paramString.getBytes("UTF-8"), 11)).valueOf(paramString).length() + 33);
        stringBuilder.append("com.google.InstanceId_");
        stringBuilder.append(paramString);
        stringBuilder.append(".properties");
        paramString = stringBuilder.toString();
        return new File(zzb(paramContext), paramString);
      } catch (UnsupportedEncodingException paramContext) {
        throw new AssertionError(paramContext);
      } 
    } 
    return new File(zzb(paramContext), paramString);
  }
  
  @WorkerThread
  final zzaa zzb(Context paramContext, String paramString) throws zzz {
    zzaa zzaa = zzd(paramContext, paramString);
    return (zzaa != null) ? zzaa : zzc(paramContext, paramString);
  }
  
  @WorkerThread
  final zzaa zzc(Context paramContext, String paramString) throws zzz {
    zzaa zzaa1 = new zzaa(zza.zzc(), System.currentTimeMillis());
    zzaa zzaa2 = zza(paramContext, paramString, zzaa1, true);
    if (zzaa2 != null && !zzaa2.equals(zzaa1)) {
      if (Log.isLoggable("FirebaseInstanceId", 3))
        Log.d("FirebaseInstanceId", "Loaded key after generating new one, using loaded one"); 
      return zzaa2;
    } 
    if (Log.isLoggable("FirebaseInstanceId", 3))
      Log.d("FirebaseInstanceId", "Generated new key"); 
    zza(paramContext, paramString, zzaa1);
    return zzaa1;
  }
}
