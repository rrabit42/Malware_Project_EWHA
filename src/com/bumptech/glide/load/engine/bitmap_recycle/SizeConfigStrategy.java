package com.bumptech.glide.load.engine.bitmap_recycle;

import android.annotation.TargetApi;
import android.graphics.Bitmap;
import com.bumptech.glide.util.Util;
import java.util.HashMap;
import java.util.Map;
import java.util.NavigableMap;
import java.util.TreeMap;

@TargetApi(19)
public class SizeConfigStrategy implements LruPoolStrategy {
  private static final Bitmap.Config[] ALPHA_8_IN_CONFIGS;
  
  private static final Bitmap.Config[] ARGB_4444_IN_CONFIGS;
  
  private static final Bitmap.Config[] ARGB_8888_IN_CONFIGS = { Bitmap.Config.ARGB_8888, null };
  
  private static final int MAX_SIZE_MULTIPLE = 8;
  
  private static final Bitmap.Config[] RGB_565_IN_CONFIGS = { Bitmap.Config.RGB_565 };
  
  private final GroupedLinkedMap<Key, Bitmap> groupedMap = new GroupedLinkedMap();
  
  private final KeyPool keyPool = new KeyPool();
  
  private final Map<Bitmap.Config, NavigableMap<Integer, Integer>> sortedSizes = new HashMap();
  
  static  {
    ARGB_4444_IN_CONFIGS = new Bitmap.Config[] { Bitmap.Config.ARGB_4444 };
    ALPHA_8_IN_CONFIGS = new Bitmap.Config[] { Bitmap.Config.ALPHA_8 };
  }
  
  private void decrementBitmapOfSize(Integer paramInteger, Bitmap.Config paramConfig) {
    NavigableMap navigableMap = getSizesForConfig(paramConfig);
    Integer integer = (Integer)navigableMap.get(paramInteger);
    if (integer.intValue() == 1) {
      navigableMap.remove(paramInteger);
      return;
    } 
    navigableMap.put(paramInteger, Integer.valueOf(integer.intValue() - 1));
  }
  
  private Key findBestKey(Key paramKey, int paramInt, Bitmap.Config paramConfig) {
    for (Bitmap.Config config : getInConfigs(paramConfig)) {
      Integer integer = (Integer)getSizesForConfig(config).ceilingKey(Integer.valueOf(paramInt));
      if (integer != null && integer.intValue() <= paramInt * 8) {
        if (integer.intValue() != paramInt || ((config == null) ? (paramConfig != null) : !config.equals(paramConfig))) {
          this.keyPool.offer(paramKey);
          return this.keyPool.get(integer.intValue(), config);
        } 
        break;
      } 
    } 
    return paramKey;
  }
  
  private static String getBitmapString(int paramInt, Bitmap.Config paramConfig) {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("[");
    stringBuilder.append(paramInt);
    stringBuilder.append("](");
    stringBuilder.append(paramConfig);
    stringBuilder.append(")");
    return stringBuilder.toString();
  }
  
  private static Bitmap.Config[] getInConfigs(Bitmap.Config paramConfig) {
    int i = null.$SwitchMap$android$graphics$Bitmap$Config[paramConfig.ordinal()];
    return (i != 1) ? ((i != 2) ? ((i != 3) ? ((i != 4) ? new Bitmap.Config[] { paramConfig } : ALPHA_8_IN_CONFIGS) : ARGB_4444_IN_CONFIGS) : RGB_565_IN_CONFIGS) : ARGB_8888_IN_CONFIGS;
  }
  
  private NavigableMap<Integer, Integer> getSizesForConfig(Bitmap.Config paramConfig) {
    NavigableMap navigableMap2 = (NavigableMap)this.sortedSizes.get(paramConfig);
    NavigableMap navigableMap1 = navigableMap2;
    if (navigableMap2 == null) {
      navigableMap1 = new TreeMap();
      this.sortedSizes.put(paramConfig, navigableMap1);
    } 
    return navigableMap1;
  }
  
  public Bitmap get(int paramInt1, int paramInt2, Bitmap.Config paramConfig) {
    int i = Util.getBitmapByteSize(paramInt1, paramInt2, paramConfig);
    Key key = findBestKey(this.keyPool.get(i, paramConfig), i, paramConfig);
    Bitmap bitmap = (Bitmap)this.groupedMap.get(key);
    if (bitmap != null) {
      Bitmap.Config config;
      decrementBitmapOfSize(Integer.valueOf(Util.getBitmapByteSize(bitmap)), bitmap.getConfig());
      if (bitmap.getConfig() != null) {
        config = bitmap.getConfig();
      } else {
        config = Bitmap.Config.ARGB_8888;
      } 
      bitmap.reconfigure(paramInt1, paramInt2, config);
    } 
    return bitmap;
  }
  
  public int getSize(Bitmap paramBitmap) { return Util.getBitmapByteSize(paramBitmap); }
  
  public String logBitmap(int paramInt1, int paramInt2, Bitmap.Config paramConfig) { return getBitmapString(Util.getBitmapByteSize(paramInt1, paramInt2, paramConfig), paramConfig); }
  
  public String logBitmap(Bitmap paramBitmap) { return getBitmapString(Util.getBitmapByteSize(paramBitmap), paramBitmap.getConfig()); }
  
  public void put(Bitmap paramBitmap) {
    int i = Util.getBitmapByteSize(paramBitmap);
    Key key = this.keyPool.get(i, paramBitmap.getConfig());
    this.groupedMap.put(key, paramBitmap);
    NavigableMap navigableMap = getSizesForConfig(paramBitmap.getConfig());
    Integer integer = (Integer)navigableMap.get(Integer.valueOf(Key.access$000(key)));
    int j = Key.access$000(key);
    i = 1;
    if (integer != null)
      i = 1 + integer.intValue(); 
    navigableMap.put(Integer.valueOf(j), Integer.valueOf(i));
  }
  
  public Bitmap removeLast() {
    Bitmap bitmap = (Bitmap)this.groupedMap.removeLast();
    if (bitmap != null)
      decrementBitmapOfSize(Integer.valueOf(Util.getBitmapByteSize(bitmap)), bitmap.getConfig()); 
    return bitmap;
  }
  
  public String toString() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("SizeConfigStrategy{groupedMap=");
    stringBuilder.append(this.groupedMap);
    stringBuilder.append(", sortedSizes=(");
    for (Map.Entry entry : this.sortedSizes.entrySet()) {
      stringBuilder.append(entry.getKey());
      stringBuilder.append('[');
      stringBuilder.append(entry.getValue());
      stringBuilder.append("], ");
    } 
    if (!this.sortedSizes.isEmpty())
      stringBuilder.replace(stringBuilder.length() - 2, stringBuilder.length(), ""); 
    stringBuilder.append(")}");
    return stringBuilder.toString();
  }
}
