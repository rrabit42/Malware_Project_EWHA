package android.support.v4.media.session;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.Context;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.RemoteException;
import android.os.ResultReceiver;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RestrictTo;
import android.support.v4.app.SupportActivity;
import android.support.v4.media.MediaDescriptionCompat;
import android.support.v4.media.MediaMetadataCompat;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import java.util.HashSet;
import java.util.List;

public final class MediaControllerCompat {
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String COMMAND_ADD_QUEUE_ITEM = "android.support.v4.media.session.command.ADD_QUEUE_ITEM";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String COMMAND_ADD_QUEUE_ITEM_AT = "android.support.v4.media.session.command.ADD_QUEUE_ITEM_AT";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String COMMAND_ARGUMENT_INDEX = "android.support.v4.media.session.command.ARGUMENT_INDEX";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String COMMAND_ARGUMENT_MEDIA_DESCRIPTION = "android.support.v4.media.session.command.ARGUMENT_MEDIA_DESCRIPTION";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String COMMAND_GET_EXTRA_BINDER = "android.support.v4.media.session.command.GET_EXTRA_BINDER";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String COMMAND_REMOVE_QUEUE_ITEM = "android.support.v4.media.session.command.REMOVE_QUEUE_ITEM";
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static final String COMMAND_REMOVE_QUEUE_ITEM_AT = "android.support.v4.media.session.command.REMOVE_QUEUE_ITEM_AT";
  
  static final String TAG = "MediaControllerCompat";
  
  private final MediaControllerImpl mImpl;
  
  private final HashSet<Callback> mRegisteredCallbacks = new HashSet();
  
  private final MediaSessionCompat.Token mToken;
  
  public MediaControllerCompat(Context paramContext, @NonNull MediaSessionCompat.Token paramToken) throws RemoteException {
    if (paramToken != null) {
      this.mToken = paramToken;
      if (Build.VERSION.SDK_INT >= 24) {
        this.mImpl = new MediaControllerImplApi24(paramContext, paramToken);
        return;
      } 
      if (Build.VERSION.SDK_INT >= 23) {
        this.mImpl = new MediaControllerImplApi23(paramContext, paramToken);
        return;
      } 
      if (Build.VERSION.SDK_INT >= 21) {
        this.mImpl = new MediaControllerImplApi21(paramContext, paramToken);
        return;
      } 
      this.mImpl = new MediaControllerImplBase(paramToken);
      return;
    } 
    throw new IllegalArgumentException("sessionToken must not be null");
  }
  
  public MediaControllerCompat(Context paramContext, @NonNull MediaSessionCompat paramMediaSessionCompat) {
    if (paramMediaSessionCompat != null) {
      MediaSessionCompat mediaSessionCompat;
      this.mToken = paramMediaSessionCompat.getSessionToken();
      paramMediaSessionCompat = null;
      try {
        if (Build.VERSION.SDK_INT >= 24) {
          mediaSessionCompat = new MediaControllerImplApi24(paramContext, this.mToken);
        } else {
          MediaControllerImplApi23 mediaControllerImplApi23;
          if (Build.VERSION.SDK_INT >= 23) {
            mediaControllerImplApi23 = new MediaControllerImplApi23(mediaSessionCompat, this.mToken);
          } else if (Build.VERSION.SDK_INT >= 21) {
            MediaControllerImplApi21 mediaControllerImplApi21 = new MediaControllerImplApi21(mediaControllerImplApi23, this.mToken);
          } else {
            MediaControllerImplBase mediaControllerImplBase = new MediaControllerImplBase(this.mToken);
          } 
        } 
      } catch (RemoteException paramContext) {
        Log.w("MediaControllerCompat", "Failed to create MediaControllerImpl.", paramContext);
        mediaSessionCompat = paramMediaSessionCompat;
      } 
      this.mImpl = mediaSessionCompat;
      return;
    } 
    IllegalArgumentException illegalArgumentException = new IllegalArgumentException("session must not be null");
    throw illegalArgumentException;
  }
  
  public static MediaControllerCompat getMediaController(@NonNull Activity paramActivity) {
    boolean bool = paramActivity instanceof SupportActivity;
    Activity activity = null;
    if (bool) {
      MediaControllerExtraData mediaControllerExtraData = (MediaControllerExtraData)((SupportActivity)paramActivity).getExtraData(MediaControllerExtraData.class);
      paramActivity = activity;
      if (mediaControllerExtraData != null)
        mediaControllerCompat = mediaControllerExtraData.getMediaController(); 
      return mediaControllerCompat;
    } 
    if (Build.VERSION.SDK_INT >= 21) {
      Object object = MediaControllerCompatApi21.getMediaController(mediaControllerCompat);
      if (object == null)
        return null; 
      object = MediaControllerCompatApi21.getSessionToken(object);
      try {
        return new MediaControllerCompat(mediaControllerCompat, MediaSessionCompat.Token.fromToken(object));
      } catch (RemoteException mediaControllerCompat) {
        Log.e("MediaControllerCompat", "Dead object in getMediaController.", mediaControllerCompat);
      } 
    } 
    return null;
  }
  
  public static void setMediaController(@NonNull Activity paramActivity, MediaControllerCompat paramMediaControllerCompat) {
    if (paramActivity instanceof SupportActivity)
      ((SupportActivity)paramActivity).putExtraData(new MediaControllerExtraData(paramMediaControllerCompat)); 
    if (Build.VERSION.SDK_INT >= 21) {
      Object object = null;
      if (paramMediaControllerCompat != null)
        object = MediaControllerCompatApi21.fromToken(paramActivity, paramMediaControllerCompat.getSessionToken().getToken()); 
      MediaControllerCompatApi21.setMediaController(paramActivity, object);
    } 
  }
  
  static void validateCustomAction(String paramString, Bundle paramBundle) {
    if (paramString == null)
      return; 
    byte b = -1;
    int i = paramString.hashCode();
    if (i != -1348483723) {
      if (i == 503011406 && paramString.equals("android.support.v4.media.session.action.UNFOLLOW"))
        b = 1; 
    } else if (paramString.equals("android.support.v4.media.session.action.FOLLOW")) {
      b = 0;
    } 
    if (b != 0 && b != 1)
      return; 
    if (paramBundle != null && paramBundle.containsKey("android.support.v4.media.session.ARGUMENT_MEDIA_ATTRIBUTE"))
      return; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("An extra field android.support.v4.media.session.ARGUMENT_MEDIA_ATTRIBUTE is required for this action ");
    stringBuilder.append(paramString);
    stringBuilder.append(".");
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public void addQueueItem(MediaDescriptionCompat paramMediaDescriptionCompat) { this.mImpl.addQueueItem(paramMediaDescriptionCompat); }
  
  public void addQueueItem(MediaDescriptionCompat paramMediaDescriptionCompat, int paramInt) { this.mImpl.addQueueItem(paramMediaDescriptionCompat, paramInt); }
  
  public void adjustVolume(int paramInt1, int paramInt2) { this.mImpl.adjustVolume(paramInt1, paramInt2); }
  
  public boolean dispatchMediaButtonEvent(KeyEvent paramKeyEvent) {
    if (paramKeyEvent != null)
      return this.mImpl.dispatchMediaButtonEvent(paramKeyEvent); 
    throw new IllegalArgumentException("KeyEvent may not be null");
  }
  
  public Bundle getExtras() { return this.mImpl.getExtras(); }
  
  public long getFlags() { return this.mImpl.getFlags(); }
  
  public Object getMediaController() { return this.mImpl.getMediaController(); }
  
  public MediaMetadataCompat getMetadata() { return this.mImpl.getMetadata(); }
  
  public String getPackageName() { return this.mImpl.getPackageName(); }
  
  public PlaybackInfo getPlaybackInfo() { return this.mImpl.getPlaybackInfo(); }
  
  public PlaybackStateCompat getPlaybackState() { return this.mImpl.getPlaybackState(); }
  
  public List<MediaSessionCompat.QueueItem> getQueue() { return this.mImpl.getQueue(); }
  
  public CharSequence getQueueTitle() { return this.mImpl.getQueueTitle(); }
  
  public int getRatingType() { return this.mImpl.getRatingType(); }
  
  public int getRepeatMode() { return this.mImpl.getRepeatMode(); }
  
  public PendingIntent getSessionActivity() { return this.mImpl.getSessionActivity(); }
  
  public MediaSessionCompat.Token getSessionToken() { return this.mToken; }
  
  @Nullable
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public Bundle getSessionToken2Bundle() { return this.mToken.getSessionToken2Bundle(); }
  
  public int getShuffleMode() { return this.mImpl.getShuffleMode(); }
  
  public TransportControls getTransportControls() { return this.mImpl.getTransportControls(); }
  
  public boolean isCaptioningEnabled() { return this.mImpl.isCaptioningEnabled(); }
  
  public boolean isSessionReady() { return this.mImpl.isSessionReady(); }
  
  public void registerCallback(@NonNull Callback paramCallback) { registerCallback(paramCallback, null); }
  
  public void registerCallback(@NonNull Callback paramCallback, Handler paramHandler) {
    if (paramCallback != null) {
      Handler handler = paramHandler;
      if (paramHandler == null)
        handler = new Handler(); 
      paramCallback.setHandler(handler);
      this.mImpl.registerCallback(paramCallback, handler);
      this.mRegisteredCallbacks.add(paramCallback);
      return;
    } 
    throw new IllegalArgumentException("callback must not be null");
  }
  
  public void removeQueueItem(MediaDescriptionCompat paramMediaDescriptionCompat) { this.mImpl.removeQueueItem(paramMediaDescriptionCompat); }
  
  @Deprecated
  public void removeQueueItemAt(int paramInt) {
    List list = getQueue();
    if (list != null && paramInt >= 0 && paramInt < list.size()) {
      MediaSessionCompat.QueueItem queueItem = (MediaSessionCompat.QueueItem)list.get(paramInt);
      if (queueItem != null)
        removeQueueItem(queueItem.getDescription()); 
    } 
  }
  
  public void sendCommand(@NonNull String paramString, Bundle paramBundle, ResultReceiver paramResultReceiver) {
    if (!TextUtils.isEmpty(paramString)) {
      this.mImpl.sendCommand(paramString, paramBundle, paramResultReceiver);
      return;
    } 
    throw new IllegalArgumentException("command must neither be null nor empty");
  }
  
  public void setVolumeTo(int paramInt1, int paramInt2) { this.mImpl.setVolumeTo(paramInt1, paramInt2); }
  
  public void unregisterCallback(@NonNull Callback paramCallback) {
    if (paramCallback != null)
      try {
        this.mRegisteredCallbacks.remove(paramCallback);
        this.mImpl.unregisterCallback(paramCallback);
        return;
      } finally {
        paramCallback.setHandler(null);
      }  
    throw new IllegalArgumentException("callback must not be null");
  }
}
