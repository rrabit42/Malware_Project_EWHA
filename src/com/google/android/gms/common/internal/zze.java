package com.google.android.gms.common.internal;

import android.content.ComponentName;
import android.content.Context;
import android.content.ServiceConnection;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import com.google.android.gms.common.stats.ConnectionTracker;
import com.google.android.gms.internal.common.zze;
import java.util.HashMap;
import javax.annotation.concurrent.GuardedBy;

final class zze extends GmsClientSupervisor implements Handler.Callback {
  private final Handler mHandler;
  
  @GuardedBy("mConnectionStatus")
  private final HashMap<GmsClientSupervisor.zza, zzf> zzdu = new HashMap();
  
  private final Context zzdv;
  
  private final ConnectionTracker zzdw;
  
  private final long zzdx;
  
  private final long zzdy;
  
  zze(Context paramContext) {
    this.zzdv = paramContext.getApplicationContext();
    this.mHandler = new zze(paramContext.getMainLooper(), this);
    this.zzdw = ConnectionTracker.getInstance();
    this.zzdx = 5000L;
    this.zzdy = 300000L;
  }
  
  public final boolean handleMessage(Message paramMessage) {
    int i = paramMessage.what;
    if (i != 0) {
      if (i != 1)
        return false; 
      synchronized (this.zzdu) {
        GmsClientSupervisor.zza zza = (GmsClientSupervisor.zza)paramMessage.obj;
        zzf zzf = (zzf)this.zzdu.get(zza);
        if (zzf != null && zzf.getState() == 3) {
          String str;
          StringBuilder stringBuilder = new StringBuilder((str = String.valueOf(zza)).valueOf(str).length() + 47);
          stringBuilder.append("Timeout waiting for ServiceConnection callback ");
          stringBuilder.append(str);
          Log.e("GmsClientSupervisor", stringBuilder.toString(), new Exception());
          ComponentName componentName2 = zzf.getComponentName();
          ComponentName componentName1 = componentName2;
          if (componentName2 == null)
            componentName1 = zza.getComponentName(); 
          componentName2 = componentName1;
          if (componentName1 == null)
            componentName2 = new ComponentName(zza.getPackage(), "unknown"); 
          zzf.onServiceDisconnected(componentName2);
        } 
        return true;
      } 
    } 
    synchronized (this.zzdu) {
      GmsClientSupervisor.zza zza = (GmsClientSupervisor.zza)paramMessage.obj;
      zzf zzf = (zzf)this.zzdu.get(zza);
      if (zzf != null && zzf.zzr()) {
        if (zzf.isBound())
          zzf.zzf("GmsClientSupervisor"); 
        this.zzdu.remove(zza);
      } 
      return true;
    } 
  }
  
  protected final boolean zza(GmsClientSupervisor.zza paramzza, ServiceConnection paramServiceConnection, String paramString) {
    Preconditions.checkNotNull(paramServiceConnection, "ServiceConnection must not be null");
    synchronized (this.zzdu) {
      StringBuilder stringBuilder2;
      StringBuilder stringBuilder1;
      String str;
      zzf zzf = (zzf)this.zzdu.get(paramzza);
      if (zzf == null) {
        zzf = new zzf(this, paramzza);
        zzf.zza(paramServiceConnection, paramString);
        zzf.zze(paramString);
        this.zzdu.put(paramzza, zzf);
        stringBuilder1 = zzf;
        if (this.zzdu.size() > 200) {
          String str1 = String.valueOf(paramzza);
          int i = this.zzdu.size();
          stringBuilder2 = new StringBuilder(String.valueOf(str1).length() + 51);
          stringBuilder2.append("Adding ");
          stringBuilder2.append(str1);
          stringBuilder2.append(", and there are now ");
          stringBuilder2.append(i);
          stringBuilder2.append(" connections.");
          Log.wtf("GmsClientSupervisor", stringBuilder2.toString(), new Exception());
          stringBuilder1 = zzf;
        } 
      } else {
        this.mHandler.removeMessages(0, paramzza);
        if (!zzf.zza(stringBuilder1)) {
          zzf.zza(stringBuilder1, stringBuilder2);
          int i = zzf.getState();
          if (i != 1) {
            if (i != 2) {
              stringBuilder1 = zzf;
            } else {
              zzf.zze(stringBuilder2);
              stringBuilder1 = zzf;
            } 
          } else {
            stringBuilder1.onServiceConnected(zzf.getComponentName(), zzf.getBinder());
            stringBuilder1 = zzf;
          } 
        } else {
          stringBuilder1 = new StringBuilder((str = String.valueOf(paramzza)).valueOf(str).length() + 81);
          stringBuilder1.append("Trying to bind a GmsServiceConnection that was already connected before.  config=");
          stringBuilder1.append(str);
          throw new IllegalStateException(stringBuilder1.toString());
        } 
      } 
      if (stringBuilder1.zzs() > 100) {
        int i = stringBuilder1.zzs();
        stringBuilder2 = new StringBuilder((str = String.valueOf(str)).valueOf(str).length() + 41);
        stringBuilder2.append("There are");
        stringBuilder2.append(i);
        stringBuilder2.append(" clients for service ");
        stringBuilder2.append(str);
        Log.wtf("GmsClientSupervisor", stringBuilder2.toString(), new Exception());
      } 
      return stringBuilder1.isBound();
    } 
  }
  
  protected final void zzb(GmsClientSupervisor.zza paramzza, ServiceConnection paramServiceConnection, String paramString) {
    Preconditions.checkNotNull(paramServiceConnection, "ServiceConnection must not be null");
    synchronized (this.zzdu) {
      zzf zzf = (zzf)this.zzdu.get(paramzza);
      if (zzf != null) {
        Message message;
        if (zzf.zza(paramServiceConnection)) {
          zzf.zzb(paramServiceConnection, paramString);
          if (zzf.zzr()) {
            message = this.mHandler.obtainMessage(0, paramzza);
            this.mHandler.sendMessageDelayed(message, this.zzdx);
          } 
          return;
        } 
        StringBuilder stringBuilder1 = new StringBuilder((str = String.valueOf(message)).valueOf(str).length() + 76);
        stringBuilder1.append("Trying to unbind a GmsServiceConnection  that was not bound before.  config=");
        stringBuilder1.append(str);
        throw new IllegalStateException(stringBuilder1.toString());
      } 
      String str;
      StringBuilder stringBuilder = new StringBuilder((str = String.valueOf(str)).valueOf(str).length() + 50);
      stringBuilder.append("Nonexistent connection status for service config: ");
      stringBuilder.append(str);
      throw new IllegalStateException(stringBuilder.toString());
    } 
  }
}
