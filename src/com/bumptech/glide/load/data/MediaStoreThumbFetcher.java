package com.bumptech.glide.load.data;

import android.content.Context;
import android.net.Uri;
import android.util.Log;
import com.bumptech.glide.Priority;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

public class MediaStoreThumbFetcher extends Object implements DataFetcher<InputStream> {
  private static final ThumbnailStreamOpenerFactory DEFAULT_FACTORY = new ThumbnailStreamOpenerFactory();
  
  private static final int MINI_HEIGHT = 384;
  
  private static final int MINI_WIDTH = 512;
  
  private static final String TAG = "MediaStoreThumbFetcher";
  
  private final Context context;
  
  private final DataFetcher<InputStream> defaultFetcher;
  
  private final ThumbnailStreamOpenerFactory factory;
  
  private final int height;
  
  private InputStream inputStream;
  
  private final Uri mediaStoreUri;
  
  private final int width;
  
  public MediaStoreThumbFetcher(Context paramContext, Uri paramUri, DataFetcher<InputStream> paramDataFetcher, int paramInt1, int paramInt2) { this(paramContext, paramUri, paramDataFetcher, paramInt1, paramInt2, DEFAULT_FACTORY); }
  
  MediaStoreThumbFetcher(Context paramContext, Uri paramUri, DataFetcher<InputStream> paramDataFetcher, int paramInt1, int paramInt2, ThumbnailStreamOpenerFactory paramThumbnailStreamOpenerFactory) {
    this.context = paramContext;
    this.mediaStoreUri = paramUri;
    this.defaultFetcher = paramDataFetcher;
    this.width = paramInt1;
    this.height = paramInt2;
    this.factory = paramThumbnailStreamOpenerFactory;
  }
  
  private static boolean isMediaStoreUri(Uri paramUri) { return (paramUri != null && "content".equals(paramUri.getScheme()) && "media".equals(paramUri.getAuthority())); }
  
  private static boolean isMediaStoreVideo(Uri paramUri) { return (isMediaStoreUri(paramUri) && paramUri.getPathSegments().contains("video")); }
  
  private InputStream openThumbInputStream(ThumbnailStreamOpener paramThumbnailStreamOpener) {
    byte b;
    try {
      fileNotFoundException = paramThumbnailStreamOpener.open(this.context, this.mediaStoreUri);
    } catch (FileNotFoundException fileNotFoundException) {
      if (Log.isLoggable("MediaStoreThumbFetcher", 3))
        Log.d("MediaStoreThumbFetcher", "Failed to find thumbnail file", fileNotFoundException); 
      fileNotFoundException = null;
    } 
    if (fileNotFoundException != null) {
      b = paramThumbnailStreamOpener.getOrientation(this.context, this.mediaStoreUri);
    } else {
      b = -1;
    } 
    ExifOrientationStream exifOrientationStream = fileNotFoundException;
    if (b != -1)
      exifOrientationStream = new ExifOrientationStream(fileNotFoundException, b); 
    return exifOrientationStream;
  }
  
  public void cancel() {}
  
  public void cleanup() {
    inputStream1 = this.inputStream;
    if (inputStream1 != null)
      try {
        inputStream1.close();
      } catch (IOException inputStream1) {} 
    this.defaultFetcher.cleanup();
  }
  
  public String getId() { return this.mediaStoreUri.toString(); }
  
  public InputStream loadData(Priority paramPriority) throws Exception {
    ThumbnailStreamOpener thumbnailStreamOpener = this.factory.build(this.mediaStoreUri, this.width, this.height);
    if (thumbnailStreamOpener != null)
      this.inputStream = openThumbInputStream(thumbnailStreamOpener); 
    if (this.inputStream == null)
      this.inputStream = (InputStream)this.defaultFetcher.loadData(paramPriority); 
    return this.inputStream;
  }
}
