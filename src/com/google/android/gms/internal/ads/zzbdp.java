package com.google.android.gms.internal.ads;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;

class zzbdp<K extends Comparable<K>, V> extends AbstractMap<K, V> {
  private boolean zzdqy;
  
  private final int zzdyj;
  
  private List<zzbdw> zzdyk;
  
  private Map<K, V> zzdyl;
  
  private Map<K, V> zzdyn;
  
  private zzbdp(int paramInt) {
    this.zzdyj = paramInt;
    this.zzdyk = Collections.emptyList();
    this.zzdyl = Collections.emptyMap();
    this.zzdyn = Collections.emptyMap();
  }
  
  private final int zza(K paramK) {
    int j = this.zzdyk.size() - 1;
    if (j >= 0) {
      int k = paramK.compareTo((Comparable)((zzbdw)this.zzdyk.get(j)).getKey());
      if (k > 0)
        return -(j + 2); 
      if (k == 0)
        return j; 
    } 
    int i = 0;
    while (i <= j) {
      int k = (i + j) / 2;
      int m = paramK.compareTo((Comparable)((zzbdw)this.zzdyk.get(k)).getKey());
      if (m < 0) {
        j = k - 1;
        continue;
      } 
      if (m > 0) {
        i = k + 1;
        continue;
      } 
      return k;
    } 
    return -(i + 1);
  }
  
  private final void zzafv() {
    if (!this.zzdqy)
      return; 
    throw new UnsupportedOperationException();
  }
  
  private final SortedMap<K, V> zzafw() {
    zzafv();
    if (this.zzdyl.isEmpty() && !(this.zzdyl instanceof TreeMap)) {
      this.zzdyl = new TreeMap();
      this.zzdyn = ((TreeMap)this.zzdyl).descendingMap();
    } 
    return (SortedMap)this.zzdyl;
  }
  
  static <FieldDescriptorType extends zzbbi<FieldDescriptorType>> zzbdp<FieldDescriptorType, Object> zzcx(int paramInt) { return new zzbdq(paramInt); }
  
  private final V zzcz(int paramInt) {
    zzafv();
    Object object = ((zzbdw)this.zzdyk.remove(paramInt)).getValue();
    if (!this.zzdyl.isEmpty()) {
      Iterator iterator = zzafw().entrySet().iterator();
      this.zzdyk.add(new zzbdw(this, (Map.Entry)iterator.next()));
      iterator.remove();
    } 
    return (V)object;
  }
  
  public void clear() {
    zzafv();
    if (!this.zzdyk.isEmpty())
      this.zzdyk.clear(); 
    if (!this.zzdyl.isEmpty())
      this.zzdyl.clear(); 
  }
  
  public boolean containsKey(Object paramObject) {
    paramObject = (Comparable)paramObject;
    return (zza(paramObject) >= 0 || this.zzdyl.containsKey(paramObject));
  }
  
  public Set<Map.Entry<K, V>> entrySet() {
    if (this.zzdym == null)
      this.zzdym = new zzbdy(this, null); 
    return this.zzdym;
  }
  
  public boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (!(paramObject instanceof zzbdp))
      return super.equals(paramObject); 
    paramObject = (zzbdp)paramObject;
    int i = size();
    if (i != paramObject.size())
      return false; 
    int j = zzafs();
    if (j != paramObject.zzafs())
      return entrySet().equals(paramObject.entrySet()); 
    for (byte b = 0; b < j; b++) {
      if (!zzcy(b).equals(paramObject.zzcy(b)))
        return false; 
    } 
    return (j != i) ? this.zzdyl.equals(paramObject.zzdyl) : 1;
  }
  
  public V get(Object paramObject) {
    paramObject = (Comparable)paramObject;
    int i = zza(paramObject);
    return (i >= 0) ? (V)((zzbdw)this.zzdyk.get(i)).getValue() : (V)this.zzdyl.get(paramObject);
  }
  
  public int hashCode() {
    int k = zzafs();
    int j = 0;
    int i = 0;
    while (j < k) {
      i += ((zzbdw)this.zzdyk.get(j)).hashCode();
      j++;
    } 
    j = i;
    if (this.zzdyl.size() > 0)
      j = i + this.zzdyl.hashCode(); 
    return j;
  }
  
  public final boolean isImmutable() { return this.zzdqy; }
  
  public V remove(Object paramObject) {
    zzafv();
    paramObject = (Comparable)paramObject;
    int i = zza(paramObject);
    return (i >= 0) ? (V)zzcz(i) : (this.zzdyl.isEmpty() ? null : (V)this.zzdyl.remove(paramObject));
  }
  
  public int size() { return this.zzdyk.size() + this.zzdyl.size(); }
  
  public final V zza(K paramK, V paramV) {
    zzafv();
    int i = zza(paramK);
    if (i >= 0)
      return (V)((zzbdw)this.zzdyk.get(i)).setValue(paramV); 
    zzafv();
    if (this.zzdyk.isEmpty() && !(this.zzdyk instanceof ArrayList))
      this.zzdyk = new ArrayList(this.zzdyj); 
    i = -(i + 1);
    if (i >= this.zzdyj)
      return (V)zzafw().put(paramK, paramV); 
    int j = this.zzdyk.size();
    int k = this.zzdyj;
    if (j == k) {
      zzbdw zzbdw = (zzbdw)this.zzdyk.remove(k - 1);
      zzafw().put((Comparable)zzbdw.getKey(), zzbdw.getValue());
    } 
    this.zzdyk.add(i, new zzbdw(this, paramK, paramV));
    return null;
  }
  
  public void zzaaz() {
    if (!this.zzdqy) {
      Map map;
      if (this.zzdyl.isEmpty()) {
        map = Collections.emptyMap();
      } else {
        map = Collections.unmodifiableMap(this.zzdyl);
      } 
      this.zzdyl = map;
      if (this.zzdyn.isEmpty()) {
        map = Collections.emptyMap();
      } else {
        map = Collections.unmodifiableMap(this.zzdyn);
      } 
      this.zzdyn = map;
      this.zzdqy = true;
    } 
  }
  
  public final int zzafs() { return this.zzdyk.size(); }
  
  public final Iterable<Map.Entry<K, V>> zzaft() { return this.zzdyl.isEmpty() ? zzbdt.zzafy() : this.zzdyl.entrySet(); }
  
  final Set<Map.Entry<K, V>> zzafu() {
    if (this.zzdyo == null)
      this.zzdyo = new zzbds(this, null); 
    return this.zzdyo;
  }
  
  public final Map.Entry<K, V> zzcy(int paramInt) { return (Map.Entry)this.zzdyk.get(paramInt); }
}
