package com.google.android.gms.internal.firebase_auth;

import java.util.logging.Level;
import java.util.logging.Logger;
import org.checkerframework.checker.nullness.compatqual.NullableDecl;

public final class zzw {
  private static String zza(@NullableDecl Object paramObject) {
    try {
      return String.valueOf(paramObject);
    } catch (Exception exception) {
      String str = paramObject.getClass().getName();
      paramObject = Integer.toHexString(System.identityHashCode(paramObject));
      StringBuilder stringBuilder2 = new StringBuilder(String.valueOf(str).length() + 1 + String.valueOf(paramObject).length());
      stringBuilder2.append(str);
      stringBuilder2.append('@');
      stringBuilder2.append(paramObject);
      str = stringBuilder2.toString();
      Logger logger = Logger.getLogger("com.google.common.base.Strings");
      Level level = Level.WARNING;
      paramObject = String.valueOf(str);
      if (paramObject.length() != 0) {
        paramObject = "Exception during lenientFormat for ".concat(paramObject);
      } else {
        paramObject = new String("Exception during lenientFormat for ");
      } 
      logger.logp(level, "com.google.common.base.Strings", "lenientToString", paramObject, exception);
      paramObject = exception.getClass().getName();
      StringBuilder stringBuilder1 = new StringBuilder(String.valueOf(str).length() + 9 + String.valueOf(paramObject).length());
      stringBuilder1.append("<");
      stringBuilder1.append(str);
      stringBuilder1.append(" threw ");
      stringBuilder1.append(paramObject);
      stringBuilder1.append(">");
      return stringBuilder1.toString();
    } 
  }
  
  public static String zza(@NullableDecl String paramString, @NullableDecl Object... paramVarArgs) {
    paramString = String.valueOf(paramString);
    int k = 0;
    int i;
    for (i = 0; i < paramVarArgs.length; i++)
      paramVarArgs[i] = zza(paramVarArgs[i]); 
    StringBuilder stringBuilder = new StringBuilder(paramString.length() + paramVarArgs.length * 16);
    int j = 0;
    i = k;
    while (i < paramVarArgs.length) {
      k = paramString.indexOf("%s", j);
      if (k != -1) {
        stringBuilder.append(paramString, j, k);
        stringBuilder.append(paramVarArgs[i]);
        j = k + 2;
        i++;
      } 
    } 
    stringBuilder.append(paramString, j, paramString.length());
    if (i < paramVarArgs.length) {
      stringBuilder.append(" [");
      j = i + 1;
      stringBuilder.append(paramVarArgs[i]);
      for (i = j; i < paramVarArgs.length; i++) {
        stringBuilder.append(", ");
        stringBuilder.append(paramVarArgs[i]);
      } 
      stringBuilder.append(']');
    } 
    return stringBuilder.toString();
  }
}
