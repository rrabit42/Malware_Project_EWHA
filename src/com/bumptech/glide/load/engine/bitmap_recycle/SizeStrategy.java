package com.bumptech.glide.load.engine.bitmap_recycle;

import android.annotation.TargetApi;
import android.graphics.Bitmap;
import com.bumptech.glide.util.Util;
import java.util.TreeMap;

@TargetApi(19)
class SizeStrategy implements LruPoolStrategy {
  private static final int MAX_SIZE_MULTIPLE = 8;
  
  private final GroupedLinkedMap<Key, Bitmap> groupedMap = new GroupedLinkedMap();
  
  private final KeyPool keyPool = new KeyPool();
  
  private final TreeMap<Integer, Integer> sortedSizes = new PrettyPrintTreeMap();
  
  private void decrementBitmapOfSize(Integer paramInteger) {
    Integer integer = (Integer)this.sortedSizes.get(paramInteger);
    if (integer.intValue() == 1) {
      this.sortedSizes.remove(paramInteger);
      return;
    } 
    this.sortedSizes.put(paramInteger, Integer.valueOf(integer.intValue() - 1));
  }
  
  private static String getBitmapString(int paramInt) {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("[");
    stringBuilder.append(paramInt);
    stringBuilder.append("]");
    return stringBuilder.toString();
  }
  
  private static String getBitmapString(Bitmap paramBitmap) { return getBitmapString(Util.getBitmapByteSize(paramBitmap)); }
  
  public Bitmap get(int paramInt1, int paramInt2, Bitmap.Config paramConfig) {
    int i = Util.getBitmapByteSize(paramInt1, paramInt2, paramConfig);
    Key key2 = this.keyPool.get(i);
    Integer integer = (Integer)this.sortedSizes.ceilingKey(Integer.valueOf(i));
    Key key1 = key2;
    if (integer != null) {
      key1 = key2;
      if (integer.intValue() != i) {
        key1 = key2;
        if (integer.intValue() <= i * 8) {
          this.keyPool.offer(key2);
          key1 = this.keyPool.get(integer.intValue());
        } 
      } 
    } 
    Bitmap bitmap = (Bitmap)this.groupedMap.get(key1);
    if (bitmap != null) {
      bitmap.reconfigure(paramInt1, paramInt2, paramConfig);
      decrementBitmapOfSize(integer);
    } 
    return bitmap;
  }
  
  public int getSize(Bitmap paramBitmap) { return Util.getBitmapByteSize(paramBitmap); }
  
  public String logBitmap(int paramInt1, int paramInt2, Bitmap.Config paramConfig) { return getBitmapString(Util.getBitmapByteSize(paramInt1, paramInt2, paramConfig)); }
  
  public String logBitmap(Bitmap paramBitmap) { return getBitmapString(paramBitmap); }
  
  public void put(Bitmap paramBitmap) {
    int i = Util.getBitmapByteSize(paramBitmap);
    Key key = this.keyPool.get(i);
    this.groupedMap.put(key, paramBitmap);
    Integer integer = (Integer)this.sortedSizes.get(Integer.valueOf(Key.access$000(key)));
    TreeMap treeMap = this.sortedSizes;
    int j = Key.access$000(key);
    i = 1;
    if (integer != null)
      i = 1 + integer.intValue(); 
    treeMap.put(Integer.valueOf(j), Integer.valueOf(i));
  }
  
  public Bitmap removeLast() {
    Bitmap bitmap = (Bitmap)this.groupedMap.removeLast();
    if (bitmap != null)
      decrementBitmapOfSize(Integer.valueOf(Util.getBitmapByteSize(bitmap))); 
    return bitmap;
  }
  
  public String toString() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("SizeStrategy:\n  ");
    stringBuilder.append(this.groupedMap);
    stringBuilder.append("\n");
    stringBuilder.append("  SortedSizes");
    stringBuilder.append(this.sortedSizes);
    return stringBuilder.toString();
  }
}
