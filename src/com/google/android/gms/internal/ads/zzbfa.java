package com.google.android.gms.internal.ads;

import java.io.IOException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public final class zzbfa {
  private final ByteBuffer zzebj;
  
  private zzbfa(ByteBuffer paramByteBuffer) {
    this.zzebj = paramByteBuffer;
    this.zzebj.order(ByteOrder.LITTLE_ENDIAN);
  }
  
  private zzbfa(byte[] paramArrayOfByte, int paramInt1, int paramInt2) { this(ByteBuffer.wrap(paramArrayOfByte, paramInt1, paramInt2)); }
  
  private static int zza(CharSequence paramCharSequence) {
    int k;
    int n = paramCharSequence.length();
    int m = 0;
    int j;
    for (j = 0; j < n && paramCharSequence.charAt(j) < ''; j++);
    int i = n;
    while (true) {
      k = i;
      if (j < n) {
        k = paramCharSequence.charAt(j);
        if (k < 2048) {
          i += (127 - k >>> 31);
          j++;
          continue;
        } 
        int i1 = paramCharSequence.length();
        k = m;
        while (j < i1) {
          char c = paramCharSequence.charAt(j);
          if (c < 'ࠀ') {
            k += ('' - c >>> '\037');
            m = j;
          } else {
            int i2 = k + 2;
            k = i2;
            m = j;
            if ('?' <= c) {
              k = i2;
              m = j;
              if (c <= '?')
                if (Character.codePointAt(paramCharSequence, j) >= 65536) {
                  m = j + 1;
                  k = i2;
                } else {
                  paramCharSequence = new StringBuilder(39);
                  paramCharSequence.append("Unpaired surrogate at index ");
                  paramCharSequence.append(j);
                  throw new IllegalArgumentException(paramCharSequence.toString());
                }  
            } 
          } 
          j = m + 1;
        } 
        k = i + k;
      } 
      break;
    } 
    if (k >= n)
      return k; 
    long l = k;
    paramCharSequence = new StringBuilder(54);
    paramCharSequence.append("UTF-8 length does not fit in int: ");
    paramCharSequence.append(l + 4294967296L);
    IllegalArgumentException illegalArgumentException = new IllegalArgumentException(paramCharSequence.toString());
    throw illegalArgumentException;
  }
  
  private static void zza(CharSequence paramCharSequence, ByteBuffer paramByteBuffer) { // Byte code:
    //   0: aload_1
    //   1: invokevirtual isReadOnly : ()Z
    //   4: ifne -> 734
    //   7: aload_1
    //   8: invokevirtual hasArray : ()Z
    //   11: istore #10
    //   13: iconst_0
    //   14: istore #5
    //   16: iconst_0
    //   17: istore #4
    //   19: iload #10
    //   21: ifeq -> 436
    //   24: aload_1
    //   25: invokevirtual array : ()[B
    //   28: astore #11
    //   30: aload_1
    //   31: invokevirtual arrayOffset : ()I
    //   34: aload_1
    //   35: invokevirtual position : ()I
    //   38: iadd
    //   39: istore #5
    //   41: aload_1
    //   42: invokevirtual remaining : ()I
    //   45: istore #6
    //   47: aload_0
    //   48: invokeinterface length : ()I
    //   53: istore #7
    //   55: iload #6
    //   57: iload #5
    //   59: iadd
    //   60: istore #8
    //   62: iload #4
    //   64: iload #7
    //   66: if_icmpge -> 750
    //   69: iload #4
    //   71: iload #5
    //   73: iadd
    //   74: istore #6
    //   76: iload #6
    //   78: iload #8
    //   80: if_icmpge -> 750
    //   83: aload_0
    //   84: iload #4
    //   86: invokeinterface charAt : (I)C
    //   91: istore #9
    //   93: iload #9
    //   95: sipush #128
    //   98: if_icmpge -> 750
    //   101: aload #11
    //   103: iload #6
    //   105: iload #9
    //   107: i2b
    //   108: bastore
    //   109: iload #4
    //   111: iconst_1
    //   112: iadd
    //   113: istore #4
    //   115: goto -> 62
    //   118: iload #5
    //   120: istore #6
    //   122: iload #4
    //   124: iload #7
    //   126: if_icmpge -> 406
    //   129: aload_0
    //   130: iload #4
    //   132: invokeinterface charAt : (I)C
    //   137: istore_2
    //   138: iload_2
    //   139: sipush #128
    //   142: if_icmpge -> 780
    //   145: iload #5
    //   147: iload #8
    //   149: if_icmpge -> 780
    //   152: iload #5
    //   154: iconst_1
    //   155: iadd
    //   156: istore #6
    //   158: aload #11
    //   160: iload #5
    //   162: iload_2
    //   163: i2b
    //   164: bastore
    //   165: iload #6
    //   167: istore #5
    //   169: goto -> 777
    //   172: iload #5
    //   174: iload #8
    //   176: iconst_4
    //   177: isub
    //   178: if_icmpgt -> 357
    //   181: iload #4
    //   183: iconst_1
    //   184: iadd
    //   185: istore #6
    //   187: iload #6
    //   189: aload_0
    //   190: invokeinterface length : ()I
    //   195: if_icmpeq -> 319
    //   198: aload_0
    //   199: iload #6
    //   201: invokeinterface charAt : (I)C
    //   206: istore_3
    //   207: iload_2
    //   208: iload_3
    //   209: invokestatic isSurrogatePair : (CC)Z
    //   212: ifeq -> 935
    //   215: iload_2
    //   216: iload_3
    //   217: invokestatic toCodePoint : (CC)I
    //   220: istore #4
    //   222: iload #5
    //   224: iconst_1
    //   225: iadd
    //   226: istore #9
    //   228: aload #11
    //   230: iload #5
    //   232: iload #4
    //   234: bipush #18
    //   236: iushr
    //   237: sipush #240
    //   240: ior
    //   241: i2b
    //   242: bastore
    //   243: iload #9
    //   245: iconst_1
    //   246: iadd
    //   247: istore #5
    //   249: aload #11
    //   251: iload #9
    //   253: iload #4
    //   255: bipush #12
    //   257: iushr
    //   258: bipush #63
    //   260: iand
    //   261: sipush #128
    //   264: ior
    //   265: i2b
    //   266: bastore
    //   267: iload #5
    //   269: iconst_1
    //   270: iadd
    //   271: istore #9
    //   273: aload #11
    //   275: iload #5
    //   277: iload #4
    //   279: bipush #6
    //   281: iushr
    //   282: bipush #63
    //   284: iand
    //   285: sipush #128
    //   288: ior
    //   289: i2b
    //   290: bastore
    //   291: iload #9
    //   293: iconst_1
    //   294: iadd
    //   295: istore #5
    //   297: aload #11
    //   299: iload #9
    //   301: iload #4
    //   303: bipush #63
    //   305: iand
    //   306: sipush #128
    //   309: ior
    //   310: i2b
    //   311: bastore
    //   312: iload #6
    //   314: istore #4
    //   316: goto -> 926
    //   319: new java/lang/StringBuilder
    //   322: dup
    //   323: bipush #39
    //   325: invokespecial <init> : (I)V
    //   328: astore_0
    //   329: aload_0
    //   330: ldc 'Unpaired surrogate at index '
    //   332: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   335: pop
    //   336: aload_0
    //   337: iload #4
    //   339: iconst_1
    //   340: isub
    //   341: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   344: pop
    //   345: new java/lang/IllegalArgumentException
    //   348: dup
    //   349: aload_0
    //   350: invokevirtual toString : ()Ljava/lang/String;
    //   353: invokespecial <init> : (Ljava/lang/String;)V
    //   356: athrow
    //   357: new java/lang/StringBuilder
    //   360: dup
    //   361: bipush #37
    //   363: invokespecial <init> : (I)V
    //   366: astore_0
    //   367: aload_0
    //   368: ldc 'Failed writing '
    //   370: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   373: pop
    //   374: aload_0
    //   375: iload_2
    //   376: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   379: pop
    //   380: aload_0
    //   381: ldc ' at index '
    //   383: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   386: pop
    //   387: aload_0
    //   388: iload #5
    //   390: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   393: pop
    //   394: new java/lang/ArrayIndexOutOfBoundsException
    //   397: dup
    //   398: aload_0
    //   399: invokevirtual toString : ()Ljava/lang/String;
    //   402: invokespecial <init> : (Ljava/lang/String;)V
    //   405: athrow
    //   406: aload_1
    //   407: iload #6
    //   409: aload_1
    //   410: invokevirtual arrayOffset : ()I
    //   413: isub
    //   414: invokevirtual position : (I)Ljava/nio/Buffer;
    //   417: pop
    //   418: return
    //   419: astore_0
    //   420: new java/nio/BufferOverflowException
    //   423: dup
    //   424: invokespecial <init> : ()V
    //   427: astore_1
    //   428: aload_1
    //   429: aload_0
    //   430: invokevirtual initCause : (Ljava/lang/Throwable;)Ljava/lang/Throwable;
    //   433: pop
    //   434: aload_1
    //   435: athrow
    //   436: aload_0
    //   437: invokeinterface length : ()I
    //   442: istore #6
    //   444: iload #5
    //   446: istore #4
    //   448: iload #4
    //   450: iload #6
    //   452: if_icmpge -> 733
    //   455: aload_0
    //   456: iload #4
    //   458: invokeinterface charAt : (I)C
    //   463: istore_2
    //   464: iload_2
    //   465: sipush #128
    //   468: if_icmpge -> 485
    //   471: iload_2
    //   472: istore #5
    //   474: aload_1
    //   475: iload #5
    //   477: i2b
    //   478: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   481: pop
    //   482: goto -> 724
    //   485: iload_2
    //   486: sipush #2048
    //   489: if_icmpge -> 523
    //   492: iload_2
    //   493: bipush #6
    //   495: iushr
    //   496: sipush #960
    //   499: ior
    //   500: istore #5
    //   502: aload_1
    //   503: iload #5
    //   505: i2b
    //   506: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   509: pop
    //   510: iload_2
    //   511: bipush #63
    //   513: iand
    //   514: sipush #128
    //   517: ior
    //   518: istore #5
    //   520: goto -> 474
    //   523: iload_2
    //   524: ldc 55296
    //   526: if_icmplt -> 694
    //   529: ldc 57343
    //   531: iload_2
    //   532: if_icmpge -> 538
    //   535: goto -> 694
    //   538: iload #4
    //   540: iconst_1
    //   541: iadd
    //   542: istore #5
    //   544: iload #5
    //   546: aload_0
    //   547: invokeinterface length : ()I
    //   552: if_icmpeq -> 656
    //   555: aload_0
    //   556: iload #5
    //   558: invokeinterface charAt : (I)C
    //   563: istore_3
    //   564: iload_2
    //   565: iload_3
    //   566: invokestatic isSurrogatePair : (CC)Z
    //   569: ifeq -> 652
    //   572: iload_2
    //   573: iload_3
    //   574: invokestatic toCodePoint : (CC)I
    //   577: istore #4
    //   579: aload_1
    //   580: iload #4
    //   582: bipush #18
    //   584: iushr
    //   585: sipush #240
    //   588: ior
    //   589: i2b
    //   590: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   593: pop
    //   594: aload_1
    //   595: iload #4
    //   597: bipush #12
    //   599: iushr
    //   600: bipush #63
    //   602: iand
    //   603: sipush #128
    //   606: ior
    //   607: i2b
    //   608: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   611: pop
    //   612: aload_1
    //   613: iload #4
    //   615: bipush #6
    //   617: iushr
    //   618: bipush #63
    //   620: iand
    //   621: sipush #128
    //   624: ior
    //   625: i2b
    //   626: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   629: pop
    //   630: aload_1
    //   631: iload #4
    //   633: bipush #63
    //   635: iand
    //   636: sipush #128
    //   639: ior
    //   640: i2b
    //   641: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   644: pop
    //   645: iload #5
    //   647: istore #4
    //   649: goto -> 724
    //   652: iload #5
    //   654: istore #4
    //   656: new java/lang/StringBuilder
    //   659: dup
    //   660: bipush #39
    //   662: invokespecial <init> : (I)V
    //   665: astore_0
    //   666: aload_0
    //   667: ldc 'Unpaired surrogate at index '
    //   669: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   672: pop
    //   673: aload_0
    //   674: iload #4
    //   676: iconst_1
    //   677: isub
    //   678: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   681: pop
    //   682: new java/lang/IllegalArgumentException
    //   685: dup
    //   686: aload_0
    //   687: invokevirtual toString : ()Ljava/lang/String;
    //   690: invokespecial <init> : (Ljava/lang/String;)V
    //   693: athrow
    //   694: aload_1
    //   695: iload_2
    //   696: bipush #12
    //   698: iushr
    //   699: sipush #480
    //   702: ior
    //   703: i2b
    //   704: invokevirtual put : (B)Ljava/nio/ByteBuffer;
    //   707: pop
    //   708: iload_2
    //   709: bipush #6
    //   711: iushr
    //   712: bipush #63
    //   714: iand
    //   715: sipush #128
    //   718: ior
    //   719: istore #5
    //   721: goto -> 502
    //   724: iload #4
    //   726: iconst_1
    //   727: iadd
    //   728: istore #4
    //   730: goto -> 448
    //   733: return
    //   734: new java/nio/ReadOnlyBufferException
    //   737: dup
    //   738: invokespecial <init> : ()V
    //   741: astore_0
    //   742: goto -> 747
    //   745: aload_0
    //   746: athrow
    //   747: goto -> 745
    //   750: iload #4
    //   752: iload #7
    //   754: if_icmpne -> 767
    //   757: iload #5
    //   759: iload #7
    //   761: iadd
    //   762: istore #6
    //   764: goto -> 406
    //   767: iload #5
    //   769: iload #4
    //   771: iadd
    //   772: istore #5
    //   774: goto -> 118
    //   777: goto -> 926
    //   780: iload_2
    //   781: sipush #2048
    //   784: if_icmpge -> 839
    //   787: iload #5
    //   789: iload #8
    //   791: iconst_2
    //   792: isub
    //   793: if_icmpgt -> 839
    //   796: iload #5
    //   798: iconst_1
    //   799: iadd
    //   800: istore #6
    //   802: aload #11
    //   804: iload #5
    //   806: iload_2
    //   807: bipush #6
    //   809: iushr
    //   810: sipush #960
    //   813: ior
    //   814: i2b
    //   815: bastore
    //   816: iload #6
    //   818: iconst_1
    //   819: iadd
    //   820: istore #5
    //   822: aload #11
    //   824: iload #6
    //   826: iload_2
    //   827: bipush #63
    //   829: iand
    //   830: sipush #128
    //   833: ior
    //   834: i2b
    //   835: bastore
    //   836: goto -> 926
    //   839: iload_2
    //   840: ldc 55296
    //   842: if_icmplt -> 851
    //   845: ldc 57343
    //   847: iload_2
    //   848: if_icmpge -> 172
    //   851: iload #5
    //   853: iload #8
    //   855: iconst_3
    //   856: isub
    //   857: if_icmpgt -> 172
    //   860: iload #5
    //   862: iconst_1
    //   863: iadd
    //   864: istore #6
    //   866: aload #11
    //   868: iload #5
    //   870: iload_2
    //   871: bipush #12
    //   873: iushr
    //   874: sipush #480
    //   877: ior
    //   878: i2b
    //   879: bastore
    //   880: iload #6
    //   882: iconst_1
    //   883: iadd
    //   884: istore #9
    //   886: aload #11
    //   888: iload #6
    //   890: iload_2
    //   891: bipush #6
    //   893: iushr
    //   894: bipush #63
    //   896: iand
    //   897: sipush #128
    //   900: ior
    //   901: i2b
    //   902: bastore
    //   903: iload #9
    //   905: iconst_1
    //   906: iadd
    //   907: istore #5
    //   909: aload #11
    //   911: iload #9
    //   913: iload_2
    //   914: bipush #63
    //   916: iand
    //   917: sipush #128
    //   920: ior
    //   921: i2b
    //   922: bastore
    //   923: goto -> 777
    //   926: iload #4
    //   928: iconst_1
    //   929: iadd
    //   930: istore #4
    //   932: goto -> 118
    //   935: iload #6
    //   937: istore #4
    //   939: goto -> 319
    // Exception table:
    //   from	to	target	type
    //   24	55	419	java/lang/ArrayIndexOutOfBoundsException
    //   83	93	419	java/lang/ArrayIndexOutOfBoundsException
    //   129	138	419	java/lang/ArrayIndexOutOfBoundsException
    //   187	222	419	java/lang/ArrayIndexOutOfBoundsException
    //   319	357	419	java/lang/ArrayIndexOutOfBoundsException
    //   357	406	419	java/lang/ArrayIndexOutOfBoundsException
    //   406	418	419	java/lang/ArrayIndexOutOfBoundsException }
  
  public static int zzb(int paramInt, zzbfi paramzzbfi) {
    paramInt = zzcd(paramInt);
    int i = paramzzbfi.zzacw();
    return paramInt + zzcl(i) + i;
  }
  
  public static int zzb(int paramInt, byte[] paramArrayOfByte) { return zzcd(paramInt) + zzv(paramArrayOfByte); }
  
  public static int zzcd(int paramInt) { return zzcl(paramInt << 3); }
  
  public static int zzce(int paramInt) { return (paramInt >= 0) ? zzcl(paramInt) : 10; }
  
  public static int zzcl(int paramInt) { return ((paramInt & 0xFFFFFF80) == 0) ? 1 : (((paramInt & 0xFFFFC000) == 0) ? 2 : (((0xFFE00000 & paramInt) == 0) ? 3 : (((paramInt & 0xF0000000) == 0) ? 4 : 5))); }
  
  public static int zzd(int paramInt, long paramLong) { return zzcd(paramInt) + zzy(paramLong); }
  
  private final void zzdd(int paramInt) throws IOException {
    byte b = (byte)paramInt;
    if (this.zzebj.hasRemaining()) {
      this.zzebj.put(b);
      return;
    } 
    throw new zzbfb(this.zzebj.position(), this.zzebj.limit());
  }
  
  public static int zze(int paramInt, long paramLong) { return zzcd(paramInt) + zzy(paramLong); }
  
  public static int zzeo(String paramString) {
    int i = zza(paramString);
    return zzcl(i) + i;
  }
  
  public static int zzg(int paramInt, String paramString) { return zzcd(paramInt) + zzeo(paramString); }
  
  public static zzbfa zzj(byte[] paramArrayOfByte, int paramInt1, int paramInt2) { return new zzbfa(paramArrayOfByte, 0, paramInt2); }
  
  public static int zzq(int paramInt1, int paramInt2) { return zzcd(paramInt1) + zzce(paramInt2); }
  
  public static zzbfa zzu(byte[] paramArrayOfByte) { return zzj(paramArrayOfByte, 0, paramArrayOfByte.length); }
  
  public static int zzv(byte[] paramArrayOfByte) { return zzcl(paramArrayOfByte.length) + paramArrayOfByte.length; }
  
  private final void zzx(long paramLong) throws IOException {
    while (true) {
      if ((0xFFFFFFFFFFFFFF80L & paramLong) == 0L) {
        zzdd((int)paramLong);
        return;
      } 
      zzdd((int)paramLong & 0x7F | 0x80);
      paramLong >>>= 7;
    } 
  }
  
  public static int zzy(long paramLong) { return ((0xFFFFFFFFFFFFFF80L & paramLong) == 0L) ? 1 : (((0xFFFFFFFFFFFFC000L & paramLong) == 0L) ? 2 : (((0xFFFFFFFFFFE00000L & paramLong) == 0L) ? 3 : (((0xFFFFFFFFF0000000L & paramLong) == 0L) ? 4 : (((0xFFFFFFF800000000L & paramLong) == 0L) ? 5 : (((0xFFFFFC0000000000L & paramLong) == 0L) ? 6 : (((0xFFFE000000000000L & paramLong) == 0L) ? 7 : (((0xFF00000000000000L & paramLong) == 0L) ? 8 : (((paramLong & Float.MIN_VALUE) == 0L) ? 9 : 10)))))))); }
  
  public final void zza(int paramInt, long paramLong) throws IOException {
    zzl(paramInt, 0);
    zzx(paramLong);
  }
  
  public final void zza(int paramInt, zzbfi paramzzbfi) throws IOException {
    zzl(paramInt, 2);
    if (paramzzbfi.zzebt < 0)
      paramzzbfi.zzacw(); 
    zzde(paramzzbfi.zzebt);
    paramzzbfi.zza(this);
  }
  
  public final void zza(int paramInt, byte[] paramArrayOfByte) throws IOException {
    zzl(paramInt, 2);
    zzde(paramArrayOfByte.length);
    zzw(paramArrayOfByte);
  }
  
  public final void zzacl() {
    if (this.zzebj.remaining() == 0)
      return; 
    throw new IllegalStateException(String.format("Did not write as much data as expected, %s bytes remaining.", new Object[] { Integer.valueOf(this.zzebj.remaining()) }));
  }
  
  public final void zzde(int paramInt) throws IOException {
    while (true) {
      if ((paramInt & 0xFFFFFF80) == 0) {
        zzdd(paramInt);
        return;
      } 
      zzdd(paramInt & 0x7F | 0x80);
      paramInt >>>= 7;
    } 
  }
  
  public final void zzf(int paramInt, String paramString) throws IOException {
    zzl(paramInt, 2);
    try {
      paramInt = zzcl(paramString.length());
      if (paramInt == zzcl(paramString.length() * 3)) {
        int i = this.zzebj.position();
        if (this.zzebj.remaining() >= paramInt) {
          this.zzebj.position(i + paramInt);
          zza(paramString, this.zzebj);
          int j = this.zzebj.position();
          this.zzebj.position(i);
          zzde(j - i - paramInt);
          this.zzebj.position(j);
          return;
        } 
        throw new zzbfb(i + paramInt, this.zzebj.limit());
      } 
      zzde(zza(paramString));
      zza(paramString, this.zzebj);
      return;
    } catch (BufferOverflowException paramString) {
      zzbfb zzbfb = new zzbfb(this.zzebj.position(), this.zzebj.limit());
      zzbfb.initCause(paramString);
      throw zzbfb;
    } 
  }
  
  public final void zzf(int paramInt, boolean paramBoolean) throws IOException {
    zzl(paramInt, 0);
    byte b = (byte)paramBoolean;
    if (this.zzebj.hasRemaining()) {
      this.zzebj.put(b);
      return;
    } 
    throw new zzbfb(this.zzebj.position(), this.zzebj.limit());
  }
  
  public final void zzi(int paramInt, long paramLong) throws IOException {
    zzl(paramInt, 0);
    zzx(paramLong);
  }
  
  public final void zzl(int paramInt1, int paramInt2) throws IOException { zzde(paramInt1 << 3 | paramInt2); }
  
  public final void zzm(int paramInt1, int paramInt2) throws IOException {
    zzl(paramInt1, 0);
    if (paramInt2 >= 0) {
      zzde(paramInt2);
      return;
    } 
    zzx(paramInt2);
  }
  
  public final void zzw(byte[] paramArrayOfByte) throws IOException {
    int i = paramArrayOfByte.length;
    if (this.zzebj.remaining() >= i) {
      this.zzebj.put(paramArrayOfByte, 0, i);
      return;
    } 
    throw new zzbfb(this.zzebj.position(), this.zzebj.limit());
  }
}
