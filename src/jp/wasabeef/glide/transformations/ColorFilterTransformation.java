package jp.wasabeef.glide.transformations;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffColorFilter;
import com.bumptech.glide.Glide;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.resource.bitmap.BitmapResource;

public class ColorFilterTransformation extends Object implements Transformation<Bitmap> {
  private BitmapPool mBitmapPool;
  
  private int mColor;
  
  public ColorFilterTransformation(Context paramContext, int paramInt) { this(Glide.get(paramContext).getBitmapPool(), paramInt); }
  
  public ColorFilterTransformation(BitmapPool paramBitmapPool, int paramInt) {
    this.mBitmapPool = paramBitmapPool;
    this.mColor = paramInt;
  }
  
  public String getId() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("ColorFilterTransformation(color=");
    stringBuilder.append(this.mColor);
    stringBuilder.append(")");
    return stringBuilder.toString();
  }
  
  public Resource<Bitmap> transform(Resource<Bitmap> paramResource, int paramInt1, int paramInt2) {
    Bitmap.Config config;
    Bitmap bitmap3 = (Bitmap)paramResource.get();
    paramInt1 = bitmap3.getWidth();
    paramInt2 = bitmap3.getHeight();
    if (bitmap3.getConfig() != null) {
      config = bitmap3.getConfig();
    } else {
      config = Bitmap.Config.ARGB_8888;
    } 
    Bitmap bitmap2 = this.mBitmapPool.get(paramInt1, paramInt2, config);
    Bitmap bitmap1 = bitmap2;
    if (bitmap2 == null)
      bitmap1 = Bitmap.createBitmap(paramInt1, paramInt2, config); 
    Canvas canvas = new Canvas(bitmap1);
    Paint paint = new Paint();
    paint.setAntiAlias(true);
    paint.setColorFilter(new PorterDuffColorFilter(this.mColor, PorterDuff.Mode.SRC_ATOP));
    canvas.drawBitmap(bitmap3, 0.0F, 0.0F, paint);
    return BitmapResource.obtain(bitmap1, this.mBitmapPool);
  }
}
