package android.arch.persistence.room;

import android.arch.persistence.db.SimpleSQLiteQuery;
import android.arch.persistence.db.SupportSQLiteDatabase;
import android.arch.persistence.db.SupportSQLiteOpenHelper;
import android.database.Cursor;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RestrictTo;

@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
public class RoomOpenHelper extends SupportSQLiteOpenHelper.Callback {
  @Nullable
  private DatabaseConfiguration mConfiguration;
  
  @NonNull
  private final Delegate mDelegate;
  
  @NonNull
  private final String mIdentityHash;
  
  @NonNull
  private final String mLegacyHash;
  
  public RoomOpenHelper(@NonNull DatabaseConfiguration paramDatabaseConfiguration, @NonNull Delegate paramDelegate, @NonNull String paramString) { this(paramDatabaseConfiguration, paramDelegate, "", paramString); }
  
  public RoomOpenHelper(@NonNull DatabaseConfiguration paramDatabaseConfiguration, @NonNull Delegate paramDelegate, @NonNull String paramString1, @NonNull String paramString2) {
    super(paramDelegate.version);
    this.mConfiguration = paramDatabaseConfiguration;
    this.mDelegate = paramDelegate;
    this.mIdentityHash = paramString1;
    this.mLegacyHash = paramString2;
  }
  
  private void checkIdentity(SupportSQLiteDatabase paramSupportSQLiteDatabase) {
    boolean bool = hasRoomMasterTable(paramSupportSQLiteDatabase);
    str = null;
    SupportSQLiteDatabase supportSQLiteDatabase = null;
    if (bool) {
      str = paramSupportSQLiteDatabase.query(new SimpleSQLiteQuery("SELECT identity_hash FROM room_master_table WHERE id = 42 LIMIT 1"));
      paramSupportSQLiteDatabase = supportSQLiteDatabase;
      try {
        if (str.moveToFirst())
          str1 = str.getString(0); 
        str.close();
      } finally {
        str.close();
      } 
    } 
    if (!this.mIdentityHash.equals(str)) {
      if (this.mLegacyHash.equals(str))
        return; 
      throw new IllegalStateException("Room cannot verify the data integrity. Looks like you've changed schema but forgot to update the version number. You can simply fix this by increasing the version number.");
    } 
  }
  
  private void createMasterTableIfNotExists(SupportSQLiteDatabase paramSupportSQLiteDatabase) { paramSupportSQLiteDatabase.execSQL("CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)"); }
  
  private static boolean hasRoomMasterTable(SupportSQLiteDatabase paramSupportSQLiteDatabase) {
    cursor = paramSupportSQLiteDatabase.query("SELECT 1 FROM sqlite_master WHERE type = 'table' AND name='room_master_table'");
    try {
      boolean bool = cursor.moveToFirst();
      byte b = 0;
      i = b;
      if (bool) {
        int j = cursor.getInt(0);
        i = b;
        if (j != 0)
          i = 1; 
      } 
      return i;
    } finally {
      cursor.close();
    } 
  }
  
  private void updateIdentity(SupportSQLiteDatabase paramSupportSQLiteDatabase) {
    createMasterTableIfNotExists(paramSupportSQLiteDatabase);
    paramSupportSQLiteDatabase.execSQL(RoomMasterTable.createInsertQuery(this.mIdentityHash));
  }
  
  public void onConfigure(SupportSQLiteDatabase paramSupportSQLiteDatabase) { super.onConfigure(paramSupportSQLiteDatabase); }
  
  public void onCreate(SupportSQLiteDatabase paramSupportSQLiteDatabase) {
    updateIdentity(paramSupportSQLiteDatabase);
    this.mDelegate.createAllTables(paramSupportSQLiteDatabase);
    this.mDelegate.onCreate(paramSupportSQLiteDatabase);
  }
  
  public void onDowngrade(SupportSQLiteDatabase paramSupportSQLiteDatabase, int paramInt1, int paramInt2) { onUpgrade(paramSupportSQLiteDatabase, paramInt1, paramInt2); }
  
  public void onOpen(SupportSQLiteDatabase paramSupportSQLiteDatabase) {
    super.onOpen(paramSupportSQLiteDatabase);
    checkIdentity(paramSupportSQLiteDatabase);
    this.mDelegate.onOpen(paramSupportSQLiteDatabase);
    this.mConfiguration = null;
  }
  
  public void onUpgrade(SupportSQLiteDatabase paramSupportSQLiteDatabase, int paramInt1, int paramInt2) { // Byte code:
    //   0: aload_0
    //   1: getfield mConfiguration : Landroid/arch/persistence/room/DatabaseConfiguration;
    //   4: astore #5
    //   6: aload #5
    //   8: ifnull -> 83
    //   11: aload #5
    //   13: getfield migrationContainer : Landroid/arch/persistence/room/RoomDatabase$MigrationContainer;
    //   16: iload_2
    //   17: iload_3
    //   18: invokevirtual findMigrationPath : (II)Ljava/util/List;
    //   21: astore #5
    //   23: aload #5
    //   25: ifnull -> 83
    //   28: aload #5
    //   30: invokeinterface iterator : ()Ljava/util/Iterator;
    //   35: astore #5
    //   37: aload #5
    //   39: invokeinterface hasNext : ()Z
    //   44: ifeq -> 64
    //   47: aload #5
    //   49: invokeinterface next : ()Ljava/lang/Object;
    //   54: checkcast android/arch/persistence/room/migration/Migration
    //   57: aload_1
    //   58: invokevirtual migrate : (Landroid/arch/persistence/db/SupportSQLiteDatabase;)V
    //   61: goto -> 37
    //   64: aload_0
    //   65: getfield mDelegate : Landroid/arch/persistence/room/RoomOpenHelper$Delegate;
    //   68: aload_1
    //   69: invokevirtual validateMigration : (Landroid/arch/persistence/db/SupportSQLiteDatabase;)V
    //   72: aload_0
    //   73: aload_1
    //   74: invokespecial updateIdentity : (Landroid/arch/persistence/db/SupportSQLiteDatabase;)V
    //   77: iconst_1
    //   78: istore #4
    //   80: goto -> 86
    //   83: iconst_0
    //   84: istore #4
    //   86: iload #4
    //   88: ifne -> 209
    //   91: aload_0
    //   92: getfield mConfiguration : Landroid/arch/persistence/room/DatabaseConfiguration;
    //   95: astore #5
    //   97: aload #5
    //   99: ifnull -> 128
    //   102: aload #5
    //   104: iload_2
    //   105: invokevirtual isMigrationRequiredFrom : (I)Z
    //   108: ifne -> 128
    //   111: aload_0
    //   112: getfield mDelegate : Landroid/arch/persistence/room/RoomOpenHelper$Delegate;
    //   115: aload_1
    //   116: invokevirtual dropAllTables : (Landroid/arch/persistence/db/SupportSQLiteDatabase;)V
    //   119: aload_0
    //   120: getfield mDelegate : Landroid/arch/persistence/room/RoomOpenHelper$Delegate;
    //   123: aload_1
    //   124: invokevirtual createAllTables : (Landroid/arch/persistence/db/SupportSQLiteDatabase;)V
    //   127: return
    //   128: new java/lang/StringBuilder
    //   131: dup
    //   132: invokespecial <init> : ()V
    //   135: astore_1
    //   136: aload_1
    //   137: ldc 'A migration from '
    //   139: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   142: pop
    //   143: aload_1
    //   144: iload_2
    //   145: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   148: pop
    //   149: aload_1
    //   150: ldc ' to '
    //   152: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   155: pop
    //   156: aload_1
    //   157: iload_3
    //   158: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   161: pop
    //   162: aload_1
    //   163: ldc ' was required but not found. Please provide the '
    //   165: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   168: pop
    //   169: aload_1
    //   170: ldc 'necessary Migration path via '
    //   172: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   175: pop
    //   176: aload_1
    //   177: ldc 'RoomDatabase.Builder.addMigration(Migration ...) or allow for '
    //   179: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   182: pop
    //   183: aload_1
    //   184: ldc 'destructive migrations via one of the '
    //   186: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   189: pop
    //   190: aload_1
    //   191: ldc 'RoomDatabase.Builder.fallbackToDestructiveMigration* methods.'
    //   193: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   196: pop
    //   197: new java/lang/IllegalStateException
    //   200: dup
    //   201: aload_1
    //   202: invokevirtual toString : ()Ljava/lang/String;
    //   205: invokespecial <init> : (Ljava/lang/String;)V
    //   208: athrow
    //   209: return }
}
