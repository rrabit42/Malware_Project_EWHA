package android.support.customtabs;

import android.app.Service;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.IBinder;
import android.support.v4.util.ArrayMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;

public abstract class CustomTabsService extends Service {
  public static final String ACTION_CUSTOM_TABS_CONNECTION = "android.support.customtabs.action.CustomTabsService";
  
  public static final String KEY_URL = "android.support.customtabs.otherurls.URL";
  
  public static final int RESULT_FAILURE_DISALLOWED = -1;
  
  public static final int RESULT_FAILURE_MESSAGING_ERROR = -3;
  
  public static final int RESULT_FAILURE_REMOTE_ERROR = -2;
  
  public static final int RESULT_SUCCESS = 0;
  
  private ICustomTabsService.Stub mBinder = new Object(this);
  
  private final Map<IBinder, IBinder.DeathRecipient> mDeathRecipientMap = new ArrayMap();
  
  protected boolean cleanUpSession(CustomTabsSessionToken paramCustomTabsSessionToken) {
    try {
      synchronized (this.mDeathRecipientMap) {
        IBinder iBinder = paramCustomTabsSessionToken.getCallbackBinder();
        iBinder.unlinkToDeath((IBinder.DeathRecipient)this.mDeathRecipientMap.get(iBinder), 0);
        this.mDeathRecipientMap.remove(iBinder);
        return true;
      } 
    } catch (NoSuchElementException paramCustomTabsSessionToken) {
      return false;
    } 
  }
  
  protected abstract Bundle extraCommand(String paramString, Bundle paramBundle);
  
  protected abstract boolean mayLaunchUrl(CustomTabsSessionToken paramCustomTabsSessionToken, Uri paramUri, Bundle paramBundle, List<Bundle> paramList);
  
  protected abstract boolean newSession(CustomTabsSessionToken paramCustomTabsSessionToken);
  
  public IBinder onBind(Intent paramIntent) { return this.mBinder; }
  
  protected abstract int postMessage(CustomTabsSessionToken paramCustomTabsSessionToken, String paramString, Bundle paramBundle);
  
  protected abstract boolean requestPostMessageChannel(CustomTabsSessionToken paramCustomTabsSessionToken, Uri paramUri);
  
  protected abstract boolean updateVisuals(CustomTabsSessionToken paramCustomTabsSessionToken, Bundle paramBundle);
  
  protected abstract boolean warmup(long paramLong);
}
