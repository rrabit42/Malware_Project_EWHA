package com.google.android.gms.internal.ads;

import android.content.Context;
import android.net.Uri;
import android.os.Environment;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import com.google.android.gms.ads.internal.zzbv;
import com.google.android.gms.common.util.VisibleForTesting;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.annotation.ParametersAreNonnullByDefault;

@zzadh
@ParametersAreNonnullByDefault
public final class zznn {
  @VisibleForTesting
  private Context mContext;
  
  @VisibleForTesting
  private String zzaej;
  
  @VisibleForTesting
  private String zzbfx;
  
  @VisibleForTesting
  private BlockingQueue<zznx> zzbfz = new ArrayBlockingQueue(100);
  
  @VisibleForTesting
  private ExecutorService zzbga;
  
  @VisibleForTesting
  private LinkedHashMap<String, String> zzbgb = new LinkedHashMap();
  
  @VisibleForTesting
  private Map<String, zznr> zzbgc = new HashMap();
  
  private AtomicBoolean zzbgd;
  
  private File zzbge;
  
  private final void zzjf() {
    try {
      while (true) {
        zznx zznx = (zznx)this.zzbfz.take();
        str = zznx.zzjk();
        if (!TextUtils.isEmpty(str)) {
          map = zza(this.zzbgb, zznx.zzjl());
          Uri.Builder builder = Uri.parse(this.zzbfx).buildUpon();
          for (Map.Entry entry : map.entrySet())
            builder.appendQueryParameter((String)entry.getKey(), (String)entry.getValue()); 
          StringBuilder stringBuilder = new StringBuilder(builder.build().toString());
          stringBuilder.append("&it=");
          stringBuilder.append(str);
          String str1 = stringBuilder.toString();
          if (this.zzbgd.get()) {
            File file = this.zzbge;
            if (file != null) {
              String str2;
              map = null;
              str = null;
              try {
                fileOutputStream = new FileOutputStream(file, true);
                try {
                  fileOutputStream.write(str1.getBytes());
                  fileOutputStream.write(10);
                } catch (IOException map) {
                
                } finally {
                  Map map1;
                  map = null;
                  FileOutputStream fileOutputStream1 = fileOutputStream;
                } 
              } catch (IOException str) {
                Map map1 = map;
                str2 = str;
              } finally {}
              File file1 = file;
              zzakb.zzc("CsiReporter: Cannot write to file: sdk_csi_data.txt.", str2);
              if (file != null)
                file.close(); 
              continue;
            } 
            zzakb.zzdk("CsiReporter: File doesn't exists. Cannot write CSI data to file.");
            continue;
          } 
          zzbv.zzek().zzd(this.mContext, this.zzaej, str1);
        } 
      } 
    } catch (InterruptedException interruptedException) {
      zzakb.zzc("CsiReporter:reporter interrupted", interruptedException);
      return;
    } 
  }
  
  final Map<String, String> zza(Map<String, String> paramMap1, @Nullable Map<String, String> paramMap2) {
    paramMap1 = new LinkedHashMap<String, String>(paramMap1);
    if (paramMap2 == null)
      return paramMap1; 
    for (Map.Entry entry : paramMap2.entrySet()) {
      String str1 = (String)entry.getKey();
      String str2 = (String)entry.getValue();
      String str3 = (String)paramMap1.get(str1);
      paramMap1.put(str1, zzal(str1).zzd(str3, str2));
    } 
    return paramMap1;
  }
  
  public final void zza(Context paramContext, String paramString1, String paramString2, Map<String, String> paramMap) {
    this.mContext = paramContext;
    this.zzaej = paramString1;
    this.zzbfx = paramString2;
    this.zzbgd = new AtomicBoolean(false);
    AtomicBoolean atomicBoolean = this.zzbgd;
    zzna zzna = zznk.zzawj;
    atomicBoolean.set(((Boolean)zzkb.zzik().zzd(zzna)).booleanValue());
    if (this.zzbgd.get()) {
      File file = Environment.getExternalStorageDirectory();
      if (file != null)
        this.zzbge = new File(file, "sdk_csi_data.txt"); 
    } 
    for (Map.Entry entry : paramMap.entrySet())
      this.zzbgb.put((String)entry.getKey(), (String)entry.getValue()); 
    this.zzbga = Executors.newSingleThreadExecutor();
    this.zzbga.execute(new zzno(this));
    this.zzbgc.put("action", zznr.zzbgh);
    this.zzbgc.put("ad_format", zznr.zzbgh);
    this.zzbgc.put("e", zznr.zzbgi);
  }
  
  public final boolean zza(zznx paramzznx) { return this.zzbfz.offer(paramzznx); }
  
  public final zznr zzal(String paramString) {
    zznr zznr = (zznr)this.zzbgc.get(paramString);
    return (zznr != null) ? zznr : zznr.zzbgg;
  }
  
  public final void zzg(@Nullable List<String> paramList) {
    if (paramList != null && !paramList.isEmpty())
      this.zzbgb.put("e", TextUtils.join(",", paramList)); 
  }
}
