package com.google.android.gms.internal.ads;

import android.os.Parcel;
import android.util.Base64;
import com.google.android.gms.ads.internal.zzbv;
import com.google.android.gms.common.internal.safeparcel.SafeParcelReader;
import com.google.android.gms.common.util.VisibleForTesting;
import java.io.IOException;
import java.io.UnsupportedEncodingException;

@zzadh
final class zzuc {
  final zzjj zzaao;
  
  final int zzbop;
  
  final String zzye;
  
  @VisibleForTesting
  private zzuc(zzjj paramzzjj, String paramString, int paramInt) {
    this.zzaao = paramzzjj;
    this.zzye = paramString;
    this.zzbop = paramInt;
  }
  
  zzuc(zzty paramzzty) { this(paramzzty.zzlf(), paramzzty.getAdUnitId(), paramzzty.getNetworkType()); }
  
  static zzuc zzba(String paramString) throws IOException {
    String[] arrayOfString = paramString.split("\000");
    if (arrayOfString.length == 3) {
      Parcel parcel = Parcel.obtain();
      try {
        paramString = new String(Base64.decode(arrayOfString[0], 0), "UTF-8");
        int i = Integer.parseInt(arrayOfString[1]);
        byte[] arrayOfByte = Base64.decode(arrayOfString[2], 0);
        parcel.unmarshall(arrayOfByte, 0, arrayOfByte.length);
        parcel.setDataPosition(0);
        zzuc zzuc1 = new zzuc((zzjj)zzjj.CREATOR.createFromParcel(parcel), paramString, i);
        parcel.recycle();
        return zzuc1;
      } catch (IllegalStateException paramString) {
      
      } catch (IllegalArgumentException paramString) {
      
      } catch (com.google.android.gms.common.internal.safeparcel.SafeParcelReader.ParseException paramString) {
      
      } finally {}
      zzbv.zzeo().zza(paramString, "QueueSeed.decode");
      throw new IOException("Malformed QueueSeed encoding.", paramString);
    } 
    throw new IOException("Incorrect field count for QueueSeed.");
  }
  
  final String zzlu() {
    parcel = Parcel.obtain();
    try {
      null = Base64.encodeToString(this.zzye.getBytes("UTF-8"), 0);
      String str1 = Integer.toString(this.zzbop);
      this.zzaao.writeToParcel(parcel, 0);
      String str2;
      StringBuilder stringBuilder = new StringBuilder((str2 = Base64.encodeToString(parcel.marshall(), 0)).valueOf(null).length() + 2 + String.valueOf(str1).length() + String.valueOf(str2).length());
      stringBuilder.append(null);
      stringBuilder.append("\000");
      stringBuilder.append(str1);
      stringBuilder.append("\000");
      stringBuilder.append(str2);
      return stringBuilder.toString();
    } catch (UnsupportedEncodingException unsupportedEncodingException) {
      zzakb.e("QueueSeed encode failed because UTF-8 is not available.");
      return "";
    } finally {
      parcel.recycle();
    } 
  }
}
