package com.bumptech.glide;

import android.graphics.Bitmap;
import android.os.ParcelFileDescriptor;
import com.bumptech.glide.load.model.ImageVideoModelLoader;
import com.bumptech.glide.load.model.ImageVideoWrapper;
import com.bumptech.glide.load.model.ModelLoader;
import com.bumptech.glide.load.resource.transcode.BitmapBytesTranscoder;
import com.bumptech.glide.load.resource.transcode.ResourceTranscoder;
import com.bumptech.glide.provider.DataLoadProvider;
import com.bumptech.glide.provider.FixedLoadProvider;
import java.io.InputStream;

public class BitmapTypeRequest<ModelType> extends BitmapRequestBuilder<ModelType, Bitmap> {
  private final ModelLoader<ModelType, ParcelFileDescriptor> fileDescriptorModelLoader;
  
  private final Glide glide;
  
  private final RequestManager.OptionsApplier optionsApplier;
  
  private final ModelLoader<ModelType, InputStream> streamModelLoader;
  
  BitmapTypeRequest(GenericRequestBuilder<ModelType, ?, ?, ?> paramGenericRequestBuilder, ModelLoader<ModelType, InputStream> paramModelLoader1, ModelLoader<ModelType, ParcelFileDescriptor> paramModelLoader2, RequestManager.OptionsApplier paramOptionsApplier) {
    super(buildProvider(paramGenericRequestBuilder.glide, paramModelLoader1, paramModelLoader2, Bitmap.class, null), Bitmap.class, paramGenericRequestBuilder);
    this.streamModelLoader = paramModelLoader1;
    this.fileDescriptorModelLoader = paramModelLoader2;
    this.glide = paramGenericRequestBuilder.glide;
    this.optionsApplier = paramOptionsApplier;
  }
  
  private static <A, R> FixedLoadProvider<A, ImageVideoWrapper, Bitmap, R> buildProvider(Glide paramGlide, ModelLoader<A, InputStream> paramModelLoader1, ModelLoader<A, ParcelFileDescriptor> paramModelLoader2, Class<R> paramClass, ResourceTranscoder<Bitmap, R> paramResourceTranscoder) {
    if (paramModelLoader1 == null && paramModelLoader2 == null)
      return null; 
    ResourceTranscoder<Bitmap, R> resourceTranscoder = paramResourceTranscoder;
    if (paramResourceTranscoder == null)
      resourceTranscoder = paramGlide.buildTranscoder(Bitmap.class, paramClass); 
    DataLoadProvider dataLoadProvider = paramGlide.buildDataProvider(ImageVideoWrapper.class, Bitmap.class);
    return new FixedLoadProvider(new ImageVideoModelLoader(paramModelLoader1, paramModelLoader2), resourceTranscoder, dataLoadProvider);
  }
  
  public BitmapRequestBuilder<ModelType, byte[]> toBytes() { return transcode(new BitmapBytesTranscoder(), byte[].class); }
  
  public BitmapRequestBuilder<ModelType, byte[]> toBytes(Bitmap.CompressFormat paramCompressFormat, int paramInt) { return transcode(new BitmapBytesTranscoder(paramCompressFormat, paramInt), byte[].class); }
  
  public <R> BitmapRequestBuilder<ModelType, R> transcode(ResourceTranscoder<Bitmap, R> paramResourceTranscoder, Class<R> paramClass) { return (BitmapRequestBuilder)this.optionsApplier.apply(new BitmapRequestBuilder(buildProvider(this.glide, this.streamModelLoader, this.fileDescriptorModelLoader, paramClass, paramResourceTranscoder), paramClass, this)); }
}
