package com.bumptech.glide;

import android.content.Context;
import android.net.Uri;
import android.os.Handler;
import android.os.Looper;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.load.model.ModelLoader;
import com.bumptech.glide.load.model.file_descriptor.FileDescriptorModelLoader;
import com.bumptech.glide.load.model.stream.MediaStoreStreamLoader;
import com.bumptech.glide.load.model.stream.StreamByteArrayLoader;
import com.bumptech.glide.load.model.stream.StreamModelLoader;
import com.bumptech.glide.manager.ConnectivityMonitor;
import com.bumptech.glide.manager.ConnectivityMonitorFactory;
import com.bumptech.glide.manager.Lifecycle;
import com.bumptech.glide.manager.LifecycleListener;
import com.bumptech.glide.manager.RequestManagerTreeNode;
import com.bumptech.glide.manager.RequestTracker;
import com.bumptech.glide.signature.ApplicationVersionSignature;
import com.bumptech.glide.signature.MediaStoreSignature;
import com.bumptech.glide.signature.StringSignature;
import com.bumptech.glide.util.Util;
import java.io.File;
import java.net.URL;
import java.util.Iterator;
import java.util.UUID;

public class RequestManager implements LifecycleListener {
  private final Context context;
  
  private final Glide glide;
  
  private final Lifecycle lifecycle;
  
  private DefaultOptions options;
  
  private final OptionsApplier optionsApplier;
  
  private final RequestTracker requestTracker;
  
  private final RequestManagerTreeNode treeNode;
  
  public RequestManager(Context paramContext, Lifecycle paramLifecycle, RequestManagerTreeNode paramRequestManagerTreeNode) { this(paramContext, paramLifecycle, paramRequestManagerTreeNode, new RequestTracker(), new ConnectivityMonitorFactory()); }
  
  RequestManager(Context paramContext, Lifecycle paramLifecycle, RequestManagerTreeNode paramRequestManagerTreeNode, RequestTracker paramRequestTracker, ConnectivityMonitorFactory paramConnectivityMonitorFactory) {
    this.context = paramContext.getApplicationContext();
    this.lifecycle = paramLifecycle;
    this.treeNode = paramRequestManagerTreeNode;
    this.requestTracker = paramRequestTracker;
    this.glide = Glide.get(paramContext);
    this.optionsApplier = new OptionsApplier(this);
    ConnectivityMonitor connectivityMonitor = paramConnectivityMonitorFactory.build(paramContext, new RequestManagerConnectivityListener(paramRequestTracker));
    if (Util.isOnBackgroundThread()) {
      (new Handler(Looper.getMainLooper())).post(new Object(this, paramLifecycle));
    } else {
      paramLifecycle.addListener(this);
    } 
    paramLifecycle.addListener(connectivityMonitor);
  }
  
  private static <T> Class<T> getSafeClass(T paramT) { return (paramT != null) ? paramT.getClass() : null; }
  
  private <T> DrawableTypeRequest<T> loadGeneric(Class<T> paramClass) {
    ModelLoader modelLoader1 = Glide.buildStreamModelLoader(paramClass, this.context);
    ModelLoader modelLoader2 = Glide.buildFileDescriptorModelLoader(paramClass, this.context);
    if (paramClass == null || modelLoader1 != null || modelLoader2 != null) {
      OptionsApplier optionsApplier1 = this.optionsApplier;
      return (DrawableTypeRequest)optionsApplier1.apply(new DrawableTypeRequest(paramClass, modelLoader1, modelLoader2, this.context, this.glide, this.requestTracker, this.lifecycle, optionsApplier1));
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Unknown type ");
    stringBuilder.append(paramClass);
    stringBuilder.append(". You must provide a Model of a type for");
    stringBuilder.append(" which there is a registered ModelLoader, if you are using a custom model, you must first call");
    stringBuilder.append(" Glide#register with a ModelLoaderFactory for your custom model class");
    throw new IllegalArgumentException(stringBuilder.toString());
  }
  
  public <T> DrawableTypeRequest<T> from(Class<T> paramClass) { return loadGeneric(paramClass); }
  
  public DrawableTypeRequest<byte[]> fromBytes() { return (DrawableTypeRequest)loadGeneric(byte[].class).signature(new StringSignature(UUID.randomUUID().toString())).diskCacheStrategy(DiskCacheStrategy.NONE).skipMemoryCache(true); }
  
  public DrawableTypeRequest<File> fromFile() { return loadGeneric(File.class); }
  
  public DrawableTypeRequest<Uri> fromMediaStore() {
    ModelLoader modelLoader1 = Glide.buildStreamModelLoader(Uri.class, this.context);
    MediaStoreStreamLoader mediaStoreStreamLoader = new MediaStoreStreamLoader(this.context, modelLoader1);
    ModelLoader modelLoader2 = Glide.buildFileDescriptorModelLoader(Uri.class, this.context);
    OptionsApplier optionsApplier1 = this.optionsApplier;
    return (DrawableTypeRequest)optionsApplier1.apply(new DrawableTypeRequest(Uri.class, mediaStoreStreamLoader, modelLoader2, this.context, this.glide, this.requestTracker, this.lifecycle, optionsApplier1));
  }
  
  public DrawableTypeRequest<Integer> fromResource() { return (DrawableTypeRequest)loadGeneric(Integer.class).signature(ApplicationVersionSignature.obtain(this.context)); }
  
  public DrawableTypeRequest<String> fromString() { return loadGeneric(String.class); }
  
  public DrawableTypeRequest<Uri> fromUri() { return loadGeneric(Uri.class); }
  
  @Deprecated
  public DrawableTypeRequest<URL> fromUrl() { return loadGeneric(URL.class); }
  
  public boolean isPaused() {
    Util.assertMainThread();
    return this.requestTracker.isPaused();
  }
  
  public DrawableTypeRequest<Uri> load(Uri paramUri) { return (DrawableTypeRequest)fromUri().load(paramUri); }
  
  public DrawableTypeRequest<File> load(File paramFile) { return (DrawableTypeRequest)fromFile().load(paramFile); }
  
  public DrawableTypeRequest<Integer> load(Integer paramInteger) { return (DrawableTypeRequest)fromResource().load(paramInteger); }
  
  public <T> DrawableTypeRequest<T> load(T paramT) { return (DrawableTypeRequest)loadGeneric(getSafeClass(paramT)).load(paramT); }
  
  public DrawableTypeRequest<String> load(String paramString) { return (DrawableTypeRequest)fromString().load(paramString); }
  
  @Deprecated
  public DrawableTypeRequest<URL> load(URL paramURL) { return (DrawableTypeRequest)fromUrl().load(paramURL); }
  
  public DrawableTypeRequest<byte[]> load(byte[] paramArrayOfByte) { return (DrawableTypeRequest)fromBytes().load(paramArrayOfByte); }
  
  @Deprecated
  public DrawableTypeRequest<byte[]> load(byte[] paramArrayOfByte, String paramString) { return (DrawableTypeRequest)load(paramArrayOfByte).signature(new StringSignature(paramString)); }
  
  public DrawableTypeRequest<Uri> loadFromMediaStore(Uri paramUri) { return (DrawableTypeRequest)fromMediaStore().load(paramUri); }
  
  @Deprecated
  public DrawableTypeRequest<Uri> loadFromMediaStore(Uri paramUri, String paramString, long paramLong, int paramInt) {
    MediaStoreSignature mediaStoreSignature = new MediaStoreSignature(paramString, paramLong, paramInt);
    return (DrawableTypeRequest)loadFromMediaStore(paramUri).signature(mediaStoreSignature);
  }
  
  public void onDestroy() { this.requestTracker.clearRequests(); }
  
  public void onLowMemory() { this.glide.clearMemory(); }
  
  public void onStart() { resumeRequests(); }
  
  public void onStop() { pauseRequests(); }
  
  public void onTrimMemory(int paramInt) { this.glide.trimMemory(paramInt); }
  
  public void pauseRequests() {
    Util.assertMainThread();
    this.requestTracker.pauseRequests();
  }
  
  public void pauseRequestsRecursive() {
    Util.assertMainThread();
    pauseRequests();
    Iterator iterator = this.treeNode.getDescendants().iterator();
    while (iterator.hasNext())
      ((RequestManager)iterator.next()).pauseRequests(); 
  }
  
  public void resumeRequests() {
    Util.assertMainThread();
    this.requestTracker.resumeRequests();
  }
  
  public void resumeRequestsRecursive() {
    Util.assertMainThread();
    resumeRequests();
    Iterator iterator = this.treeNode.getDescendants().iterator();
    while (iterator.hasNext())
      ((RequestManager)iterator.next()).resumeRequests(); 
  }
  
  public void setDefaultOptions(DefaultOptions paramDefaultOptions) { this.options = paramDefaultOptions; }
  
  public <A, T> GenericModelRequest<A, T> using(ModelLoader<A, T> paramModelLoader, Class<T> paramClass) { return new GenericModelRequest(this, paramModelLoader, paramClass); }
  
  public ImageModelRequest<byte[]> using(StreamByteArrayLoader paramStreamByteArrayLoader) { return new ImageModelRequest(this, paramStreamByteArrayLoader); }
  
  public <T> ImageModelRequest<T> using(StreamModelLoader<T> paramStreamModelLoader) { return new ImageModelRequest(this, paramStreamModelLoader); }
  
  public <T> VideoModelRequest<T> using(FileDescriptorModelLoader<T> paramFileDescriptorModelLoader) { return new VideoModelRequest(this, paramFileDescriptorModelLoader); }
}
