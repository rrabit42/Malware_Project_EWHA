package com.android.volley.request;

import android.text.TextUtils;
import com.android.volley.NetworkResponse;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.toolbox.HttpHeaderParser;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;

public class DownloadRequest extends Request<String> implements Response.ProgressListener {
  private final String mDownloadPath;
  
  private final Response.Listener<String> mListener;
  
  private Response.ProgressListener mProgressListener;
  
  public DownloadRequest(String paramString1, String paramString2, Response.Listener<String> paramListener, Response.ErrorListener paramErrorListener) {
    super(0, paramString1, paramErrorListener);
    this.mDownloadPath = paramString2;
    this.mListener = paramListener;
  }
  
  protected void deliverResponse(String paramString) {
    Response.Listener listener = this.mListener;
    if (listener != null)
      listener.onResponse(paramString); 
  }
  
  public void onProgress(long paramLong1, long paramLong2) {
    Response.ProgressListener progressListener = this.mProgressListener;
    if (progressListener != null)
      progressListener.onProgress(paramLong1, paramLong2); 
  }
  
  protected Response<String> parseNetworkResponse(NetworkResponse paramNetworkResponse) {
    str2 = "";
    str1 = null;
    try {
      byte[] arrayOfByte = paramNetworkResponse.data;
      FileOutputStream fileOutputStream = new FileOutputStream(this.mDownloadPath);
      fileOutputStream.write(arrayOfByte);
      fileOutputStream.close();
      str = this.mDownloadPath;
      str1 = str;
    } catch (UnsupportedEncodingException str1) {
      str1 = new String(paramNetworkResponse.data);
    } catch (FileNotFoundException fileNotFoundException) {
      fileNotFoundException.printStackTrace();
    } catch (IOException iOException) {
      iOException.printStackTrace();
    } finally {
      TextUtils.isEmpty(null);
    } 
    return Response.success(str1, HttpHeaderParser.parseCacheHeaders(paramNetworkResponse));
  }
  
  public void setOnProgressListener(Response.ProgressListener paramProgressListener) { this.mProgressListener = paramProgressListener; }
}
