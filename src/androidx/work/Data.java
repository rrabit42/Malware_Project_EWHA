package androidx.work;

import android.arch.persistence.room.TypeConverter;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RestrictTo;
import android.support.annotation.VisibleForTesting;
import android.util.Log;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public final class Data {
  public static final Data EMPTY;
  
  public static final int MAX_DATA_BYTES = 10240;
  
  private static final String TAG = Logger.tagWithPrefix("Data");
  
  Map<String, Object> mValues;
  
  static  {
    EMPTY = (new Builder()).build();
  }
  
  Data() {}
  
  public Data(@NonNull Data paramData) { this.mValues = new HashMap(paramData.mValues); }
  
  Data(@NonNull Map<String, ?> paramMap) { this.mValues = new HashMap(paramMap); }
  
  @NonNull
  static Boolean[] convertPrimitiveBooleanArray(@NonNull boolean[] paramArrayOfBoolean) {
    Boolean[] arrayOfBoolean = new Boolean[paramArrayOfBoolean.length];
    for (byte b = 0; b < paramArrayOfBoolean.length; b++)
      arrayOfBoolean[b] = Boolean.valueOf(paramArrayOfBoolean[b]); 
    return arrayOfBoolean;
  }
  
  @NonNull
  static Double[] convertPrimitiveDoubleArray(@NonNull double[] paramArrayOfDouble) {
    Double[] arrayOfDouble = new Double[paramArrayOfDouble.length];
    for (byte b = 0; b < paramArrayOfDouble.length; b++)
      arrayOfDouble[b] = Double.valueOf(paramArrayOfDouble[b]); 
    return arrayOfDouble;
  }
  
  @NonNull
  static Float[] convertPrimitiveFloatArray(@NonNull float[] paramArrayOfFloat) {
    Float[] arrayOfFloat = new Float[paramArrayOfFloat.length];
    for (byte b = 0; b < paramArrayOfFloat.length; b++)
      arrayOfFloat[b] = Float.valueOf(paramArrayOfFloat[b]); 
    return arrayOfFloat;
  }
  
  @NonNull
  static Integer[] convertPrimitiveIntArray(@NonNull int[] paramArrayOfInt) {
    Integer[] arrayOfInteger = new Integer[paramArrayOfInt.length];
    for (byte b = 0; b < paramArrayOfInt.length; b++)
      arrayOfInteger[b] = Integer.valueOf(paramArrayOfInt[b]); 
    return arrayOfInteger;
  }
  
  @NonNull
  static Long[] convertPrimitiveLongArray(@NonNull long[] paramArrayOfLong) {
    Long[] arrayOfLong = new Long[paramArrayOfLong.length];
    for (byte b = 0; b < paramArrayOfLong.length; b++)
      arrayOfLong[b] = Long.valueOf(paramArrayOfLong[b]); 
    return arrayOfLong;
  }
  
  @TypeConverter
  @NonNull
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public static Data fromByteArray(@NonNull byte[] paramArrayOfByte) throws IllegalStateException { // Byte code:
    //   0: aload_0
    //   1: arraylength
    //   2: sipush #10240
    //   5: if_icmpgt -> 229
    //   8: new java/util/HashMap
    //   11: dup
    //   12: invokespecial <init> : ()V
    //   15: astore #5
    //   17: new java/io/ByteArrayInputStream
    //   20: dup
    //   21: aload_0
    //   22: invokespecial <init> : ([B)V
    //   25: astore #4
    //   27: new java/io/ObjectInputStream
    //   30: dup
    //   31: aload #4
    //   33: invokespecial <init> : (Ljava/io/InputStream;)V
    //   36: astore_2
    //   37: aload_2
    //   38: astore_0
    //   39: aload_2
    //   40: invokevirtual readInt : ()I
    //   43: istore_1
    //   44: iload_1
    //   45: ifle -> 73
    //   48: aload_2
    //   49: astore_0
    //   50: aload #5
    //   52: aload_2
    //   53: invokevirtual readUTF : ()Ljava/lang/String;
    //   56: aload_2
    //   57: invokevirtual readObject : ()Ljava/lang/Object;
    //   60: invokeinterface put : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   65: pop
    //   66: iload_1
    //   67: iconst_1
    //   68: isub
    //   69: istore_1
    //   70: goto -> 44
    //   73: aload_2
    //   74: invokevirtual close : ()V
    //   77: goto -> 91
    //   80: astore_0
    //   81: getstatic androidx/work/Data.TAG : Ljava/lang/String;
    //   84: ldc 'Error in Data#fromByteArray: '
    //   86: aload_0
    //   87: invokestatic e : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   90: pop
    //   91: aload #4
    //   93: invokevirtual close : ()V
    //   96: goto -> 175
    //   99: astore_3
    //   100: goto -> 122
    //   103: astore_3
    //   104: goto -> 122
    //   107: astore_2
    //   108: aconst_null
    //   109: astore_0
    //   110: goto -> 186
    //   113: astore_0
    //   114: goto -> 118
    //   117: astore_0
    //   118: aconst_null
    //   119: astore_2
    //   120: aload_0
    //   121: astore_3
    //   122: aload_2
    //   123: astore_0
    //   124: getstatic androidx/work/Data.TAG : Ljava/lang/String;
    //   127: ldc 'Error in Data#fromByteArray: '
    //   129: aload_3
    //   130: invokestatic e : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   133: pop
    //   134: aload_2
    //   135: ifnull -> 156
    //   138: aload_2
    //   139: invokevirtual close : ()V
    //   142: goto -> 156
    //   145: astore_0
    //   146: getstatic androidx/work/Data.TAG : Ljava/lang/String;
    //   149: ldc 'Error in Data#fromByteArray: '
    //   151: aload_0
    //   152: invokestatic e : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   155: pop
    //   156: aload #4
    //   158: invokevirtual close : ()V
    //   161: goto -> 175
    //   164: astore_0
    //   165: getstatic androidx/work/Data.TAG : Ljava/lang/String;
    //   168: ldc 'Error in Data#fromByteArray: '
    //   170: aload_0
    //   171: invokestatic e : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   174: pop
    //   175: new androidx/work/Data
    //   178: dup
    //   179: aload #5
    //   181: invokespecial <init> : (Ljava/util/Map;)V
    //   184: areturn
    //   185: astore_2
    //   186: aload_0
    //   187: ifnull -> 208
    //   190: aload_0
    //   191: invokevirtual close : ()V
    //   194: goto -> 208
    //   197: astore_0
    //   198: getstatic androidx/work/Data.TAG : Ljava/lang/String;
    //   201: ldc 'Error in Data#fromByteArray: '
    //   203: aload_0
    //   204: invokestatic e : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   207: pop
    //   208: aload #4
    //   210: invokevirtual close : ()V
    //   213: goto -> 227
    //   216: astore_0
    //   217: getstatic androidx/work/Data.TAG : Ljava/lang/String;
    //   220: ldc 'Error in Data#fromByteArray: '
    //   222: aload_0
    //   223: invokestatic e : (Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   226: pop
    //   227: aload_2
    //   228: athrow
    //   229: new java/lang/IllegalStateException
    //   232: dup
    //   233: ldc 'Data cannot occupy more than 10240 bytes when serialized'
    //   235: invokespecial <init> : (Ljava/lang/String;)V
    //   238: astore_0
    //   239: goto -> 244
    //   242: aload_0
    //   243: athrow
    //   244: goto -> 242
    // Exception table:
    //   from	to	target	type
    //   27	37	117	java/io/IOException
    //   27	37	113	java/lang/ClassNotFoundException
    //   27	37	107	finally
    //   39	44	103	java/io/IOException
    //   39	44	99	java/lang/ClassNotFoundException
    //   39	44	185	finally
    //   50	66	103	java/io/IOException
    //   50	66	99	java/lang/ClassNotFoundException
    //   50	66	185	finally
    //   73	77	80	java/io/IOException
    //   91	96	164	java/io/IOException
    //   124	134	185	finally
    //   138	142	145	java/io/IOException
    //   156	161	164	java/io/IOException
    //   190	194	197	java/io/IOException
    //   208	213	216	java/io/IOException }
  
  @TypeConverter
  @NonNull
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public static byte[] toByteArray(@NonNull Data paramData) throws IllegalStateException {
    byteArrayOutputStream = new ByteArrayOutputStream();
    data2 = null;
    entry1 = null;
    try {
      entry2 = new ObjectOutputStream(byteArrayOutputStream);
    } catch (IOException null) {
    
    } finally {
      paramData = null;
    } 
    Data data1 = paramData;
    Log.e(TAG, "Error in Data#toByteArray: ", entry2);
    data1 = paramData;
    byte[] arrayOfByte = byteArrayOutputStream.toByteArray();
    if (paramData != null)
      try {
        paramData.close();
      } catch (IOException paramData) {
        Log.e(TAG, "Error in Data#toByteArray: ", paramData);
      }  
    try {
      byteArrayOutputStream.close();
      return arrayOfByte;
    } catch (IOException paramData) {
      Log.e(TAG, "Error in Data#toByteArray: ", paramData);
      return arrayOfByte;
    } 
  }
  
  public boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (paramObject == null || getClass() != paramObject.getClass())
      return false; 
    paramObject = (Data)paramObject;
    return this.mValues.equals(paramObject.mValues);
  }
  
  public boolean getBoolean(@NonNull String paramString, boolean paramBoolean) {
    Object object = this.mValues.get(paramString);
    return (object instanceof Boolean) ? ((Boolean)object).booleanValue() : paramBoolean;
  }
  
  @Nullable
  public boolean[] getBooleanArray(@NonNull String paramString) {
    Object object = this.mValues.get(paramString);
    if (object instanceof Boolean[]) {
      Boolean[] arrayOfBoolean = (Boolean[])object;
      boolean[] arrayOfBoolean1 = new boolean[arrayOfBoolean.length];
      for (byte b = 0; b < arrayOfBoolean.length; b++)
        arrayOfBoolean1[b] = arrayOfBoolean[b].booleanValue(); 
      return arrayOfBoolean1;
    } 
    return null;
  }
  
  public double getDouble(@NonNull String paramString, double paramDouble) {
    Object object = this.mValues.get(paramString);
    return (object instanceof Double) ? ((Double)object).doubleValue() : paramDouble;
  }
  
  @Nullable
  public double[] getDoubleArray(@NonNull String paramString) {
    Object object = this.mValues.get(paramString);
    if (object instanceof Double[]) {
      Double[] arrayOfDouble = (Double[])object;
      double[] arrayOfDouble1 = new double[arrayOfDouble.length];
      for (byte b = 0; b < arrayOfDouble.length; b++)
        arrayOfDouble1[b] = arrayOfDouble[b].doubleValue(); 
      return arrayOfDouble1;
    } 
    return null;
  }
  
  public float getFloat(@NonNull String paramString, float paramFloat) {
    Object object = this.mValues.get(paramString);
    return (object instanceof Float) ? ((Float)object).floatValue() : paramFloat;
  }
  
  @Nullable
  public float[] getFloatArray(@NonNull String paramString) {
    Object object = this.mValues.get(paramString);
    if (object instanceof Float[]) {
      Float[] arrayOfFloat = (Float[])object;
      float[] arrayOfFloat1 = new float[arrayOfFloat.length];
      for (byte b = 0; b < arrayOfFloat.length; b++)
        arrayOfFloat1[b] = arrayOfFloat[b].floatValue(); 
      return arrayOfFloat1;
    } 
    return null;
  }
  
  public int getInt(@NonNull String paramString, int paramInt) {
    Object object = this.mValues.get(paramString);
    return (object instanceof Integer) ? ((Integer)object).intValue() : paramInt;
  }
  
  @Nullable
  public int[] getIntArray(@NonNull String paramString) {
    Object object = this.mValues.get(paramString);
    if (object instanceof Integer[]) {
      Integer[] arrayOfInteger = (Integer[])object;
      int[] arrayOfInt = new int[arrayOfInteger.length];
      for (byte b = 0; b < arrayOfInteger.length; b++)
        arrayOfInt[b] = arrayOfInteger[b].intValue(); 
      return arrayOfInt;
    } 
    return null;
  }
  
  @NonNull
  public Map<String, Object> getKeyValueMap() { return Collections.unmodifiableMap(this.mValues); }
  
  public long getLong(@NonNull String paramString, long paramLong) {
    Object object = this.mValues.get(paramString);
    return (object instanceof Long) ? ((Long)object).longValue() : paramLong;
  }
  
  @Nullable
  public long[] getLongArray(@NonNull String paramString) {
    Object object = this.mValues.get(paramString);
    if (object instanceof Long[]) {
      Long[] arrayOfLong = (Long[])object;
      long[] arrayOfLong1 = new long[arrayOfLong.length];
      for (byte b = 0; b < arrayOfLong.length; b++)
        arrayOfLong1[b] = arrayOfLong[b].longValue(); 
      return arrayOfLong1;
    } 
    return null;
  }
  
  @Nullable
  public String getString(@NonNull String paramString) {
    Object object = this.mValues.get(paramString);
    return (object instanceof String) ? (String)object : null;
  }
  
  @Nullable
  public String[] getStringArray(@NonNull String paramString) {
    Object object = this.mValues.get(paramString);
    return (object instanceof String[]) ? (String[])object : null;
  }
  
  public int hashCode() { return this.mValues.hashCode() * 31; }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  @VisibleForTesting
  public int size() { return this.mValues.size(); }
}
