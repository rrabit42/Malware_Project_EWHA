package com.google.android.gms.internal.ads;

import java.security.GeneralSecurityException;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.logging.Logger;

public final class zzauo {
  private static final Logger logger = Logger.getLogger(zzauo.class.getName());
  
  private static final ConcurrentMap<String, zzaug> zzdhq = new ConcurrentHashMap();
  
  private static final ConcurrentMap<String, Boolean> zzdhr = new ConcurrentHashMap();
  
  private static final ConcurrentMap<String, zzaua> zzdhs = new ConcurrentHashMap();
  
  public static <P> zzaum<P> zza(zzauh paramzzauh, zzaug<P> paramzzaug) throws GeneralSecurityException {
    zzaup.zzc(paramzzauh.zzwg());
    zzaum zzaum = new zzaum();
    for (zzaxr.zzb zzb : paramzzauh.zzwg().zzzl()) {
      if (zzb.zzzq() == zzaxl.zzdle) {
        zzaun zzaun = zzaum.zza(zza(zzb.zzzp().zzyw(), zzb.zzzp().zzyx()), zzb);
        if (zzb.zzzr() == paramzzauh.zzwg().zzzk())
          zzaum.zza(zzaun); 
      } 
    } 
    return zzaum;
  }
  
  public static <P> zzaxi zza(zzaxn paramzzaxn) throws GeneralSecurityException {
    zzaug zzaug = zzdz(paramzzaxn.zzyw());
    if (((Boolean)zzdhr.get(paramzzaxn.zzyw())).booleanValue())
      return zzaug.zzc(paramzzaxn.zzyx()); 
    String str = String.valueOf(paramzzaxn.zzyw());
    if (str.length() != 0) {
      str = "newKey-operation not permitted for key type ".concat(str);
    } else {
      str = new String("newKey-operation not permitted for key type ");
    } 
    throw new GeneralSecurityException(str);
  }
  
  public static <P> zzbcu zza(String paramString, zzbcu paramzzbcu) throws GeneralSecurityException {
    zzaug zzaug = zzdz(paramString);
    if (((Boolean)zzdhr.get(paramString)).booleanValue())
      return zzaug.zzb(paramzzbcu); 
    paramString = String.valueOf(paramString);
    if (paramString.length() != 0) {
      paramString = "newKey-operation not permitted for key type ".concat(paramString);
    } else {
      paramString = new String("newKey-operation not permitted for key type ");
    } 
    throw new GeneralSecurityException(paramString);
  }
  
  private static <P> P zza(String paramString, zzbah paramzzbah) throws GeneralSecurityException { return (P)zzdz(paramString).zza(paramzzbah); }
  
  public static <P> P zza(String paramString, byte[] paramArrayOfByte) throws GeneralSecurityException { return (P)zza(paramString, zzbah.zzo(paramArrayOfByte)); }
  
  public static <P> void zza(String paramString, zzaua<P> paramzzaua) throws GeneralSecurityException { // Byte code:
    //   0: ldc com/google/android/gms/internal/ads/zzauo
    //   2: monitorenter
    //   3: getstatic com/google/android/gms/internal/ads/zzauo.zzdhs : Ljava/util/concurrent/ConcurrentMap;
    //   6: aload_0
    //   7: invokevirtual toLowerCase : ()Ljava/lang/String;
    //   10: invokeinterface containsKey : (Ljava/lang/Object;)Z
    //   15: ifeq -> 148
    //   18: getstatic com/google/android/gms/internal/ads/zzauo.zzdhs : Ljava/util/concurrent/ConcurrentMap;
    //   21: aload_0
    //   22: invokevirtual toLowerCase : ()Ljava/lang/String;
    //   25: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   30: checkcast com/google/android/gms/internal/ads/zzaua
    //   33: astore_2
    //   34: aload_1
    //   35: invokevirtual getClass : ()Ljava/lang/Class;
    //   38: aload_2
    //   39: invokevirtual getClass : ()Ljava/lang/Class;
    //   42: invokevirtual equals : (Ljava/lang/Object;)Z
    //   45: ifne -> 148
    //   48: getstatic com/google/android/gms/internal/ads/zzauo.logger : Ljava/util/logging/Logger;
    //   51: astore_2
    //   52: getstatic java/util/logging/Level.WARNING : Ljava/util/logging/Level;
    //   55: astore_3
    //   56: aload_0
    //   57: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   60: astore_1
    //   61: aload_1
    //   62: invokevirtual length : ()I
    //   65: ifeq -> 78
    //   68: ldc 'Attempted overwrite of a catalogueName catalogue for name '
    //   70: aload_1
    //   71: invokevirtual concat : (Ljava/lang/String;)Ljava/lang/String;
    //   74: astore_1
    //   75: goto -> 88
    //   78: new java/lang/String
    //   81: dup
    //   82: ldc 'Attempted overwrite of a catalogueName catalogue for name '
    //   84: invokespecial <init> : (Ljava/lang/String;)V
    //   87: astore_1
    //   88: aload_2
    //   89: aload_3
    //   90: ldc 'com.google.crypto.tink.Registry'
    //   92: ldc 'addCatalogue'
    //   94: aload_1
    //   95: invokevirtual logp : (Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
    //   98: new java/lang/StringBuilder
    //   101: dup
    //   102: aload_0
    //   103: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   106: invokevirtual length : ()I
    //   109: bipush #47
    //   111: iadd
    //   112: invokespecial <init> : (I)V
    //   115: astore_1
    //   116: aload_1
    //   117: ldc 'catalogue for name '
    //   119: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   122: pop
    //   123: aload_1
    //   124: aload_0
    //   125: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   128: pop
    //   129: aload_1
    //   130: ldc ' has been already registered'
    //   132: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   135: pop
    //   136: new java/security/GeneralSecurityException
    //   139: dup
    //   140: aload_1
    //   141: invokevirtual toString : ()Ljava/lang/String;
    //   144: invokespecial <init> : (Ljava/lang/String;)V
    //   147: athrow
    //   148: getstatic com/google/android/gms/internal/ads/zzauo.zzdhs : Ljava/util/concurrent/ConcurrentMap;
    //   151: aload_0
    //   152: invokevirtual toLowerCase : ()Ljava/lang/String;
    //   155: aload_1
    //   156: invokeinterface put : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   161: pop
    //   162: ldc com/google/android/gms/internal/ads/zzauo
    //   164: monitorexit
    //   165: return
    //   166: astore_0
    //   167: ldc com/google/android/gms/internal/ads/zzauo
    //   169: monitorexit
    //   170: aload_0
    //   171: athrow
    // Exception table:
    //   from	to	target	type
    //   3	75	166	finally
    //   78	88	166	finally
    //   88	148	166	finally
    //   148	162	166	finally }
  
  public static <P> void zza(String paramString, zzaug<P> paramzzaug) throws GeneralSecurityException { zza(paramString, paramzzaug, true); }
  
  public static <P> void zza(String paramString, zzaug<P> paramzzaug, boolean paramBoolean) throws GeneralSecurityException { // Byte code:
    //   0: ldc com/google/android/gms/internal/ads/zzauo
    //   2: monitorenter
    //   3: aload_1
    //   4: ifnull -> 199
    //   7: getstatic com/google/android/gms/internal/ads/zzauo.zzdhq : Ljava/util/concurrent/ConcurrentMap;
    //   10: aload_0
    //   11: invokeinterface containsKey : (Ljava/lang/Object;)Z
    //   16: ifeq -> 166
    //   19: aload_0
    //   20: invokestatic zzdz : (Ljava/lang/String;)Lcom/google/android/gms/internal/ads/zzaug;
    //   23: astore #5
    //   25: getstatic com/google/android/gms/internal/ads/zzauo.zzdhr : Ljava/util/concurrent/ConcurrentMap;
    //   28: aload_0
    //   29: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   34: checkcast java/lang/Boolean
    //   37: invokevirtual booleanValue : ()Z
    //   40: istore_3
    //   41: aload_1
    //   42: invokevirtual getClass : ()Ljava/lang/Class;
    //   45: aload #5
    //   47: invokevirtual getClass : ()Ljava/lang/Class;
    //   50: invokevirtual equals : (Ljava/lang/Object;)Z
    //   53: ifeq -> 64
    //   56: iload_3
    //   57: ifne -> 166
    //   60: iload_2
    //   61: ifeq -> 166
    //   64: getstatic com/google/android/gms/internal/ads/zzauo.logger : Ljava/util/logging/Logger;
    //   67: astore #6
    //   69: getstatic java/util/logging/Level.WARNING : Ljava/util/logging/Level;
    //   72: astore #7
    //   74: aload_0
    //   75: invokestatic valueOf : (Ljava/lang/Object;)Ljava/lang/String;
    //   78: astore #4
    //   80: aload #4
    //   82: invokevirtual length : ()I
    //   85: ifeq -> 100
    //   88: ldc 'Attempted overwrite of a registered key manager for key type '
    //   90: aload #4
    //   92: invokevirtual concat : (Ljava/lang/String;)Ljava/lang/String;
    //   95: astore #4
    //   97: goto -> 111
    //   100: new java/lang/String
    //   103: dup
    //   104: ldc 'Attempted overwrite of a registered key manager for key type '
    //   106: invokespecial <init> : (Ljava/lang/String;)V
    //   109: astore #4
    //   111: aload #6
    //   113: aload #7
    //   115: ldc 'com.google.crypto.tink.Registry'
    //   117: ldc 'registerKeyManager'
    //   119: aload #4
    //   121: invokevirtual logp : (Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
    //   124: new java/security/GeneralSecurityException
    //   127: dup
    //   128: ldc 'typeUrl (%s) is already registered with %s, cannot be re-registered with %s'
    //   130: iconst_3
    //   131: anewarray java/lang/Object
    //   134: dup
    //   135: iconst_0
    //   136: aload_0
    //   137: aastore
    //   138: dup
    //   139: iconst_1
    //   140: aload #5
    //   142: invokevirtual getClass : ()Ljava/lang/Class;
    //   145: invokevirtual getName : ()Ljava/lang/String;
    //   148: aastore
    //   149: dup
    //   150: iconst_2
    //   151: aload_1
    //   152: invokevirtual getClass : ()Ljava/lang/Class;
    //   155: invokevirtual getName : ()Ljava/lang/String;
    //   158: aastore
    //   159: invokestatic format : (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   162: invokespecial <init> : (Ljava/lang/String;)V
    //   165: athrow
    //   166: getstatic com/google/android/gms/internal/ads/zzauo.zzdhq : Ljava/util/concurrent/ConcurrentMap;
    //   169: aload_0
    //   170: aload_1
    //   171: invokeinterface put : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   176: pop
    //   177: getstatic com/google/android/gms/internal/ads/zzauo.zzdhr : Ljava/util/concurrent/ConcurrentMap;
    //   180: aload_0
    //   181: iload_2
    //   182: invokestatic valueOf : (Z)Ljava/lang/Boolean;
    //   185: invokeinterface put : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   190: pop
    //   191: ldc com/google/android/gms/internal/ads/zzauo
    //   193: monitorexit
    //   194: return
    //   195: astore_0
    //   196: goto -> 210
    //   199: new java/lang/IllegalArgumentException
    //   202: dup
    //   203: ldc_w 'key manager must be non-null.'
    //   206: invokespecial <init> : (Ljava/lang/String;)V
    //   209: athrow
    //   210: ldc com/google/android/gms/internal/ads/zzauo
    //   212: monitorexit
    //   213: aload_0
    //   214: athrow
    // Exception table:
    //   from	to	target	type
    //   7	56	195	finally
    //   64	97	195	finally
    //   100	111	195	finally
    //   111	166	195	finally
    //   166	191	195	finally
    //   199	210	195	finally }
  
  public static <P> zzbcu zzb(zzaxn paramzzaxn) throws GeneralSecurityException {
    zzaug zzaug = zzdz(paramzzaxn.zzyw());
    if (((Boolean)zzdhr.get(paramzzaxn.zzyw())).booleanValue())
      return zzaug.zzb(paramzzaxn.zzyx()); 
    String str = String.valueOf(paramzzaxn.zzyw());
    if (str.length() != 0) {
      str = "newKey-operation not permitted for key type ".concat(str);
    } else {
      str = new String("newKey-operation not permitted for key type ");
    } 
    throw new GeneralSecurityException(str);
  }
  
  public static <P> P zzb(String paramString, zzbcu paramzzbcu) throws GeneralSecurityException { return (P)zzdz(paramString).zza(paramzzbcu); }
  
  public static <P> zzaua<P> zzdy(String paramString) throws GeneralSecurityException {
    if (paramString != null) {
      String str = (zzaua)zzdhs.get(paramString.toLowerCase());
      if (str == null) {
        String str1 = String.format("no catalogue found for %s. ", new Object[] { paramString });
        str = str1;
        if (paramString.toLowerCase().startsWith("tinkaead"))
          str = String.valueOf(str1).concat("Maybe call AeadConfig.init()."); 
        if (!paramString.toLowerCase().startsWith("tinkdeterministicaead")) {
          if (!paramString.toLowerCase().startsWith("tinkstreamingaead")) {
            if (!paramString.toLowerCase().startsWith("tinkhybriddecrypt") && !paramString.toLowerCase().startsWith("tinkhybridencrypt")) {
              if (!paramString.toLowerCase().startsWith("tinkmac")) {
                if (!paramString.toLowerCase().startsWith("tinkpublickeysign") && !paramString.toLowerCase().startsWith("tinkpublickeyverify")) {
                  str1 = str;
                  if (paramString.toLowerCase().startsWith("tink")) {
                    str = String.valueOf(str);
                    paramString = "Maybe call TinkConfig.init().";
                  } else {
                    throw new GeneralSecurityException(str1);
                  } 
                } else {
                  str = String.valueOf(str);
                  paramString = "Maybe call SignatureConfig.init().";
                } 
              } else {
                str = String.valueOf(str);
                paramString = "Maybe call MacConfig.init().";
              } 
            } else {
              str = String.valueOf(str);
              paramString = "Maybe call HybridConfig.init().";
            } 
          } else {
            str = String.valueOf(str);
            paramString = "Maybe call StreamingAeadConfig.init().";
          } 
        } else {
          str = String.valueOf(str);
          paramString = "Maybe call DeterministicAeadConfig.init().";
        } 
        str1 = str.concat(paramString);
        throw new GeneralSecurityException(str1);
      } 
      return str;
    } 
    throw new IllegalArgumentException("catalogueName must be non-null.");
  }
  
  private static <P> zzaug<P> zzdz(String paramString) throws GeneralSecurityException {
    zzaug zzaug = (zzaug)zzdhq.get(paramString);
    if (zzaug != null)
      return zzaug; 
    StringBuilder stringBuilder = new StringBuilder(String.valueOf(paramString).length() + 78);
    stringBuilder.append("No key manager found for key type: ");
    stringBuilder.append(paramString);
    stringBuilder.append(".  Check the configuration of the registry.");
    throw new GeneralSecurityException(stringBuilder.toString());
  }
}
