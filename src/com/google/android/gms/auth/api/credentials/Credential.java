package com.google.android.gms.auth.api.credentials;

import android.net.Uri;
import android.os.Parcel;
import android.os.Parcelable;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import com.google.android.gms.common.internal.Objects;
import com.google.android.gms.common.internal.ReflectedParcelable;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Class;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Constructor;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Field;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Param;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Reserved;
import java.util.List;
import javax.annotation.Nonnull;

@Class(creator = "CredentialCreator")
@Reserved({1000})
public class Credential extends AbstractSafeParcelable implements ReflectedParcelable {
  public static final Parcelable.Creator<Credential> CREATOR = new zzc();
  
  public static final String EXTRA_KEY = "com.google.android.gms.credentials.Credential";
  
  @Nonnull
  @Field(getter = "getId", id = 1)
  private final String mId;
  
  @Nullable
  @Field(getter = "getName", id = 2)
  private final String mName;
  
  @Nullable
  @Field(getter = "getProfilePictureUri", id = 3)
  private final Uri zzo;
  
  @Nonnull
  @Field(getter = "getIdTokens", id = 4)
  private final List<IdToken> zzp;
  
  @Nullable
  @Field(getter = "getPassword", id = 5)
  private final String zzq;
  
  @Nullable
  @Field(getter = "getAccountType", id = 6)
  private final String zzr;
  
  @Nullable
  @Field(getter = "getGivenName", id = 9)
  private final String zzs;
  
  @Nullable
  @Field(getter = "getFamilyName", id = 10)
  private final String zzt;
  
  @Constructor
  Credential(@Param(id = 1) String paramString1, @Param(id = 2) String paramString2, @Param(id = 3) Uri paramUri, @Param(id = 4) List<IdToken> paramList, @Param(id = 5) String paramString3, @Param(id = 6) String paramString4, @Param(id = 9) String paramString5, @Param(id = 10) String paramString6) { // Byte code:
    //   0: aload_0
    //   1: invokespecial <init> : ()V
    //   4: aload_1
    //   5: ldc 'credential identifier cannot be null'
    //   7: invokestatic checkNotNull : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   10: checkcast java/lang/String
    //   13: invokevirtual trim : ()Ljava/lang/String;
    //   16: astore #12
    //   18: aload #12
    //   20: ldc 'credential identifier cannot be empty'
    //   22: invokestatic checkNotEmpty : (Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;
    //   25: pop
    //   26: aload #5
    //   28: ifnull -> 52
    //   31: aload #5
    //   33: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   36: ifne -> 42
    //   39: goto -> 52
    //   42: new java/lang/IllegalArgumentException
    //   45: dup
    //   46: ldc 'Password must not be empty if set'
    //   48: invokespecial <init> : (Ljava/lang/String;)V
    //   51: athrow
    //   52: aload #6
    //   54: ifnull -> 190
    //   57: aload #6
    //   59: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   62: istore #11
    //   64: iconst_0
    //   65: istore #10
    //   67: iload #10
    //   69: istore #9
    //   71: iload #11
    //   73: ifne -> 166
    //   76: aload #6
    //   78: invokestatic parse : (Ljava/lang/String;)Landroid/net/Uri;
    //   81: astore_1
    //   82: iload #10
    //   84: istore #9
    //   86: aload_1
    //   87: invokevirtual isAbsolute : ()Z
    //   90: ifeq -> 166
    //   93: iload #10
    //   95: istore #9
    //   97: aload_1
    //   98: invokevirtual isHierarchical : ()Z
    //   101: ifeq -> 166
    //   104: iload #10
    //   106: istore #9
    //   108: aload_1
    //   109: invokevirtual getScheme : ()Ljava/lang/String;
    //   112: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   115: ifne -> 166
    //   118: aload_1
    //   119: invokevirtual getAuthority : ()Ljava/lang/String;
    //   122: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   125: ifeq -> 135
    //   128: iload #10
    //   130: istore #9
    //   132: goto -> 166
    //   135: ldc 'http'
    //   137: aload_1
    //   138: invokevirtual getScheme : ()Ljava/lang/String;
    //   141: invokevirtual equalsIgnoreCase : (Ljava/lang/String;)Z
    //   144: ifne -> 163
    //   147: iload #10
    //   149: istore #9
    //   151: ldc 'https'
    //   153: aload_1
    //   154: invokevirtual getScheme : ()Ljava/lang/String;
    //   157: invokevirtual equalsIgnoreCase : (Ljava/lang/String;)Z
    //   160: ifeq -> 166
    //   163: iconst_1
    //   164: istore #9
    //   166: iload #9
    //   168: invokestatic valueOf : (Z)Ljava/lang/Boolean;
    //   171: invokevirtual booleanValue : ()Z
    //   174: ifeq -> 180
    //   177: goto -> 190
    //   180: new java/lang/IllegalArgumentException
    //   183: dup
    //   184: ldc 'Account type must be a valid Http/Https URI'
    //   186: invokespecial <init> : (Ljava/lang/String;)V
    //   189: athrow
    //   190: aload #6
    //   192: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   195: ifne -> 219
    //   198: aload #5
    //   200: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   203: ifeq -> 209
    //   206: goto -> 219
    //   209: new java/lang/IllegalArgumentException
    //   212: dup
    //   213: ldc 'Password and AccountType are mutually exclusive'
    //   215: invokespecial <init> : (Ljava/lang/String;)V
    //   218: athrow
    //   219: aload_2
    //   220: astore_1
    //   221: aload_2
    //   222: ifnull -> 239
    //   225: aload_2
    //   226: astore_1
    //   227: aload_2
    //   228: invokevirtual trim : ()Ljava/lang/String;
    //   231: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   234: ifeq -> 239
    //   237: aconst_null
    //   238: astore_1
    //   239: aload_0
    //   240: aload_1
    //   241: putfield mName : Ljava/lang/String;
    //   244: aload_0
    //   245: aload_3
    //   246: putfield zzo : Landroid/net/Uri;
    //   249: aload #4
    //   251: ifnonnull -> 261
    //   254: invokestatic emptyList : ()Ljava/util/List;
    //   257: astore_1
    //   258: goto -> 267
    //   261: aload #4
    //   263: invokestatic unmodifiableList : (Ljava/util/List;)Ljava/util/List;
    //   266: astore_1
    //   267: aload_0
    //   268: aload_1
    //   269: putfield zzp : Ljava/util/List;
    //   272: aload_0
    //   273: aload #12
    //   275: putfield mId : Ljava/lang/String;
    //   278: aload_0
    //   279: aload #5
    //   281: putfield zzq : Ljava/lang/String;
    //   284: aload_0
    //   285: aload #6
    //   287: putfield zzr : Ljava/lang/String;
    //   290: aload_0
    //   291: aload #7
    //   293: putfield zzs : Ljava/lang/String;
    //   296: aload_0
    //   297: aload #8
    //   299: putfield zzt : Ljava/lang/String;
    //   302: return }
  
  public boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (!(paramObject instanceof Credential))
      return false; 
    paramObject = (Credential)paramObject;
    return (TextUtils.equals(this.mId, paramObject.mId) && TextUtils.equals(this.mName, paramObject.mName) && Objects.equal(this.zzo, paramObject.zzo) && TextUtils.equals(this.zzq, paramObject.zzq) && TextUtils.equals(this.zzr, paramObject.zzr));
  }
  
  @Nullable
  public String getAccountType() { return this.zzr; }
  
  @Nullable
  public String getFamilyName() { return this.zzt; }
  
  @Nullable
  public String getGivenName() { return this.zzs; }
  
  @Nonnull
  public String getId() { return this.mId; }
  
  @Nonnull
  public List<IdToken> getIdTokens() { return this.zzp; }
  
  @Nullable
  public String getName() { return this.mName; }
  
  @Nullable
  public String getPassword() { return this.zzq; }
  
  @Nullable
  public Uri getProfilePictureUri() { return this.zzo; }
  
  public int hashCode() { return Objects.hashCode(new Object[] { this.mId, this.mName, this.zzo, this.zzq, this.zzr }); }
  
  public void writeToParcel(Parcel paramParcel, int paramInt) {
    int i = SafeParcelWriter.beginObjectHeader(paramParcel);
    SafeParcelWriter.writeString(paramParcel, 1, getId(), false);
    SafeParcelWriter.writeString(paramParcel, 2, getName(), false);
    SafeParcelWriter.writeParcelable(paramParcel, 3, getProfilePictureUri(), paramInt, false);
    SafeParcelWriter.writeTypedList(paramParcel, 4, getIdTokens(), false);
    SafeParcelWriter.writeString(paramParcel, 5, getPassword(), false);
    SafeParcelWriter.writeString(paramParcel, 6, getAccountType(), false);
    SafeParcelWriter.writeString(paramParcel, 9, getGivenName(), false);
    SafeParcelWriter.writeString(paramParcel, 10, getFamilyName(), false);
    SafeParcelWriter.finishObjectHeader(paramParcel, i);
  }
}
