package com.bumptech.glide.load.engine.cache;

import android.annotation.TargetApi;
import android.app.ActivityManager;
import android.content.Context;
import android.os.Build;
import android.text.format.Formatter;
import android.util.Log;

public class MemorySizeCalculator {
  static final int BITMAP_POOL_TARGET_SCREENS = 4;
  
  static final int BYTES_PER_ARGB_8888_PIXEL = 4;
  
  static final float LOW_MEMORY_MAX_SIZE_MULTIPLIER = 0.33F;
  
  static final float MAX_SIZE_MULTIPLIER = 0.4F;
  
  static final int MEMORY_CACHE_TARGET_SCREENS = 2;
  
  private static final String TAG = "MemorySizeCalculator";
  
  private final int bitmapPoolSize;
  
  private final Context context;
  
  private final int memoryCacheSize;
  
  public MemorySizeCalculator(Context paramContext) { this(paramContext, (ActivityManager)paramContext.getSystemService("activity"), new DisplayMetricsScreenDimensions(paramContext.getResources().getDisplayMetrics())); }
  
  MemorySizeCalculator(Context paramContext, ActivityManager paramActivityManager, ScreenDimensions paramScreenDimensions) {
    this.context = paramContext;
    int i = getMaxSize(paramActivityManager);
    int k = paramScreenDimensions.getWidthPixels() * paramScreenDimensions.getHeightPixels() * 4;
    int j = k * 4;
    int m = k * 2;
    k = m + j;
    if (k <= i) {
      this.memoryCacheSize = m;
      this.bitmapPoolSize = j;
    } else {
      j = Math.round(i / 6.0F);
      this.memoryCacheSize = j * 2;
      this.bitmapPoolSize = j * 4;
    } 
    if (Log.isLoggable("MemorySizeCalculator", 3)) {
      boolean bool;
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Calculated memory cache size: ");
      stringBuilder.append(toMb(this.memoryCacheSize));
      stringBuilder.append(" pool size: ");
      stringBuilder.append(toMb(this.bitmapPoolSize));
      stringBuilder.append(" memory class limited? ");
      if (k > i) {
        bool = true;
      } else {
        bool = false;
      } 
      stringBuilder.append(bool);
      stringBuilder.append(" max size: ");
      stringBuilder.append(toMb(i));
      stringBuilder.append(" memoryClass: ");
      stringBuilder.append(paramActivityManager.getMemoryClass());
      stringBuilder.append(" isLowMemoryDevice: ");
      stringBuilder.append(isLowMemoryDevice(paramActivityManager));
      Log.d("MemorySizeCalculator", stringBuilder.toString());
    } 
  }
  
  private static int getMaxSize(ActivityManager paramActivityManager) {
    float f1;
    int i = paramActivityManager.getMemoryClass();
    boolean bool = isLowMemoryDevice(paramActivityManager);
    float f2 = (i * 1024 * 1024);
    if (bool) {
      f1 = 0.33F;
    } else {
      f1 = 0.4F;
    } 
    return Math.round(f2 * f1);
  }
  
  @TargetApi(19)
  private static boolean isLowMemoryDevice(ActivityManager paramActivityManager) { return (Build.VERSION.SDK_INT >= 19) ? paramActivityManager.isLowRamDevice() : ((Build.VERSION.SDK_INT < 11) ? 1 : 0); }
  
  private String toMb(int paramInt) { return Formatter.formatFileSize(this.context, paramInt); }
  
  public int getBitmapPoolSize() { return this.bitmapPoolSize; }
  
  public int getMemoryCacheSize() { return this.memoryCacheSize; }
}
