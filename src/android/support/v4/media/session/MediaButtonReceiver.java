package android.support.v4.media.session;

import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.os.Build;
import android.support.annotation.RestrictTo;
import android.support.v4.media.MediaBrowserCompat;
import android.util.Log;
import android.view.KeyEvent;

public class MediaButtonReceiver extends BroadcastReceiver {
  private static final String TAG = "MediaButtonReceiver";
  
  public static PendingIntent buildMediaButtonPendingIntent(Context paramContext, long paramLong) {
    ComponentName componentName = getMediaButtonReceiverComponent(paramContext);
    if (componentName == null) {
      Log.w("MediaButtonReceiver", "A unique media button receiver could not be found in the given context, so couldn't build a pending intent.");
      return null;
    } 
    return buildMediaButtonPendingIntent(paramContext, componentName, paramLong);
  }
  
  public static PendingIntent buildMediaButtonPendingIntent(Context paramContext, ComponentName paramComponentName, long paramLong) {
    StringBuilder stringBuilder;
    if (paramComponentName == null) {
      Log.w("MediaButtonReceiver", "The component name of media button receiver should be provided.");
      return null;
    } 
    int i = PlaybackStateCompat.toKeyCode(paramLong);
    if (i == 0) {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Cannot build a media button pending intent with the given action: ");
      stringBuilder.append(paramLong);
      Log.w("MediaButtonReceiver", stringBuilder.toString());
      return null;
    } 
    Intent intent = new Intent("android.intent.action.MEDIA_BUTTON");
    intent.setComponent(paramComponentName);
    intent.putExtra("android.intent.extra.KEY_EVENT", new KeyEvent(0, i));
    return PendingIntent.getBroadcast(stringBuilder, i, intent, 0);
  }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY})
  public static ComponentName getMediaButtonReceiverComponent(Context paramContext) {
    Intent intent = new Intent("android.intent.action.MEDIA_BUTTON");
    intent.setPackage(paramContext.getPackageName());
    ResolveInfo resolveInfo = paramContext.getPackageManager().queryBroadcastReceivers(intent, 0);
    if (resolveInfo.size() == 1) {
      resolveInfo = (ResolveInfo)resolveInfo.get(0);
      return new ComponentName(resolveInfo.activityInfo.packageName, resolveInfo.activityInfo.name);
    } 
    if (resolveInfo.size() > 1)
      Log.w("MediaButtonReceiver", "More than one BroadcastReceiver that handles android.intent.action.MEDIA_BUTTON was found, returning null."); 
    return null;
  }
  
  private static ComponentName getServiceComponentByAction(Context paramContext, String paramString) {
    PackageManager packageManager = paramContext.getPackageManager();
    Intent intent = new Intent(paramString);
    intent.setPackage(paramContext.getPackageName());
    ResolveInfo resolveInfo = packageManager.queryIntentServices(intent, 0);
    if (resolveInfo.size() == 1) {
      resolveInfo = (ResolveInfo)resolveInfo.get(0);
      return new ComponentName(resolveInfo.serviceInfo.packageName, resolveInfo.serviceInfo.name);
    } 
    if (resolveInfo.isEmpty())
      return null; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Expected 1 service that handles ");
    stringBuilder.append(paramString);
    stringBuilder.append(", found ");
    stringBuilder.append(resolveInfo.size());
    throw new IllegalStateException(stringBuilder.toString());
  }
  
  public static KeyEvent handleIntent(MediaSessionCompat paramMediaSessionCompat, Intent paramIntent) {
    if (paramMediaSessionCompat == null || paramIntent == null || !"android.intent.action.MEDIA_BUTTON".equals(paramIntent.getAction()) || !paramIntent.hasExtra("android.intent.extra.KEY_EVENT"))
      return null; 
    KeyEvent keyEvent = (KeyEvent)paramIntent.getParcelableExtra("android.intent.extra.KEY_EVENT");
    paramMediaSessionCompat.getController().dispatchMediaButtonEvent(keyEvent);
    return keyEvent;
  }
  
  private static void startForegroundService(Context paramContext, Intent paramIntent) {
    if (Build.VERSION.SDK_INT >= 26) {
      paramContext.startForegroundService(paramIntent);
      return;
    } 
    paramContext.startService(paramIntent);
  }
  
  public void onReceive(Context paramContext, Intent paramIntent) {
    StringBuilder stringBuilder;
    if (paramIntent == null || !"android.intent.action.MEDIA_BUTTON".equals(paramIntent.getAction()) || !paramIntent.hasExtra("android.intent.extra.KEY_EVENT")) {
      stringBuilder = new StringBuilder();
      stringBuilder.append("Ignore unsupported intent: ");
      stringBuilder.append(paramIntent);
      Log.d("MediaButtonReceiver", stringBuilder.toString());
      return;
    } 
    ComponentName componentName = getServiceComponentByAction(stringBuilder, "android.intent.action.MEDIA_BUTTON");
    if (componentName != null) {
      paramIntent.setComponent(componentName);
      startForegroundService(stringBuilder, paramIntent);
      return;
    } 
    componentName = getServiceComponentByAction(stringBuilder, "android.media.browse.MediaBrowserService");
    if (componentName != null) {
      BroadcastReceiver.PendingResult pendingResult = goAsync();
      Context context = stringBuilder.getApplicationContext();
      MediaButtonConnectionCallback mediaButtonConnectionCallback = new MediaButtonConnectionCallback(context, paramIntent, pendingResult);
      MediaBrowserCompat mediaBrowserCompat = new MediaBrowserCompat(context, componentName, mediaButtonConnectionCallback, null);
      mediaButtonConnectionCallback.setMediaBrowser(mediaBrowserCompat);
      mediaBrowserCompat.connect();
      return;
    } 
    throw new IllegalStateException("Could not find any Service that handles android.intent.action.MEDIA_BUTTON or implements a media browser service.");
  }
}
