package android.support.v4.os;

import android.os.Build;
import android.support.annotation.GuardedBy;
import android.support.annotation.IntRange;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RestrictTo;
import android.support.annotation.Size;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Locale;

@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
final class LocaleListHelper {
  private static final Locale EN_LATN;
  
  private static final Locale LOCALE_AR_XB;
  
  private static final Locale LOCALE_EN_XA;
  
  private static final int NUM_PSEUDO_LOCALES = 2;
  
  private static final String STRING_AR_XB = "ar-XB";
  
  private static final String STRING_EN_XA = "en-XA";
  
  @GuardedBy("sLock")
  private static LocaleListHelper sDefaultAdjustedLocaleList;
  
  @GuardedBy("sLock")
  private static LocaleListHelper sDefaultLocaleList;
  
  private static final Locale[] sEmptyList = new Locale[0];
  
  private static final LocaleListHelper sEmptyLocaleList = new LocaleListHelper(new Locale[0]);
  
  @GuardedBy("sLock")
  private static Locale sLastDefaultLocale;
  
  @GuardedBy("sLock")
  private static LocaleListHelper sLastExplicitlySetLocaleList;
  
  private static final Object sLock;
  
  private final Locale[] mList;
  
  @NonNull
  private final String mStringRepresentation;
  
  static  {
    LOCALE_EN_XA = new Locale("en", "XA");
    LOCALE_AR_XB = new Locale("ar", "XB");
    EN_LATN = LocaleHelper.forLanguageTag("en-Latn");
    sLock = new Object();
    sLastExplicitlySetLocaleList = null;
    sDefaultLocaleList = null;
    sDefaultAdjustedLocaleList = null;
    sLastDefaultLocale = null;
  }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  LocaleListHelper(@NonNull Locale paramLocale, LocaleListHelper paramLocaleListHelper) { // Byte code:
    //   0: aload_0
    //   1: invokespecial <init> : ()V
    //   4: aload_1
    //   5: ifnull -> 280
    //   8: iconst_0
    //   9: istore #6
    //   11: aload_2
    //   12: ifnonnull -> 21
    //   15: iconst_0
    //   16: istore #4
    //   18: goto -> 28
    //   21: aload_2
    //   22: getfield mList : [Ljava/util/Locale;
    //   25: arraylength
    //   26: istore #4
    //   28: iconst_0
    //   29: istore_3
    //   30: iload_3
    //   31: iload #4
    //   33: if_icmpge -> 59
    //   36: aload_1
    //   37: aload_2
    //   38: getfield mList : [Ljava/util/Locale;
    //   41: iload_3
    //   42: aaload
    //   43: invokevirtual equals : (Ljava/lang/Object;)Z
    //   46: ifeq -> 52
    //   49: goto -> 61
    //   52: iload_3
    //   53: iconst_1
    //   54: iadd
    //   55: istore_3
    //   56: goto -> 30
    //   59: iconst_m1
    //   60: istore_3
    //   61: iload_3
    //   62: iconst_m1
    //   63: if_icmpne -> 72
    //   66: iconst_1
    //   67: istore #5
    //   69: goto -> 75
    //   72: iconst_0
    //   73: istore #5
    //   75: iload #5
    //   77: iload #4
    //   79: iadd
    //   80: istore #8
    //   82: iload #8
    //   84: anewarray java/util/Locale
    //   87: astore #9
    //   89: aload #9
    //   91: iconst_0
    //   92: aload_1
    //   93: invokevirtual clone : ()Ljava/lang/Object;
    //   96: checkcast java/util/Locale
    //   99: aastore
    //   100: iload_3
    //   101: iconst_m1
    //   102: if_icmpne -> 141
    //   105: iconst_0
    //   106: istore_3
    //   107: iload_3
    //   108: iload #4
    //   110: if_icmpge -> 214
    //   113: iload_3
    //   114: iconst_1
    //   115: iadd
    //   116: istore #5
    //   118: aload #9
    //   120: iload #5
    //   122: aload_2
    //   123: getfield mList : [Ljava/util/Locale;
    //   126: iload_3
    //   127: aaload
    //   128: invokevirtual clone : ()Ljava/lang/Object;
    //   131: checkcast java/util/Locale
    //   134: aastore
    //   135: iload #5
    //   137: istore_3
    //   138: goto -> 107
    //   141: iconst_0
    //   142: istore #5
    //   144: iload #5
    //   146: iload_3
    //   147: if_icmpge -> 181
    //   150: iload #5
    //   152: iconst_1
    //   153: iadd
    //   154: istore #7
    //   156: aload #9
    //   158: iload #7
    //   160: aload_2
    //   161: getfield mList : [Ljava/util/Locale;
    //   164: iload #5
    //   166: aaload
    //   167: invokevirtual clone : ()Ljava/lang/Object;
    //   170: checkcast java/util/Locale
    //   173: aastore
    //   174: iload #7
    //   176: istore #5
    //   178: goto -> 144
    //   181: iload_3
    //   182: iconst_1
    //   183: iadd
    //   184: istore_3
    //   185: iload_3
    //   186: iload #4
    //   188: if_icmpge -> 214
    //   191: aload #9
    //   193: iload_3
    //   194: aload_2
    //   195: getfield mList : [Ljava/util/Locale;
    //   198: iload_3
    //   199: aaload
    //   200: invokevirtual clone : ()Ljava/lang/Object;
    //   203: checkcast java/util/Locale
    //   206: aastore
    //   207: iload_3
    //   208: iconst_1
    //   209: iadd
    //   210: istore_3
    //   211: goto -> 185
    //   214: new java/lang/StringBuilder
    //   217: dup
    //   218: invokespecial <init> : ()V
    //   221: astore_1
    //   222: iload #6
    //   224: istore_3
    //   225: iload_3
    //   226: iload #8
    //   228: if_icmpge -> 265
    //   231: aload_1
    //   232: aload #9
    //   234: iload_3
    //   235: aaload
    //   236: invokestatic toLanguageTag : (Ljava/util/Locale;)Ljava/lang/String;
    //   239: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   242: pop
    //   243: iload_3
    //   244: iload #8
    //   246: iconst_1
    //   247: isub
    //   248: if_icmpge -> 258
    //   251: aload_1
    //   252: bipush #44
    //   254: invokevirtual append : (C)Ljava/lang/StringBuilder;
    //   257: pop
    //   258: iload_3
    //   259: iconst_1
    //   260: iadd
    //   261: istore_3
    //   262: goto -> 225
    //   265: aload_0
    //   266: aload #9
    //   268: putfield mList : [Ljava/util/Locale;
    //   271: aload_0
    //   272: aload_1
    //   273: invokevirtual toString : ()Ljava/lang/String;
    //   276: putfield mStringRepresentation : Ljava/lang/String;
    //   279: return
    //   280: new java/lang/NullPointerException
    //   283: dup
    //   284: ldc 'topLocale is null'
    //   286: invokespecial <init> : (Ljava/lang/String;)V
    //   289: astore_1
    //   290: goto -> 295
    //   293: aload_1
    //   294: athrow
    //   295: goto -> 293 }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  LocaleListHelper(@NonNull Locale... paramVarArgs) {
    if (paramVarArgs.length == 0) {
      this.mList = sEmptyList;
      this.mStringRepresentation = "";
      return;
    } 
    Locale[] arrayOfLocale = new Locale[paramVarArgs.length];
    HashSet hashSet = new HashSet();
    StringBuilder stringBuilder = new StringBuilder();
    byte b = 0;
    while (b < paramVarArgs.length) {
      Locale locale = paramVarArgs[b];
      if (locale != null) {
        if (!hashSet.contains(locale)) {
          locale = (Locale)locale.clone();
          arrayOfLocale[b] = locale;
          stringBuilder.append(LocaleHelper.toLanguageTag(locale));
          if (b < paramVarArgs.length - 1)
            stringBuilder.append(','); 
          hashSet.add(locale);
          b++;
          continue;
        } 
        StringBuilder stringBuilder2 = new StringBuilder();
        stringBuilder2.append("list[");
        stringBuilder2.append(b);
        stringBuilder2.append("] is a repetition");
        throw new IllegalArgumentException(stringBuilder2.toString());
      } 
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("list[");
      stringBuilder1.append(b);
      stringBuilder1.append("] is null");
      throw new NullPointerException(stringBuilder1.toString());
    } 
    this.mList = arrayOfLocale;
    this.mStringRepresentation = stringBuilder.toString();
  }
  
  private Locale computeFirstMatch(Collection<String> paramCollection, boolean paramBoolean) {
    int i = computeFirstMatchIndex(paramCollection, paramBoolean);
    return (i == -1) ? null : this.mList[i];
  }
  
  private int computeFirstMatchIndex(Collection<String> paramCollection, boolean paramBoolean) { // Byte code:
    //   0: aload_0
    //   1: getfield mList : [Ljava/util/Locale;
    //   4: astore #5
    //   6: aload #5
    //   8: arraylength
    //   9: iconst_1
    //   10: if_icmpne -> 15
    //   13: iconst_0
    //   14: ireturn
    //   15: aload #5
    //   17: arraylength
    //   18: ifne -> 23
    //   21: iconst_m1
    //   22: ireturn
    //   23: iload_2
    //   24: ifeq -> 50
    //   27: aload_0
    //   28: getstatic android/support/v4/os/LocaleListHelper.EN_LATN : Ljava/util/Locale;
    //   31: invokespecial findFirstMatchIndex : (Ljava/util/Locale;)I
    //   34: istore_3
    //   35: iload_3
    //   36: ifne -> 41
    //   39: iconst_0
    //   40: ireturn
    //   41: iload_3
    //   42: ldc 2147483647
    //   44: if_icmpge -> 50
    //   47: goto -> 53
    //   50: ldc 2147483647
    //   52: istore_3
    //   53: aload_1
    //   54: invokeinterface iterator : ()Ljava/util/Iterator;
    //   59: astore_1
    //   60: aload_1
    //   61: invokeinterface hasNext : ()Z
    //   66: ifeq -> 106
    //   69: aload_0
    //   70: aload_1
    //   71: invokeinterface next : ()Ljava/lang/Object;
    //   76: checkcast java/lang/String
    //   79: invokestatic forLanguageTag : (Ljava/lang/String;)Ljava/util/Locale;
    //   82: invokespecial findFirstMatchIndex : (Ljava/util/Locale;)I
    //   85: istore #4
    //   87: iload #4
    //   89: ifne -> 94
    //   92: iconst_0
    //   93: ireturn
    //   94: iload #4
    //   96: iload_3
    //   97: if_icmpge -> 60
    //   100: iload #4
    //   102: istore_3
    //   103: goto -> 60
    //   106: iload_3
    //   107: ldc 2147483647
    //   109: if_icmpne -> 114
    //   112: iconst_0
    //   113: ireturn
    //   114: iload_3
    //   115: ireturn }
  
  private int findFirstMatchIndex(Locale paramLocale) {
    byte b = 0;
    while (true) {
      Locale[] arrayOfLocale = this.mList;
      if (b < arrayOfLocale.length) {
        if (matchScore(paramLocale, arrayOfLocale[b]) > 0)
          return b; 
        b++;
        continue;
      } 
      break;
    } 
    return Integer.MAX_VALUE;
  }
  
  @NonNull
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  static LocaleListHelper forLanguageTags(@Nullable String paramString) {
    if (paramString == null || paramString.isEmpty())
      return getEmptyLocaleList(); 
    String[] arrayOfString = paramString.split(",", -1);
    Locale[] arrayOfLocale = new Locale[arrayOfString.length];
    for (byte b = 0; b < arrayOfLocale.length; b++)
      arrayOfLocale[b] = LocaleHelper.forLanguageTag(arrayOfString[b]); 
    return new LocaleListHelper(arrayOfLocale);
  }
  
  @NonNull
  @Size(min = 1L)
  static LocaleListHelper getAdjustedDefault() {
    getDefault();
    synchronized (sLock) {
      return sDefaultAdjustedLocaleList;
    } 
  }
  
  @NonNull
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  @Size(min = 1L)
  static LocaleListHelper getDefault() {
    null = Locale.getDefault();
    synchronized (sLock) {
      if (!null.equals(sLastDefaultLocale)) {
        sLastDefaultLocale = null;
        if (sDefaultLocaleList != null && null.equals(sDefaultLocaleList.get(0)))
          return sDefaultLocaleList; 
        sDefaultLocaleList = new LocaleListHelper(null, sLastExplicitlySetLocaleList);
        sDefaultAdjustedLocaleList = sDefaultLocaleList;
      } 
      return sDefaultLocaleList;
    } 
  }
  
  @NonNull
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  static LocaleListHelper getEmptyLocaleList() { return sEmptyLocaleList; }
  
  private static String getLikelyScript(Locale paramLocale) {
    if (Build.VERSION.SDK_INT >= 21) {
      String str = paramLocale.getScript();
      if (!str.isEmpty())
        return str; 
    } 
    return "";
  }
  
  private static boolean isPseudoLocale(String paramString) { return ("en-XA".equals(paramString) || "ar-XB".equals(paramString)); }
  
  private static boolean isPseudoLocale(Locale paramLocale) { return (LOCALE_EN_XA.equals(paramLocale) || LOCALE_AR_XB.equals(paramLocale)); }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  static boolean isPseudoLocalesOnly(@Nullable String[] paramArrayOfString) {
    if (paramArrayOfString == null)
      return true; 
    if (paramArrayOfString.length > 3)
      return false; 
    int i = paramArrayOfString.length;
    for (byte b = 0; b < i; b++) {
      String str = paramArrayOfString[b];
      if (!str.isEmpty() && !isPseudoLocale(str))
        return false; 
    } 
    return true;
  }
  
  @IntRange(from = 0L, to = 1L)
  private static int matchScore(Locale paramLocale1, Locale paramLocale2) { throw new RuntimeException("d2j fail translate: java.lang.RuntimeException: can not merge I and Z\n\tat com.googlecode.dex2jar.ir.TypeClass.merge(TypeClass.java:100)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeRef.updateTypeClass(TypeTransformer.java:174)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.provideAs(TypeTransformer.java:780)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.enexpr(TypeTransformer.java:659)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:719)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.exExpr(TypeTransformer.java:703)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.s1stmt(TypeTransformer.java:810)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.sxStmt(TypeTransformer.java:840)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer$TypeAnalyze.analyze(TypeTransformer.java:206)\n\tat com.googlecode.dex2jar.ir.ts.TypeTransformer.transform(TypeTransformer.java:44)\n\tat com.googlecode.d2j.dex.Dex2jar$2.optimize(Dex2jar.java:162)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertCode(Dex2Asm.java:414)\n\tat com.googlecode.d2j.dex.ExDex2Asm.convertCode(ExDex2Asm.java:42)\n\tat com.googlecode.d2j.dex.Dex2jar$2.convertCode(Dex2jar.java:128)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertMethod(Dex2Asm.java:509)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertClass(Dex2Asm.java:406)\n\tat com.googlecode.d2j.dex.Dex2Asm.convertDex(Dex2Asm.java:422)\n\tat com.googlecode.d2j.dex.Dex2jar.doTranslate(Dex2jar.java:172)\n\tat com.googlecode.d2j.dex.Dex2jar.to(Dex2jar.java:272)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.doCommandLine(Dex2jarCmd.java:108)\n\tat com.googlecode.dex2jar.tools.BaseCmd.doMain(BaseCmd.java:288)\n\tat com.googlecode.dex2jar.tools.Dex2jarCmd.main(Dex2jarCmd.java:32)\n"); }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  static void setDefault(@NonNull @Size(min = 1L) LocaleListHelper paramLocaleListHelper) { setDefault(paramLocaleListHelper, 0); }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  static void setDefault(@NonNull @Size(min = 1L) LocaleListHelper paramLocaleListHelper, int paramInt) {
    if (paramLocaleListHelper != null) {
      if (!paramLocaleListHelper.isEmpty())
        synchronized (sLock) {
          (sLastDefaultLocale = paramLocaleListHelper.get(paramInt)).setDefault(sLastDefaultLocale);
          sLastExplicitlySetLocaleList = paramLocaleListHelper;
          sDefaultLocaleList = paramLocaleListHelper;
          if (paramInt == 0) {
            sDefaultAdjustedLocaleList = sDefaultLocaleList;
          } else {
            sDefaultAdjustedLocaleList = new LocaleListHelper(sLastDefaultLocale, sDefaultLocaleList);
          } 
          return;
        }  
      throw new IllegalArgumentException("locales is empty");
    } 
    throw new NullPointerException("locales is null");
  }
  
  public boolean equals(Object paramObject) {
    if (paramObject == this)
      return true; 
    if (!(paramObject instanceof LocaleListHelper))
      return false; 
    Locale[] arrayOfLocale = ((LocaleListHelper)paramObject).mList;
    if (this.mList.length != arrayOfLocale.length)
      return false; 
    byte b = 0;
    while (true) {
      Locale[] arrayOfLocale1 = this.mList;
      if (b < arrayOfLocale1.length) {
        if (!arrayOfLocale1[b].equals(arrayOfLocale[b]))
          return false; 
        b++;
        continue;
      } 
      break;
    } 
    return true;
  }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  Locale get(int paramInt) {
    if (paramInt >= 0) {
      Locale[] arrayOfLocale = this.mList;
      if (paramInt < arrayOfLocale.length)
        return arrayOfLocale[paramInt]; 
    } 
    return null;
  }
  
  @Nullable
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  Locale getFirstMatch(String[] paramArrayOfString) { return computeFirstMatch(Arrays.asList(paramArrayOfString), false); }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  int getFirstMatchIndex(String[] paramArrayOfString) { return computeFirstMatchIndex(Arrays.asList(paramArrayOfString), false); }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  int getFirstMatchIndexWithEnglishSupported(Collection<String> paramCollection) { return computeFirstMatchIndex(paramCollection, true); }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  int getFirstMatchIndexWithEnglishSupported(String[] paramArrayOfString) { return getFirstMatchIndexWithEnglishSupported(Arrays.asList(paramArrayOfString)); }
  
  @Nullable
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  Locale getFirstMatchWithEnglishSupported(String[] paramArrayOfString) { return computeFirstMatch(Arrays.asList(paramArrayOfString), true); }
  
  public int hashCode() {
    int i = 1;
    byte b = 0;
    while (true) {
      Locale[] arrayOfLocale = this.mList;
      if (b < arrayOfLocale.length) {
        i = i * 31 + arrayOfLocale[b].hashCode();
        b++;
        continue;
      } 
      break;
    } 
    return i;
  }
  
  @IntRange(from = -1L)
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  int indexOf(Locale paramLocale) {
    byte b = 0;
    while (true) {
      Locale[] arrayOfLocale = this.mList;
      if (b < arrayOfLocale.length) {
        if (arrayOfLocale[b].equals(paramLocale))
          return b; 
        b++;
        continue;
      } 
      break;
    } 
    return -1;
  }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  boolean isEmpty() { return (this.mList.length == 0); }
  
  @IntRange(from = 0L)
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  int size() { return this.mList.length; }
  
  @NonNull
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  String toLanguageTags() { return this.mStringRepresentation; }
  
  public String toString() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("[");
    byte b = 0;
    while (true) {
      Locale[] arrayOfLocale = this.mList;
      if (b < arrayOfLocale.length) {
        stringBuilder.append(arrayOfLocale[b]);
        if (b < this.mList.length - 1)
          stringBuilder.append(','); 
        b++;
        continue;
      } 
      break;
    } 
    stringBuilder.append("]");
    return stringBuilder.toString();
  }
}
