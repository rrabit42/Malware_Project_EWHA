package com.android.volley.cache;

import android.os.SystemClock;
import com.android.volley.Cache;
import com.android.volley.VolleyLog;
import java.io.File;
import java.util.Iterator;
import java.util.Map;

public class DiskBasedCache implements Cache {
  private static final int CACHE_MAGIC = 538247942;
  
  private static final int DEFAULT_DISK_USAGE_BYTES = 5242880;
  
  private static final float HYSTERESIS_FACTOR = 0.9F;
  
  private final int CACHE_LOAD_THREADS = 2;
  
  private final CacheContainer mEntries = new CacheContainer(this);
  
  private final int mMaxCacheSizeInBytes;
  
  private final File mRootDirectory;
  
  public DiskBasedCache(File paramFile) { this(paramFile, 5242880); }
  
  public DiskBasedCache(File paramFile, int paramInt) {
    this.mRootDirectory = paramFile;
    this.mMaxCacheSizeInBytes = paramInt;
  }
  
  private String getFilenameForKey(String paramString) {
    int i = paramString.length() / 2;
    int j = paramString.substring(0, i).hashCode();
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(String.valueOf(j));
    stringBuilder.append(String.valueOf(paramString.substring(i).hashCode()));
    return stringBuilder.toString();
  }
  
  private void pruneIfNeeded(int paramInt) {
    int i;
    if (!this.mEntries.isLoaded())
      return; 
    long l2 = this.mEntries.getTotalSize();
    long l1 = paramInt;
    if (l2 + l1 < this.mMaxCacheSizeInBytes)
      return; 
    if (VolleyLog.DEBUG)
      VolleyLog.v("Pruning old cache entries.", new Object[0]); 
    l2 = this.mEntries.getTotalSize();
    long l3 = SystemClock.elapsedRealtime();
    Iterator iterator = this.mEntries.entrySet().iterator();
    paramInt = 0;
    while (true) {
      i = paramInt;
      if (iterator.hasNext()) {
        CacheHeader cacheHeader = (CacheHeader)((Map.Entry)iterator.next()).getValue();
        if (!getFileForKey(cacheHeader.key).delete())
          VolleyLog.d("Could not delete cache entry for key=%s, filename=%s", new Object[] { cacheHeader.key, getFilenameForKey(cacheHeader.key) }); 
        iterator.remove();
        i = paramInt + 1;
        paramInt = i;
        if ((float)(this.mEntries.getTotalSize() + l1) < this.mMaxCacheSizeInBytes * 0.9F)
          break; 
        continue;
      } 
      break;
    } 
    if (VolleyLog.DEBUG)
      VolleyLog.v("pruned %d files, %d bytes, %d ms", new Object[] { Integer.valueOf(i), Long.valueOf(this.mEntries.getTotalSize() - l2), Long.valueOf(SystemClock.elapsedRealtime() - l3) }); 
  }
  
  private void putEntry(String paramString, CacheHeader paramCacheHeader) { this.mEntries.put(paramString, paramCacheHeader); }
  
  private void removeEntry(String paramString) {
    if (this.mEntries.get(paramString) != null)
      this.mEntries.remove(paramString); 
  }
  
  public void clear() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield mRootDirectory : Ljava/io/File;
    //   6: invokevirtual listFiles : ()[Ljava/io/File;
    //   9: astore_3
    //   10: aload_3
    //   11: ifnull -> 38
    //   14: aload_3
    //   15: arraylength
    //   16: istore_2
    //   17: iconst_0
    //   18: istore_1
    //   19: iload_1
    //   20: iload_2
    //   21: if_icmpge -> 38
    //   24: aload_3
    //   25: iload_1
    //   26: aaload
    //   27: invokevirtual delete : ()Z
    //   30: pop
    //   31: iload_1
    //   32: iconst_1
    //   33: iadd
    //   34: istore_1
    //   35: goto -> 19
    //   38: aload_0
    //   39: getfield mEntries : Lcom/android/volley/cache/DiskBasedCache$CacheContainer;
    //   42: invokevirtual clear : ()V
    //   45: ldc 'Cache cleared.'
    //   47: iconst_0
    //   48: anewarray java/lang/Object
    //   51: invokestatic d : (Ljava/lang/String;[Ljava/lang/Object;)V
    //   54: aload_0
    //   55: monitorexit
    //   56: return
    //   57: astore_3
    //   58: aload_0
    //   59: monitorexit
    //   60: goto -> 65
    //   63: aload_3
    //   64: athrow
    //   65: goto -> 63
    // Exception table:
    //   from	to	target	type
    //   2	10	57	finally
    //   14	17	57	finally
    //   24	31	57	finally
    //   38	54	57	finally }
  
  public void close() {}
  
  public void flush() {}
  
  public Cache.Entry get(String paramString) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield mEntries : Lcom/android/volley/cache/DiskBasedCache$CacheContainer;
    //   6: aload_1
    //   7: invokevirtual get : (Ljava/lang/Object;)Lcom/android/volley/cache/DiskBasedCache$CacheHeader;
    //   10: astore #4
    //   12: aload #4
    //   14: ifnonnull -> 21
    //   17: aload_0
    //   18: monitorexit
    //   19: aconst_null
    //   20: areturn
    //   21: aload_0
    //   22: aload_1
    //   23: invokevirtual getFileForKey : (Ljava/lang/String;)Ljava/io/File;
    //   26: astore #5
    //   28: new com/android/volley/misc/IOUtils$CountingInputStream
    //   31: dup
    //   32: new java/io/BufferedInputStream
    //   35: dup
    //   36: new java/io/FileInputStream
    //   39: dup
    //   40: aload #5
    //   42: invokespecial <init> : (Ljava/io/File;)V
    //   45: invokespecial <init> : (Ljava/io/InputStream;)V
    //   48: invokespecial <init> : (Ljava/io/InputStream;)V
    //   51: astore_3
    //   52: aload_3
    //   53: astore_2
    //   54: aload_3
    //   55: invokestatic readHeader : (Ljava/io/InputStream;)Lcom/android/volley/cache/DiskBasedCache$CacheHeader;
    //   58: pop
    //   59: aload_3
    //   60: astore_2
    //   61: aload #4
    //   63: aload_3
    //   64: aload #5
    //   66: invokevirtual length : ()J
    //   69: aload_3
    //   70: invokevirtual getBytesRead : ()J
    //   73: lsub
    //   74: l2i
    //   75: invokestatic streamToBytes : (Ljava/io/InputStream;I)[B
    //   78: invokevirtual toCacheEntry : ([B)Lcom/android/volley/Cache$Entry;
    //   81: astore #4
    //   83: aload_3
    //   84: invokevirtual close : ()V
    //   87: aload_0
    //   88: monitorexit
    //   89: aload #4
    //   91: areturn
    //   92: aload_0
    //   93: monitorexit
    //   94: aconst_null
    //   95: areturn
    //   96: astore_1
    //   97: goto -> 114
    //   100: astore #4
    //   102: goto -> 174
    //   105: astore_1
    //   106: aconst_null
    //   107: astore_2
    //   108: goto -> 228
    //   111: astore_1
    //   112: aconst_null
    //   113: astore_3
    //   114: aload_3
    //   115: astore_2
    //   116: ldc 'Caught OOM for %d byte image, path=%s: %s'
    //   118: iconst_3
    //   119: anewarray java/lang/Object
    //   122: dup
    //   123: iconst_0
    //   124: aload #5
    //   126: invokevirtual length : ()J
    //   129: invokestatic valueOf : (J)Ljava/lang/Long;
    //   132: aastore
    //   133: dup
    //   134: iconst_1
    //   135: aload #5
    //   137: invokevirtual getAbsolutePath : ()Ljava/lang/String;
    //   140: aastore
    //   141: dup
    //   142: iconst_2
    //   143: aload_1
    //   144: invokevirtual toString : ()Ljava/lang/String;
    //   147: aastore
    //   148: invokestatic e : (Ljava/lang/String;[Ljava/lang/Object;)V
    //   151: aload_3
    //   152: ifnull -> 166
    //   155: aload_3
    //   156: invokevirtual close : ()V
    //   159: goto -> 166
    //   162: aload_0
    //   163: monitorexit
    //   164: aconst_null
    //   165: areturn
    //   166: aload_0
    //   167: monitorexit
    //   168: aconst_null
    //   169: areturn
    //   170: astore #4
    //   172: aconst_null
    //   173: astore_3
    //   174: aload_3
    //   175: astore_2
    //   176: ldc '%s: %s'
    //   178: iconst_2
    //   179: anewarray java/lang/Object
    //   182: dup
    //   183: iconst_0
    //   184: aload #5
    //   186: invokevirtual getAbsolutePath : ()Ljava/lang/String;
    //   189: aastore
    //   190: dup
    //   191: iconst_1
    //   192: aload #4
    //   194: invokevirtual toString : ()Ljava/lang/String;
    //   197: aastore
    //   198: invokestatic d : (Ljava/lang/String;[Ljava/lang/Object;)V
    //   201: aload_3
    //   202: astore_2
    //   203: aload_0
    //   204: aload_1
    //   205: invokevirtual remove : (Ljava/lang/String;)V
    //   208: aload_3
    //   209: ifnull -> 223
    //   212: aload_3
    //   213: invokevirtual close : ()V
    //   216: goto -> 223
    //   219: aload_0
    //   220: monitorexit
    //   221: aconst_null
    //   222: areturn
    //   223: aload_0
    //   224: monitorexit
    //   225: aconst_null
    //   226: areturn
    //   227: astore_1
    //   228: aload_2
    //   229: ifnull -> 243
    //   232: aload_2
    //   233: invokevirtual close : ()V
    //   236: goto -> 243
    //   239: aload_0
    //   240: monitorexit
    //   241: aconst_null
    //   242: areturn
    //   243: aload_1
    //   244: athrow
    //   245: astore_1
    //   246: aload_0
    //   247: monitorexit
    //   248: aload_1
    //   249: athrow
    //   250: astore_1
    //   251: goto -> 92
    //   254: astore_1
    //   255: goto -> 162
    //   258: astore_1
    //   259: goto -> 219
    //   262: astore_1
    //   263: goto -> 239
    // Exception table:
    //   from	to	target	type
    //   2	12	245	finally
    //   21	28	245	finally
    //   28	52	170	java/io/IOException
    //   28	52	111	java/lang/OutOfMemoryError
    //   28	52	105	finally
    //   54	59	100	java/io/IOException
    //   54	59	96	java/lang/OutOfMemoryError
    //   54	59	227	finally
    //   61	83	100	java/io/IOException
    //   61	83	96	java/lang/OutOfMemoryError
    //   61	83	227	finally
    //   83	87	250	java/io/IOException
    //   83	87	245	finally
    //   116	151	227	finally
    //   155	159	254	java/io/IOException
    //   155	159	245	finally
    //   176	201	227	finally
    //   203	208	227	finally
    //   212	216	258	java/io/IOException
    //   212	216	245	finally
    //   232	236	262	java/io/IOException
    //   232	236	245	finally
    //   243	245	245	finally }
  
  public File getFileForKey(String paramString) { return new File(this.mRootDirectory, getFilenameForKey(paramString)); }
  
  public void initialize() { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield mEntries : Lcom/android/volley/cache/DiskBasedCache$CacheContainer;
    //   6: invokevirtual initialize : ()V
    //   9: aload_0
    //   10: monitorexit
    //   11: return
    //   12: astore_1
    //   13: aload_0
    //   14: monitorexit
    //   15: aload_1
    //   16: athrow
    // Exception table:
    //   from	to	target	type
    //   2	9	12	finally }
  
  public void invalidate(String paramString, boolean paramBoolean) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: aload_1
    //   4: invokevirtual get : (Ljava/lang/String;)Lcom/android/volley/Cache$Entry;
    //   7: astore_3
    //   8: aload_3
    //   9: ifnull -> 36
    //   12: aload_3
    //   13: ldc2_w -1
    //   16: putfield softTtl : J
    //   19: iload_2
    //   20: ifeq -> 30
    //   23: aload_3
    //   24: ldc2_w -1
    //   27: putfield ttl : J
    //   30: aload_0
    //   31: aload_1
    //   32: aload_3
    //   33: invokevirtual put : (Ljava/lang/String;Lcom/android/volley/Cache$Entry;)V
    //   36: aload_0
    //   37: monitorexit
    //   38: return
    //   39: astore_1
    //   40: aload_0
    //   41: monitorexit
    //   42: aload_1
    //   43: athrow
    // Exception table:
    //   from	to	target	type
    //   2	8	39	finally
    //   12	19	39	finally
    //   23	30	39	finally
    //   30	36	39	finally }
  
  public void put(String paramString, Cache.Entry paramEntry) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: aload_2
    //   4: getfield data : [B
    //   7: arraylength
    //   8: invokespecial pruneIfNeeded : (I)V
    //   11: aload_0
    //   12: aload_1
    //   13: invokevirtual getFileForKey : (Ljava/lang/String;)Ljava/io/File;
    //   16: astore_3
    //   17: new java/io/BufferedOutputStream
    //   20: dup
    //   21: new java/io/FileOutputStream
    //   24: dup
    //   25: aload_3
    //   26: invokespecial <init> : (Ljava/io/File;)V
    //   29: invokespecial <init> : (Ljava/io/OutputStream;)V
    //   32: astore #4
    //   34: new com/android/volley/cache/DiskBasedCache$CacheHeader
    //   37: dup
    //   38: aload_1
    //   39: aload_2
    //   40: invokespecial <init> : (Ljava/lang/String;Lcom/android/volley/Cache$Entry;)V
    //   43: astore #5
    //   45: aload #5
    //   47: aload #4
    //   49: invokevirtual writeHeader : (Ljava/io/OutputStream;)Z
    //   52: ifeq -> 79
    //   55: aload #4
    //   57: aload_2
    //   58: getfield data : [B
    //   61: invokevirtual write : ([B)V
    //   64: aload #4
    //   66: invokevirtual close : ()V
    //   69: aload_0
    //   70: aload_1
    //   71: aload #5
    //   73: invokespecial putEntry : (Ljava/lang/String;Lcom/android/volley/cache/DiskBasedCache$CacheHeader;)V
    //   76: aload_0
    //   77: monitorexit
    //   78: return
    //   79: aload #4
    //   81: invokevirtual close : ()V
    //   84: ldc_w 'Failed to write header for %s'
    //   87: iconst_1
    //   88: anewarray java/lang/Object
    //   91: dup
    //   92: iconst_0
    //   93: aload_3
    //   94: invokevirtual getAbsolutePath : ()Ljava/lang/String;
    //   97: aastore
    //   98: invokestatic d : (Ljava/lang/String;[Ljava/lang/Object;)V
    //   101: new java/io/IOException
    //   104: dup
    //   105: invokespecial <init> : ()V
    //   108: athrow
    //   109: aload_3
    //   110: invokevirtual delete : ()Z
    //   113: ifne -> 133
    //   116: ldc_w 'Could not clean up file %s'
    //   119: iconst_1
    //   120: anewarray java/lang/Object
    //   123: dup
    //   124: iconst_0
    //   125: aload_3
    //   126: invokevirtual getAbsolutePath : ()Ljava/lang/String;
    //   129: aastore
    //   130: invokestatic d : (Ljava/lang/String;[Ljava/lang/Object;)V
    //   133: aload_0
    //   134: monitorexit
    //   135: return
    //   136: astore_1
    //   137: aload_0
    //   138: monitorexit
    //   139: aload_1
    //   140: athrow
    //   141: astore_1
    //   142: goto -> 109
    // Exception table:
    //   from	to	target	type
    //   2	17	136	finally
    //   17	76	141	java/io/IOException
    //   17	76	136	finally
    //   79	109	141	java/io/IOException
    //   79	109	136	finally
    //   109	133	136	finally }
  
  public void remove(String paramString) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: aload_1
    //   4: invokevirtual getFileForKey : (Ljava/lang/String;)Ljava/io/File;
    //   7: invokevirtual delete : ()Z
    //   10: istore_2
    //   11: aload_0
    //   12: aload_1
    //   13: invokespecial removeEntry : (Ljava/lang/String;)V
    //   16: iload_2
    //   17: ifne -> 41
    //   20: ldc 'Could not delete cache entry for key=%s, filename=%s'
    //   22: iconst_2
    //   23: anewarray java/lang/Object
    //   26: dup
    //   27: iconst_0
    //   28: aload_1
    //   29: aastore
    //   30: dup
    //   31: iconst_1
    //   32: aload_0
    //   33: aload_1
    //   34: invokespecial getFilenameForKey : (Ljava/lang/String;)Ljava/lang/String;
    //   37: aastore
    //   38: invokestatic d : (Ljava/lang/String;[Ljava/lang/Object;)V
    //   41: aload_0
    //   42: monitorexit
    //   43: return
    //   44: astore_1
    //   45: aload_0
    //   46: monitorexit
    //   47: aload_1
    //   48: athrow
    // Exception table:
    //   from	to	target	type
    //   2	16	44	finally
    //   20	41	44	finally }
}
