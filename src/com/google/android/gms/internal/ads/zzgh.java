package com.google.android.gms.internal.ads;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.Nullable;
import com.google.android.gms.ads.internal.zzbv;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.annotation.concurrent.GuardedBy;

@TargetApi(14)
final class zzgh implements Application.ActivityLifecycleCallbacks {
  @Nullable
  private Activity mActivity;
  
  private Context mContext;
  
  private final Object mLock = new Object();
  
  private boolean zzahr = true;
  
  private boolean zzahs = false;
  
  @GuardedBy("mLock")
  private final List<zzgj> zzaht = new ArrayList();
  
  @GuardedBy("mLock")
  private final List<zzgw> zzahu = new ArrayList();
  
  private Runnable zzahv;
  
  private long zzahw;
  
  private boolean zzzv = false;
  
  private final void setActivity(Activity paramActivity) {
    synchronized (this.mLock) {
      if (!paramActivity.getClass().getName().startsWith("com.google.android.gms.ads"))
        this.mActivity = paramActivity; 
      return;
    } 
  }
  
  @Nullable
  public final Activity getActivity() { return this.mActivity; }
  
  @Nullable
  public final Context getContext() { return this.mContext; }
  
  public final void onActivityCreated(Activity paramActivity, Bundle paramBundle) {}
  
  public final void onActivityDestroyed(Activity paramActivity) {
    synchronized (this.mLock) {
      if (this.mActivity == null)
        return; 
      if (this.mActivity.equals(paramActivity))
        this.mActivity = null; 
      Iterator iterator = this.zzahu.iterator();
      while (iterator.hasNext()) {
        zzgw = (zzgw)iterator.next();
        try {
          if (zzgw.zza(paramActivity))
            iterator.remove(); 
        } catch (Exception zzgw) {
          zzbv.zzeo().zza(zzgw, "AppActivityTracker.ActivityListener.onActivityDestroyed");
          zzane.zzb("", zzgw);
        } 
      } 
      return;
    } 
  }
  
  public final void onActivityPaused(Activity paramActivity) {
    setActivity(paramActivity);
    synchronized (this.mLock) {
      for (zzgw zzgw : this.zzahu) {
        try {
          zzgw.onActivityPaused(paramActivity);
        } catch (Exception zzgw) {
          zzbv.zzeo().zza(zzgw, "AppActivityTracker.ActivityListener.onActivityPaused");
          zzane.zzb("", zzgw);
        } 
      } 
      this.zzahs = true;
      if (this.zzahv != null)
        zzakk.zzcrm.removeCallbacks(this.zzahv); 
      Handler handler = zzakk.zzcrm;
      null = new zzgi(this);
      this.zzahv = null;
      handler.postDelayed(null, this.zzahw);
      return;
    } 
  }
  
  public final void onActivityResumed(Activity paramActivity) {
    setActivity(paramActivity);
    this.zzahs = false;
    boolean bool = this.zzahr;
    this.zzahr = true;
    if (this.zzahv != null)
      zzakk.zzcrm.removeCallbacks(this.zzahv); 
    synchronized (this.mLock) {
      for (zzgw zzgw : this.zzahu) {
        try {
          zzgw.onActivityResumed(paramActivity);
        } catch (Exception zzgw) {
          zzbv.zzeo().zza(zzgw, "AppActivityTracker.ActivityListener.onActivityResumed");
          zzane.zzb("", zzgw);
        } 
      } 
      if (bool ^ true) {
        for (zzgj zzgj : this.zzaht) {
          try {
            zzgj.zzh(true);
          } catch (Exception zzgj) {
            zzane.zzb("", zzgj);
          } 
        } 
      } else {
        zzakb.zzck("App is still foreground.");
      } 
      return;
    } 
  }
  
  public final void onActivitySaveInstanceState(Activity paramActivity, Bundle paramBundle) {}
  
  public final void onActivityStarted(Activity paramActivity) { setActivity(paramActivity); }
  
  public final void onActivityStopped(Activity paramActivity) {}
  
  public final void zza(Application paramApplication, Context paramContext) {
    if (!this.zzzv) {
      paramApplication.registerActivityLifecycleCallbacks(this);
      if (paramContext instanceof Activity)
        setActivity((Activity)paramContext); 
      this.mContext = paramApplication;
      zzna zzna = zznk.zzayh;
      this.zzahw = ((Long)zzkb.zzik().zzd(zzna)).longValue();
      this.zzzv = true;
    } 
  }
  
  public final void zza(zzgj paramzzgj) {
    synchronized (this.mLock) {
      this.zzaht.add(paramzzgj);
      return;
    } 
  }
}
