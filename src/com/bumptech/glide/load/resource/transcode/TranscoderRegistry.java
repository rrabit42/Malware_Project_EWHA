package com.bumptech.glide.load.resource.transcode;

import com.bumptech.glide.util.MultiClassKey;
import java.util.HashMap;
import java.util.Map;

public class TranscoderRegistry {
  private static final MultiClassKey GET_KEY = new MultiClassKey();
  
  private final Map<MultiClassKey, ResourceTranscoder<?, ?>> factories = new HashMap();
  
  public <Z, R> ResourceTranscoder<Z, R> get(Class<Z> paramClass1, Class<R> paramClass2) {
    if (paramClass1.equals(paramClass2))
      return UnitTranscoder.get(); 
    synchronized (GET_KEY) {
      GET_KEY.set(paramClass1, paramClass2);
      ResourceTranscoder resourceTranscoder = (ResourceTranscoder)this.factories.get(GET_KEY);
      if (resourceTranscoder != null)
        return resourceTranscoder; 
      null = new StringBuilder();
      null.append("No transcoder registered for ");
      null.append(paramClass1);
      null.append(" and ");
      null.append(paramClass2);
      throw new IllegalArgumentException(null.toString());
    } 
  }
  
  public <Z, R> void register(Class<Z> paramClass1, Class<R> paramClass2, ResourceTranscoder<Z, R> paramResourceTranscoder) { this.factories.put(new MultiClassKey(paramClass1, paramClass2), paramResourceTranscoder); }
}
