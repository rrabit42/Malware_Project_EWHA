package com.google.android.gms.measurement.internal;

import android.support.annotation.NonNull;
import com.google.android.gms.common.internal.Preconditions;
import java.util.concurrent.Callable;
import java.util.concurrent.FutureTask;

final class zzbu<V> extends FutureTask<V> implements Comparable<zzbu> {
  private final String zzapa;
  
  private final long zzapc;
  
  final boolean zzapd;
  
  zzbu(zzbr paramzzbr, Runnable paramRunnable, boolean paramBoolean, String paramString) {
    super(paramRunnable, null);
    Preconditions.checkNotNull(paramString);
    this.zzapc = zzbr.zzkh().getAndIncrement();
    this.zzapa = paramString;
    this.zzapd = false;
    if (this.zzapc == Float.MAX_VALUE)
      paramzzbr.zzgt().zzjg().zzby("Tasks index overflow"); 
  }
  
  zzbu(zzbr paramzzbr, Callable<V> paramCallable, boolean paramBoolean, String paramString) {
    super(paramCallable);
    Preconditions.checkNotNull(paramString);
    this.zzapc = zzbr.zzkh().getAndIncrement();
    this.zzapa = paramString;
    this.zzapd = paramBoolean;
    if (this.zzapc == Float.MAX_VALUE)
      paramzzbr.zzgt().zzjg().zzby("Tasks index overflow"); 
  }
  
  protected final void setException(Throwable paramThrowable) {
    this.zzapb.zzgt().zzjg().zzg(this.zzapa, paramThrowable);
    if (paramThrowable instanceof zzbs)
      Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), paramThrowable); 
    super.setException(paramThrowable);
  }
}
