package com.google.android.gms.internal.ads;

import android.annotation.TargetApi;
import android.content.Context;
import android.net.Uri;
import android.net.http.SslError;
import android.support.annotation.Nullable;
import android.support.v4.view.ViewCompat;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewTreeObserver;
import android.webkit.SslErrorHandler;
import android.webkit.WebResourceResponse;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import com.google.android.gms.ads.internal.gmsg.zza;
import com.google.android.gms.ads.internal.gmsg.zzab;
import com.google.android.gms.ads.internal.gmsg.zzac;
import com.google.android.gms.ads.internal.gmsg.zzad;
import com.google.android.gms.ads.internal.gmsg.zzb;
import com.google.android.gms.ads.internal.gmsg.zzc;
import com.google.android.gms.ads.internal.gmsg.zzd;
import com.google.android.gms.ads.internal.gmsg.zzf;
import com.google.android.gms.ads.internal.gmsg.zzv;
import com.google.android.gms.ads.internal.gmsg.zzy;
import com.google.android.gms.ads.internal.gmsg.zzz;
import com.google.android.gms.ads.internal.overlay.AdOverlayInfoParcel;
import com.google.android.gms.ads.internal.overlay.zzc;
import com.google.android.gms.ads.internal.overlay.zzd;
import com.google.android.gms.ads.internal.overlay.zzl;
import com.google.android.gms.ads.internal.overlay.zzn;
import com.google.android.gms.ads.internal.overlay.zzt;
import com.google.android.gms.ads.internal.zzbv;
import com.google.android.gms.ads.internal.zzx;
import com.google.android.gms.common.util.Predicate;
import com.google.android.gms.common.util.VisibleForTesting;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CopyOnWriteArrayList;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.GuardedBy;

@zzadh
@ParametersAreNonnullByDefault
@VisibleForTesting
public class zzaqx extends WebViewClient implements zzasc {
  private static final String[] zzdbo = { 
      "UNKNOWN", "HOST_LOOKUP", "UNSUPPORTED_AUTH_SCHEME", "AUTHENTICATION", "PROXY_AUTHENTICATION", "CONNECT", "IO", "TIMEOUT", "REDIRECT_LOOP", "UNSUPPORTED_SCHEME", 
      "FAILED_SSL_HANDSHAKE", "BAD_URL", "FILE", "FILE_NOT_FOUND", "TOO_MANY_REQUESTS" };
  
  private static final String[] zzdbp = { "NOT_YET_VALID", "EXPIRED", "ID_MISMATCH", "UNTRUSTED", "DATE_INVALID", "INVALID" };
  
  private final Object mLock = new Object();
  
  @GuardedBy("mLock")
  private boolean zzaek;
  
  private zzjd zzapt;
  
  private zzb zzbll;
  
  private zzd zzblm;
  
  private zzz zzbmu;
  
  private zzx zzbmw;
  
  private zzaab zzbmx;
  
  private zzaam zzbmy;
  
  private zzt zzbnb;
  
  private zzn zzbnc;
  
  private zzaqw zzbnd;
  
  private final HashMap<String, List<zzv<? super zzaqw>>> zzdbq = new HashMap();
  
  private zzasd zzdbr;
  
  private zzase zzdbs;
  
  private zzasf zzdbt;
  
  private boolean zzdbu = false;
  
  @GuardedBy("mLock")
  private boolean zzdbv;
  
  @GuardedBy("mLock")
  private ViewTreeObserver.OnGlobalLayoutListener zzdbw;
  
  @GuardedBy("mLock")
  private ViewTreeObserver.OnScrollChangedListener zzdbx;
  
  @GuardedBy("mLock")
  private boolean zzdby;
  
  private final zzaak zzdbz;
  
  private zzasg zzdca;
  
  private boolean zzdcb;
  
  private boolean zzdcc;
  
  private int zzdcd;
  
  private View.OnAttachStateChangeListener zzdce;
  
  @Nullable
  protected zzait zzxd;
  
  public zzaqx(zzaqw paramzzaqw, boolean paramBoolean) { this(paramzzaqw, paramBoolean, new zzaak(paramzzaqw, paramzzaqw.zzua(), new zzmw(paramzzaqw.getContext())), null); }
  
  @VisibleForTesting
  private zzaqx(zzaqw paramzzaqw, boolean paramBoolean, zzaak paramzzaak, zzaab paramzzaab) {
    this.zzbnd = paramzzaqw;
    this.zzaek = paramBoolean;
    this.zzdbz = paramzzaak;
    this.zzbmx = null;
  }
  
  private final void zza(View paramView, zzait paramzzait, int paramInt) {
    if (paramzzait.zzph() && paramInt > 0) {
      paramzzait.zzr(paramView);
      if (paramzzait.zzph())
        zzakk.zzcrm.postDelayed(new zzaqz(this, paramView, paramzzait, paramInt), 100L); 
    } 
  }
  
  private final void zza(AdOverlayInfoParcel paramAdOverlayInfoParcel) {
    boolean bool;
    zzaab zzaab1 = this.zzbmx;
    boolean bool1 = false;
    if (zzaab1 != null) {
      bool = zzaab1.zznf();
    } else {
      bool = false;
    } 
    zzbv.zzei();
    Context context = this.zzbnd.getContext();
    if (!bool)
      bool1 = true; 
    zzl.zza(context, paramAdOverlayInfoParcel, bool1);
    if (this.zzxd != null) {
      String str2 = paramAdOverlayInfoParcel.url;
      String str1 = str2;
      if (str2 == null) {
        str1 = str2;
        if (paramAdOverlayInfoParcel.zzbyl != null)
          str1 = paramAdOverlayInfoParcel.zzbyl.url; 
      } 
      this.zzxd.zzcf(str1);
    } 
  }
  
  private final void zzd(Context paramContext, String paramString1, String paramString2, String paramString3) { // Byte code:
    //   0: getstatic com/google/android/gms/internal/ads/zznk.zzazy : Lcom/google/android/gms/internal/ads/zzna;
    //   3: astore #5
    //   5: invokestatic zzik : ()Lcom/google/android/gms/internal/ads/zzni;
    //   8: aload #5
    //   10: invokevirtual zzd : (Lcom/google/android/gms/internal/ads/zzna;)Ljava/lang/Object;
    //   13: checkcast java/lang/Boolean
    //   16: invokevirtual booleanValue : ()Z
    //   19: ifne -> 23
    //   22: return
    //   23: new android/os/Bundle
    //   26: dup
    //   27: invokespecial <init> : ()V
    //   30: astore #5
    //   32: aload #5
    //   34: ldc_w 'err'
    //   37: aload_2
    //   38: invokevirtual putString : (Ljava/lang/String;Ljava/lang/String;)V
    //   41: aload #5
    //   43: ldc_w 'code'
    //   46: aload_3
    //   47: invokevirtual putString : (Ljava/lang/String;Ljava/lang/String;)V
    //   50: aload #4
    //   52: invokestatic isEmpty : (Ljava/lang/CharSequence;)Z
    //   55: ifne -> 79
    //   58: aload #4
    //   60: invokestatic parse : (Ljava/lang/String;)Landroid/net/Uri;
    //   63: astore_2
    //   64: aload_2
    //   65: invokevirtual getHost : ()Ljava/lang/String;
    //   68: ifnull -> 79
    //   71: aload_2
    //   72: invokevirtual getHost : ()Ljava/lang/String;
    //   75: astore_2
    //   76: goto -> 83
    //   79: ldc_w ''
    //   82: astore_2
    //   83: aload #5
    //   85: ldc_w 'host'
    //   88: aload_2
    //   89: invokevirtual putString : (Ljava/lang/String;Ljava/lang/String;)V
    //   92: invokestatic zzek : ()Lcom/google/android/gms/internal/ads/zzakk;
    //   95: aload_1
    //   96: aload_0
    //   97: getfield zzbnd : Lcom/google/android/gms/internal/ads/zzaqw;
    //   100: invokeinterface zztq : ()Lcom/google/android/gms/internal/ads/zzang;
    //   105: getfield zzcw : Ljava/lang/String;
    //   108: ldc_w 'gmob-apps'
    //   111: aload #5
    //   113: iconst_1
    //   114: invokevirtual zza : (Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;Z)V
    //   117: return }
  
  private final WebResourceResponse zze(String paramString, Map<String, String> paramMap) throws IOException {
    URL uRL = new URL(paramString);
    byte b = 0;
    while (true) {
      if (++b <= 20) {
        URLConnection uRLConnection = uRL.openConnection();
        uRLConnection.setConnectTimeout(10000);
        uRLConnection.setReadTimeout(10000);
        for (Map.Entry entry : paramMap.entrySet())
          uRLConnection.addRequestProperty((String)entry.getKey(), (String)entry.getValue()); 
        if (uRLConnection instanceof HttpURLConnection) {
          HttpURLConnection httpURLConnection = (HttpURLConnection)uRLConnection;
          zzbv.zzek().zza(this.zzbnd.getContext(), (this.zzbnd.zztq()).zzcw, false, httpURLConnection);
          zzamy zzamy = new zzamy();
          zzamy.zza(httpURLConnection, null);
          int i = httpURLConnection.getResponseCode();
          zzamy.zza(httpURLConnection, i);
          if (i >= 300 && i < 400) {
            String str = httpURLConnection.getHeaderField("Location");
            if (str != null) {
              URL uRL2 = new URL(uRL, str);
              String str1 = uRL2.getProtocol();
              if (str1 == null) {
                zzakb.zzdk("Protocol is null");
                return null;
              } 
              if (!str1.equals("http") && !str1.equals("https")) {
                str1 = String.valueOf(str1);
                if (str1.length() != 0) {
                  str1 = "Unsupported scheme: ".concat(str1);
                } else {
                  str1 = new String("Unsupported scheme: ");
                } 
                zzakb.zzdk(str1);
                return null;
              } 
              str1 = String.valueOf(str);
              if (str1.length() != 0) {
                str1 = "Redirecting to ".concat(str1);
              } else {
                str1 = new String("Redirecting to ");
              } 
              zzakb.zzck(str1);
              httpURLConnection.disconnect();
              URL uRL1 = uRL2;
              continue;
            } 
            throw new IOException("Missing Location header in redirect");
          } 
          return zzbv.zzek().zzb(httpURLConnection);
        } 
        throw new IOException("Invalid protocol.");
      } 
      break;
    } 
    StringBuilder stringBuilder = new StringBuilder(32);
    stringBuilder.append("Too many redirects (20)");
    IOException iOException = new IOException(stringBuilder.toString());
    throw iOException;
  }
  
  private final void zzi(Uri paramUri) {
    Iterator iterator;
    String str2 = paramUri.getPath();
    List list = (List)this.zzdbq.get(str2);
    if (list != null) {
      Map map = zzbv.zzek().zzg(paramUri);
      if (zzakb.isLoggable(2)) {
        String str = String.valueOf(str2);
        if (str.length() != 0) {
          str = "Received GMSG: ".concat(str);
        } else {
          str = new String("Received GMSG: ");
        } 
        zzakb.v(str);
        Iterator iterator1 = map.keySet().iterator();
        while (iterator1.hasNext()) {
          String str3;
          StringBuilder stringBuilder1 = new StringBuilder((str3 = (String)map.get(str2)).valueOf(str2).length() + 4 + (str2 = (String)iterator1.next()).valueOf(str3).length());
          stringBuilder1.append("  ");
          stringBuilder1.append(str2);
          stringBuilder1.append(": ");
          stringBuilder1.append(str3);
          zzakb.v(stringBuilder1.toString());
        } 
      } 
      iterator = list.iterator();
      while (iterator.hasNext())
        ((zzv)iterator.next()).zza(this.zzbnd, map); 
      return;
    } 
    String str1;
    StringBuilder stringBuilder = new StringBuilder((str1 = String.valueOf(iterator)).valueOf(str1).length() + 32);
    stringBuilder.append("No GMSG handler found for GMSG: ");
    stringBuilder.append(str1);
    zzakb.v(stringBuilder.toString());
  }
  
  private final void zzuy() {
    if (this.zzdce == null)
      return; 
    this.zzbnd.getView().removeOnAttachStateChangeListener(this.zzdce);
  }
  
  private final void zzvd() {
    if (this.zzdbr != null && ((this.zzdcb && this.zzdcd <= 0) || this.zzdcc)) {
      this.zzdbr.zze(this.zzdcc ^ true);
      this.zzdbr = null;
    } 
    this.zzbnd.zzup();
  }
  
  public final void onLoadResource(WebView paramWebView, String paramString) {
    String str = String.valueOf(paramString);
    if (str.length() != 0) {
      str = "Loading resource: ".concat(str);
    } else {
      str = new String("Loading resource: ");
    } 
    zzakb.v(str);
    Uri uri = Uri.parse(paramString);
    if ("gmsg".equalsIgnoreCase(uri.getScheme()) && "mobileads.google.com".equalsIgnoreCase(uri.getHost()))
      zzi(uri); 
  }
  
  public final void onPageFinished(WebView paramWebView, String paramString) {
    synchronized (this.mLock) {
      if (this.zzbnd.isDestroyed()) {
        zzakb.v("Blank page loaded, 1...");
        this.zzbnd.zzuk();
        return;
      } 
      this.zzdcb = true;
      null = this.zzdbs;
      if (null != null) {
        null.zzly();
        this.zzdbs = null;
      } 
      zzvd();
      return;
    } 
  }
  
  public final void onReceivedError(WebView paramWebView, int paramInt, String paramString1, String paramString2) { // Byte code:
    //   0: iload_2
    //   1: ifge -> 33
    //   4: iload_2
    //   5: ineg
    //   6: iconst_1
    //   7: isub
    //   8: istore #5
    //   10: getstatic com/google/android/gms/internal/ads/zzaqx.zzdbo : [Ljava/lang/String;
    //   13: astore #6
    //   15: iload #5
    //   17: aload #6
    //   19: arraylength
    //   20: if_icmpge -> 33
    //   23: aload #6
    //   25: iload #5
    //   27: aaload
    //   28: astore #6
    //   30: goto -> 39
    //   33: iload_2
    //   34: invokestatic valueOf : (I)Ljava/lang/String;
    //   37: astore #6
    //   39: aload_0
    //   40: aload_0
    //   41: getfield zzbnd : Lcom/google/android/gms/internal/ads/zzaqw;
    //   44: invokeinterface getContext : ()Landroid/content/Context;
    //   49: ldc_w 'http_err'
    //   52: aload #6
    //   54: aload #4
    //   56: invokespecial zzd : (Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
    //   59: aload_0
    //   60: aload_1
    //   61: iload_2
    //   62: aload_3
    //   63: aload #4
    //   65: invokespecial onReceivedError : (Landroid/webkit/WebView;ILjava/lang/String;Ljava/lang/String;)V
    //   68: return }
  
  public final void onReceivedSslError(WebView paramWebView, SslErrorHandler paramSslErrorHandler, SslError paramSslError) { // Byte code:
    //   0: aload_3
    //   1: ifnull -> 70
    //   4: aload_3
    //   5: invokevirtual getPrimaryError : ()I
    //   8: istore #4
    //   10: iload #4
    //   12: iflt -> 38
    //   15: getstatic com/google/android/gms/internal/ads/zzaqx.zzdbp : [Ljava/lang/String;
    //   18: astore #5
    //   20: iload #4
    //   22: aload #5
    //   24: arraylength
    //   25: if_icmpge -> 38
    //   28: aload #5
    //   30: iload #4
    //   32: aaload
    //   33: astore #5
    //   35: goto -> 45
    //   38: iload #4
    //   40: invokestatic valueOf : (I)Ljava/lang/String;
    //   43: astore #5
    //   45: aload_0
    //   46: aload_0
    //   47: getfield zzbnd : Lcom/google/android/gms/internal/ads/zzaqw;
    //   50: invokeinterface getContext : ()Landroid/content/Context;
    //   55: ldc_w 'ssl_err'
    //   58: aload #5
    //   60: invokestatic zzem : ()Lcom/google/android/gms/internal/ads/zzakq;
    //   63: aload_3
    //   64: invokevirtual zza : (Landroid/net/http/SslError;)Ljava/lang/String;
    //   67: invokespecial zzd : (Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
    //   70: aload_0
    //   71: aload_1
    //   72: aload_2
    //   73: aload_3
    //   74: invokespecial onReceivedSslError : (Landroid/webkit/WebView;Landroid/webkit/SslErrorHandler;Landroid/net/http/SslError;)V
    //   77: return }
  
  public final void reset() {
    zzait zzait1 = this.zzxd;
    if (zzait1 != null) {
      zzait1.zzpj();
      this.zzxd = null;
    } 
    zzuy();
    synchronized (this.mLock) {
      this.zzdbq.clear();
      this.zzapt = null;
      this.zzbnc = null;
      this.zzdbr = null;
      this.zzdbs = null;
      this.zzbll = null;
      this.zzblm = null;
      this.zzdbu = false;
      this.zzaek = false;
      this.zzdbv = false;
      this.zzdby = false;
      this.zzbnb = null;
      this.zzdbt = null;
      if (this.zzbmx != null) {
        this.zzbmx.zzm(true);
        this.zzbmx = null;
      } 
      return;
    } 
  }
  
  @TargetApi(11)
  @Nullable
  public WebResourceResponse shouldInterceptRequest(WebView paramWebView, String paramString) { return zzd(paramString, Collections.emptyMap()); }
  
  public boolean shouldOverrideKeyEvent(WebView paramWebView, KeyEvent paramKeyEvent) {
    int i = paramKeyEvent.getKeyCode();
    if (i != 79 && i != 222)
      switch (i) {
        default:
          switch (i) {
            default:
              return false;
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
              break;
          } 
          break;
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
          break;
      }  
    return true;
  }
  
  public final boolean shouldOverrideUrlLoading(WebView paramWebView, String paramString) {
    String str2 = String.valueOf(paramString);
    if (str2.length() != 0) {
      str2 = "AdWebView shouldOverrideUrlLoading: ".concat(str2);
    } else {
      str2 = new String("AdWebView shouldOverrideUrlLoading: ");
    } 
    zzakb.v(str2);
    zzait zzait1 = Uri.parse(paramString);
    if ("gmsg".equalsIgnoreCase(zzait1.getScheme()) && "mobileads.google.com".equalsIgnoreCase(zzait1.getHost())) {
      zzi(zzait1);
      return true;
    } 
    if (this.zzdbu && paramWebView == this.zzbnd.getWebView()) {
      boolean bool;
      String str = zzait1.getScheme();
      if ("http".equalsIgnoreCase(str) || "https".equalsIgnoreCase(str)) {
        bool = true;
      } else {
        bool = false;
      } 
      if (bool) {
        if (this.zzapt != null) {
          zzna zzna = zznk.zzaxf;
          if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue()) {
            this.zzapt.onAdClicked();
            zzait1 = this.zzxd;
            if (zzait1 != null)
              zzait1.zzcf(paramString); 
            this.zzapt = null;
          } 
        } 
        return super.shouldOverrideUrlLoading(paramWebView, paramString);
      } 
    } 
    if (!this.zzbnd.getWebView().willNotDraw()) {
      zzait zzait2;
      try {
        zzci zzci = this.zzbnd.zzui();
        zzait2 = zzait1;
        if (zzci != null) {
          zzait2 = zzait1;
          if (zzci.zzb(zzait1))
            Uri uri = zzci.zza(zzait1, this.zzbnd.getContext(), this.zzbnd.getView(), this.zzbnd.zzto()); 
        } 
      } catch (zzcj paramWebView) {
        String str = String.valueOf(paramString);
        if (str.length() != 0) {
          str = "Unable to append parameter to URL: ".concat(str);
        } else {
          str = new String("Unable to append parameter to URL: ");
        } 
        zzakb.zzdk(str);
        zzait2 = zzait1;
      } 
      zzx zzx1 = this.zzbmw;
      if (zzx1 == null || zzx1.zzcy()) {
        zza(new zzc("android.intent.action.VIEW", zzait2.toString(), null, null, null, null, null));
        return true;
      } 
      this.zzbmw.zzs(paramString);
      return true;
    } 
    String str1 = String.valueOf(paramString);
    if (str1.length() != 0) {
      str1 = "AdWebView unable to handle URL: ".concat(str1);
    } else {
      str1 = new String("AdWebView unable to handle URL: ");
    } 
    zzakb.zzdk(str1);
    return true;
  }
  
  public final void zza(int paramInt1, int paramInt2, boolean paramBoolean) {
    this.zzdbz.zzc(paramInt1, paramInt2);
    zzaab zzaab1 = this.zzbmx;
    if (zzaab1 != null)
      zzaab1.zza(paramInt1, paramInt2, paramBoolean); 
  }
  
  public final void zza(ViewTreeObserver.OnGlobalLayoutListener paramOnGlobalLayoutListener, ViewTreeObserver.OnScrollChangedListener paramOnScrollChangedListener) {
    synchronized (this.mLock) {
      this.zzdbv = true;
      this.zzbnd.zzuo();
      this.zzdbw = paramOnGlobalLayoutListener;
      this.zzdbx = paramOnScrollChangedListener;
      return;
    } 
  }
  
  public final void zza(zzc paramzzc) {
    zzn zzn1;
    zzjd zzjd1;
    boolean bool = this.zzbnd.zzuj();
    if (bool && !this.zzbnd.zzud().zzvs()) {
      zzjd1 = null;
    } else {
      zzjd1 = this.zzapt;
    } 
    if (bool) {
      zzn1 = null;
    } else {
      zzn1 = this.zzbnc;
    } 
    zza(new AdOverlayInfoParcel(paramzzc, zzjd1, zzn1, this.zzbnb, this.zzbnd.zztq()));
  }
  
  public final void zza(zzasd paramzzasd) { this.zzdbr = paramzzasd; }
  
  public final void zza(zzase paramzzase) { this.zzdbs = paramzzase; }
  
  public final void zza(zzasf paramzzasf) { this.zzdbt = paramzzasf; }
  
  public final void zza(zzasg paramzzasg) { this.zzdca = paramzzasg; }
  
  public final void zza(zzjd paramzzjd, zzb paramzzb, zzn paramzzn, zzd paramzzd, zzt paramzzt, boolean paramBoolean, @Nullable zzz paramzzz, zzx paramzzx, zzaam paramzzaam, @Nullable zzait paramzzait) {
    if (paramzzx == null)
      paramzzx = new zzx(this.zzbnd.getContext(), paramzzait, null); 
    this.zzbmx = new zzaab(this.zzbnd, paramzzaam);
    this.zzxd = paramzzait;
    zzna zzna = zznk.zzayf;
    if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue())
      zza("/adMetadata", new zza(paramzzb)); 
    zza("/appEvent", new zzc(paramzzd));
    zza("/backButton", zzf.zzblx);
    zza("/refresh", zzf.zzbly);
    zza("/canOpenURLs", zzf.zzblo);
    zza("/canOpenIntents", zzf.zzblp);
    zza("/click", zzf.zzblq);
    zza("/close", zzf.zzblr);
    zza("/customClose", zzf.zzbls);
    zza("/instrument", zzf.zzbmb);
    zza("/delayPageLoaded", zzf.zzbmd);
    zza("/delayPageClosed", zzf.zzbme);
    zza("/getLocationInfo", zzf.zzbmf);
    zza("/httpTrack", zzf.zzblt);
    zza("/log", zzf.zzblu);
    zza("/mraid", new zzac(paramzzx, this.zzbmx, paramzzaam));
    zza("/mraidLoaded", this.zzdbz);
    zza("/open", new zzad(this.zzbnd.getContext(), this.zzbnd.zztq(), this.zzbnd.zzui(), paramzzt, paramzzjd, paramzzb, paramzzd, paramzzn, paramzzx, this.zzbmx));
    zza("/precache", new zzaql());
    zza("/touch", zzf.zzblw);
    zza("/video", zzf.zzblz);
    zza("/videoMeta", zzf.zzbma);
    if (zzbv.zzfh().zzs(this.zzbnd.getContext()))
      zza("/logScionEvent", new zzab(this.zzbnd.getContext())); 
    if (paramzzz != null)
      zza("/setInterstitialProperties", new zzy(paramzzz)); 
    this.zzapt = paramzzjd;
    this.zzbnc = paramzzn;
    this.zzbll = paramzzb;
    this.zzblm = paramzzd;
    this.zzbnb = paramzzt;
    this.zzbmw = paramzzx;
    this.zzbmy = paramzzaam;
    this.zzbmu = paramzzz;
    this.zzdbu = paramBoolean;
  }
  
  public final void zza(String paramString, zzv<? super zzaqw> paramzzv) {
    synchronized (this.mLock) {
      List list2 = (List)this.zzdbq.get(paramString);
      List list1 = list2;
      if (list2 == null) {
        list1 = new CopyOnWriteArrayList();
        this.zzdbq.put(paramString, list1);
      } 
      list1.add(paramzzv);
      return;
    } 
  }
  
  public final void zza(String paramString, Predicate<zzv<? super zzaqw>> paramPredicate) {
    synchronized (this.mLock) {
      List list = (List)this.zzdbq.get(paramString);
      if (list == null)
        return; 
      ArrayList arrayList = new ArrayList();
      for (zzv zzv : list) {
        if (paramPredicate.apply(zzv))
          arrayList.add(zzv); 
      } 
      list.removeAll(arrayList);
      return;
    } 
  }
  
  public final void zza(boolean paramBoolean, int paramInt) {
    zzjd zzjd1;
    if (this.zzbnd.zzuj() && !this.zzbnd.zzud().zzvs()) {
      zzjd1 = null;
    } else {
      zzjd1 = this.zzapt;
    } 
    zzn zzn1 = this.zzbnc;
    zzt zzt1 = this.zzbnb;
    zzaqw zzaqw1 = this.zzbnd;
    zza(new AdOverlayInfoParcel(zzjd1, zzn1, zzt1, zzaqw1, paramBoolean, paramInt, zzaqw1.zztq()));
  }
  
  public final void zza(boolean paramBoolean, int paramInt, String paramString) {
    zzarb zzarb;
    zzjd zzjd1;
    boolean bool = this.zzbnd.zzuj();
    if (bool && !this.zzbnd.zzud().zzvs()) {
      zzjd1 = null;
    } else {
      zzjd1 = this.zzapt;
    } 
    if (bool) {
      zzarb = null;
    } else {
      zzarb = new zzarb(this.zzbnd, this.zzbnc);
    } 
    zzb zzb1 = this.zzbll;
    zzd zzd1 = this.zzblm;
    zzt zzt1 = this.zzbnb;
    zzaqw zzaqw1 = this.zzbnd;
    zza(new AdOverlayInfoParcel(zzjd1, zzarb, zzb1, zzd1, zzt1, zzaqw1, paramBoolean, paramInt, paramString, zzaqw1.zztq()));
  }
  
  public final void zza(boolean paramBoolean, int paramInt, String paramString1, String paramString2) {
    zzarb zzarb;
    zzjd zzjd1;
    boolean bool = this.zzbnd.zzuj();
    if (bool && !this.zzbnd.zzud().zzvs()) {
      zzjd1 = null;
    } else {
      zzjd1 = this.zzapt;
    } 
    if (bool) {
      zzarb = null;
    } else {
      zzarb = new zzarb(this.zzbnd, this.zzbnc);
    } 
    zzb zzb1 = this.zzbll;
    zzd zzd1 = this.zzblm;
    zzt zzt1 = this.zzbnb;
    zzaqw zzaqw1 = this.zzbnd;
    zza(new AdOverlayInfoParcel(zzjd1, zzarb, zzb1, zzd1, zzt1, zzaqw1, paramBoolean, paramInt, paramString1, paramString2, zzaqw1.zztq()));
  }
  
  public final void zzah(boolean paramBoolean) { this.zzdbu = paramBoolean; }
  
  public final void zzb(int paramInt1, int paramInt2) {
    zzaab zzaab1 = this.zzbmx;
    if (zzaab1 != null)
      zzaab1.zzb(paramInt1, paramInt2); 
  }
  
  public final void zzb(String paramString, zzv<? super zzaqw> paramzzv) {
    synchronized (this.mLock) {
      List list = (List)this.zzdbq.get(paramString);
      if (list == null)
        return; 
      list.remove(paramzzv);
      return;
    } 
  }
  
  @Nullable
  protected final WebResourceResponse zzd(String paramString, Map<String, String> paramMap) throws IOException {
    try {
      String str = zzajb.zzb(paramString, this.zzbnd.getContext());
      if (!str.equals(paramString))
        return zze(str, paramMap); 
      zzhl zzhl = zzhl.zzaa(paramString);
      if (zzhl != null) {
        zzhi zzhi = zzbv.zzeq().zza(zzhl);
        if (zzhi != null && zzhi.zzhi())
          return new WebResourceResponse("", "", zzhi.zzhj()); 
      } 
      if (zzamy.isEnabled()) {
        zzna zzna = zznk.zzazn;
        if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue())
          return zze(paramString, paramMap); 
      } 
      return null;
    } catch (Exception paramString) {
    
    } catch (NoClassDefFoundError paramString) {}
    zzbv.zzeo().zza(paramString, "AdWebViewClient.interceptRequest");
    return null;
  }
  
  public final boolean zzfz() {
    synchronized (this.mLock) {
      return this.zzaek;
    } 
  }
  
  public final void zznk() {
    synchronized (this.mLock) {
      this.zzdbu = false;
      this.zzaek = true;
      zzaoe.zzcvy.execute(new zzaqy(this));
      return;
    } 
  }
  
  public final zzx zzut() { return this.zzbmw; }
  
  public final boolean zzuu() {
    synchronized (this.mLock) {
      return this.zzdbv;
    } 
  }
  
  public final ViewTreeObserver.OnGlobalLayoutListener zzuv() {
    synchronized (this.mLock) {
      return this.zzdbw;
    } 
  }
  
  public final ViewTreeObserver.OnScrollChangedListener zzuw() {
    synchronized (this.mLock) {
      return this.zzdbx;
    } 
  }
  
  public final boolean zzux() {
    synchronized (this.mLock) {
      return this.zzdby;
    } 
  }
  
  public final void zzuz() {
    zzait zzait1 = this.zzxd;
    if (zzait1 != null) {
      WebView webView = this.zzbnd.getWebView();
      if (ViewCompat.isAttachedToWindow(webView)) {
        zza(webView, zzait1, 10);
        return;
      } 
      zzuy();
      this.zzdce = new zzara(this, zzait1);
      this.zzbnd.getView().addOnAttachStateChangeListener(this.zzdce);
    } 
  }
  
  public final void zzva() {
    synchronized (this.mLock) {
      this.zzdby = true;
      this.zzdcd++;
      zzvd();
      return;
    } 
  }
  
  public final void zzvb() {
    this.zzdcd--;
    zzvd();
  }
  
  public final void zzvc() {
    this.zzdcc = true;
    zzvd();
  }
  
  public final zzasg zzve() { return this.zzdca; }
  
  public final zzait zzvf() { return this.zzxd; }
}
