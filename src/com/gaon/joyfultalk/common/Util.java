package com.gaon.joyfultalk.common;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.ActivityManager;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.ContentUris;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.AssetManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.media.ExifInterface;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.ContactsContract;
import android.provider.MediaStore;
import android.telephony.TelephonyManager;
import android.text.ClipboardManager;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.TypedValue;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RatingBar;
import android.widget.TextView;
import android.widget.Toast;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.StringTokenizer;
import java.util.regex.Pattern;

public class Util {
  public static final String APP_SAVE_NAME = "profile_data";
  
  private static final int DEFAULT_BUFFER_SIZE = 4096;
  
  public static final String ENCODE_EUC_KR = "euc-kr";
  
  public static final String ENCODE_ISO_8859_1 = "ISO-8859-1";
  
  public static final String ENCODE_MS949 = "ms949";
  
  public static final String ENCODE_UTF_8 = "utf-8";
  
  public static final int LENGTH_LONG = 1;
  
  public static final int LENGTH_SHORT = 0;
  
  private static final int MAX_IMAGE_SIZE = 480;
  
  private static final String TAG = "Util";
  
  static BufferedInputStream bis;
  
  static HttpURLConnection conn;
  
  static byte[] datas = new byte[0];
  
  private static boolean debug = false;
  
  static Bitmap imgBitmap;
  
  public static void DialogDataPicker(Context paramContext, DialogDataPickerListener paramDialogDataPickerListener) {
    Calendar calendar = Calendar.getInstance();
    int i = calendar.get(1);
    int j = calendar.get(2);
    int k = calendar.get(5);
    (new DatePickerDialog(paramContext, new Object(paramDialogDataPickerListener), i, j, k)).show();
  }
  
  public static boolean SDCardFileCheck(String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------SDCardFileCheck----------------"); 
    try {
      (new FileInputStream(paramString)).close();
      return true;
    } catch (IOException paramString) {
      return false;
    } 
  }
  
  public static List<String> ageList() {
    LinkedList linkedList = new LinkedList();
    for (byte b = 20; b < 61; b++) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append(b);
      stringBuilder.append("");
      linkedList.add(stringBuilder.toString());
    } 
    return linkedList;
  }
  
  public static Bitmap bitmapFromSdCard(String paramString) {
    boolean bool;
    BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;
    BitmapFactory.decodeFile(paramString, options);
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("bitmapFromSdCard - height : ");
    stringBuilder.append(options.outHeight);
    stringBuilder.append(" / width : ");
    stringBuilder.append(options.outWidth);
    Log.e("Util", stringBuilder.toString());
    if (options.outHeight > 480 || options.outWidth > 480) {
      double d = Math.max(options.outHeight, options.outWidth);
      Double.isNaN(d);
      bool = (int)Math.pow(2.0D, (int)Math.round(Math.log(480.0D / d) / Math.log(0.5D)));
    } else {
      bool = true;
    } 
    byte b = bool;
    if (bool > true)
      b = bool / 2; 
    stringBuilder = new StringBuilder();
    stringBuilder.append("bitmapFromSdCard - scale : ");
    stringBuilder.append(b);
    Log.e("Util", stringBuilder.toString());
    options.inJustDecodeBounds = false;
    options.inSampleSize = b;
    return BitmapFactory.decodeFile(paramString, options);
  }
  
  public static byte[] bitmapToByteArray(Bitmap paramBitmap) {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    paramBitmap.compress(Bitmap.CompressFormat.JPEG, 100, byteArrayOutputStream);
    return byteArrayOutputStream.toByteArray();
  }
  
  public static boolean checkEmoticonCharacter(String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------checkEmoticonCharacter----------------"); 
    for (byte b = 0; b < paramString.length(); b++) {
      Character.UnicodeBlock unicodeBlock = Character.UnicodeBlock.of(paramString.charAt(b));
      if (Character.UnicodeBlock.HIGH_SURROGATES.equals(unicodeBlock) || Character.UnicodeBlock.LOW_SURROGATES.equals(unicodeBlock))
        return true; 
    } 
    return false;
  }
  
  public static boolean checkEn(String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------checkEn----------------"); 
    return Pattern.compile("[a-zA-Z]").matcher(paramString).find();
  }
  
  public static boolean checkHangul(String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------checkHangul----------------"); 
    for (byte b = 0; b < paramString.length(); b++) {
      Character.UnicodeBlock unicodeBlock = Character.UnicodeBlock.of(paramString.charAt(b));
      if (Character.UnicodeBlock.HANGUL_SYLLABLES.equals(unicodeBlock) || Character.UnicodeBlock.HANGUL_COMPATIBILITY_JAMO.equals(unicodeBlock) || Character.UnicodeBlock.HANGUL_JAMO.equals(unicodeBlock))
        return true; 
    } 
    return false;
  }
  
  public static boolean checkNum(String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------checkNum----------------"); 
    return Pattern.compile("[0-9]").matcher(paramString).find();
  }
  
  public static boolean checkSpecialCharacter(String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------checkSpecialCharacter----------------"); 
    return paramString.matches("[^가-힣xfe0-9a-zA-Z\\s]");
  }
  
  public static void clipBoardCopy(String paramString, Context paramContext) {
    if (Build.VERSION.SDK_INT <= 11) {
      ((ClipboardManager)paramContext.getSystemService("clipboard")).setText(paramString);
      return;
    } 
    ((ClipboardManager)paramContext.getSystemService("clipboard")).setPrimaryClip(ClipData.newPlainText("text label", paramString));
  }
  
  public static int convertDipToPixels(Context paramContext, int paramInt) { return (int)TypedValue.applyDimension(1, paramInt, paramContext.getResources().getDisplayMetrics()); }
  
  public static int copy(InputStream paramInputStream, OutputStream paramOutputStream) throws IOException {
    byte[] arrayOfByte = new byte[4096];
    int i = 0;
    while (true) {
      int j = paramInputStream.read(arrayOfByte);
      if (-1 != j) {
        paramOutputStream.write(arrayOfByte, 0, j);
        i += j;
        continue;
      } 
      break;
    } 
    return i;
  }
  
  public static File createImageFile() throws IOException { return File.createTempFile((new SimpleDateFormat("yyyyMMddHHmmss")).format(new Date()), ".jpg", Environment.getExternalStorageDirectory()); }
  
  public static ArrayList<ArrayList<Dictionary>> dataListParse(ArrayList<Dictionary> paramArrayList, int paramInt) {
    ArrayList arrayList = new ArrayList();
    int i = (int)Math.ceil((paramArrayList.size() / paramInt));
    byte b2 = 0;
    byte b1 = 0;
    while (b2 < i) {
      ArrayList arrayList1 = new ArrayList();
      byte b;
      for (b = 0; b < paramInt && b1 != paramArrayList.size(); b++) {
        arrayList1.add(paramArrayList.get(b1));
        b1++;
      } 
      arrayList.add(arrayList1);
      b2++;
    } 
    return arrayList;
  }
  
  public static void deleteAllFile(String paramString) {
    File file = new File(paramString);
    if (file.isDirectory()) {
      File[] arrayOfFile = file.listFiles();
      int i = arrayOfFile.length;
      for (byte b = 0; b < i; b++)
        arrayOfFile[b].delete(); 
    } 
  }
  
  public static void deleteFile(String paramString1, String paramString2) {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(paramString1);
    stringBuilder.append(paramString2);
    File file = new File(stringBuilder.toString());
    if (file.isFile())
      file.delete(); 
  }
  
  public static void deleteSharedPreferences(Context paramContext, String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------deleteSharedPreferences----------------"); 
    SharedPreferences.Editor editor = paramContext.getSharedPreferences("profile_data", 0).edit();
    editor.remove(paramString);
    editor.commit();
  }
  
  public static String deleteZero(String paramString) { return String.valueOf(Integer.parseInt(paramString)); }
  
  public static String[] dictionaryToArray(Dictionary paramDictionary) {
    String[] arrayOfString1 = paramDictionary.getKeys();
    String[] arrayOfString2 = new String[arrayOfString1.length];
    for (byte b = 0; b < arrayOfString1.length; b++)
      arrayOfString2[b] = paramDictionary.getString(arrayOfString1[b]); 
    return arrayOfString2;
  }
  
  public static Bundle dictionaryToBundle(Dictionary paramDictionary) {
    Bundle bundle = new Bundle();
    String[] arrayOfString = paramDictionary.getKeys();
    for (byte b = 0; b < arrayOfString.length; b++)
      bundle.putString(arrayOfString[b], paramDictionary.getString(arrayOfString[b])); 
    return bundle;
  }
  
  public static int dipToPx(Context paramContext, int paramInt) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------dipToPx----------------"); 
    float f = (paramContext.getResources().getDisplayMetrics()).density;
    return (int)(paramInt * f + 0.5F);
  }
  
  public static void draw(Canvas paramCanvas, Bitmap paramBitmap, int paramInt1, int paramInt2) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------draw_1----------------"); 
    paramCanvas.drawBitmap(paramBitmap, paramInt1, paramInt2, null);
  }
  
  public static void draw(Canvas paramCanvas, Bitmap paramBitmap, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------draw_1----------------"); 
    paramCanvas.drawBitmap(paramBitmap, paramInt1, paramInt2, null);
  }
  
  public static void draw(Canvas paramCanvas, Bitmap paramBitmap, int paramInt1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, int paramInt6) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------draw_2----------------"); 
    paramCanvas.clipRect(paramInt1, paramInt2, paramInt5 + paramInt1, paramInt6 + paramInt2);
    paramCanvas.drawBitmap(paramBitmap, (paramInt1 - paramInt3), (paramInt2 - paramInt4), null);
    paramCanvas.restore();
  }
  
  public static void drawRectImage(Canvas paramCanvas, Bitmap paramBitmap, Rect paramRect) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------drawRectImage----------------"); 
    if (paramCanvas != null && paramBitmap != null) {
      if (paramRect == null)
        return; 
      int i = paramRect.left;
      int j = paramRect.top;
      int i1 = paramBitmap.getWidth();
      int m = paramBitmap.getHeight();
      int i2 = paramRect.width();
      int n = paramRect.height();
      if (i1 < i2)
        i = (i2 - i1) / 2; 
      if (m < n)
        j = (n - m) / 2; 
      int k = i;
      if (i1 > i2)
        k = i - (i1 - i2) / 2; 
      i = j;
      if (m > n)
        i = j - (m - n) / 2; 
      paramCanvas.drawBitmap(paramBitmap, k, i, null);
    } 
  }
  
  public static void drawText(Canvas paramCanvas, String paramString, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------drawText----------------"); 
    if (paramString != null) {
      if (paramString.length() <= 0)
        return; 
      Paint paint = new Paint();
      paint.setColor(paramInt3);
      paint.setTextSize(paramInt4);
      paint.setTypeface(Typeface.create(Typeface.SANS_SERIF, 0));
      paramCanvas.drawText(paramString, paramInt1, paramInt2, paint);
    } 
  }
  
  public static void editDialog(Activity paramActivity, String paramString1, String paramString2, String paramString3, EditDialogCallback paramEditDialogCallback) {
    LinearLayout linearLayout = new LinearLayout(paramActivity);
    linearLayout.setOrientation(1);
    linearLayout.setGravity(17);
    EditText editText = new EditText(paramActivity);
    if (paramString2 != null) {
      linearLayout.addView(editText, new LinearLayout.LayoutParams(-1, -2));
    } else {
      float f = (paramActivity.getResources().getDisplayMetrics()).density;
      editText.setGravity(51);
      linearLayout.addView(editText, new LinearLayout.LayoutParams(-1, (int)(f * 50.0F)));
    } 
    AlertDialog.Builder builder = new AlertDialog.Builder(paramActivity);
    builder.setTitle(paramString1);
    builder.setView(linearLayout);
    builder.setCancelable(true);
    builder.setMessage(paramString2);
    builder.setPositiveButton(paramString3, new Object(paramEditDialogCallback, editText));
    builder.setNegativeButton("취소", new Object(paramEditDialogCallback));
    builder.setOnCancelListener(new Object(paramEditDialogCallback));
    if (!paramActivity.isFinishing()) {
      builder.create();
      builder.show();
    } 
  }
  
  public static String enCoder(String paramString1, String paramString2) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------enCoder----------------"); 
    if (paramString1 == null)
      return ""; 
    try {
      return URLEncoder.encode(new String(paramString1.getBytes(paramString2)));
    } catch (UnsupportedEncodingException paramString1) {
      paramString1.printStackTrace();
      return "";
    } 
  }
  
  public static String enCoderEUCKR(String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------enCoderEUCKR----------------"); 
    if (paramString == null)
      return ""; 
    try {
      return URLEncoder.encode(new String(paramString.getBytes("euc-kr")));
    } catch (UnsupportedEncodingException paramString) {
      paramString.printStackTrace();
      return "";
    } 
  }
  
  public static String enCoderMS949(String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------enCoderMS949----------------"); 
    if (paramString == null)
      return ""; 
    try {
      return URLEncoder.encode(new String(paramString.getBytes("ms-949")));
    } catch (UnsupportedEncodingException paramString) {
      paramString.printStackTrace();
      return "";
    } 
  }
  
  public static String enCoderUTF(String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------enCoderUTF----------------"); 
    if (paramString == null)
      return ""; 
    try {
      return URLEncoder.encode(new String(paramString.getBytes("utf-8")));
    } catch (UnsupportedEncodingException paramString) {
      paramString.printStackTrace();
      return "";
    } 
  }
  
  public static List<String> genderList() { return new LinkedList(Arrays.asList(new String[] { 
            "싱글남자", "싱글여자", "돌아온싱글남자", "돌아온싱글여자", "애인있는남자", "애인있는여자", "와이프있는남자", "와이프있는여자", "쿨한남자", "쿨한여자", 
            "매력있는남자", "매력있는여자", "자유로운남자", "자유로운여자" })); }
  
  public static String getBirthToAge(String paramString, int paramInt) {
    if (debug) {
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("getBirthToAge - birth : ");
      stringBuilder1.append(paramString);
      Log.d("Util", stringBuilder1.toString());
    } 
    if (paramString == null)
      return null; 
    int i = Integer.parseInt(paramString.substring(0, 2));
    if (debug) {
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("getBirthToAge - age : ");
      stringBuilder1.append(i);
      Log.d("Util", stringBuilder1.toString());
    } 
    i = 114 - i;
    if (paramInt != 0 && i < paramInt)
      return null; 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(i);
    stringBuilder.append("");
    return stringBuilder.toString();
  }
  
  public static Bitmap getBitmap(Context paramContext, int paramInt) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------getBitmap----------------"); 
    return BitmapFactory.decodeResource(paramContext.getResources(), paramInt);
  }
  
  public static Bitmap getBitmap(String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------getBitmap----------------"); 
    return BitmapFactory.decodeFile(paramString);
  }
  
  public static Bitmap getBitmapFromAsset(Context paramContext, String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------getBitmapFromAsset----------------"); 
    assetManager = paramContext.getResources().getAssets();
    try {
      InputStream inputStream = assetManager.open(paramString, 3);
      if (inputStream != null)
        return BitmapFactory.decodeStream(inputStream); 
    } catch (IOException assetManager) {}
    return null;
  }
  
  public static int getCameraPhotoOrientation(Context paramContext, Uri paramUri, String paramString) {
    try {
      paramContext.getContentResolver().notifyChange(paramUri, null);
      int i = (new ExifInterface((new File(paramString)).getAbsolutePath())).getAttributeInt("Orientation", 1);
      return (i != 3) ? ((i != 6) ? ((i != 8) ? 0 : 270) : 90) : 180;
    } catch (Exception paramContext) {
      paramContext.printStackTrace();
      return 0;
    } 
  }
  
  public static Uri getContactPhotoByNumber(Context paramContext, String paramString) throws Exception {
    Uri uri = Uri.withAppendedPath(ContactsContract.PhoneLookup.CONTENT_FILTER_URI, Uri.encode(paramString));
    Cursor cursor = paramContext.getContentResolver().query(uri, new String[] { "_id", "display_name" }, null, null, null);
    if (cursor == null)
      return null; 
    if (cursor.moveToFirst()) {
      long l = Long.parseLong(cursor.getString(0));
      uri = ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI, l);
      cursor.close();
      return uri;
    } 
    cursor.close();
    return null;
  }
  
  public static String getCurrentDate(String paramString) { return (new SimpleDateFormat(paramString, Locale.KOREA)).format(new Date()); }
  
  public static float getDeviceDPI(Context paramContext) {
    DisplayMetrics displayMetrics = new DisplayMetrics();
    ((Activity)paramContext).getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
    return displayMetrics.density;
  }
  
  public static String getDevicePhoneNumber(Context paramContext) {
    TelephonyManager telephonyManager = (TelephonyManager)paramContext.getSystemService("phone");
    return (telephonyManager == null) ? null : telephonyManager.getLine1Number();
  }
  
  public static int getDisplayHeight(Activity paramActivity) {
    DisplayMetrics displayMetrics = new DisplayMetrics();
    paramActivity.getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
    return displayMetrics.heightPixels;
  }
  
  public static int getDisplayWidth(Activity paramActivity) {
    DisplayMetrics displayMetrics = new DisplayMetrics();
    paramActivity.getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
    return displayMetrics.widthPixels;
  }
  
  public static Drawable getDrawable(Context paramContext, int paramInt) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------getDrawable----------------"); 
    return new BitmapDrawable(getBitmap(paramContext, paramInt));
  }
  
  public static byte[] getImageDataFromUrl(URL paramURL) { // Byte code:
    //   0: ldc com/gaon/joyfultalk/common/Util
    //   2: monitorenter
    //   3: aload_0
    //   4: ifnull -> 66
    //   7: ldc ''
    //   9: aload_0
    //   10: invokevirtual equals : (Ljava/lang/Object;)Z
    //   13: ifeq -> 19
    //   16: goto -> 66
    //   19: new java/lang/Thread
    //   22: dup
    //   23: new com/gaon/joyfultalk/common/Util$20
    //   26: dup
    //   27: aload_0
    //   28: invokespecial <init> : (Ljava/net/URL;)V
    //   31: invokespecial <init> : (Ljava/lang/Runnable;)V
    //   34: astore_0
    //   35: aload_0
    //   36: invokevirtual start : ()V
    //   39: aload_0
    //   40: invokevirtual join : ()V
    //   43: goto -> 51
    //   46: astore_0
    //   47: aload_0
    //   48: invokevirtual printStackTrace : ()V
    //   51: getstatic com/gaon/joyfultalk/common/Util.datas : [B
    //   54: astore_0
    //   55: ldc com/gaon/joyfultalk/common/Util
    //   57: monitorexit
    //   58: aload_0
    //   59: areturn
    //   60: astore_0
    //   61: ldc com/gaon/joyfultalk/common/Util
    //   63: monitorexit
    //   64: aload_0
    //   65: athrow
    //   66: ldc com/gaon/joyfultalk/common/Util
    //   68: monitorexit
    //   69: aconst_null
    //   70: areturn
    // Exception table:
    //   from	to	target	type
    //   7	16	60	finally
    //   19	39	60	finally
    //   39	43	46	java/lang/InterruptedException
    //   39	43	60	finally
    //   47	51	60	finally
    //   51	55	60	finally }
  
  public static File getImageFile(Context paramContext, Uri paramUri) {
    Uri uri = paramUri;
    if (paramUri == null)
      uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI; 
    Cursor cursor = paramContext.getContentResolver().query(uri, new String[] { "_data" }, null, null, "date_modified desc");
    if (cursor == null || cursor.getCount() < 1)
      return null; 
    int i = cursor.getColumnIndexOrThrow("_data");
    cursor.moveToFirst();
    String str = cursor.getString(i);
    if (cursor != null)
      cursor.close(); 
    return new File(str);
  }
  
  public static Bitmap getImageFromURL(String paramString, callBackImageDownload paramcallBackImageDownload) {
    if (debug) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("getImageFromURL - imageURL : ");
      stringBuilder.append(paramString);
      Log.d("Util", stringBuilder.toString());
    } 
    imgBitmap = null;
    conn = null;
    bis = null;
    if (paramString != null) {
      if (paramString.length() < 5)
        return null; 
      thread = new Thread(new Object(paramString, paramcallBackImageDownload));
      thread.start();
      try {
        thread.join();
      } catch (InterruptedException thread) {
        thread.printStackTrace();
      } 
      if (debug) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("getImageFromURL - imgBitmap : ");
        stringBuilder.append(imgBitmap);
        Log.d("Util", stringBuilder.toString());
      } 
      return imgBitmap;
    } 
    return null;
  }
  
  public static void getImageFromURL(String paramString, ImageView paramImageView, callBackListener paramcallBackListener) {
    if (debug) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("getImageFromURL - imageURL : ");
      stringBuilder.append(paramString);
      Log.d("Util", stringBuilder.toString());
    } 
    imgBitmap = null;
    conn = null;
    bis = null;
    if (paramString != null) {
      if (paramString.length() < 5)
        return; 
      (new Thread(new Object(paramString, paramcallBackListener, paramImageView))).start();
      if (debug) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("getImageFromURL - imgBitmap : ");
        stringBuilder.append(imgBitmap);
        Log.d("Util", stringBuilder.toString());
      } 
    } 
  }
  
  public static int getImageOrientation(String paramString) {
    try {
      int i = (new ExifInterface(paramString)).getAttributeInt("Orientation", 1);
      return (i != 3) ? ((i != 6) ? ((i != 8) ? 0 : 270) : 90) : 180;
    } catch (IOException paramString) {
      paramString.printStackTrace();
      return 0;
    } 
  }
  
  public static int getMaxImageSize() { return 480; }
  
  public static String getMultiply(String paramString1, String paramString2) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------getMultiply----------------"); 
    return (paramString1 == null || paramString1.length() <= 0 || paramString2 == null || paramString2.length() <= 0) ? null : (new BigInteger(paramString1)).multiply(new BigInteger(paramString2)).toString();
  }
  
  public static String getPhoneHyphen(String paramString) {
    StringBuffer stringBuffer = new StringBuffer();
    if (paramString != null && paramString.length() == 11) {
      stringBuffer.append(paramString.substring(0, 3));
      stringBuffer.append("-");
      stringBuffer.append(paramString.substring(3, 7));
      stringBuffer.append("-");
      stringBuffer.append(paramString.substring(7, 11));
    } else if (paramString != null && paramString.length() == 10) {
      stringBuffer.append(paramString.substring(0, 3));
      stringBuffer.append("-");
      stringBuffer.append(paramString.substring(3, 6));
      stringBuffer.append("-");
      stringBuffer.append(paramString.substring(6, 10));
    } else {
      if (paramString != null) {
        stringBuffer.append(paramString);
        return stringBuffer.toString();
      } 
      return "";
    } 
    return stringBuffer.toString();
  }
  
  public static String getRealPathFromURI(Context paramContext, Uri paramUri) {
    Cursor cursor = paramContext.getContentResolver().query(paramUri, new String[] { "_data" }, null, null, null);
    int i = cursor.getColumnIndexOrThrow("_data");
    cursor.moveToFirst();
    return cursor.getString(i);
  }
  
  public static Bitmap getResBitmap(Context paramContext, String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------getResBitmap----------------"); 
    return BitmapFactory.decodeResource(paramContext.getResources(), getResID(paramContext, paramString));
  }
  
  public static int getResID(Context paramContext, String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------getResID----------------"); 
    String str = null;
    int i = paramString.lastIndexOf("/");
    if (i >= 0)
      str = paramString.substring(i + 1); 
    if (paramString.charAt(0) == '@') {
      paramString = paramString.substring(1, i);
    } else {
      paramString = paramString.substring(0, i);
    } 
    return paramContext.getResources().getIdentifier(str, paramString, paramContext.getPackageName());
  }
  
  public static String getSDCardPath() {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------getSDCardPath----------------"); 
    return Environment.getExternalStorageState().equals("mounted") ? Environment.getExternalStorageDirectory().getAbsolutePath() : null;
  }
  
  public static String getStringToFloat(String paramString, int paramInt) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------getStringToFloat----------------"); 
    if (paramString == null)
      return null; 
    int i = paramString.lastIndexOf(".");
    String str = paramString;
    if (i >= 0)
      str = paramString.substring(0, i + paramInt + 1); 
    return str;
  }
  
  public static boolean imagReSizeQuality(String paramString, int paramInt) { return !((new File(paramString)).length() > paramInt); }
  
  public static boolean imageCheck(String paramString) {
    String[] arrayOfString = paramString.split("/");
    String str = arrayOfString[arrayOfString.length - 1];
    return !(!str.endsWith(".png") && !str.endsWith(".jpg") && !str.endsWith(".JPEG"));
  }
  
  public static Bitmap imageRound(Bitmap paramBitmap, int paramInt1, int paramInt2) {
    Paint paint = new Paint();
    paint.setAntiAlias(true);
    paint.setShader(new BitmapShader(paramBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));
    Bitmap bitmap = Bitmap.createBitmap(paramBitmap.getWidth(), paramBitmap.getHeight(), Bitmap.Config.ARGB_8888);
    (new Canvas(bitmap)).drawRoundRect(new RectF(0.0F, 0.0F, paramBitmap.getWidth(), paramBitmap.getHeight()), paramInt2, paramInt1, paint);
    if (paramBitmap != bitmap)
      paramBitmap.recycle(); 
    return bitmap;
  }
  
  public static String imageSave(Context paramContext, Intent paramIntent, String paramString, int paramInt1, int paramInt2, int paramInt3) { // Byte code:
    //   0: aload_1
    //   1: invokevirtual getData : ()Landroid/net/Uri;
    //   4: astore #12
    //   6: new java/lang/StringBuilder
    //   9: dup
    //   10: invokespecial <init> : ()V
    //   13: astore_1
    //   14: aload_1
    //   15: invokestatic currentTimeMillis : ()J
    //   18: invokestatic valueOf : (J)Ljava/lang/String;
    //   21: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   24: pop
    //   25: aload_1
    //   26: ldc_w '.jpg'
    //   29: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   32: pop
    //   33: aload_1
    //   34: invokevirtual toString : ()Ljava/lang/String;
    //   37: astore #15
    //   39: new java/io/File
    //   42: dup
    //   43: aload_2
    //   44: invokespecial <init> : (Ljava/lang/String;)V
    //   47: astore_1
    //   48: aload_1
    //   49: invokevirtual isDirectory : ()Z
    //   52: ifne -> 60
    //   55: aload_1
    //   56: invokevirtual mkdir : ()Z
    //   59: pop
    //   60: aload_0
    //   61: invokevirtual getContentResolver : ()Landroid/content/ContentResolver;
    //   64: aload #12
    //   66: ldc_w 'r'
    //   69: invokevirtual openAssetFileDescriptor : (Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;
    //   72: astore_1
    //   73: new android/graphics/BitmapFactory$Options
    //   76: dup
    //   77: invokespecial <init> : ()V
    //   80: astore #7
    //   82: aload #7
    //   84: iload #4
    //   86: putfield inSampleSize : I
    //   89: aload #7
    //   91: iconst_1
    //   92: putfield inPurgeable : Z
    //   95: aload #7
    //   97: iconst_1
    //   98: putfield inInputShareable : Z
    //   101: aload_1
    //   102: invokevirtual getFileDescriptor : ()Ljava/io/FileDescriptor;
    //   105: aconst_null
    //   106: aload #7
    //   108: invokestatic decodeFileDescriptor : (Ljava/io/FileDescriptor;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   111: astore #8
    //   113: new java/lang/StringBuilder
    //   116: dup
    //   117: invokespecial <init> : ()V
    //   120: astore #7
    //   122: aload #7
    //   124: aload_2
    //   125: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   128: pop
    //   129: aload #7
    //   131: aload #15
    //   133: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   136: pop
    //   137: new java/io/FileOutputStream
    //   140: dup
    //   141: aload #7
    //   143: invokevirtual toString : ()Ljava/lang/String;
    //   146: invokespecial <init> : (Ljava/lang/String;)V
    //   149: astore #14
    //   151: aload #8
    //   153: astore #9
    //   155: aload_1
    //   156: astore #10
    //   158: aload #8
    //   160: astore #7
    //   162: aload #14
    //   164: astore #11
    //   166: new android/graphics/Matrix
    //   169: dup
    //   170: invokespecial <init> : ()V
    //   173: astore #13
    //   175: aload #8
    //   177: astore #9
    //   179: aload_1
    //   180: astore #10
    //   182: aload #8
    //   184: astore #7
    //   186: aload #14
    //   188: astore #11
    //   190: aload #13
    //   192: aload_0
    //   193: aload #12
    //   195: aload_0
    //   196: aload #12
    //   198: invokestatic getRealPathFromURI : (Landroid/content/Context;Landroid/net/Uri;)Ljava/lang/String;
    //   201: invokestatic getCameraPhotoOrientation : (Landroid/content/Context;Landroid/net/Uri;Ljava/lang/String;)I
    //   204: i2f
    //   205: invokevirtual postRotate : (F)Z
    //   208: pop
    //   209: aload #8
    //   211: astore #9
    //   213: aload_1
    //   214: astore #10
    //   216: aload #8
    //   218: astore #7
    //   220: aload #14
    //   222: astore #11
    //   224: aload #8
    //   226: iconst_0
    //   227: iconst_0
    //   228: aload #8
    //   230: invokevirtual getWidth : ()I
    //   233: aload #8
    //   235: invokevirtual getHeight : ()I
    //   238: aload #13
    //   240: iconst_1
    //   241: invokestatic createBitmap : (Landroid/graphics/Bitmap;IIIILandroid/graphics/Matrix;Z)Landroid/graphics/Bitmap;
    //   244: astore #8
    //   246: aload #8
    //   248: astore #9
    //   250: aload_1
    //   251: astore #10
    //   253: aload #8
    //   255: astore #7
    //   257: aload #14
    //   259: astore #11
    //   261: sipush #480
    //   264: aload #8
    //   266: invokevirtual getWidth : ()I
    //   269: if_icmpge -> 338
    //   272: aload #8
    //   274: astore #9
    //   276: aload_1
    //   277: astore #10
    //   279: aload #8
    //   281: astore #7
    //   283: aload #14
    //   285: astore #11
    //   287: aload #8
    //   289: invokevirtual getWidth : ()I
    //   292: i2f
    //   293: ldc_w 600.0
    //   296: fdiv
    //   297: fstore #6
    //   299: aload #8
    //   301: astore #9
    //   303: aload_1
    //   304: astore #10
    //   306: aload #8
    //   308: astore #7
    //   310: aload #14
    //   312: astore #11
    //   314: aload #8
    //   316: sipush #600
    //   319: aload #8
    //   321: invokevirtual getHeight : ()I
    //   324: i2f
    //   325: fload #6
    //   327: fdiv
    //   328: f2i
    //   329: iconst_1
    //   330: invokestatic createScaledBitmap : (Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;
    //   333: astore #8
    //   335: goto -> 371
    //   338: aload #8
    //   340: astore #9
    //   342: aload_1
    //   343: astore #10
    //   345: aload #8
    //   347: astore #7
    //   349: aload #14
    //   351: astore #11
    //   353: aload #8
    //   355: aload #8
    //   357: invokevirtual getWidth : ()I
    //   360: aload #8
    //   362: invokevirtual getHeight : ()I
    //   365: iconst_1
    //   366: invokestatic createScaledBitmap : (Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;
    //   369: astore #8
    //   371: aload #8
    //   373: astore #9
    //   375: aload_1
    //   376: astore #10
    //   378: aload #8
    //   380: astore #7
    //   382: aload #14
    //   384: astore #11
    //   386: aload #8
    //   388: getstatic android/graphics/Bitmap$CompressFormat.JPEG : Landroid/graphics/Bitmap$CompressFormat;
    //   391: iload #5
    //   393: aload #14
    //   395: invokevirtual compress : (Landroid/graphics/Bitmap$CompressFormat;ILjava/io/OutputStream;)Z
    //   398: pop
    //   399: aload #8
    //   401: astore #9
    //   403: aload_1
    //   404: astore #10
    //   406: aload #8
    //   408: astore #7
    //   410: aload #14
    //   412: astore #11
    //   414: aload #14
    //   416: invokevirtual close : ()V
    //   419: aload #8
    //   421: ifnull -> 447
    //   424: aload #8
    //   426: astore #9
    //   428: aload_1
    //   429: astore #10
    //   431: aload #8
    //   433: astore #7
    //   435: aload #14
    //   437: astore #11
    //   439: aload_0
    //   440: ldc_w '사진이 첨부되었습니다.'
    //   443: iconst_1
    //   444: invokestatic toast : (Landroid/content/Context;Ljava/lang/String;I)V
    //   447: aload_1
    //   448: ifnull -> 455
    //   451: aload_1
    //   452: invokevirtual close : ()V
    //   455: aload #8
    //   457: ifnull -> 465
    //   460: aload #8
    //   462: invokevirtual recycle : ()V
    //   465: aload #14
    //   467: invokevirtual close : ()V
    //   470: goto -> 622
    //   473: astore #12
    //   475: aload_1
    //   476: astore #13
    //   478: aload #9
    //   480: astore #8
    //   482: aload #14
    //   484: astore_1
    //   485: goto -> 547
    //   488: astore_0
    //   489: aconst_null
    //   490: astore #11
    //   492: aload #8
    //   494: astore #7
    //   496: goto -> 684
    //   499: astore #12
    //   501: aconst_null
    //   502: astore #7
    //   504: aload_1
    //   505: astore #13
    //   507: aload #7
    //   509: astore_1
    //   510: goto -> 547
    //   513: astore_0
    //   514: goto -> 528
    //   517: astore #12
    //   519: aload_1
    //   520: astore #13
    //   522: goto -> 542
    //   525: astore_0
    //   526: aconst_null
    //   527: astore_1
    //   528: aconst_null
    //   529: astore #7
    //   531: aconst_null
    //   532: astore #11
    //   534: goto -> 684
    //   537: astore #12
    //   539: aconst_null
    //   540: astore #13
    //   542: aconst_null
    //   543: astore #8
    //   545: aconst_null
    //   546: astore_1
    //   547: aload #13
    //   549: astore #10
    //   551: aload #8
    //   553: astore #7
    //   555: aload_1
    //   556: astore #11
    //   558: aload #12
    //   560: invokevirtual printStackTrace : ()V
    //   563: aload #13
    //   565: astore #10
    //   567: aload #8
    //   569: astore #7
    //   571: aload_1
    //   572: astore #11
    //   574: aload_0
    //   575: checkcast android/app/Activity
    //   578: ldc_w '알림'
    //   581: ldc_w '변경에 실패 하였습니다. 다시 시도해 주십시오.'
    //   584: aconst_null
    //   585: invokestatic showDialog : (Landroid/app/Activity;Ljava/lang/String;Ljava/lang/String;Lcom/gaon/joyfultalk/common/Util$DialogCallBack;)V
    //   588: aload #13
    //   590: ifnull -> 601
    //   593: aload #13
    //   595: invokevirtual close : ()V
    //   598: goto -> 601
    //   601: aload #8
    //   603: ifnull -> 611
    //   606: aload #8
    //   608: invokevirtual recycle : ()V
    //   611: aload_1
    //   612: invokevirtual close : ()V
    //   615: goto -> 622
    //   618: aload_1
    //   619: invokevirtual printStackTrace : ()V
    //   622: new java/lang/StringBuilder
    //   625: dup
    //   626: invokespecial <init> : ()V
    //   629: astore_1
    //   630: aload_1
    //   631: aload_2
    //   632: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   635: pop
    //   636: aload_1
    //   637: aload #15
    //   639: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   642: pop
    //   643: aload_1
    //   644: invokevirtual toString : ()Ljava/lang/String;
    //   647: iload_3
    //   648: invokestatic imagReSizeQuality : (Ljava/lang/String;I)Z
    //   651: ifne -> 677
    //   654: aload_0
    //   655: checkcast android/app/Activity
    //   658: ldc_w '알림'
    //   661: ldc_w '사진 용량이 큼니다.(5MB이하)'
    //   664: aconst_null
    //   665: invokestatic showDialog : (Landroid/app/Activity;Ljava/lang/String;Ljava/lang/String;Lcom/gaon/joyfultalk/common/Util$DialogCallBack;)V
    //   668: aload_2
    //   669: aload #15
    //   671: invokestatic deleteFile : (Ljava/lang/String;Ljava/lang/String;)V
    //   674: ldc ''
    //   676: areturn
    //   677: aload #15
    //   679: areturn
    //   680: astore_0
    //   681: aload #10
    //   683: astore_1
    //   684: aload_1
    //   685: ifnull -> 695
    //   688: aload_1
    //   689: invokevirtual close : ()V
    //   692: goto -> 695
    //   695: aload #7
    //   697: ifnull -> 705
    //   700: aload #7
    //   702: invokevirtual recycle : ()V
    //   705: aload #11
    //   707: invokevirtual close : ()V
    //   710: goto -> 717
    //   713: aload_1
    //   714: invokevirtual printStackTrace : ()V
    //   717: aload_0
    //   718: athrow
    //   719: astore_1
    //   720: goto -> 618
    //   723: astore_1
    //   724: goto -> 713
    // Exception table:
    //   from	to	target	type
    //   60	73	537	java/lang/Exception
    //   60	73	525	finally
    //   73	113	517	java/lang/Exception
    //   73	113	513	finally
    //   113	151	499	java/lang/Exception
    //   113	151	488	finally
    //   166	175	473	java/lang/Exception
    //   166	175	680	finally
    //   190	209	473	java/lang/Exception
    //   190	209	680	finally
    //   224	246	473	java/lang/Exception
    //   224	246	680	finally
    //   261	272	473	java/lang/Exception
    //   261	272	680	finally
    //   287	299	473	java/lang/Exception
    //   287	299	680	finally
    //   314	335	473	java/lang/Exception
    //   314	335	680	finally
    //   353	371	473	java/lang/Exception
    //   353	371	680	finally
    //   386	399	473	java/lang/Exception
    //   386	399	680	finally
    //   414	419	473	java/lang/Exception
    //   414	419	680	finally
    //   439	447	473	java/lang/Exception
    //   439	447	680	finally
    //   451	455	719	java/lang/Exception
    //   460	465	719	java/lang/Exception
    //   465	470	719	java/lang/Exception
    //   558	563	680	finally
    //   574	588	680	finally
    //   593	598	719	java/lang/Exception
    //   606	611	719	java/lang/Exception
    //   611	615	719	java/lang/Exception
    //   688	692	723	java/lang/Exception
    //   700	705	723	java/lang/Exception
    //   705	710	723	java/lang/Exception }
  
  public static boolean isEmpty(String paramString) { return ("".equals(paramString) || paramString == null); }
  
  public static boolean isRunningProcess(Context paramContext, String paramString) {
    Iterator iterator = ((ActivityManager)paramContext.getSystemService("activity")).getRunningAppProcesses().iterator();
    while (iterator.hasNext()) {
      if (((ActivityManager.RunningAppProcessInfo)iterator.next()).processName.equals(paramString))
        return true; 
    } 
    return false;
  }
  
  public static void keyPadDown(Context paramContext, EditText paramEditText) { ((InputMethodManager)paramContext.getSystemService("input_method")).hideSoftInputFromWindow(paramEditText.getWindowToken(), 0); }
  
  public static String kscToUni(String paramString) {
    try {
      return new String(paramString.getBytes("KSC5601"), "8859_1");
    } catch (Exception paramString) {
      paramString.printStackTrace();
      return null;
    } 
  }
  
  public static String loadAssetsTextFile(Context paramContext, String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------loadAssetsTextFile----------------"); 
    assetManager = paramContext.getAssets();
    try {
      InputStream inputStream = assetManager.open(paramString, 3);
      byte[] arrayOfByte = new byte[inputStream.available()];
      inputStream.read(arrayOfByte);
      inputStream.close();
      return new String(arrayOfByte);
    } catch (IOException assetManager) {
      assetManager.printStackTrace();
      return null;
    } 
  }
  
  public static String loadSharedPreferences(Context paramContext, String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------loadSharedPreferences----------------"); 
    return paramContext.getSharedPreferences("profile_data", 0).getString(paramString, null);
  }
  
  public static boolean loadSharedPreferencesBoolean(Context paramContext, String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------loadSharedPreferencesBoolean----------------"); 
    return paramContext.getSharedPreferences("profile_data", 0).getBoolean(paramString, false);
  }
  
  public static int loadSharedPreferencesInt(Context paramContext, String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------loadSharedPreferences----------------"); 
    return paramContext.getSharedPreferences("profile_data", 0).getInt(paramString, -1);
  }
  
  public static Long loadSharedPreferencesLong(Context paramContext, String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------loadSharedPreferencesLong----------------"); 
    return Long.valueOf(paramContext.getSharedPreferences("profile_data", 0).getLong(paramString, -1L));
  }
  
  public static String moneyPosition(int paramInt) { return (new DecimalFormat("###,###.####")).format(paramInt); }
  
  public static void optionDialog(Activity paramActivity, String paramString, String[] paramArrayOfString1, String[] paramArrayOfString2, int paramInt, OptionDialogCallback paramOptionDialogCallback) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------optionDialog----------------"); 
    AlertDialog.Builder builder = new AlertDialog.Builder(paramActivity);
    builder.setTitle(paramString);
    builder.setSingleChoiceItems(paramArrayOfString2, paramInt, new Object(paramOptionDialogCallback));
    if (paramArrayOfString1 != null)
      for (paramInt = 0; paramInt < paramArrayOfString1.length; paramInt++)
        builder.setPositiveButton(paramArrayOfString1[paramInt], new Object(paramOptionDialogCallback));  
    builder.setOnCancelListener(new Object(paramOptionDialogCallback));
    if (!paramActivity.isFinishing()) {
      builder.create();
      builder.show();
    } 
  }
  
  public static void questionDialog(Activity paramActivity, String paramString1, String paramString2, String paramString3, String paramString4, QuestionDialogCallback paramQuestionDialogCallback) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------questionDialog----------------"); 
    AlertDialog.Builder builder = new AlertDialog.Builder(paramActivity);
    builder.setTitle(paramString1);
    builder.setMessage(paramString2);
    builder.setCancelable(true);
    builder.setPositiveButton(paramString3, new Object(paramQuestionDialogCallback));
    builder.setNegativeButton(paramString4, new Object(paramQuestionDialogCallback));
    builder.setOnCancelListener(new Object(paramQuestionDialogCallback));
    if (!paramActivity.isFinishing()) {
      builder.create();
      builder.show();
    } 
  }
  
  public static void ratingDialog(Activity paramActivity, String paramString1, String paramString2, RatingBarDialogCallback paramRatingBarDialogCallback) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------ratingDialog----------------"); 
    LinearLayout linearLayout = new LinearLayout(paramActivity);
    linearLayout.setOrientation(1);
    linearLayout.setGravity(17);
    RatingBar ratingBar = new RatingBar(paramActivity);
    linearLayout.addView(ratingBar, new LinearLayout.LayoutParams(-2, -2));
    AlertDialog.Builder builder = new AlertDialog.Builder(paramActivity);
    builder.setTitle(paramString1);
    builder.setView(linearLayout);
    builder.setCancelable(true);
    builder.setMessage(paramString2);
    builder.setPositiveButton("확인", new Object(paramRatingBarDialogCallback, ratingBar));
    builder.setNegativeButton("취소", new Object(paramRatingBarDialogCallback));
    builder.setOnCancelListener(new Object(paramRatingBarDialogCallback));
    if (!paramActivity.isFinishing()) {
      builder.create();
      builder.show();
    } 
  }
  
  public static boolean reNameFile(File paramFile1, File paramFile2) { return (paramFile1 != null && paramFile1.exists() && paramFile1.renameTo(paramFile2)); }
  
  public static void recommentTextGone(Context paramContext, TextView paramTextView, EditText paramEditText) { paramEditText.addTextChangedListener(new Object(paramTextView)); }
  
  public static void recommentTextVisible(Context paramContext, TextView paramTextView, EditText paramEditText, String paramString) {
    paramTextView.setVisibility(0);
    paramEditText.requestFocus();
    paramTextView.setText(paramString);
    paramEditText.setText(" ");
    paramEditText.setSelection(1);
    paramEditText.postDelayed(new Object(paramContext, paramEditText), 200L);
  }
  
  public static Bitmap rotateImage(Bitmap paramBitmap, float paramFloat) {
    Matrix matrix = new Matrix();
    matrix.postRotate(paramFloat);
    return Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), matrix, true);
  }
  
  public static boolean saveFile(InputStream paramInputStream, String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------saveFile----------------"); 
    long l = 0L;
    try {
      int i = paramInputStream.available();
      l = i;
    } catch (IOException iOException) {}
    byte[] arrayOfByte = new byte[(int)l];
    InputStream inputStream2 = null;
    InputStream inputStream3 = null;
    fileOutputStream = null;
    try {
      fileOutputStream1 = new FileOutputStream(paramString);
      try {
        while (true) {
          int i = paramInputStream.read(arrayOfByte);
          if (i != -1) {
            fileOutputStream1.write(arrayOfByte, 0, i);
            continue;
          } 
          break;
        } 
        return true;
      } catch (FileNotFoundException fileOutputStream) {
        FileOutputStream fileOutputStream2 = fileOutputStream1;
      } catch (IOException fileOutputStream) {
        FileOutputStream fileOutputStream2 = fileOutputStream1;
      } finally {
        paramInputStream = null;
      } 
    } catch (FileNotFoundException paramString) {
      paramInputStream = inputStream3;
    } catch (IOException paramString) {
      paramInputStream = inputStream2;
      InputStream inputStream = paramInputStream;
      paramString.printStackTrace();
      if (paramInputStream != null)
        try {
          paramInputStream.close();
          return false;
        } catch (IOException paramInputStream) {
          paramInputStream.printStackTrace();
          return false;
        }  
    } finally {}
    InputStream inputStream1 = paramInputStream;
    paramString.printStackTrace();
    if (paramInputStream != null)
      paramInputStream.close(); 
    return false;
  }
  
  public static boolean saveFile2(String paramString1, String paramString2) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------saveFile----------------"); 
    String str2 = null;
    String str3 = null;
    fileOutputStream = null;
    try {
      fileOutputStream1 = new FileOutputStream(paramString2);
      try {
        fileOutputStream1.write(paramString1.getBytes());
        return true;
      } catch (FileNotFoundException fileOutputStream) {
        FileOutputStream fileOutputStream2 = fileOutputStream1;
      } catch (IOException fileOutputStream) {
        FileOutputStream fileOutputStream2 = fileOutputStream1;
      } finally {
        paramString1 = null;
      } 
    } catch (FileNotFoundException paramString2) {
      paramString1 = str3;
    } catch (IOException paramString2) {
      paramString1 = str2;
      String str = paramString1;
      paramString2.printStackTrace();
      if (paramString1 != null)
        try {
          paramString1.close();
          return false;
        } catch (IOException paramString1) {
          paramString1.printStackTrace();
          return false;
        }  
    } finally {}
    String str1 = paramString1;
    paramString2.printStackTrace();
    if (paramString1 != null)
      paramString1.close(); 
    return false;
  }
  
  public static void saveSharedPreferencesBoolean(Context paramContext, String paramString, boolean paramBoolean) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------saveSharedPreferencesBoolean----------------"); 
    SharedPreferences.Editor editor = paramContext.getSharedPreferences("profile_data", 0).edit();
    editor.putBoolean(paramString, paramBoolean);
    editor.commit();
  }
  
  public static void saveSharedPreferencesInt(Context paramContext, String paramString, int paramInt) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------saveSharedPreferencesInt----------------"); 
    SharedPreferences.Editor editor = paramContext.getSharedPreferences("profile_data", 0).edit();
    editor.putInt(paramString, paramInt);
    editor.commit();
  }
  
  public static void saveSharedPreferencesLong(Context paramContext, String paramString, long paramLong) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------saveSharedPreferencesLong----------------"); 
    SharedPreferences.Editor editor = paramContext.getSharedPreferences("profile_data", 0).edit();
    editor.putLong(paramString, paramLong);
    editor.commit();
  }
  
  public static void saveSharedPreferencesString(Context paramContext, String paramString1, String paramString2) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------saveSharedPreferencesString----------------"); 
    SharedPreferences.Editor editor = paramContext.getSharedPreferences("profile_data", 0).edit();
    editor.putString(paramString1, paramString2);
    editor.commit();
  }
  
  public static void screenShot(Context paramContext, Bitmap paramBitmap, String paramString) {
    try {
      File file = new File(Environment.getExternalStorageDirectory().getPath());
      if (!file.isDirectory())
        file.mkdirs(); 
      StringBuilder stringBuilder2 = new StringBuilder();
      stringBuilder2.append(Environment.getExternalStorageDirectory().getPath());
      stringBuilder2.append("/");
      stringBuilder2.append(paramString);
      FileOutputStream fileOutputStream = new FileOutputStream(stringBuilder2.toString());
      paramBitmap.compress(Bitmap.CompressFormat.JPEG, 100, fileOutputStream);
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("file://");
      stringBuilder1.append(Environment.getExternalStorageDirectory());
      paramContext.sendBroadcast(new Intent("android.intent.action.MEDIA_MOUNTED", Uri.parse(stringBuilder1.toString())));
      return;
    } catch (FileNotFoundException paramContext) {
      paramContext.printStackTrace();
      return;
    } 
  }
  
  public static String setCommaNumber(String paramString) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------setCommaNumber----------------"); 
    if (paramString == null || paramString.length() <= 0)
      return null; 
    int j = 0;
    int m = paramString.length();
    int k = m % 3;
    int i = k;
    if (k == 0)
      i = 3; 
    String str = "";
    while (j < m) {
      if (!j) {
        k = i;
      } else {
        k = 3;
      } 
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append(str);
      k = j + k;
      stringBuilder.append(paramString.substring(j, k));
      String str1 = stringBuilder.toString();
      str = str1;
      if (k < m) {
        StringBuilder stringBuilder1 = new StringBuilder();
        stringBuilder1.append(str1);
        stringBuilder1.append(",");
        str = stringBuilder1.toString();
      } 
      j = k;
    } 
    return str;
  }
  
  public static String[] setOptionItemSelect(String[] paramArrayOfString1, String[] paramArrayOfString2, int paramInt, boolean paramBoolean, String paramString) {
    String[] arrayOfString = new String[paramArrayOfString2.length + 1];
    boolean bool = false;
    byte b4 = 0;
    byte b1 = 0;
    byte b2 = 0;
    byte b3;
    for (b3 = 0; b1 < paramArrayOfString1.length; b3 = b5) {
      byte b6;
      byte b5;
      if (b2 < paramArrayOfString2.length && paramArrayOfString1[b1] == paramArrayOfString2[b2]) {
        arrayOfString[b3] = paramArrayOfString1[b1];
        b5 = b3 + true;
        b6 = b2 + true;
      } else {
        b6 = b2;
        b5 = b3;
        if (paramArrayOfString1[b1] == paramString) {
          arrayOfString[b3] = paramArrayOfString1[b1];
          b5 = b3 + true;
          b6 = b2;
        } 
      } 
      b1++;
      b2 = b6;
    } 
    if (paramBoolean) {
      String[] arrayOfString1 = new String[paramArrayOfString2.length];
      b3 = 0;
      byte b = 0;
      b2 = b4;
      while (true) {
        paramArrayOfString1 = arrayOfString1;
        if (b2 < arrayOfString.length) {
          byte b5;
          if (b3 < paramArrayOfString2.length && arrayOfString[b2] == paramArrayOfString2[b3]) {
            b1 = b;
            if (arrayOfString[b2] != paramArrayOfString2[paramInt]) {
              arrayOfString1[b] = arrayOfString[b2];
              b1 = b + 1;
            } 
            b5 = b3 + 1;
          } else {
            b5 = b3;
            b1 = b;
            if (b < arrayOfString1.length) {
              arrayOfString1[b] = arrayOfString[b2];
              b1 = b + 1;
              b5 = b3;
            } 
          } 
          b2++;
          b3 = b5;
          b = b1;
          continue;
        } 
        break;
      } 
    } else {
      String[] arrayOfString1 = new String[paramArrayOfString2.length - 1];
      b1 = 0;
      byte b = bool;
      while (true) {
        paramArrayOfString1 = arrayOfString1;
        if (b < paramArrayOfString2.length) {
          b2 = b1;
          if (b != paramInt) {
            arrayOfString1[b1] = paramArrayOfString2[b];
            b2 = b1 + 1;
          } 
          b++;
          b1 = b2;
          continue;
        } 
        break;
      } 
    } 
    return paramArrayOfString1;
  }
  
  public static void setResizeBitmapSave(Bitmap paramBitmap, int paramInt1, int paramInt2, String paramString1, String paramString2, boolean paramBoolean) {
    FileOutputStream fileOutputStream;
    if (paramBitmap == null) {
      Log.e("Util", "bitmap data is null");
      return;
    } 
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("name insert start / : ");
    stringBuilder.append(paramString2.startsWith("/"));
    Log.d("Util", stringBuilder.toString());
    String str = paramString2;
    if (!paramString2.startsWith("/")) {
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder1.append("/");
      stringBuilder1.append(paramString2);
      str = stringBuilder1.toString();
    } 
    file = new File(paramString1, str);
    paramString1 = null;
    try {
      FileOutputStream fileOutputStream1 = new FileOutputStream(file);
      fileOutputStream = fileOutputStream1;
    } catch (FileNotFoundException file) {
      file.printStackTrace();
    } 
    if (paramBoolean) {
      paramInt1 = 480;
      paramInt2 = 480;
    } 
    Bitmap.createScaledBitmap(paramBitmap, paramInt1, paramInt2, true).compress(Bitmap.CompressFormat.JPEG, 100, fileOutputStream);
  }
  
  public static Bitmap setScale(Context paramContext, Bitmap paramBitmap) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------setScale----------------"); 
    float f = (paramContext.getResources().getDisplayMetrics()).density;
    Matrix matrix = new Matrix();
    matrix.postScale(f, f);
    return Bitmap.createBitmap(paramBitmap, 0, 0, paramBitmap.getWidth(), paramBitmap.getHeight(), matrix, true);
  }
  
  public static Typeface setTypeface(Context paramContext, String paramString) { return Typeface.createFromAsset(paramContext.getAssets(), paramString); }
  
  public static void setVisibleChange(View paramView) {
    int i = paramView.getVisibility();
    if (i != 0) {
      if (i != 8)
        return; 
      paramView.setVisibility(0);
      return;
    } 
    paramView.setVisibility(8);
  }
  
  public static void showAlertDialog(Activity paramActivity, String paramString1, String paramString2, AlertDialogCallBack paramAlertDialogCallBack) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------showDialog----------------"); 
    AlertDialog.Builder builder = new AlertDialog.Builder(paramActivity);
    builder.setTitle(paramString1);
    builder.setMessage(paramString2);
    builder.setPositiveButton("확인", new Object(paramAlertDialogCallBack));
    builder.setOnCancelListener(new Object(paramAlertDialogCallBack));
    if (!paramActivity.isFinishing()) {
      builder.create();
      builder.show();
    } 
  }
  
  public static void showDialog(Activity paramActivity, String paramString1, String paramString2, DialogCallBack paramDialogCallBack) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------showDialog----------------"); 
    AlertDialog.Builder builder = new AlertDialog.Builder(paramActivity);
    builder.setTitle(paramString1);
    builder.setMessage(paramString2);
    builder.setPositiveButton("확인", new Object(paramDialogCallBack));
    if (!paramActivity.isFinishing()) {
      builder.create();
      builder.show();
    } 
  }
  
  public static void showDialogCheckBox(Activity paramActivity, String[] paramArrayOfString, boolean[] paramArrayOfBoolean, DialogCheckBoxListener paramDialogCheckBoxListener) {
    AlertDialog.Builder builder = new AlertDialog.Builder(paramActivity);
    builder.setMultiChoiceItems(paramArrayOfString, paramArrayOfBoolean, new Object(paramDialogCheckBoxListener, paramArrayOfString));
    builder.setPositiveButton("확인", new Object(paramDialogCheckBoxListener));
    if (!paramActivity.isFinishing()) {
      builder.create();
      builder.show();
    } 
  }
  
  public static void showDialog_normal(Activity paramActivity, String paramString1, String paramString2) {
    AlertDialog.Builder builder = new AlertDialog.Builder(paramActivity);
    builder.setTitle(paramString1);
    builder.setMessage(paramString2);
    builder.setPositiveButton("확인", new Object());
    if (!paramActivity.isFinishing()) {
      builder.create();
      builder.show();
    } 
  }
  
  public static String[] splite(String paramString1, String paramString2) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------splite----------------"); 
    byte b = 0;
    StringTokenizer stringTokenizer = new StringTokenizer(paramString1, paramString2);
    String[] arrayOfString = new String[stringTokenizer.countTokens()];
    while (stringTokenizer.hasMoreTokens()) {
      arrayOfString[b] = stringTokenizer.nextToken();
      b++;
    } 
    return arrayOfString;
  }
  
  public static float textWidth(TextView paramTextView, String paramString) { return paramTextView.getPaint().measureText(paramString); }
  
  public static List<String> titleList() { return new LinkedList(Arrays.asList(new String[] { 
            "대화상대를원해요~", "편한이성친구를원해요~", "결혼상대자를원해요~", "술한잔할사람을찾아요~", "커플이되고싶어요~", "장기적인만남을원해요~", "지금급만남을원해요~", "드라이브할사람을찾아요~", "같이클럽가실분을찾아요~", "함께영화볼사람을찾아요~", 
            "같이골프치실분~", "등산가실분~", "일탈여행을원해요~", "고민상담들어주실분~", "재혼을원해요~", "애인을원해요~", "비밀만남을원해요~", "썸타고싶어요~", "맛집탐방가요~" })); }
  
  public static byte[] toByteArray(InputStream paramInputStream) throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    copy(paramInputStream, byteArrayOutputStream);
    return byteArrayOutputStream.toByteArray();
  }
  
  public static void toast(Context paramContext, String paramString, int paramInt) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------toast----------------"); 
    Toast.makeText(paramContext, paramString, paramInt).show();
  }
  
  @SuppressLint({"ShowToast"})
  public static Toast toastImage(Context paramContext, int paramInt1, int paramInt2) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------toastImage----------------"); 
    ImageView imageView = new ImageView(paramContext);
    imageView.setImageResource(paramInt1);
    Toast toast = Toast.makeText(paramContext, "", paramInt2);
    toast.setGravity(17, 0, 0);
    toast.setView(imageView);
    return toast;
  }
  
  @SuppressLint({"ShowToast"})
  public static Toast toastLayout(Context paramContext, View paramView, int paramInt) {
    if (debug)
      Log.d("!!!Util.Class!!!", "--------------toastLayout----------------"); 
    Toast toast = Toast.makeText(paramContext, "", paramInt);
    toast.setGravity(16, 0, 0);
    toast.setView(paramView);
    return toast;
  }
  
  public static String twoPosition(int paramInt) { return String.format("%02d", new Object[] { Integer.valueOf(paramInt) }); }
  
  public static String uniToKsc(String paramString) {
    try {
      return new String(paramString.getBytes("8859_1"), "KSC5601");
    } catch (Exception paramString) {
      paramString.printStackTrace();
      return null;
    } 
  }
}
