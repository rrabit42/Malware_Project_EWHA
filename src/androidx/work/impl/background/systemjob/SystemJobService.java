package androidx.work.impl.background.systemjob;

import android.app.job.JobParameters;
import android.app.job.JobService;
import android.os.Build;
import android.support.annotation.NonNull;
import android.support.annotation.RequiresApi;
import android.support.annotation.RestrictTo;
import android.text.TextUtils;
import androidx.work.Logger;
import androidx.work.WorkerParameters;
import androidx.work.impl.ExecutionListener;
import androidx.work.impl.WorkManagerImpl;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

@RequiresApi(23)
@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
public class SystemJobService extends JobService implements ExecutionListener {
  private static final String TAG = Logger.tagWithPrefix("SystemJobService");
  
  private final Map<String, JobParameters> mJobParameters = new HashMap();
  
  private WorkManagerImpl mWorkManagerImpl;
  
  public void onCreate() {
    super.onCreate();
    this.mWorkManagerImpl = WorkManagerImpl.getInstance();
    WorkManagerImpl workManagerImpl = this.mWorkManagerImpl;
    if (workManagerImpl == null) {
      if (android.app.Application.class.equals(getApplication().getClass())) {
        Logger.get().warning(TAG, "Could not find WorkManager instance; this may be because an auto-backup is in progress. Ignoring JobScheduler commands for now. Please make sure that you are initializing WorkManager if you have manually disabled WorkManagerInitializer.", new Throwable[0]);
        return;
      } 
      throw new IllegalStateException("WorkManager needs to be initialized via a ContentProvider#onCreate() or an Application#onCreate().");
    } 
    workManagerImpl.getProcessor().addExecutionListener(this);
  }
  
  public void onDestroy() {
    super.onDestroy();
    WorkManagerImpl workManagerImpl = this.mWorkManagerImpl;
    if (workManagerImpl != null)
      workManagerImpl.getProcessor().removeExecutionListener(this); 
  }
  
  public void onExecuted(@NonNull String paramString, boolean paramBoolean) {
    Logger.get().debug(TAG, String.format("%s executed on JobScheduler", new Object[] { paramString }), new Throwable[0]);
    synchronized (this.mJobParameters) {
      JobParameters jobParameters = (JobParameters)this.mJobParameters.remove(paramString);
      if (jobParameters != null)
        jobFinished(jobParameters, paramBoolean); 
      return;
    } 
  }
  
  public boolean onStartJob(JobParameters paramJobParameters) {
    if (this.mWorkManagerImpl == null) {
      Logger.get().debug(TAG, "WorkManager is not initialized; requesting retry.", new Throwable[0]);
      jobFinished(paramJobParameters, true);
      return false;
    } 
    String str = paramJobParameters.getExtras().getString("EXTRA_WORK_SPEC_ID");
    if (TextUtils.isEmpty(str)) {
      Logger.get().error(TAG, "WorkSpec id not found!", new Throwable[0]);
      return false;
    } 
    synchronized (this.mJobParameters) {
      if (this.mJobParameters.containsKey(str)) {
        Logger.get().debug(TAG, String.format("Job is already being executed by SystemJobService: %s", new Object[] { str }), new Throwable[0]);
        return false;
      } 
      Logger.get().debug(TAG, String.format("onStartJob for %s", new Object[] { str }), new Throwable[0]);
      this.mJobParameters.put(str, paramJobParameters);
      null = null;
      if (Build.VERSION.SDK_INT >= 24) {
        WorkerParameters.RuntimeExtras runtimeExtras = new WorkerParameters.RuntimeExtras();
        if (paramJobParameters.getTriggeredContentUris() != null)
          runtimeExtras.triggeredContentUris = Arrays.asList(paramJobParameters.getTriggeredContentUris()); 
        if (paramJobParameters.getTriggeredContentAuthorities() != null)
          runtimeExtras.triggeredContentAuthorities = Arrays.asList(paramJobParameters.getTriggeredContentAuthorities()); 
        null = runtimeExtras;
        if (Build.VERSION.SDK_INT >= 28) {
          runtimeExtras.network = paramJobParameters.getNetwork();
          null = runtimeExtras;
        } 
      } 
      this.mWorkManagerImpl.startWork(str, null);
      return true;
    } 
  }
  
  public boolean onStopJob(JobParameters paramJobParameters) {
    if (this.mWorkManagerImpl == null) {
      Logger.get().debug(TAG, "WorkManager is not initialized; requesting retry.", new Throwable[0]);
      return true;
    } 
    null = paramJobParameters.getExtras().getString("EXTRA_WORK_SPEC_ID");
    if (TextUtils.isEmpty(null)) {
      Logger.get().error(TAG, "WorkSpec id not found!", new Throwable[0]);
      return false;
    } 
    Logger.get().debug(TAG, String.format("onStopJob for %s", new Object[] { null }), new Throwable[0]);
    synchronized (this.mJobParameters) {
      this.mJobParameters.remove(null);
      this.mWorkManagerImpl.stopWork(null);
      return this.mWorkManagerImpl.getProcessor().isCancelled(null) ^ true;
    } 
  }
}
