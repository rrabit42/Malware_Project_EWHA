package com.google.android.gms.internal.ads;

import android.content.Context;
import android.graphics.Bitmap;
import android.support.annotation.Nullable;
import android.support.annotation.VisibleForTesting;
import android.view.View;
import com.google.android.gms.ads.internal.zzbv;
import com.google.android.gms.common.GoogleApiAvailabilityLight;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.PlatformVersion;
import com.google.android.gms.common.wrappers.Wrappers;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.ParametersAreNonnullByDefault;
import javax.annotation.concurrent.GuardedBy;

@zzadh
@ParametersAreNonnullByDefault
public final class zzaii implements zzait {
  private static List<Future<Void>> zzcml = Collections.synchronizedList(new ArrayList());
  
  private static ScheduledExecutorService zzcmm = Executors.newSingleThreadScheduledExecutor();
  
  private final Context mContext;
  
  private final Object mLock = new Object();
  
  private final zzaiq zzciy;
  
  @GuardedBy("mLock")
  private final zzbfm zzcmn;
  
  @GuardedBy("mLock")
  private final LinkedHashMap<String, zzbfu> zzcmo;
  
  @GuardedBy("mLock")
  private final List<String> zzcmp = new ArrayList();
  
  @GuardedBy("mLock")
  private final List<String> zzcmq = new ArrayList();
  
  private final zzaiv zzcmr;
  
  @VisibleForTesting
  private boolean zzcms;
  
  private final zzaiw zzcmt;
  
  private HashSet<String> zzcmu = new HashSet();
  
  private boolean zzcmv = false;
  
  private boolean zzcmw = false;
  
  private boolean zzcmx = false;
  
  public zzaii(Context paramContext, zzang paramzzang, zzaiq paramzzaiq, String paramString, zzaiv paramzzaiv) {
    Preconditions.checkNotNull(paramzzaiq, "SafeBrowsing config is not present.");
    Context context = paramContext;
    if (paramContext.getApplicationContext() != null)
      context = paramContext.getApplicationContext(); 
    this.mContext = context;
    this.zzcmo = new LinkedHashMap();
    this.zzcmr = paramzzaiv;
    this.zzciy = paramzzaiq;
    for (String str : this.zzciy.zzcnh)
      this.zzcmu.add(str.toLowerCase(Locale.ENGLISH)); 
    this.zzcmu.remove("cookie".toLowerCase(Locale.ENGLISH));
    zzbfm zzbfm1 = new zzbfm();
    zzbfm1.zzamf = Integer.valueOf(8);
    zzbfm1.url = paramString;
    zzbfm1.zzech = paramString;
    zzbfm1.zzecj = new zzbfn();
    zzbfm1.zzecj.zzcnd = this.zzciy.zzcnd;
    zzbfv zzbfv = new zzbfv();
    zzbfv.zzedv = paramzzang.zzcw;
    zzbfv.zzedx = Boolean.valueOf(Wrappers.packageManager(this.mContext).isCallerInstantApp());
    long l = GoogleApiAvailabilityLight.getInstance().getApkVersion(this.mContext);
    if (l > 0L)
      zzbfv.zzedw = Long.valueOf(l); 
    zzbfm1.zzect = zzbfv;
    this.zzcmn = zzbfm1;
    this.zzcmt = new zzaiw(this.mContext, this.zzciy.zzcnk, this);
  }
  
  @Nullable
  private final zzbfu zzci(String paramString) {
    synchronized (this.mLock) {
      return (zzbfu)this.zzcmo.get(paramString);
    } 
  }
  
  @VisibleForTesting
  private final zzanz<Void> zzpk() {
    byte b1;
    boolean bool = this.zzcms;
    byte b2 = 0;
    if ((bool && this.zzciy.zzcnj) || (this.zzcmx && this.zzciy.zzcni) || (!this.zzcms && this.zzciy.zzcng)) {
      b1 = 1;
    } else {
      b1 = 0;
    } 
    if (!b1)
      return zzano.zzi(null); 
    synchronized (this.mLock) {
      this.zzcmn.zzeck = new zzbfu[this.zzcmo.size()];
      this.zzcmo.values().toArray(this.zzcmn.zzeck);
      this.zzcmn.zzecu = (String[])this.zzcmp.toArray(new String[0]);
      this.zzcmn.zzecv = (String[])this.zzcmq.toArray(new String[0]);
      if (zzais.isEnabled()) {
        String str1;
        String str2;
        StringBuilder stringBuilder2 = new StringBuilder((str2 = this.zzcmn.zzecl).valueOf(str1).length() + 53 + (str1 = this.zzcmn.url).valueOf(str2).length());
        stringBuilder2.append("Sending SB report\n  url: ");
        stringBuilder2.append(str1);
        stringBuilder2.append("\n  clickUrl: ");
        stringBuilder2.append(str2);
        stringBuilder2.append("\n  resources: \n");
        StringBuilder stringBuilder1 = new StringBuilder(stringBuilder2.toString());
        zzbfu[] arrayOfzzbfu = this.zzcmn.zzeck;
        int i = arrayOfzzbfu.length;
        for (b1 = b2; b1 < i; b1++) {
          zzbfu zzbfu = arrayOfzzbfu[b1];
          stringBuilder1.append("    [");
          stringBuilder1.append(zzbfu.zzedu.length);
          stringBuilder1.append("] ");
          stringBuilder1.append(zzbfu.url);
        } 
        zzais.zzck(stringBuilder1.toString());
      } 
      byte[] arrayOfByte = zzbfi.zzb(this.zzcmn);
      String str = this.zzciy.zzcne;
      null = (new zzalt(this.mContext)).zza(1, str, null, arrayOfByte);
      if (zzais.isEnabled())
        null.zza(new zzain(this), zzaki.zzcrj); 
      return zzano.zza(null, zzaik.zzcmz, zzaoe.zzcvz);
    } 
  }
  
  public final void zza(String paramString, Map<String, String> paramMap, int paramInt) { // Byte code:
    //   0: aload_0
    //   1: getfield mLock : Ljava/lang/Object;
    //   4: astore #5
    //   6: aload #5
    //   8: monitorenter
    //   9: iload_3
    //   10: iconst_3
    //   11: if_icmpne -> 19
    //   14: aload_0
    //   15: iconst_1
    //   16: putfield zzcmx : Z
    //   19: aload_0
    //   20: getfield zzcmo : Ljava/util/LinkedHashMap;
    //   23: aload_1
    //   24: invokevirtual containsKey : (Ljava/lang/Object;)Z
    //   27: ifeq -> 57
    //   30: iload_3
    //   31: iconst_3
    //   32: if_icmpne -> 53
    //   35: aload_0
    //   36: getfield zzcmo : Ljava/util/LinkedHashMap;
    //   39: aload_1
    //   40: invokevirtual get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   43: checkcast com/google/android/gms/internal/ads/zzbfu
    //   46: iload_3
    //   47: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   50: putfield zzedt : Ljava/lang/Integer;
    //   53: aload #5
    //   55: monitorexit
    //   56: return
    //   57: new com/google/android/gms/internal/ads/zzbfu
    //   60: dup
    //   61: invokespecial <init> : ()V
    //   64: astore #6
    //   66: aload #6
    //   68: iload_3
    //   69: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   72: putfield zzedt : Ljava/lang/Integer;
    //   75: aload #6
    //   77: aload_0
    //   78: getfield zzcmo : Ljava/util/LinkedHashMap;
    //   81: invokevirtual size : ()I
    //   84: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   87: putfield zzedn : Ljava/lang/Integer;
    //   90: aload #6
    //   92: aload_1
    //   93: putfield url : Ljava/lang/String;
    //   96: aload #6
    //   98: new com/google/android/gms/internal/ads/zzbfp
    //   101: dup
    //   102: invokespecial <init> : ()V
    //   105: putfield zzedo : Lcom/google/android/gms/internal/ads/zzbfp;
    //   108: aload_0
    //   109: getfield zzcmu : Ljava/util/HashSet;
    //   112: invokevirtual size : ()I
    //   115: ifle -> 324
    //   118: aload_2
    //   119: ifnull -> 324
    //   122: new java/util/ArrayList
    //   125: dup
    //   126: invokespecial <init> : ()V
    //   129: astore #7
    //   131: aload_2
    //   132: invokeinterface entrySet : ()Ljava/util/Set;
    //   137: invokeinterface iterator : ()Ljava/util/Iterator;
    //   142: astore #8
    //   144: aload #8
    //   146: invokeinterface hasNext : ()Z
    //   151: ifeq -> 295
    //   154: aload #8
    //   156: invokeinterface next : ()Ljava/lang/Object;
    //   161: checkcast java/util/Map$Entry
    //   164: astore #4
    //   166: aload #4
    //   168: invokeinterface getKey : ()Ljava/lang/Object;
    //   173: ifnull -> 355
    //   176: aload #4
    //   178: invokeinterface getKey : ()Ljava/lang/Object;
    //   183: checkcast java/lang/String
    //   186: astore_2
    //   187: goto -> 190
    //   190: aload #4
    //   192: invokeinterface getValue : ()Ljava/lang/Object;
    //   197: ifnull -> 362
    //   200: aload #4
    //   202: invokeinterface getValue : ()Ljava/lang/Object;
    //   207: checkcast java/lang/String
    //   210: astore #4
    //   212: goto -> 215
    //   215: aload_2
    //   216: getstatic java/util/Locale.ENGLISH : Ljava/util/Locale;
    //   219: invokevirtual toLowerCase : (Ljava/util/Locale;)Ljava/lang/String;
    //   222: astore #9
    //   224: aload_0
    //   225: getfield zzcmu : Ljava/util/HashSet;
    //   228: aload #9
    //   230: invokevirtual contains : (Ljava/lang/Object;)Z
    //   233: ifne -> 239
    //   236: goto -> 144
    //   239: new com/google/android/gms/internal/ads/zzbfo
    //   242: dup
    //   243: invokespecial <init> : ()V
    //   246: astore #9
    //   248: aload #9
    //   250: aload_2
    //   251: ldc_w 'UTF-8'
    //   254: invokevirtual getBytes : (Ljava/lang/String;)[B
    //   257: putfield zzecx : [B
    //   260: aload #9
    //   262: aload #4
    //   264: ldc_w 'UTF-8'
    //   267: invokevirtual getBytes : (Ljava/lang/String;)[B
    //   270: putfield zzecy : [B
    //   273: aload #7
    //   275: aload #9
    //   277: invokeinterface add : (Ljava/lang/Object;)Z
    //   282: pop
    //   283: goto -> 144
    //   286: ldc_w 'Cannot convert string to bytes, skip header.'
    //   289: invokestatic zzck : (Ljava/lang/String;)V
    //   292: goto -> 144
    //   295: aload #7
    //   297: invokeinterface size : ()I
    //   302: anewarray com/google/android/gms/internal/ads/zzbfo
    //   305: astore_2
    //   306: aload #7
    //   308: aload_2
    //   309: invokeinterface toArray : ([Ljava/lang/Object;)[Ljava/lang/Object;
    //   314: pop
    //   315: aload #6
    //   317: getfield zzedo : Lcom/google/android/gms/internal/ads/zzbfp;
    //   320: aload_2
    //   321: putfield zzeda : [Lcom/google/android/gms/internal/ads/zzbfo;
    //   324: aload_0
    //   325: getfield zzcmo : Ljava/util/LinkedHashMap;
    //   328: aload_1
    //   329: aload #6
    //   331: invokevirtual put : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   334: pop
    //   335: aload #5
    //   337: monitorexit
    //   338: return
    //   339: astore_1
    //   340: aload #5
    //   342: monitorexit
    //   343: goto -> 348
    //   346: aload_1
    //   347: athrow
    //   348: goto -> 346
    //   351: astore_2
    //   352: goto -> 286
    //   355: ldc_w ''
    //   358: astore_2
    //   359: goto -> 190
    //   362: ldc_w ''
    //   365: astore #4
    //   367: goto -> 215
    // Exception table:
    //   from	to	target	type
    //   14	19	339	finally
    //   19	30	339	finally
    //   35	53	339	finally
    //   53	56	339	finally
    //   57	118	339	finally
    //   122	144	339	finally
    //   144	166	339	finally
    //   166	187	351	java/io/UnsupportedEncodingException
    //   166	187	339	finally
    //   190	212	351	java/io/UnsupportedEncodingException
    //   190	212	339	finally
    //   215	236	351	java/io/UnsupportedEncodingException
    //   215	236	339	finally
    //   239	283	351	java/io/UnsupportedEncodingException
    //   239	283	339	finally
    //   286	292	339	finally
    //   295	324	339	finally
    //   324	338	339	finally
    //   340	343	339	finally }
  
  public final String[] zzb(String[] paramArrayOfString) { return (String[])this.zzcmt.zzc(paramArrayOfString).toArray(new String[0]); }
  
  public final void zzcf(String paramString) {
    synchronized (this.mLock) {
      this.zzcmn.zzecl = paramString;
      return;
    } 
  }
  
  final void zzcg(String paramString) {
    synchronized (this.mLock) {
      this.zzcmp.add(paramString);
      return;
    } 
  }
  
  final void zzch(String paramString) {
    synchronized (this.mLock) {
      this.zzcmq.add(paramString);
      return;
    } 
  }
  
  public final zzaiq zzpg() { return this.zzciy; }
  
  public final boolean zzph() { return (PlatformVersion.isAtLeastKitKat() && this.zzciy.zzcnf && !this.zzcmw); }
  
  public final void zzpi() { this.zzcmv = true; }
  
  public final void zzpj() {
    synchronized (this.mLock) {
      zzanz zzanz1 = zzano.zza(this.zzcmr.zza(this.mContext, this.zzcmo.keySet()), new zzaij(this), zzaoe.zzcvz);
      zzanz zzanz2 = zzano.zza(zzanz1, 10L, TimeUnit.SECONDS, zzcmm);
      zzano.zza(zzanz1, new zzaim(this, zzanz2), zzaoe.zzcvz);
      zzcml.add(zzanz2);
      return;
    } 
  }
  
  public final void zzr(View paramView) {
    if (!this.zzciy.zzcnf)
      return; 
    if (this.zzcmw)
      return; 
    Bitmap bitmap = zzbv.zzek().zzt(paramView);
    if (bitmap == null) {
      zzais.zzck("Failed to capture the webview bitmap.");
      return;
    } 
    this.zzcmw = true;
    zzakk.zzd(new zzail(this, bitmap));
  }
}
