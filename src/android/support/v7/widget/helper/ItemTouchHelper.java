package android.support.v7.widget.helper;

import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.os.Build;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.view.GestureDetectorCompat;
import android.support.v4.view.ViewCompat;
import android.support.v7.recyclerview.R;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewParent;
import java.util.ArrayList;
import java.util.List;

public class ItemTouchHelper extends RecyclerView.ItemDecoration implements RecyclerView.OnChildAttachStateChangeListener {
  static final int ACTION_MODE_DRAG_MASK = 16711680;
  
  private static final int ACTION_MODE_IDLE_MASK = 255;
  
  static final int ACTION_MODE_SWIPE_MASK = 65280;
  
  public static final int ACTION_STATE_DRAG = 2;
  
  public static final int ACTION_STATE_IDLE = 0;
  
  public static final int ACTION_STATE_SWIPE = 1;
  
  private static final int ACTIVE_POINTER_ID_NONE = -1;
  
  public static final int ANIMATION_TYPE_DRAG = 8;
  
  public static final int ANIMATION_TYPE_SWIPE_CANCEL = 4;
  
  public static final int ANIMATION_TYPE_SWIPE_SUCCESS = 2;
  
  private static final boolean DEBUG = false;
  
  static final int DIRECTION_FLAG_COUNT = 8;
  
  public static final int DOWN = 2;
  
  public static final int END = 32;
  
  public static final int LEFT = 4;
  
  private static final int PIXELS_PER_SECOND = 1000;
  
  public static final int RIGHT = 8;
  
  public static final int START = 16;
  
  private static final String TAG = "ItemTouchHelper";
  
  public static final int UP = 1;
  
  private int mActionState = 0;
  
  int mActivePointerId = -1;
  
  @NonNull
  Callback mCallback;
  
  private RecyclerView.ChildDrawingOrderCallback mChildDrawingOrderCallback = null;
  
  private List<Integer> mDistances;
  
  private long mDragScrollStartTimeInMs;
  
  float mDx;
  
  float mDy;
  
  GestureDetectorCompat mGestureDetector;
  
  float mInitialTouchX;
  
  float mInitialTouchY;
  
  private ItemTouchHelperGestureListener mItemTouchHelperGestureListener;
  
  private float mMaxSwipeVelocity;
  
  private final RecyclerView.OnItemTouchListener mOnItemTouchListener = new Object(this);
  
  View mOverdrawChild = null;
  
  int mOverdrawChildPosition = -1;
  
  final List<View> mPendingCleanup = new ArrayList();
  
  List<RecoverAnimation> mRecoverAnimations = new ArrayList();
  
  RecyclerView mRecyclerView;
  
  final Runnable mScrollRunnable = new Object(this);
  
  RecyclerView.ViewHolder mSelected = null;
  
  int mSelectedFlags;
  
  private float mSelectedStartX;
  
  private float mSelectedStartY;
  
  private int mSlop;
  
  private List<RecyclerView.ViewHolder> mSwapTargets;
  
  private float mSwipeEscapeVelocity;
  
  private final float[] mTmpPosition = new float[2];
  
  private Rect mTmpRect;
  
  VelocityTracker mVelocityTracker;
  
  public ItemTouchHelper(@NonNull Callback paramCallback) { this.mCallback = paramCallback; }
  
  private void addChildDrawingOrderCallback() {
    if (Build.VERSION.SDK_INT >= 21)
      return; 
    if (this.mChildDrawingOrderCallback == null)
      this.mChildDrawingOrderCallback = new Object(this); 
    this.mRecyclerView.setChildDrawingOrderCallback(this.mChildDrawingOrderCallback);
  }
  
  private int checkHorizontalSwipe(RecyclerView.ViewHolder paramViewHolder, int paramInt) {
    if ((paramInt & 0xC) != 0) {
      int i;
      float f1 = this.mDx;
      int j = 8;
      if (f1 > 0.0F) {
        i = 8;
      } else {
        i = 4;
      } 
      VelocityTracker velocityTracker = this.mVelocityTracker;
      if (velocityTracker != null && this.mActivePointerId > -1) {
        velocityTracker.computeCurrentVelocity(1000, this.mCallback.getSwipeVelocityThreshold(this.mMaxSwipeVelocity));
        float f = this.mVelocityTracker.getXVelocity(this.mActivePointerId);
        f1 = this.mVelocityTracker.getYVelocity(this.mActivePointerId);
        if (f <= 0.0F)
          j = 4; 
        f = Math.abs(f);
        if ((j & paramInt) != 0 && i == j && f >= this.mCallback.getSwipeEscapeVelocity(this.mSwipeEscapeVelocity) && f > Math.abs(f1))
          return j; 
      } 
      f1 = this.mRecyclerView.getWidth();
      float f2 = this.mCallback.getSwipeThreshold(paramViewHolder);
      if ((paramInt & i) != 0 && Math.abs(this.mDx) > f1 * f2)
        return i; 
    } 
    return 0;
  }
  
  private int checkVerticalSwipe(RecyclerView.ViewHolder paramViewHolder, int paramInt) {
    if ((paramInt & 0x3) != 0) {
      int i;
      float f1 = this.mDy;
      int j = 2;
      if (f1 > 0.0F) {
        i = 2;
      } else {
        i = 1;
      } 
      VelocityTracker velocityTracker = this.mVelocityTracker;
      if (velocityTracker != null && this.mActivePointerId > -1) {
        velocityTracker.computeCurrentVelocity(1000, this.mCallback.getSwipeVelocityThreshold(this.mMaxSwipeVelocity));
        f1 = this.mVelocityTracker.getXVelocity(this.mActivePointerId);
        float f = this.mVelocityTracker.getYVelocity(this.mActivePointerId);
        if (f <= 0.0F)
          j = 1; 
        f = Math.abs(f);
        if ((j & paramInt) != 0 && j == i && f >= this.mCallback.getSwipeEscapeVelocity(this.mSwipeEscapeVelocity) && f > Math.abs(f1))
          return j; 
      } 
      f1 = this.mRecyclerView.getHeight();
      float f2 = this.mCallback.getSwipeThreshold(paramViewHolder);
      if ((paramInt & i) != 0 && Math.abs(this.mDy) > f1 * f2)
        return i; 
    } 
    return 0;
  }
  
  private void destroyCallbacks() {
    this.mRecyclerView.removeItemDecoration(this);
    this.mRecyclerView.removeOnItemTouchListener(this.mOnItemTouchListener);
    this.mRecyclerView.removeOnChildAttachStateChangeListener(this);
    for (int i = this.mRecoverAnimations.size() - 1; i >= 0; i--) {
      RecoverAnimation recoverAnimation = (RecoverAnimation)this.mRecoverAnimations.get(0);
      this.mCallback.clearView(this.mRecyclerView, recoverAnimation.mViewHolder);
    } 
    this.mRecoverAnimations.clear();
    this.mOverdrawChild = null;
    this.mOverdrawChildPosition = -1;
    releaseVelocityTracker();
    stopGestureDetection();
  }
  
  private List<RecyclerView.ViewHolder> findSwapTargets(RecyclerView.ViewHolder paramViewHolder) {
    RecyclerView.ViewHolder viewHolder = paramViewHolder;
    List list = this.mSwapTargets;
    if (list == null) {
      this.mSwapTargets = new ArrayList();
      this.mDistances = new ArrayList();
    } else {
      list.clear();
      this.mDistances.clear();
    } 
    int j = this.mCallback.getBoundingBoxMargin();
    int k = Math.round(this.mSelectedStartX + this.mDx) - j;
    int m = Math.round(this.mSelectedStartY + this.mDy) - j;
    int i = viewHolder.itemView.getWidth();
    j *= 2;
    int n = i + k + j;
    int i1 = viewHolder.itemView.getHeight() + m + j;
    int i2 = (k + n) / 2;
    int i3 = (m + i1) / 2;
    RecyclerView.LayoutManager layoutManager = this.mRecyclerView.getLayoutManager();
    int i4 = layoutManager.getChildCount();
    for (i = 0; i < i4; i++) {
      View view = layoutManager.getChildAt(i);
      if (view != paramViewHolder.itemView && view.getBottom() >= m && view.getTop() <= i1 && view.getRight() >= k && view.getLeft() <= n) {
        RecyclerView.ViewHolder viewHolder1 = this.mRecyclerView.getChildViewHolder(view);
        if (this.mCallback.canDropOver(this.mRecyclerView, this.mSelected, viewHolder1)) {
          j = Math.abs(i2 - (view.getLeft() + view.getRight()) / 2);
          int i5 = Math.abs(i3 - (view.getTop() + view.getBottom()) / 2);
          int i6 = j * j + i5 * i5;
          int i7 = this.mSwapTargets.size();
          j = 0;
          i5 = 0;
          while (j < i7 && i6 > ((Integer)this.mDistances.get(j)).intValue()) {
            i5++;
            j++;
          } 
          this.mSwapTargets.add(i5, viewHolder1);
          this.mDistances.add(i5, Integer.valueOf(i6));
        } 
      } 
    } 
    return this.mSwapTargets;
  }
  
  private RecyclerView.ViewHolder findSwipedView(MotionEvent paramMotionEvent) {
    RecyclerView.LayoutManager layoutManager = this.mRecyclerView.getLayoutManager();
    int i = this.mActivePointerId;
    if (i == -1)
      return null; 
    i = paramMotionEvent.findPointerIndex(i);
    float f3 = paramMotionEvent.getX(i);
    float f4 = this.mInitialTouchX;
    float f1 = paramMotionEvent.getY(i);
    float f2 = this.mInitialTouchY;
    f3 = Math.abs(f3 - f4);
    f1 = Math.abs(f1 - f2);
    i = this.mSlop;
    if (f3 < i && f1 < i)
      return null; 
    if (f3 > f1 && layoutManager.canScrollHorizontally())
      return null; 
    if (f1 > f3 && layoutManager.canScrollVertically())
      return null; 
    View view = findChildView(paramMotionEvent);
    return (view == null) ? null : this.mRecyclerView.getChildViewHolder(view);
  }
  
  private void getSelectedDxDy(float[] paramArrayOfFloat) {
    if ((this.mSelectedFlags & 0xC) != 0) {
      paramArrayOfFloat[0] = this.mSelectedStartX + this.mDx - this.mSelected.itemView.getLeft();
    } else {
      paramArrayOfFloat[0] = this.mSelected.itemView.getTranslationX();
    } 
    if ((this.mSelectedFlags & 0x3) != 0) {
      paramArrayOfFloat[1] = this.mSelectedStartY + this.mDy - this.mSelected.itemView.getTop();
      return;
    } 
    paramArrayOfFloat[1] = this.mSelected.itemView.getTranslationY();
  }
  
  private static boolean hitTest(View paramView, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4) { return (paramFloat1 >= paramFloat3 && paramFloat1 <= paramFloat3 + paramView.getWidth() && paramFloat2 >= paramFloat4 && paramFloat2 <= paramFloat4 + paramView.getHeight()); }
  
  private void releaseVelocityTracker() {
    VelocityTracker velocityTracker = this.mVelocityTracker;
    if (velocityTracker != null) {
      velocityTracker.recycle();
      this.mVelocityTracker = null;
    } 
  }
  
  private void setupCallbacks() {
    this.mSlop = ViewConfiguration.get(this.mRecyclerView.getContext()).getScaledTouchSlop();
    this.mRecyclerView.addItemDecoration(this);
    this.mRecyclerView.addOnItemTouchListener(this.mOnItemTouchListener);
    this.mRecyclerView.addOnChildAttachStateChangeListener(this);
    startGestureDetection();
  }
  
  private void startGestureDetection() {
    this.mItemTouchHelperGestureListener = new ItemTouchHelperGestureListener(this);
    this.mGestureDetector = new GestureDetectorCompat(this.mRecyclerView.getContext(), this.mItemTouchHelperGestureListener);
  }
  
  private void stopGestureDetection() {
    ItemTouchHelperGestureListener itemTouchHelperGestureListener = this.mItemTouchHelperGestureListener;
    if (itemTouchHelperGestureListener != null) {
      itemTouchHelperGestureListener.doNotReactToLongPress();
      this.mItemTouchHelperGestureListener = null;
    } 
    if (this.mGestureDetector != null)
      this.mGestureDetector = null; 
  }
  
  private int swipeIfNecessary(RecyclerView.ViewHolder paramViewHolder) {
    if (this.mActionState == 2)
      return 0; 
    int j = this.mCallback.getMovementFlags(this.mRecyclerView, paramViewHolder);
    int i = (this.mCallback.convertToAbsoluteDirection(j, ViewCompat.getLayoutDirection(this.mRecyclerView)) & 0xFF00) >> 8;
    if (i == 0)
      return 0; 
    int k = (j & 0xFF00) >> 8;
    if (Math.abs(this.mDx) > Math.abs(this.mDy)) {
      j = checkHorizontalSwipe(paramViewHolder, i);
      if (j > 0)
        return ((k & j) == 0) ? Callback.convertToRelativeDirection(j, ViewCompat.getLayoutDirection(this.mRecyclerView)) : j; 
      i = checkVerticalSwipe(paramViewHolder, i);
      if (i > 0)
        return i; 
    } else {
      j = checkVerticalSwipe(paramViewHolder, i);
      if (j > 0)
        return j; 
      j = checkHorizontalSwipe(paramViewHolder, i);
      if (j > 0) {
        i = j;
        if ((k & j) == 0)
          i = Callback.convertToRelativeDirection(j, ViewCompat.getLayoutDirection(this.mRecyclerView)); 
        return i;
      } 
    } 
    return 0;
  }
  
  public void attachToRecyclerView(@Nullable RecyclerView paramRecyclerView) {
    RecyclerView recyclerView = this.mRecyclerView;
    if (recyclerView == paramRecyclerView)
      return; 
    if (recyclerView != null)
      destroyCallbacks(); 
    this.mRecyclerView = paramRecyclerView;
    if (paramRecyclerView != null) {
      Resources resources = paramRecyclerView.getResources();
      this.mSwipeEscapeVelocity = resources.getDimension(R.dimen.item_touch_helper_swipe_escape_velocity);
      this.mMaxSwipeVelocity = resources.getDimension(R.dimen.item_touch_helper_swipe_escape_max_velocity);
      setupCallbacks();
    } 
  }
  
  void checkSelectForSwipe(int paramInt1, MotionEvent paramMotionEvent, int paramInt2) {
    if (this.mSelected == null && paramInt1 == 2 && this.mActionState != 2) {
      if (!this.mCallback.isItemViewSwipeEnabled())
        return; 
      if (this.mRecyclerView.getScrollState() == 1)
        return; 
      RecyclerView.ViewHolder viewHolder = findSwipedView(paramMotionEvent);
      if (viewHolder == null)
        return; 
      paramInt1 = (this.mCallback.getAbsoluteMovementFlags(this.mRecyclerView, viewHolder) & 0xFF00) >> 8;
      if (paramInt1 == 0)
        return; 
      float f1 = paramMotionEvent.getX(paramInt2);
      float f2 = paramMotionEvent.getY(paramInt2);
      f1 -= this.mInitialTouchX;
      f2 -= this.mInitialTouchY;
      float f3 = Math.abs(f1);
      float f4 = Math.abs(f2);
      paramInt2 = this.mSlop;
      if (f3 < paramInt2 && f4 < paramInt2)
        return; 
      if (f3 > f4) {
        if (f1 < 0.0F && (paramInt1 & 0x4) == 0)
          return; 
        if (f1 > 0.0F && (paramInt1 & 0x8) == 0)
          return; 
      } else {
        if (f2 < 0.0F && (paramInt1 & true) == 0)
          return; 
        if (f2 > 0.0F && (paramInt1 & 0x2) == 0)
          return; 
      } 
      this.mDy = 0.0F;
      this.mDx = 0.0F;
      this.mActivePointerId = paramMotionEvent.getPointerId(0);
      select(viewHolder, 1);
    } 
  }
  
  void endRecoverAnimation(RecyclerView.ViewHolder paramViewHolder, boolean paramBoolean) {
    for (int i = this.mRecoverAnimations.size() - 1; i >= 0; i--) {
      RecoverAnimation recoverAnimation = (RecoverAnimation)this.mRecoverAnimations.get(i);
      if (recoverAnimation.mViewHolder == paramViewHolder) {
        recoverAnimation.mOverridden |= paramBoolean;
        if (!recoverAnimation.mEnded)
          recoverAnimation.cancel(); 
        this.mRecoverAnimations.remove(i);
        return;
      } 
    } 
  }
  
  RecoverAnimation findAnimation(MotionEvent paramMotionEvent) {
    if (this.mRecoverAnimations.isEmpty())
      return null; 
    View view = findChildView(paramMotionEvent);
    for (int i = this.mRecoverAnimations.size() - 1; i >= 0; i--) {
      RecoverAnimation recoverAnimation = (RecoverAnimation)this.mRecoverAnimations.get(i);
      if (recoverAnimation.mViewHolder.itemView == view)
        return recoverAnimation; 
    } 
    return null;
  }
  
  View findChildView(MotionEvent paramMotionEvent) {
    float f1 = paramMotionEvent.getX();
    float f2 = paramMotionEvent.getY();
    RecyclerView.ViewHolder viewHolder = this.mSelected;
    if (viewHolder != null) {
      View view = viewHolder.itemView;
      if (hitTest(view, f1, f2, this.mSelectedStartX + this.mDx, this.mSelectedStartY + this.mDy))
        return view; 
    } 
    int i;
    for (i = this.mRecoverAnimations.size() - 1; i >= 0; i--) {
      RecoverAnimation recoverAnimation = (RecoverAnimation)this.mRecoverAnimations.get(i);
      View view = recoverAnimation.mViewHolder.itemView;
      if (hitTest(view, f1, f2, recoverAnimation.mX, recoverAnimation.mY))
        return view; 
    } 
    return this.mRecyclerView.findChildViewUnder(f1, f2);
  }
  
  public void getItemOffsets(Rect paramRect, View paramView, RecyclerView paramRecyclerView, RecyclerView.State paramState) { paramRect.setEmpty(); }
  
  boolean hasRunningRecoverAnim() {
    int i = this.mRecoverAnimations.size();
    for (byte b = 0; b < i; b++) {
      if (!((RecoverAnimation)this.mRecoverAnimations.get(b)).mEnded)
        return true; 
    } 
    return false;
  }
  
  void moveIfNecessary(RecyclerView.ViewHolder paramViewHolder) {
    if (this.mRecyclerView.isLayoutRequested())
      return; 
    if (this.mActionState != 2)
      return; 
    float f = this.mCallback.getMoveThreshold(paramViewHolder);
    int i = (int)(this.mSelectedStartX + this.mDx);
    int j = (int)(this.mSelectedStartY + this.mDy);
    if (Math.abs(j - paramViewHolder.itemView.getTop()) < paramViewHolder.itemView.getHeight() * f && Math.abs(i - paramViewHolder.itemView.getLeft()) < paramViewHolder.itemView.getWidth() * f)
      return; 
    List list = findSwapTargets(paramViewHolder);
    if (list.size() == 0)
      return; 
    RecyclerView.ViewHolder viewHolder = this.mCallback.chooseDropTarget(paramViewHolder, list, i, j);
    if (viewHolder == null) {
      this.mSwapTargets.clear();
      this.mDistances.clear();
      return;
    } 
    int k = viewHolder.getAdapterPosition();
    int m = paramViewHolder.getAdapterPosition();
    if (this.mCallback.onMove(this.mRecyclerView, paramViewHolder, viewHolder))
      this.mCallback.onMoved(this.mRecyclerView, paramViewHolder, m, viewHolder, k, i, j); 
  }
  
  void obtainVelocityTracker() {
    VelocityTracker velocityTracker = this.mVelocityTracker;
    if (velocityTracker != null)
      velocityTracker.recycle(); 
    this.mVelocityTracker = VelocityTracker.obtain();
  }
  
  public void onChildViewAttachedToWindow(@NonNull View paramView) {}
  
  public void onChildViewDetachedFromWindow(@NonNull View paramView) {
    removeChildDrawingOrderCallbackIfNecessary(paramView);
    RecyclerView.ViewHolder viewHolder1 = this.mRecyclerView.getChildViewHolder(paramView);
    if (viewHolder1 == null)
      return; 
    RecyclerView.ViewHolder viewHolder2 = this.mSelected;
    if (viewHolder2 != null && viewHolder1 == viewHolder2) {
      select(null, 0);
      return;
    } 
    endRecoverAnimation(viewHolder1, false);
    if (this.mPendingCleanup.remove(viewHolder1.itemView))
      this.mCallback.clearView(this.mRecyclerView, viewHolder1); 
  }
  
  public void onDraw(Canvas paramCanvas, RecyclerView paramRecyclerView, RecyclerView.State paramState) {
    float f2;
    float f1;
    this.mOverdrawChildPosition = -1;
    if (this.mSelected != null) {
      getSelectedDxDy(this.mTmpPosition);
      float[] arrayOfFloat = this.mTmpPosition;
      f1 = arrayOfFloat[0];
      f2 = arrayOfFloat[1];
    } else {
      f1 = 0.0F;
      f2 = 0.0F;
    } 
    this.mCallback.onDraw(paramCanvas, paramRecyclerView, this.mSelected, this.mRecoverAnimations, this.mActionState, f1, f2);
  }
  
  public void onDrawOver(Canvas paramCanvas, RecyclerView paramRecyclerView, RecyclerView.State paramState) {
    float f2;
    float f1;
    if (this.mSelected != null) {
      getSelectedDxDy(this.mTmpPosition);
      float[] arrayOfFloat = this.mTmpPosition;
      f1 = arrayOfFloat[0];
      f2 = arrayOfFloat[1];
    } else {
      f1 = 0.0F;
      f2 = 0.0F;
    } 
    this.mCallback.onDrawOver(paramCanvas, paramRecyclerView, this.mSelected, this.mRecoverAnimations, this.mActionState, f1, f2);
  }
  
  void postDispatchSwipe(RecoverAnimation paramRecoverAnimation, int paramInt) { this.mRecyclerView.post(new Object(this, paramRecoverAnimation, paramInt)); }
  
  void removeChildDrawingOrderCallbackIfNecessary(View paramView) {
    if (paramView == this.mOverdrawChild) {
      this.mOverdrawChild = null;
      if (this.mChildDrawingOrderCallback != null)
        this.mRecyclerView.setChildDrawingOrderCallback(null); 
    } 
  }
  
  boolean scrollIfNecessary() { // Byte code:
    //   0: aload_0
    //   1: getfield mSelected : Landroid/support/v7/widget/RecyclerView$ViewHolder;
    //   4: ifnonnull -> 16
    //   7: aload_0
    //   8: ldc2_w -9223372036854775808
    //   11: putfield mDragScrollStartTimeInMs : J
    //   14: iconst_0
    //   15: ireturn
    //   16: invokestatic currentTimeMillis : ()J
    //   19: lstore #6
    //   21: aload_0
    //   22: getfield mDragScrollStartTimeInMs : J
    //   25: lstore #4
    //   27: lload #4
    //   29: ldc2_w -9223372036854775808
    //   32: lcmp
    //   33: ifne -> 42
    //   36: lconst_0
    //   37: lstore #4
    //   39: goto -> 49
    //   42: lload #6
    //   44: lload #4
    //   46: lsub
    //   47: lstore #4
    //   49: aload_0
    //   50: getfield mRecyclerView : Landroid/support/v7/widget/RecyclerView;
    //   53: invokevirtual getLayoutManager : ()Landroid/support/v7/widget/RecyclerView$LayoutManager;
    //   56: astore #8
    //   58: aload_0
    //   59: getfield mTmpRect : Landroid/graphics/Rect;
    //   62: ifnonnull -> 76
    //   65: aload_0
    //   66: new android/graphics/Rect
    //   69: dup
    //   70: invokespecial <init> : ()V
    //   73: putfield mTmpRect : Landroid/graphics/Rect;
    //   76: aload #8
    //   78: aload_0
    //   79: getfield mSelected : Landroid/support/v7/widget/RecyclerView$ViewHolder;
    //   82: getfield itemView : Landroid/view/View;
    //   85: aload_0
    //   86: getfield mTmpRect : Landroid/graphics/Rect;
    //   89: invokevirtual calculateItemDecorationsForChild : (Landroid/view/View;Landroid/graphics/Rect;)V
    //   92: aload #8
    //   94: invokevirtual canScrollHorizontally : ()Z
    //   97: ifeq -> 198
    //   100: aload_0
    //   101: getfield mSelectedStartX : F
    //   104: aload_0
    //   105: getfield mDx : F
    //   108: fadd
    //   109: f2i
    //   110: istore_2
    //   111: iload_2
    //   112: aload_0
    //   113: getfield mTmpRect : Landroid/graphics/Rect;
    //   116: getfield left : I
    //   119: isub
    //   120: aload_0
    //   121: getfield mRecyclerView : Landroid/support/v7/widget/RecyclerView;
    //   124: invokevirtual getPaddingLeft : ()I
    //   127: isub
    //   128: istore_1
    //   129: aload_0
    //   130: getfield mDx : F
    //   133: fconst_0
    //   134: fcmpg
    //   135: ifge -> 145
    //   138: iload_1
    //   139: ifge -> 145
    //   142: goto -> 200
    //   145: aload_0
    //   146: getfield mDx : F
    //   149: fconst_0
    //   150: fcmpl
    //   151: ifle -> 198
    //   154: iload_2
    //   155: aload_0
    //   156: getfield mSelected : Landroid/support/v7/widget/RecyclerView$ViewHolder;
    //   159: getfield itemView : Landroid/view/View;
    //   162: invokevirtual getWidth : ()I
    //   165: iadd
    //   166: aload_0
    //   167: getfield mTmpRect : Landroid/graphics/Rect;
    //   170: getfield right : I
    //   173: iadd
    //   174: aload_0
    //   175: getfield mRecyclerView : Landroid/support/v7/widget/RecyclerView;
    //   178: invokevirtual getWidth : ()I
    //   181: aload_0
    //   182: getfield mRecyclerView : Landroid/support/v7/widget/RecyclerView;
    //   185: invokevirtual getPaddingRight : ()I
    //   188: isub
    //   189: isub
    //   190: istore_1
    //   191: iload_1
    //   192: ifle -> 198
    //   195: goto -> 200
    //   198: iconst_0
    //   199: istore_1
    //   200: aload #8
    //   202: invokevirtual canScrollVertically : ()Z
    //   205: ifeq -> 306
    //   208: aload_0
    //   209: getfield mSelectedStartY : F
    //   212: aload_0
    //   213: getfield mDy : F
    //   216: fadd
    //   217: f2i
    //   218: istore_3
    //   219: iload_3
    //   220: aload_0
    //   221: getfield mTmpRect : Landroid/graphics/Rect;
    //   224: getfield top : I
    //   227: isub
    //   228: aload_0
    //   229: getfield mRecyclerView : Landroid/support/v7/widget/RecyclerView;
    //   232: invokevirtual getPaddingTop : ()I
    //   235: isub
    //   236: istore_2
    //   237: aload_0
    //   238: getfield mDy : F
    //   241: fconst_0
    //   242: fcmpg
    //   243: ifge -> 253
    //   246: iload_2
    //   247: ifge -> 253
    //   250: goto -> 308
    //   253: aload_0
    //   254: getfield mDy : F
    //   257: fconst_0
    //   258: fcmpl
    //   259: ifle -> 306
    //   262: iload_3
    //   263: aload_0
    //   264: getfield mSelected : Landroid/support/v7/widget/RecyclerView$ViewHolder;
    //   267: getfield itemView : Landroid/view/View;
    //   270: invokevirtual getHeight : ()I
    //   273: iadd
    //   274: aload_0
    //   275: getfield mTmpRect : Landroid/graphics/Rect;
    //   278: getfield bottom : I
    //   281: iadd
    //   282: aload_0
    //   283: getfield mRecyclerView : Landroid/support/v7/widget/RecyclerView;
    //   286: invokevirtual getHeight : ()I
    //   289: aload_0
    //   290: getfield mRecyclerView : Landroid/support/v7/widget/RecyclerView;
    //   293: invokevirtual getPaddingBottom : ()I
    //   296: isub
    //   297: isub
    //   298: istore_2
    //   299: iload_2
    //   300: ifle -> 306
    //   303: goto -> 308
    //   306: iconst_0
    //   307: istore_2
    //   308: iload_1
    //   309: istore_3
    //   310: iload_1
    //   311: ifeq -> 346
    //   314: aload_0
    //   315: getfield mCallback : Landroid/support/v7/widget/helper/ItemTouchHelper$Callback;
    //   318: aload_0
    //   319: getfield mRecyclerView : Landroid/support/v7/widget/RecyclerView;
    //   322: aload_0
    //   323: getfield mSelected : Landroid/support/v7/widget/RecyclerView$ViewHolder;
    //   326: getfield itemView : Landroid/view/View;
    //   329: invokevirtual getWidth : ()I
    //   332: iload_1
    //   333: aload_0
    //   334: getfield mRecyclerView : Landroid/support/v7/widget/RecyclerView;
    //   337: invokevirtual getWidth : ()I
    //   340: lload #4
    //   342: invokevirtual interpolateOutOfBoundsScroll : (Landroid/support/v7/widget/RecyclerView;IIIJ)I
    //   345: istore_3
    //   346: iload_2
    //   347: ifeq -> 385
    //   350: aload_0
    //   351: getfield mCallback : Landroid/support/v7/widget/helper/ItemTouchHelper$Callback;
    //   354: aload_0
    //   355: getfield mRecyclerView : Landroid/support/v7/widget/RecyclerView;
    //   358: aload_0
    //   359: getfield mSelected : Landroid/support/v7/widget/RecyclerView$ViewHolder;
    //   362: getfield itemView : Landroid/view/View;
    //   365: invokevirtual getHeight : ()I
    //   368: iload_2
    //   369: aload_0
    //   370: getfield mRecyclerView : Landroid/support/v7/widget/RecyclerView;
    //   373: invokevirtual getHeight : ()I
    //   376: lload #4
    //   378: invokevirtual interpolateOutOfBoundsScroll : (Landroid/support/v7/widget/RecyclerView;IIIJ)I
    //   381: istore_2
    //   382: goto -> 385
    //   385: iload_3
    //   386: ifne -> 405
    //   389: iload_2
    //   390: ifeq -> 396
    //   393: goto -> 405
    //   396: aload_0
    //   397: ldc2_w -9223372036854775808
    //   400: putfield mDragScrollStartTimeInMs : J
    //   403: iconst_0
    //   404: ireturn
    //   405: aload_0
    //   406: getfield mDragScrollStartTimeInMs : J
    //   409: ldc2_w -9223372036854775808
    //   412: lcmp
    //   413: ifne -> 422
    //   416: aload_0
    //   417: lload #6
    //   419: putfield mDragScrollStartTimeInMs : J
    //   422: aload_0
    //   423: getfield mRecyclerView : Landroid/support/v7/widget/RecyclerView;
    //   426: iload_3
    //   427: iload_2
    //   428: invokevirtual scrollBy : (II)V
    //   431: iconst_1
    //   432: ireturn }
  
  void select(@Nullable RecyclerView.ViewHolder paramViewHolder, int paramInt) {
    boolean bool;
    if (paramViewHolder == this.mSelected && paramInt == this.mActionState)
      return; 
    this.mDragScrollStartTimeInMs = Float.MIN_VALUE;
    int i = this.mActionState;
    endRecoverAnimation(paramViewHolder, true);
    this.mActionState = paramInt;
    if (paramInt == 2)
      if (paramViewHolder != null) {
        this.mOverdrawChild = paramViewHolder.itemView;
        addChildDrawingOrderCallback();
      } else {
        throw new IllegalArgumentException("Must pass a ViewHolder when dragging");
      }  
    RecyclerView.ViewHolder viewHolder = this.mSelected;
    if (viewHolder != null) {
      Object object;
      if (viewHolder.itemView.getParent() != null) {
        int j;
        float f2;
        float f1;
        if (i == 2) {
          j = 0;
        } else {
          j = swipeIfNecessary(viewHolder);
        } 
        releaseVelocityTracker();
        if (j != 1 && j != 2) {
          if (j != 4 && j != 8 && j != 16 && j != 32) {
            f1 = 0.0F;
          } else {
            f1 = Math.signum(this.mDx) * this.mRecyclerView.getWidth();
          } 
          f2 = 0.0F;
        } else {
          f2 = Math.signum(this.mDy) * this.mRecyclerView.getHeight();
          f1 = 0.0F;
        } 
        if (i == 2) {
          bool = true;
        } else if (j > 0) {
          bool = true;
        } else {
          bool = true;
        } 
        getSelectedDxDy(this.mTmpPosition);
        float[] arrayOfFloat = this.mTmpPosition;
        float f3 = arrayOfFloat[0];
        float f4 = arrayOfFloat[1];
        object = new Object(this, viewHolder, bool, i, f3, f4, f1, f2, j, viewHolder);
        object.setDuration(this.mCallback.getAnimationDuration(this.mRecyclerView, bool, f1 - f3, f2 - f4));
        this.mRecoverAnimations.add(object);
        object.start();
        bool = true;
      } else {
        removeChildDrawingOrderCallbackIfNecessary(object.itemView);
        this.mCallback.clearView(this.mRecyclerView, object);
        bool = false;
      } 
      this.mSelected = null;
    } else {
      bool = false;
    } 
    if (paramViewHolder != null) {
      this.mSelectedFlags = (this.mCallback.getAbsoluteMovementFlags(this.mRecyclerView, paramViewHolder) & (1 << paramInt * 8 + 8) - 1) >> this.mActionState * 8;
      this.mSelectedStartX = paramViewHolder.itemView.getLeft();
      this.mSelectedStartY = paramViewHolder.itemView.getTop();
      this.mSelected = paramViewHolder;
      if (paramInt == 2)
        this.mSelected.itemView.performHapticFeedback(0); 
    } 
    boolean bool1 = false;
    ViewParent viewParent = this.mRecyclerView.getParent();
    if (viewParent != null) {
      if (this.mSelected != null)
        bool1 = true; 
      viewParent.requestDisallowInterceptTouchEvent(bool1);
    } 
    if (!bool)
      this.mRecyclerView.getLayoutManager().requestSimpleAnimationsInNextLayout(); 
    this.mCallback.onSelectedChanged(this.mSelected, this.mActionState);
    this.mRecyclerView.invalidate();
  }
  
  public void startDrag(@NonNull RecyclerView.ViewHolder paramViewHolder) {
    if (!this.mCallback.hasDragFlag(this.mRecyclerView, paramViewHolder)) {
      Log.e("ItemTouchHelper", "Start drag has been called but dragging is not enabled");
      return;
    } 
    if (paramViewHolder.itemView.getParent() != this.mRecyclerView) {
      Log.e("ItemTouchHelper", "Start drag has been called with a view holder which is not a child of the RecyclerView which is controlled by this ItemTouchHelper.");
      return;
    } 
    obtainVelocityTracker();
    this.mDy = 0.0F;
    this.mDx = 0.0F;
    select(paramViewHolder, 2);
  }
  
  public void startSwipe(@NonNull RecyclerView.ViewHolder paramViewHolder) {
    if (!this.mCallback.hasSwipeFlag(this.mRecyclerView, paramViewHolder)) {
      Log.e("ItemTouchHelper", "Start swipe has been called but swiping is not enabled");
      return;
    } 
    if (paramViewHolder.itemView.getParent() != this.mRecyclerView) {
      Log.e("ItemTouchHelper", "Start swipe has been called with a view holder which is not a child of the RecyclerView controlled by this ItemTouchHelper.");
      return;
    } 
    obtainVelocityTracker();
    this.mDy = 0.0F;
    this.mDx = 0.0F;
    select(paramViewHolder, 1);
  }
  
  void updateDxDy(MotionEvent paramMotionEvent, int paramInt1, int paramInt2) {
    float f1 = paramMotionEvent.getX(paramInt2);
    float f2 = paramMotionEvent.getY(paramInt2);
    this.mDx = f1 - this.mInitialTouchX;
    this.mDy = f2 - this.mInitialTouchY;
    if ((paramInt1 & 0x4) == 0)
      this.mDx = Math.max(0.0F, this.mDx); 
    if ((paramInt1 & 0x8) == 0)
      this.mDx = Math.min(0.0F, this.mDx); 
    if ((paramInt1 & true) == 0)
      this.mDy = Math.max(0.0F, this.mDy); 
    if ((paramInt1 & 0x2) == 0)
      this.mDy = Math.min(0.0F, this.mDy); 
  }
}
