package com.google.android.gms.internal.firebase_auth;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

final class zzew extends zzet {
  private final byte[] buffer;
  
  private int pos;
  
  private int zztd;
  
  private int zztf;
  
  private int zztg = Integer.MAX_VALUE;
  
  private final InputStream zzth;
  
  private int zzti;
  
  private int zztj;
  
  private zzex zztk = null;
  
  private zzew(InputStream paramInputStream, int paramInt) {
    super(null);
    zzfv.zza(paramInputStream, "input");
    this.zzth = paramInputStream;
    this.buffer = new byte[paramInt];
    this.zzti = 0;
    this.pos = 0;
    this.zztj = 0;
  }
  
  private final int zzga() throws IOException {
    int j = this.pos;
    int i = this.zzti;
    if (i != j) {
      byte[] arrayOfByte = this.buffer;
      int k = j + 1;
      j = arrayOfByte[j];
      if (j >= 0) {
        this.pos = k;
        return j;
      } 
      if (i - k >= 9) {
        i = k + 1;
        j ^= arrayOfByte[k] << 7;
        if (j < 0) {
          k = j ^ 0xFFFFFF80;
        } else {
          k = i + 1;
          j ^= arrayOfByte[i] << 14;
          if (j >= 0) {
            j ^= 0x3F80;
            i = k;
            k = j;
          } else {
            i = k + 1;
            k = j ^ arrayOfByte[k] << 21;
            if (k < 0) {
              k ^= 0xFFE03F80;
            } else {
              int m = i + 1;
              byte b = arrayOfByte[i];
              j = k ^ b << 28 ^ 0xFE03F80;
              k = j;
              i = m;
              if (b < 0) {
                int n = m + 1;
                k = j;
                i = n;
                if (arrayOfByte[m] < 0) {
                  m = n + 1;
                  k = j;
                  i = m;
                  if (arrayOfByte[n] < 0) {
                    n = m + 1;
                    k = j;
                    i = n;
                    if (arrayOfByte[m] < 0) {
                      m = n + 1;
                      k = j;
                      i = m;
                      if (arrayOfByte[n] < 0) {
                        i = m + 1;
                        if (arrayOfByte[m] >= 0) {
                          k = j;
                          this.pos = i;
                          return k;
                        } 
                      } else {
                        this.pos = i;
                        return k;
                      } 
                    } else {
                      this.pos = i;
                      return k;
                    } 
                  } else {
                    this.pos = i;
                    return k;
                  } 
                } else {
                  this.pos = i;
                  return k;
                } 
              } else {
                this.pos = i;
                return k;
              } 
              return (int)super.zzfx();
            } 
          } 
        } 
        this.pos = i;
        return k;
      } 
    } 
    return (int)super.zzfx();
  }
  
  private final long zzgb() throws IOException {
    int j;
    int k = this.pos;
    int i = this.zzti;
    if (i != k) {
      byte[] arrayOfByte = this.buffer;
      j = k + 1;
      k = arrayOfByte[k];
      if (k >= 0) {
        this.pos = j;
        return k;
      } 
      if (i - j >= 9) {
        i = j + 1;
        k ^= arrayOfByte[j] << 7;
        if (k < 0) {
          j = k ^ 0xFFFFFF80;
        } else {
          long l1;
          j = i + 1;
          k ^= arrayOfByte[i] << 14;
          if (k >= 0) {
            l1 = (k ^ 0x3F80);
            i = j;
          } else {
            i = j + 1;
            j = k ^ arrayOfByte[j] << 21;
            if (j < 0) {
              j ^= 0xFFE03F80;
            } else {
              long l2 = j;
              j = i + 1;
              long l3 = l2 ^ arrayOfByte[i] << 28;
              if (l3 >= 0L) {
                l2 = 266354560L;
                i = j;
              } else {
                i = j + 1;
                l2 = l3 ^ arrayOfByte[j] << 35;
                if (l2 < 0L) {
                  l3 = -34093383808L;
                } else {
                  j = i + 1;
                  l3 = l2 ^ arrayOfByte[i] << 42;
                  if (l3 >= 0L) {
                    l2 = 4363953127296L;
                    i = j;
                  } else {
                    i = j + 1;
                    l2 = l3 ^ arrayOfByte[j] << 49;
                    if (l2 < 0L) {
                      l3 = -558586000294016L;
                    } else {
                      j = i + 1;
                      l3 = l2 ^ arrayOfByte[i] << 56 ^ 0xFE03F80FE03F80L;
                      i = j;
                      l2 = l3;
                      if (l3 < 0L) {
                        i = j + 1;
                        if (arrayOfByte[j] >= 0L) {
                          l2 = l3;
                          this.pos = i;
                          return l2;
                        } 
                      } else {
                        this.pos = i;
                        return l2;
                      } 
                      return super.zzfx();
                    } 
                    l2 ^= l3;
                  } 
                  l2 ^= l3;
                } 
                l2 ^= l3;
              } 
              l2 ^= l3;
            } 
            l1 = j;
          } 
          this.pos = i;
          return l1;
        } 
      } else {
        return super.zzfx();
      } 
    } else {
      return super.zzfx();
    } 
    long l = j;
  }
  
  private final int zzgc() throws IOException {
    int j = this.pos;
    int i = j;
    if (this.zzti - j < 4) {
      zzt(4);
      i = this.pos;
    } 
    byte[] arrayOfByte = this.buffer;
    this.pos = i + 4;
    j = arrayOfByte[i];
    byte b1 = arrayOfByte[i + 1];
    byte b2 = arrayOfByte[i + 2];
    return (arrayOfByte[i + 3] & 0xFF) << 24 | j & 0xFF | (b1 & 0xFF) << 8 | (b2 & 0xFF) << 16;
  }
  
  private final long zzgd() throws IOException {
    int j = this.pos;
    int i = j;
    if (this.zzti - j < 8) {
      zzt(8);
      i = this.pos;
    } 
    byte[] arrayOfByte = this.buffer;
    this.pos = i + 8;
    long l1 = arrayOfByte[i];
    long l2 = arrayOfByte[i + 1];
    long l3 = arrayOfByte[i + 2];
    long l4 = arrayOfByte[i + 3];
    long l5 = arrayOfByte[i + 4];
    long l6 = arrayOfByte[i + 5];
    long l7 = arrayOfByte[i + 6];
    return (arrayOfByte[i + 7] & 0xFFL) << 56 | l1 & 0xFFL | (l2 & 0xFFL) << 8 | (l3 & 0xFFL) << 16 | (l4 & 0xFFL) << 24 | (l5 & 0xFFL) << 32 | (l6 & 0xFFL) << 40 | (l7 & 0xFFL) << 48;
  }
  
  private final void zzge() {
    this.zzti += this.zztd;
    int j = this.zztj;
    int i = this.zzti;
    j += i;
    int k = this.zztg;
    if (j > k) {
      this.zztd = j - k;
      this.zzti = i - this.zztd;
      return;
    } 
    this.zztd = 0;
  }
  
  private final byte zzgf() throws IOException {
    if (this.pos == this.zzti)
      zzt(1); 
    byte[] arrayOfByte = this.buffer;
    int i = this.pos;
    this.pos = i + 1;
    return arrayOfByte[i];
  }
  
  private final void zzs(int paramInt) throws IOException {
    int i = this.zzti;
    int j = this.pos;
    if (paramInt <= i - j && paramInt >= 0) {
      this.pos = j + paramInt;
      return;
    } 
    if (paramInt >= 0) {
      i = this.zztj;
      j = this.pos;
      int k = this.zztg;
      if (i + j + paramInt <= k) {
        this.zztj = i + j;
        i = this.zzti - j;
        this.zzti = 0;
        this.pos = 0;
        while (i < paramInt) {
          try {
            InputStream inputStream = this.zzth;
            long l1 = (paramInt - i);
            long l2 = inputStream.skip(l1);
            if (l2 >= 0L && l2 <= l1) {
              i += (int)l2;
              continue;
            } 
            String str;
            StringBuilder stringBuilder = new StringBuilder((str = String.valueOf(this.zzth.getClass())).valueOf(str).length() + 92);
            stringBuilder.append(str);
            stringBuilder.append("#skip returned invalid result: ");
            stringBuilder.append(l2);
            stringBuilder.append("\nThe InputStream implementation is buggy.");
            throw new IllegalStateException(stringBuilder.toString());
          } finally {
            this.zztj += i;
            zzge();
          } 
        } 
        this.zztj += i;
        zzge();
        return;
      } 
      zzs(k - i - j);
      throw zzgc.zzhq();
    } 
    zzgc zzgc = zzgc.zzhr();
    throw zzgc;
  }
  
  private final void zzt(int paramInt) throws IOException {
    if (!zzu(paramInt)) {
      if (paramInt > this.zzsz - this.zztj - this.pos)
        throw zzgc.zzhw(); 
      throw zzgc.zzhq();
    } 
  }
  
  private final boolean zzu(int paramInt) throws IOException {
    while (this.pos + paramInt > this.zzti) {
      int j = this.zzsz;
      int k = this.zztj;
      int i = this.pos;
      if (paramInt > j - k - i)
        return false; 
      if (k + i + paramInt > this.zztg)
        return false; 
      if (i > 0) {
        j = this.zzti;
        if (j > i) {
          byte[] arrayOfByte1 = this.buffer;
          System.arraycopy(arrayOfByte1, i, arrayOfByte1, 0, j - i);
        } 
        this.zztj += i;
        this.zzti -= i;
        this.pos = 0;
      } 
      InputStream inputStream = this.zzth;
      byte[] arrayOfByte = this.buffer;
      i = this.zzti;
      i = inputStream.read(arrayOfByte, i, Math.min(arrayOfByte.length - i, this.zzsz - this.zztj - this.zzti));
      if (i != 0 && i >= -1 && i <= this.buffer.length) {
        if (i > 0) {
          this.zzti += i;
          zzge();
          if (this.zzti >= paramInt)
            return true; 
          continue;
        } 
        return false;
      } 
      String str;
      StringBuilder stringBuilder1 = new StringBuilder((str = String.valueOf(this.zzth.getClass())).valueOf(str).length() + 91);
      stringBuilder1.append(str);
      stringBuilder1.append("#read(byte[]) returned invalid result: ");
      stringBuilder1.append(i);
      stringBuilder1.append("\nThe InputStream implementation is buggy.");
      throw new IllegalStateException(stringBuilder1.toString());
    } 
    StringBuilder stringBuilder = new StringBuilder(77);
    stringBuilder.append("refillBuffer() called when ");
    stringBuilder.append(paramInt);
    stringBuilder.append(" bytes were already available in buffer");
    IllegalStateException illegalStateException = new IllegalStateException(stringBuilder.toString());
    throw illegalStateException;
  }
  
  private final byte[] zzv(int paramInt) throws IOException {
    byte[] arrayOfByte = zzw(paramInt);
    if (arrayOfByte != null)
      return arrayOfByte; 
    int j = this.pos;
    int k = this.zzti;
    int i = k - j;
    this.zztj += k;
    this.pos = 0;
    this.zzti = 0;
    List list = zzx(paramInt - i);
    arrayOfByte = new byte[paramInt];
    System.arraycopy(this.buffer, j, arrayOfByte, 0, i);
    Iterator iterator = list.iterator();
    for (paramInt = i; iterator.hasNext(); paramInt += arrayOfByte1.length) {
      byte[] arrayOfByte1 = (byte[])iterator.next();
      System.arraycopy(arrayOfByte1, 0, arrayOfByte, paramInt, arrayOfByte1.length);
    } 
    return arrayOfByte;
  }
  
  private final byte[] zzw(int paramInt) throws IOException {
    if (paramInt == 0)
      return zzfv.EMPTY_BYTE_ARRAY; 
    if (paramInt >= 0) {
      int i = this.zztj + this.pos + paramInt;
      if (i - this.zzsz <= 0) {
        int j = this.zztg;
        if (i <= j) {
          i = this.zzti - this.pos;
          j = paramInt - i;
          if (j < 4096 || j <= this.zzth.available()) {
            byte[] arrayOfByte = new byte[paramInt];
            System.arraycopy(this.buffer, this.pos, arrayOfByte, 0, i);
            this.zztj += this.zzti;
            this.pos = 0;
            this.zzti = 0;
            while (i < arrayOfByte.length) {
              j = this.zzth.read(arrayOfByte, i, paramInt - i);
              if (j != -1) {
                this.zztj += j;
                i += j;
                continue;
              } 
              throw zzgc.zzhq();
            } 
            return arrayOfByte;
          } 
          return null;
        } 
        zzs(j - this.zztj - this.pos);
        throw zzgc.zzhq();
      } 
      throw zzgc.zzhw();
    } 
    zzgc zzgc = zzgc.zzhr();
    throw zzgc;
  }
  
  private final List<byte[]> zzx(int paramInt) throws IOException {
    ArrayList arrayList = new ArrayList();
    while (paramInt > 0) {
      byte[] arrayOfByte = new byte[Math.min(paramInt, 4096)];
      int i = 0;
      while (i < arrayOfByte.length) {
        int j = this.zzth.read(arrayOfByte, i, arrayOfByte.length - i);
        if (j != -1) {
          this.zztj += j;
          i += j;
          continue;
        } 
        throw zzgc.zzhq();
      } 
      paramInt -= arrayOfByte.length;
      arrayList.add(arrayOfByte);
    } 
    return arrayList;
  }
  
  public final double readDouble() throws IOException { return Double.longBitsToDouble(zzgd()); }
  
  public final float readFloat() throws IOException { return Float.intBitsToFloat(zzgc()); }
  
  public final String readString() throws IOException {
    int i = zzga();
    if (i > 0) {
      int j = this.zzti;
      int k = this.pos;
      if (i <= j - k) {
        String str = new String(this.buffer, k, i, zzfv.UTF_8);
        this.pos += i;
        return str;
      } 
    } 
    if (i == 0)
      return ""; 
    if (i <= this.zzti) {
      zzt(i);
      String str = new String(this.buffer, this.pos, i, zzfv.UTF_8);
      this.pos += i;
      return str;
    } 
    return new String(zzv(i), zzfv.UTF_8);
  }
  
  public final int zzfi() throws IOException {
    if (super.zzfy()) {
      this.zztf = 0;
      return 0;
    } 
    this.zztf = zzga();
    int i = this.zztf;
    if (i >>> 3 != 0)
      return i; 
    throw zzgc.zzht();
  }
  
  public final long zzfj() throws IOException { return zzgb(); }
  
  public final long zzfk() throws IOException { return zzgb(); }
  
  public final int zzfl() throws IOException { return zzga(); }
  
  public final long zzfm() throws IOException { return zzgd(); }
  
  public final int zzfn() throws IOException { return zzgc(); }
  
  public final boolean zzfo() throws IOException { return (zzgb() != 0L); }
  
  public final String zzfp() throws IOException {
    byte[] arrayOfByte;
    int k = zzga();
    int i = this.pos;
    int m = this.zzti;
    int j = 0;
    if (k <= m - i && k > 0) {
      arrayOfByte = this.buffer;
      this.pos = i + k;
    } else {
      if (k == 0)
        return ""; 
      if (k <= this.zzti) {
        zzt(k);
        arrayOfByte = this.buffer;
        this.pos = k;
        i = j;
      } else {
        arrayOfByte = zzv(k);
        i = j;
      } 
    } 
    return zziy.zzg(arrayOfByte, i, k);
  }
  
  public final zzeh zzfq() throws IOException {
    int i = zzga();
    int j = this.zzti;
    int k = this.pos;
    if (i <= j - k && i > 0) {
      zzeh zzeh = zzeh.zzb(this.buffer, k, i);
      this.pos += i;
      return zzeh;
    } 
    if (i == 0)
      return zzeh.zzso; 
    byte[] arrayOfByte = zzw(i);
    if (arrayOfByte != null)
      return zzeh.zza(arrayOfByte); 
    j = this.pos;
    k = this.zzti;
    int m = k - j;
    this.zztj += k;
    this.pos = 0;
    this.zzti = 0;
    List list = zzx(i - m);
    ArrayList arrayList = new ArrayList(list.size() + 1);
    arrayList.add(zzeh.zzb(this.buffer, j, m));
    Iterator iterator = list.iterator();
    while (iterator.hasNext())
      arrayList.add(zzeh.zza((byte[])iterator.next())); 
    return zzeh.zze(arrayList);
  }
  
  public final int zzfr() throws IOException { return zzga(); }
  
  public final int zzfs() throws IOException { return zzga(); }
  
  public final int zzft() throws IOException { return zzgc(); }
  
  public final long zzfu() throws IOException { return zzgd(); }
  
  public final int zzfv() throws IOException { return zzr(zzga()); }
  
  public final long zzfw() throws IOException { return zza(zzgb()); }
  
  final long zzfx() throws IOException {
    long l = 0L;
    for (byte b = 0; b < 64; b += 7) {
      byte b1 = zzgf();
      l |= (b1 & 0x7F) << b;
      if ((b1 & 0x80) == 0)
        return l; 
    } 
    zzgc zzgc = zzgc.zzhs();
    throw zzgc;
  }
  
  public final boolean zzfy() throws IOException { return (this.pos == this.zzti && !zzu(1)); }
  
  public final int zzfz() throws IOException { return this.zztj + this.pos; }
  
  public final void zzn(int paramInt) throws IOException {
    if (this.zztf == paramInt)
      return; 
    throw zzgc.zzhu();
  }
  
  public final boolean zzo(int paramInt) throws IOException {
    int k = paramInt & 0x7;
    int j = 0;
    int i = 0;
    if (k != 0) {
      if (k != 1) {
        if (k != 2) {
          if (k != 3) {
            if (k != 4) {
              if (k == 5) {
                zzs(4);
                return true;
              } 
              throw zzgc.zzhv();
            } 
            return false;
          } 
          do {
            i = super.zzfi();
          } while (i != 0 && super.zzo(i));
          super.zzn(paramInt >>> 3 << 3 | 0x4);
          return true;
        } 
        zzs(zzga());
        return true;
      } 
      zzs(8);
      return true;
    } 
    paramInt = j;
    if (this.zzti - this.pos >= 10) {
      paramInt = i;
      while (paramInt < 10) {
        byte[] arrayOfByte = this.buffer;
        i = this.pos;
        this.pos = i + 1;
        if (arrayOfByte[i] < 0) {
          paramInt++;
          continue;
        } 
        return true;
      } 
      throw zzgc.zzhs();
    } 
    while (paramInt < 10) {
      if (zzgf() < 0) {
        paramInt++;
        continue;
      } 
      return true;
    } 
    zzgc zzgc = zzgc.zzhs();
    throw zzgc;
  }
  
  public final int zzp(int paramInt) throws zzgc {
    if (paramInt >= 0) {
      paramInt += this.zztj + this.pos;
      int i = this.zztg;
      if (paramInt <= i) {
        this.zztg = paramInt;
        zzge();
        return i;
      } 
      throw zzgc.zzhq();
    } 
    throw zzgc.zzhr();
  }
  
  public final void zzq(int paramInt) throws IOException {
    this.zztg = paramInt;
    zzge();
  }
}
