package com.google.android.gms.internal.ads;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Parcel;
import android.support.annotation.Nullable;
import android.util.Base64;
import com.google.android.gms.ads.internal.zzbv;
import com.google.android.gms.common.util.VisibleForTesting;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.annotation.ParametersAreNonnullByDefault;

@zzadh
@ParametersAreNonnullByDefault
public final class zztw {
  private final Map<zztx, zzty> zzbok = new HashMap();
  
  private final LinkedList<zztx> zzbol = new LinkedList();
  
  @Nullable
  private zzss zzbom;
  
  private static void zza(String paramString, zztx paramzztx) {
    if (zzakb.isLoggable(2))
      zzakb.v(String.format(paramString, new Object[] { paramzztx })); 
  }
  
  private static String[] zzax(String paramString) {
    try {
      String[] arrayOfString = paramString.split("\000");
      for (byte b = 0; b < arrayOfString.length; b++)
        arrayOfString[b] = new String(Base64.decode(arrayOfString[b], 0), "UTF-8"); 
      return arrayOfString;
    } catch (UnsupportedEncodingException paramString) {
      return new String[0];
    } 
  }
  
  private static boolean zzay(String paramString) {
    try {
      zzna zzna = zznk.zzazf;
      return Pattern.matches((String)zzkb.zzik().zzd(zzna), paramString);
    } catch (RuntimeException paramString) {
      zzbv.zzeo().zza(paramString, "InterstitialAdPool.isExcludedAdUnit");
      return false;
    } 
  }
  
  @VisibleForTesting
  private static String zzaz(String paramString) {
    try {
      Matcher matcher = Pattern.compile("([^/]+/[0-9]+).*").matcher(paramString);
      String str = paramString;
      if (matcher.matches())
        str = matcher.group(1); 
      return str;
    } catch (RuntimeException runtimeException) {
      return paramString;
    } 
  }
  
  private static void zzb(Bundle paramBundle, String paramString) {
    while (true) {
      String[] arrayOfString = paramString.split("/", 2);
      if (arrayOfString.length == 0)
        return; 
      String str2 = arrayOfString[0];
      if (arrayOfString.length == 1) {
        paramBundle.remove(str2);
        return;
      } 
      paramBundle = paramBundle.getBundle(str2);
      if (paramBundle == null)
        return; 
      String str1 = arrayOfString[1];
    } 
  }
  
  static Set<String> zzh(zzjj paramzzjj) {
    HashSet hashSet = new HashSet();
    hashSet.addAll(paramzzjj.extras.keySet());
    Bundle bundle = paramzzjj.zzaqg.getBundle("com.google.ads.mediation.admob.AdMobAdapter");
    if (bundle != null)
      hashSet.addAll(bundle.keySet()); 
    return hashSet;
  }
  
  static zzjj zzi(zzjj paramzzjj) {
    paramzzjj = zzk(paramzzjj);
    Bundle bundle = paramzzjj.zzaqg.getBundle("com.google.ads.mediation.admob.AdMobAdapter");
    if (bundle != null)
      bundle.putBoolean("_skipMediation", true); 
    paramzzjj.extras.putBoolean("_skipMediation", true);
    return paramzzjj;
  }
  
  @VisibleForTesting
  private static zzjj zzj(zzjj paramzzjj) {
    paramzzjj = zzk(paramzzjj);
    zzna zzna = zznk.zzazb;
    for (String str : ((String)zzkb.zzik().zzd(zzna)).split(",")) {
      zzb(paramzzjj.zzaqg, str);
      if (str.startsWith("com.google.ads.mediation.admob.AdMobAdapter/")) {
        str = str.replaceFirst("com.google.ads.mediation.admob.AdMobAdapter/", "");
        zzb(paramzzjj.extras, str);
      } 
    } 
    return paramzzjj;
  }
  
  @VisibleForTesting
  private static zzjj zzk(zzjj paramzzjj) {
    Parcel parcel = Parcel.obtain();
    paramzzjj.writeToParcel(parcel, 0);
    parcel.setDataPosition(0);
    zzjj zzjj1 = (zzjj)zzjj.CREATOR.createFromParcel(parcel);
    parcel.recycle();
    zzna zzna = zznk.zzayo;
    paramzzjj = zzjj1;
    if (((Boolean)zzkb.zzik().zzd(zzna)).booleanValue())
      paramzzjj = zzjj1.zzhv(); 
    return paramzzjj;
  }
  
  private final String zzle() {
    try {
      StringBuilder stringBuilder = new StringBuilder();
      Iterator iterator = this.zzbol.iterator();
      while (iterator.hasNext()) {
        stringBuilder.append(Base64.encodeToString(((zztx)iterator.next()).toString().getBytes("UTF-8"), 0));
        if (iterator.hasNext())
          stringBuilder.append("\000"); 
      } 
      return stringBuilder.toString();
    } catch (UnsupportedEncodingException unsupportedEncodingException) {
      return "";
    } 
  }
  
  @Nullable
  final zztz zza(zzjj paramzzjj, String paramString) {
    if (zzay(paramString))
      return null; 
    int i = ((new zzagb(this.zzbom.getApplicationContext())).zzoo()).zzcjx;
    zzjj zzjj1 = zzj(paramzzjj);
    String str = zzaz(paramString);
    zztx zztx = new zztx(zzjj1, str, i);
    zzty zzty2 = (zzty)this.zzbok.get(zztx);
    zzty zzty1 = zzty2;
    if (zzty2 == null) {
      zza("Interstitial pool created at %s.", zztx);
      zzty1 = new zzty(zzjj1, str, i);
      this.zzbok.put(zztx, zzty1);
    } 
    this.zzbol.remove(zztx);
    this.zzbol.add(zztx);
    zzty1.zzli();
    while (true) {
      i = this.zzbol.size();
      zzna zzna = zznk.zzazc;
      if (i > ((Integer)zzkb.zzik().zzd(zzna)).intValue()) {
        zztx zztx1 = (zztx)this.zzbol.remove();
        zzty zzty = (zzty)this.zzbok.get(zztx1);
        zza("Evicting interstitial queue for %s.", zztx1);
        while (zzty.size() > 0) {
          zztz zztz = zzty.zzl(null);
          if (zztz.zzwa)
            zzua.zzlk().zzlm(); 
          zztz.zzbor.zzdj();
        } 
        this.zzbok.remove(zztx1);
        continue;
      } 
      break;
    } 
    while (zzty1.size() > 0) {
      String str1;
      zztz zztz = zzty1.zzl(zzjj1);
      if (zztz.zzwa) {
        long l1 = zzbv.zzer().currentTimeMillis();
        long l2 = zztz.zzbou;
        zzna zzna = zznk.zzaze;
        if (l1 - l2 > ((Integer)zzkb.zzik().zzd(zzna)).intValue() * 1000L) {
          zza("Expired interstitial at %s.", zztx);
          zzua.zzlk().zzll();
          continue;
        } 
      } 
      if (zztz.zzbos != null) {
        str1 = " (inline) ";
      } else {
        str1 = " ";
      } 
      StringBuilder stringBuilder = new StringBuilder(str1.length() + 34);
      stringBuilder.append("Pooled interstitial");
      stringBuilder.append(str1);
      stringBuilder.append("returned at %s.");
      zza(stringBuilder.toString(), zztx);
      return zztz;
    } 
    return null;
  }
  
  final void zza(zzss paramzzss) {
    if (this.zzbom == null) {
      this.zzbom = paramzzss.zzlc();
      paramzzss = this.zzbom;
      if (paramzzss != null) {
        Context context = paramzzss.getApplicationContext();
        byte b = 0;
        sharedPreferences = context.getSharedPreferences("com.google.android.gms.ads.internal.interstitial.InterstitialAdPool", 0);
        while (this.zzbol.size() > 0) {
          zztx zztx = (zztx)this.zzbol.remove();
          zzty zzty = (zzty)this.zzbok.get(zztx);
          zza("Flushing interstitial queue for %s.", zztx);
          while (zzty.size() > 0)
            (zzty.zzl(null)).zzbor.zzdj(); 
          this.zzbok.remove(zztx);
        } 
        try {
          HashMap hashMap = new HashMap();
          Iterator iterator = sharedPreferences.getAll().entrySet().iterator();
          while (true) {
            boolean bool = iterator.hasNext();
            if (bool) {
              Map.Entry entry = (Map.Entry)iterator.next();
              if (!((String)entry.getKey()).equals("PoolKeys")) {
                zzuc zzuc = zzuc.zzba((String)entry.getValue());
                zztx zztx = new zztx(zzuc.zzaao, zzuc.zzye, zzuc.zzbop);
                if (!this.zzbok.containsKey(zztx)) {
                  zzty zzty = new zzty(zzuc.zzaao, zzuc.zzye, zzuc.zzbop);
                  this.zzbok.put(zztx, zzty);
                  hashMap.put(zztx.toString(), zztx);
                  zza("Restored interstitial queue for %s.", zztx);
                } 
              } 
              continue;
            } 
            break;
          } 
          String[] arrayOfString = zzax(sharedPreferences.getString("PoolKeys", ""));
          int i = arrayOfString.length;
          while (b < i) {
            zztx zztx = (zztx)hashMap.get(arrayOfString[b]);
            if (this.zzbok.containsKey(zztx))
              this.zzbol.add(zztx); 
            b++;
          } 
          return;
        } catch (RuntimeException sharedPreferences) {
        
        } catch (IOException sharedPreferences) {}
        zzbv.zzeo().zza(sharedPreferences, "InterstitialAdPool.restore");
        zzakb.zzc("Malformed preferences value for InterstitialAdPool.", sharedPreferences);
        this.zzbok.clear();
        this.zzbol.clear();
      } 
    } 
  }
  
  final void zzb(zzjj paramzzjj, String paramString) {
    zzss zzss1 = this.zzbom;
    if (zzss1 == null)
      return; 
    int i = ((new zzagb(zzss1.getApplicationContext())).zzoo()).zzcjx;
    zzjj zzjj1 = zzj(paramzzjj);
    String str = zzaz(paramString);
    zztx zztx = new zztx(zzjj1, str, i);
    zzty zzty2 = (zzty)this.zzbok.get(zztx);
    zzty zzty1 = zzty2;
    if (zzty2 == null) {
      zza("Interstitial pool created at %s.", zztx);
      zzty1 = new zzty(zzjj1, str, i);
      this.zzbok.put(zztx, zzty1);
    } 
    zzty1.zza(this.zzbom, paramzzjj);
    zzty1.zzli();
    zza("Inline entry added to the queue at %s.", zztx);
  }
  
  final void zzld() {
    if (this.zzbom == null)
      return; 
    for (Map.Entry entry : this.zzbok.entrySet()) {
      zztx zztx = (zztx)entry.getKey();
      zzty zzty = (zzty)entry.getValue();
      if (zzakb.isLoggable(2)) {
        int j = zzty.size();
        int k = zzty.zzlg();
        if (k < j)
          zzakb.v(String.format("Loading %s/%s pooled interstitials for %s.", new Object[] { Integer.valueOf(j - k), Integer.valueOf(j), zztx })); 
      } 
      int i = zzty.zzlh() + 0;
      while (true) {
        int j = zzty.size();
        zzna zzna = zznk.zzazd;
        if (j < ((Integer)zzkb.zzik().zzd(zzna)).intValue()) {
          zza("Pooling and loading one new interstitial for %s.", zztx);
          if (zzty.zzb(this.zzbom))
            i++; 
          continue;
        } 
        break;
      } 
      zzua.zzlk().zzw(i);
    } 
    zzss zzss1 = this.zzbom;
    if (zzss1 != null) {
      SharedPreferences.Editor editor = zzss1.getApplicationContext().getSharedPreferences("com.google.android.gms.ads.internal.interstitial.InterstitialAdPool", 0).edit();
      editor.clear();
      for (Map.Entry entry : this.zzbok.entrySet()) {
        zztx zztx = (zztx)entry.getKey();
        zzty zzty = (zzty)entry.getValue();
        if (zzty.zzlj()) {
          String str = (new zzuc(zzty)).zzlu();
          editor.putString(zztx.toString(), str);
          zza("Saved interstitial queue for %s.", zztx);
        } 
      } 
      editor.putString("PoolKeys", zzle());
      editor.apply();
    } 
  }
}
