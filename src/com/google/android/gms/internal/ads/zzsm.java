package com.google.android.gms.internal.ads;

import android.content.Context;
import android.os.Binder;
import android.os.ParcelFileDescriptor;
import android.support.annotation.Nullable;
import com.google.android.gms.ads.internal.zzbv;
import java.util.HashMap;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.annotation.concurrent.GuardedBy;

@zzadh
public final class zzsm implements zzm {
  private final Context mContext;
  
  private final Object mLock = new Object();
  
  @Nullable
  @GuardedBy("mLock")
  private zzsf zzbnl;
  
  @GuardedBy("mLock")
  private boolean zzbnm;
  
  public zzsm(Context paramContext) { this.mContext = paramContext; }
  
  private final void disconnect() {
    synchronized (this.mLock) {
      if (this.zzbnl == null)
        return; 
      this.zzbnl.disconnect();
      this.zzbnl = null;
      Binder.flushPendingCommands();
      return;
    } 
  }
  
  private final Future<ParcelFileDescriptor> zzb(zzsg paramzzsg) {
    null = new zzsn(this);
    zzso zzso = new zzso(this, null, paramzzsg);
    zzsr zzsr = new zzsr(this, null);
    synchronized (this.mLock) {
      this.zzbnl = new zzsf(this.mContext, zzbv.zzez().zzsa(), zzso, zzsr);
      this.zzbnl.checkAvailabilityAndConnect();
      return null;
    } 
  }
  
  public final zzp zzc(zzr<?> paramzzr) throws zzae {
    null = zzsg.zzh(paramzzr);
    zzna zzna = zznk.zzbdx;
    l2 = ((Integer)zzkb.zzik().zzd(zzna)).intValue();
    l1 = zzbv.zzer().elapsedRealtime();
    try {
      zzp = (zzsi)(new zzaev((ParcelFileDescriptor)zzb(null).get(l2, TimeUnit.MILLISECONDS))).zza(zzsi.CREATOR);
      if (!zzp.zzbnj) {
        if (zzp.zzbnh.length != zzp.zzbni.length) {
          zzp = null;
        } else {
          HashMap hashMap = new HashMap();
          for (byte b = 0; b < zzp.zzbnh.length; b++)
            hashMap.put(zzp.zzbnh[b], zzp.zzbni[b]); 
          zzp = new zzp(zzp.statusCode, zzp.data, hashMap, zzp.zzac, zzp.zzad);
        } 
        return zzp;
      } 
      throw new zzae(zzp.zzbnk);
    } catch (InterruptedException|java.util.concurrent.ExecutionException|java.util.concurrent.TimeoutException null) {
      return null;
    } finally {
      l2 = zzbv.zzer().elapsedRealtime();
      StringBuilder stringBuilder = new StringBuilder(52);
      stringBuilder.append("Http assets remote cache took ");
      stringBuilder.append(l2 - l1);
      stringBuilder.append("ms");
      zzakb.v(stringBuilder.toString());
    } 
  }
}
