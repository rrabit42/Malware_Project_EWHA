package com.google.android.gms.common.api.internal;

import android.os.Looper;
import android.os.Message;
import android.support.annotation.NonNull;
import com.google.android.gms.common.annotation.KeepForSdk;
import com.google.android.gms.common.internal.Preconditions;

@KeepForSdk
public final class ListenerHolder<L> extends Object {
  private final zaa zaji;
  
  private final ListenerKey<L> zajk;
  
  @KeepForSdk
  ListenerHolder(@NonNull Looper paramLooper, @NonNull L paramL, @NonNull String paramString) {
    this.zaji = new zaa(this, paramLooper);
    this.zajj = Preconditions.checkNotNull(paramL, "Listener must not be null");
    this.zajk = new ListenerKey(paramL, Preconditions.checkNotEmpty(paramString));
  }
  
  @KeepForSdk
  public final void clear() { this.zajj = null; }
  
  @NonNull
  @KeepForSdk
  public final ListenerKey<L> getListenerKey() { return this.zajk; }
  
  @KeepForSdk
  public final boolean hasListener() { return (this.zajj != null); }
  
  @KeepForSdk
  public final void notifyListener(Notifier<? super L> paramNotifier) {
    Preconditions.checkNotNull(paramNotifier, "Notifier must not be null");
    Message message = this.zaji.obtainMessage(1, paramNotifier);
    this.zaji.sendMessage(message);
  }
  
  @KeepForSdk
  final void notifyListenerInternal(Notifier<? super L> paramNotifier) {
    object = this.zajj;
    if (object == null) {
      paramNotifier.onNotifyListenerFailed();
      return;
    } 
    try {
      paramNotifier.notifyListener(object);
      return;
    } catch (RuntimeException object) {
      paramNotifier.onNotifyListenerFailed();
      throw object;
    } 
  }
}
