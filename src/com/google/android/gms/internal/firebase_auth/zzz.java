package com.google.android.gms.internal.firebase_auth;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.RandomAccess;
import org.checkerframework.checker.nullness.compatqual.NullableDecl;

public abstract class zzz<E> extends zzy<E> implements List<E>, RandomAccess {
  private static final zzae<Object> zzfn = new zzaa(zzac.zzfq, 0);
  
  public static <E> zzz<E> zza(E paramE1, E paramE2, E paramE3, E paramE4, E paramE5, E paramE6, E paramE7, E paramE8) { // Byte code:
    //   0: bipush #8
    //   2: anewarray java/lang/Object
    //   5: astore #9
    //   7: iconst_0
    //   8: istore #8
    //   10: aload #9
    //   12: iconst_0
    //   13: aload_0
    //   14: aastore
    //   15: aload #9
    //   17: iconst_1
    //   18: aload_1
    //   19: aastore
    //   20: aload #9
    //   22: iconst_2
    //   23: aload_2
    //   24: aastore
    //   25: aload #9
    //   27: iconst_3
    //   28: aload_3
    //   29: aastore
    //   30: aload #9
    //   32: iconst_4
    //   33: aload #4
    //   35: aastore
    //   36: aload #9
    //   38: iconst_5
    //   39: aload #5
    //   41: aastore
    //   42: aload #9
    //   44: bipush #6
    //   46: aload #6
    //   48: aastore
    //   49: aload #9
    //   51: bipush #7
    //   53: aload #7
    //   55: aastore
    //   56: iload #8
    //   58: bipush #8
    //   60: if_icmpge -> 116
    //   63: aload #9
    //   65: iload #8
    //   67: aaload
    //   68: ifnull -> 80
    //   71: iload #8
    //   73: iconst_1
    //   74: iadd
    //   75: istore #8
    //   77: goto -> 56
    //   80: new java/lang/StringBuilder
    //   83: dup
    //   84: bipush #20
    //   86: invokespecial <init> : (I)V
    //   89: astore_0
    //   90: aload_0
    //   91: ldc 'at index '
    //   93: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   96: pop
    //   97: aload_0
    //   98: iload #8
    //   100: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   103: pop
    //   104: new java/lang/NullPointerException
    //   107: dup
    //   108: aload_0
    //   109: invokevirtual toString : ()Ljava/lang/String;
    //   112: invokespecial <init> : (Ljava/lang/String;)V
    //   115: athrow
    //   116: new com/google/android/gms/internal/firebase_auth/zzac
    //   119: dup
    //   120: aload #9
    //   122: bipush #8
    //   124: invokespecial <init> : ([Ljava/lang/Object;I)V
    //   127: areturn }
  
  @Deprecated
  public final void add(int paramInt, E paramE) { throw new UnsupportedOperationException(); }
  
  @Deprecated
  public final boolean addAll(int paramInt, Collection<? extends E> paramCollection) { throw new UnsupportedOperationException(); }
  
  public boolean contains(@NullableDecl Object paramObject) { return (indexOf(paramObject) >= 0); }
  
  public boolean equals(@NullableDecl Object paramObject) {
    if (paramObject == zzv.checkNotNull(this))
      return true; 
    if (paramObject instanceof List) {
      List list = (List)paramObject;
      int i = size();
      if (i == list.size())
        if (this instanceof RandomAccess && list instanceof RandomAccess) {
          byte b = 0;
          while (true) {
            if (b < i) {
              if (zzu.equal(get(b), list.get(b))) {
                b++;
                continue;
              } 
              break;
            } 
            return true;
          } 
        } else {
          paramObject = (zzz)this;
          i = paramObject.size();
          Iterator iterator = list.iterator();
          byte b = 0;
          while (b < i) {
            if (iterator.hasNext()) {
              Object object = paramObject.get(b);
              b++;
              if (zzu.equal(object, iterator.next()))
                continue; 
              // Byte code: goto -> 170
            } 
            // Byte code: goto -> 170
          } 
          if (!iterator.hasNext())
            return true; 
        }  
    } 
    return false;
  }
  
  public int hashCode() {
    int j = size();
    int i = 1;
    for (byte b = 0; b < j; b++)
      i = i * 31 + get(b).hashCode() ^ 0xFFFFFFFF ^ 0xFFFFFFFF; 
    return i;
  }
  
  public int indexOf(@NullableDecl Object paramObject) {
    if (paramObject == null)
      return -1; 
    if (this instanceof RandomAccess) {
      int i = size();
      byte b1 = 0;
      byte b2 = 0;
      if (paramObject == null) {
        for (b1 = b2; b1 < i; b1++) {
          if (get(b1) == null)
            return b1; 
        } 
      } else {
        while (b1 < i) {
          if (paramObject.equals(get(b1)))
            return b1; 
          b1++;
        } 
      } 
      return -1;
    } 
    ListIterator listIterator = super.listIterator();
    while (listIterator.hasNext()) {
      if (zzu.equal(paramObject, listIterator.next()))
        return listIterator.previousIndex(); 
    } 
    return -1;
  }
  
  public int lastIndexOf(@NullableDecl Object paramObject) {
    if (paramObject == null)
      return -1; 
    if (this instanceof RandomAccess) {
      if (paramObject == null) {
        for (int i = size() - 1; i >= 0; i--) {
          if (get(i) == null)
            return i; 
        } 
      } else {
        for (int i = size() - 1; i >= 0; i--) {
          if (paramObject.equals(get(i)))
            return i; 
        } 
      } 
      return -1;
    } 
    ListIterator listIterator = super.listIterator(size());
    while (listIterator.hasPrevious()) {
      if (zzu.equal(paramObject, listIterator.previous()))
        return listIterator.nextIndex(); 
    } 
    return -1;
  }
  
  @Deprecated
  public final E remove(int paramInt) { throw new UnsupportedOperationException(); }
  
  @Deprecated
  public final E set(int paramInt, E paramE) { throw new UnsupportedOperationException(); }
  
  int zza(Object[] paramArrayOfObject, int paramInt) {
    int i = size();
    for (paramInt = 0; paramInt < i; paramInt++)
      paramArrayOfObject[paramInt] = get(paramInt); 
    return i;
  }
  
  public final zzad<E> zzbo() { return (zzae)listIterator(); }
  
  public zzz<E> zzc(int paramInt1, int paramInt2) {
    zzv.zza(paramInt1, paramInt2, size());
    paramInt2 -= paramInt1;
    return (paramInt2 == size()) ? this : ((paramInt2 == 0) ? zzac.zzfq : new zzab(this, paramInt1, paramInt2));
  }
}
