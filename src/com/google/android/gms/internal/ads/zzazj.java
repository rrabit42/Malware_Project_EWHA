package com.google.android.gms.internal.ads;

import java.security.GeneralSecurityException;
import java.security.InvalidAlgorithmParameterException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import javax.crypto.Mac;

public final class zzazj implements zzauk {
  private Mac zzdoj;
  
  private final int zzdok;
  
  private final String zzdol;
  
  private final Key zzdom;
  
  public zzazj(String paramString, Key paramKey, int paramInt) throws GeneralSecurityException {
    if (paramInt >= 10) {
      byte b = -1;
      int i = paramString.hashCode();
      if (i != -1823053428) {
        if (i != 392315118) {
          if (i == 392317873 && paramString.equals("HMACSHA512"))
            b = 2; 
        } else if (paramString.equals("HMACSHA256")) {
          b = 1;
        } 
      } else if (paramString.equals("HMACSHA1")) {
        b = 0;
      } 
      if (b != 0) {
        if (b != 1) {
          if (b != 2) {
            paramString = String.valueOf(paramString);
            if (paramString.length() != 0) {
              paramString = "unknown Hmac algorithm: ".concat(paramString);
            } else {
              paramString = new String("unknown Hmac algorithm: ");
            } 
            throw new NoSuchAlgorithmException(paramString);
          } 
          if (paramInt > 64)
            throw new InvalidAlgorithmParameterException("tag size too big"); 
        } else if (paramInt > 32) {
          throw new InvalidAlgorithmParameterException("tag size too big");
        } 
      } else if (paramInt > 20) {
        throw new InvalidAlgorithmParameterException("tag size too big");
      } 
      this.zzdol = paramString;
      this.zzdok = paramInt;
      this.zzdom = paramKey;
      this.zzdoj = (Mac)zzayy.zzdoa.zzek(paramString);
      this.zzdoj.init(paramKey);
      return;
    } 
    throw new InvalidAlgorithmParameterException("tag size too small, need at least 10 bytes");
  }
  
  public final byte[] zzg(byte[] paramArrayOfByte) throws GeneralSecurityException {
    Mac mac;
    try {
      mac = (Mac)this.zzdoj.clone();
    } catch (CloneNotSupportedException cloneNotSupportedException) {
      mac = (Mac)zzayy.zzdoa.zzek(this.zzdol);
      mac.init(this.zzdom);
    } 
    mac.update(paramArrayOfByte);
    paramArrayOfByte = new byte[this.zzdok];
    System.arraycopy(mac.doFinal(), 0, paramArrayOfByte, 0, this.zzdok);
    return paramArrayOfByte;
  }
}
