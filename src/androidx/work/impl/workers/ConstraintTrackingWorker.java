package androidx.work.impl.workers;

import android.content.Context;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.RestrictTo;
import android.support.annotation.VisibleForTesting;
import android.text.TextUtils;
import androidx.work.ListenableWorker;
import androidx.work.Logger;
import androidx.work.WorkerParameters;
import androidx.work.impl.WorkDatabase;
import androidx.work.impl.WorkManagerImpl;
import androidx.work.impl.constraints.WorkConstraintsCallback;
import androidx.work.impl.constraints.WorkConstraintsTracker;
import androidx.work.impl.model.WorkSpec;
import androidx.work.impl.utils.futures.SettableFuture;
import com.google.common.util.concurrent.ListenableFuture;
import java.util.Collections;
import java.util.List;

@RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
public class ConstraintTrackingWorker extends ListenableWorker implements WorkConstraintsCallback {
  public static final String ARGUMENT_CLASS_NAME = "androidx.work.impl.workers.ConstraintTrackingWorker.ARGUMENT_CLASS_NAME";
  
  private static final String TAG = Logger.tagWithPrefix("ConstraintTrkngWrkr");
  
  @Nullable
  private ListenableWorker mDelegate;
  
  SettableFuture<ListenableWorker.Result> mFuture;
  
  final Object mLock;
  
  private WorkerParameters mWorkerParameters;
  
  public ConstraintTrackingWorker(@NonNull Context paramContext, @NonNull WorkerParameters paramWorkerParameters) {
    super(paramContext, paramWorkerParameters);
    this.mWorkerParameters = paramWorkerParameters;
    this.mLock = new Object();
    this.mAreConstraintsUnmet = false;
    this.mFuture = SettableFuture.create();
  }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  @VisibleForTesting
  public ListenableWorker getDelegate() { return this.mDelegate; }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  @VisibleForTesting
  public WorkDatabase getWorkDatabase() { return WorkManagerImpl.getInstance().getWorkDatabase(); }
  
  public void onAllConstraintsMet(@NonNull List<String> paramList) {}
  
  public void onAllConstraintsNotMet(@NonNull List<String> paramList) {
    Logger.get().debug(TAG, String.format("Constraints changed for %s", new Object[] { paramList }), new Throwable[0]);
    synchronized (this.mLock) {
      this.mAreConstraintsUnmet = true;
      return;
    } 
  }
  
  public void onStopped() {
    super.onStopped();
    ListenableWorker listenableWorker = this.mDelegate;
    if (listenableWorker != null)
      listenableWorker.stop(); 
  }
  
  void setFutureFailed() { this.mFuture.set(ListenableWorker.Result.failure()); }
  
  void setFutureRetry() { this.mFuture.set(ListenableWorker.Result.retry()); }
  
  void setupAndRunConstraintTrackingWork() {
    String str = getInputData().getString("androidx.work.impl.workers.ConstraintTrackingWorker.ARGUMENT_CLASS_NAME");
    if (TextUtils.isEmpty(str)) {
      Logger.get().error(TAG, "No worker to delegate to.", new Throwable[0]);
      setFutureFailed();
      return;
    } 
    this.mDelegate = getWorkerFactory().createWorkerWithDefaultFallback(getApplicationContext(), str, this.mWorkerParameters);
    if (this.mDelegate == null) {
      Logger.get().debug(TAG, "No worker to delegate to.", new Throwable[0]);
      setFutureFailed();
      return;
    } 
    workSpec = getWorkDatabase().workSpecDao().getWorkSpec(getId().toString());
    if (workSpec == null) {
      setFutureFailed();
      return;
    } 
    WorkConstraintsTracker workConstraintsTracker = new WorkConstraintsTracker(getApplicationContext(), this);
    workConstraintsTracker.replace(Collections.singletonList(workSpec));
    if (workConstraintsTracker.areAllConstraintsMet(getId().toString())) {
      Logger.get().debug(TAG, String.format("Constraints met for delegate %s", new Object[] { str }), new Throwable[0]);
      try {
        ListenableFuture listenableFuture = this.mDelegate.startWork();
        listenableFuture.addListener(new Object(this, listenableFuture), getBackgroundExecutor());
        return;
      } catch (Throwable workSpec) {
        Logger.get().debug(TAG, String.format("Delegated worker %s threw exception in startWork.", new Object[] { str }), new Throwable[] { workSpec });
        synchronized (this.mLock) {
          if (this.mAreConstraintsUnmet) {
            Logger.get().debug(TAG, "Constraints were unmet, Retrying.", new Throwable[0]);
            setFutureRetry();
          } else {
            setFutureFailed();
          } 
          return;
        } 
      } 
    } 
    Logger.get().debug(TAG, String.format("Constraints not met for delegate %s. Requesting retry.", new Object[] { str }), new Throwable[0]);
    setFutureRetry();
  }
  
  @NonNull
  public ListenableFuture<ListenableWorker.Result> startWork() {
    getBackgroundExecutor().execute(new Object(this));
    return this.mFuture;
  }
}
