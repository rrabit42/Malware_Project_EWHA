package android.support.design.bottomappbar;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.animation.ValueAnimator;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.TypedArray;
import android.graphics.Paint;
import android.graphics.Rect;
import android.os.Parcelable;
import android.support.annotation.Dimension;
import android.support.annotation.MenuRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.Px;
import android.support.design.R;
import android.support.design.internal.ThemeEnforcement;
import android.support.design.resources.MaterialResources;
import android.support.design.shape.MaterialShapeDrawable;
import android.support.design.shape.ShapePathModel;
import android.support.design.widget.CoordinatorLayout;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.graphics.drawable.DrawableCompat;
import android.support.v4.view.ViewCompat;
import android.support.v7.widget.ActionMenuView;
import android.support.v7.widget.Toolbar;
import android.util.AttributeSet;
import android.view.View;
import java.util.ArrayList;
import java.util.List;

public class BottomAppBar extends Toolbar implements CoordinatorLayout.AttachedBehavior {
  private static final long ANIMATION_DURATION = 300L;
  
  public static final int FAB_ALIGNMENT_MODE_CENTER = 0;
  
  public static final int FAB_ALIGNMENT_MODE_END = 1;
  
  @Nullable
  private Animator attachAnimator;
  
  private int fabAlignmentMode;
  
  AnimatorListenerAdapter fabAnimationListener = new Object(this);
  
  private boolean fabAttached = true;
  
  private final int fabOffsetEndMode;
  
  private boolean hideOnScroll;
  
  private final MaterialShapeDrawable materialShapeDrawable;
  
  @Nullable
  private Animator menuAnimator;
  
  @Nullable
  private Animator modeAnimator;
  
  private final BottomAppBarTopEdgeTreatment topEdgeTreatment;
  
  public BottomAppBar(Context paramContext) { this(paramContext, null, 0); }
  
  public BottomAppBar(Context paramContext, @Nullable AttributeSet paramAttributeSet) { this(paramContext, paramAttributeSet, R.attr.bottomAppBarStyle); }
  
  public BottomAppBar(Context paramContext, @Nullable AttributeSet paramAttributeSet, int paramInt) {
    super(paramContext, paramAttributeSet, paramInt);
    TypedArray typedArray = ThemeEnforcement.obtainStyledAttributes(paramContext, paramAttributeSet, R.styleable.BottomAppBar, paramInt, R.style.Widget_MaterialComponents_BottomAppBar, new int[0]);
    ColorStateList colorStateList = MaterialResources.getColorStateList(paramContext, typedArray, R.styleable.BottomAppBar_backgroundTint);
    float f1 = typedArray.getDimensionPixelOffset(R.styleable.BottomAppBar_fabCradleMargin, 0);
    float f2 = typedArray.getDimensionPixelOffset(R.styleable.BottomAppBar_fabCradleRoundedCornerRadius, 0);
    float f3 = typedArray.getDimensionPixelOffset(R.styleable.BottomAppBar_fabCradleVerticalOffset, 0);
    this.fabAlignmentMode = typedArray.getInt(R.styleable.BottomAppBar_fabAlignmentMode, 0);
    this.hideOnScroll = typedArray.getBoolean(R.styleable.BottomAppBar_hideOnScroll, false);
    typedArray.recycle();
    this.fabOffsetEndMode = getResources().getDimensionPixelOffset(R.dimen.mtrl_bottomappbar_fabOffsetEndMode);
    this.topEdgeTreatment = new BottomAppBarTopEdgeTreatment(f1, f2, f3);
    ShapePathModel shapePathModel = new ShapePathModel();
    shapePathModel.setTopEdge(this.topEdgeTreatment);
    this.materialShapeDrawable = new MaterialShapeDrawable(shapePathModel);
    this.materialShapeDrawable.setShadowEnabled(true);
    this.materialShapeDrawable.setPaintStyle(Paint.Style.FILL);
    DrawableCompat.setTintList(this.materialShapeDrawable, colorStateList);
    ViewCompat.setBackground(this, this.materialShapeDrawable);
  }
  
  private void addFabAnimationListeners(@NonNull FloatingActionButton paramFloatingActionButton) {
    removeFabAnimationListeners(paramFloatingActionButton);
    paramFloatingActionButton.addOnHideAnimationListener(this.fabAnimationListener);
    paramFloatingActionButton.addOnShowAnimationListener(this.fabAnimationListener);
  }
  
  private void cancelAnimations() {
    Animator animator = this.attachAnimator;
    if (animator != null)
      animator.cancel(); 
    animator = this.menuAnimator;
    if (animator != null)
      animator.cancel(); 
    animator = this.modeAnimator;
    if (animator != null)
      animator.cancel(); 
  }
  
  private void createCradleShapeAnimation(boolean paramBoolean, List<Animator> paramList) {
    float f1;
    if (paramBoolean)
      this.topEdgeTreatment.setHorizontalOffset(getFabTranslationX()); 
    float f2 = this.materialShapeDrawable.getInterpolation();
    if (paramBoolean) {
      f1 = 1.0F;
    } else {
      f1 = 0.0F;
    } 
    ValueAnimator valueAnimator = ValueAnimator.ofFloat(new float[] { f2, f1 });
    valueAnimator.addUpdateListener(new Object(this));
    valueAnimator.setDuration(300L);
    paramList.add(valueAnimator);
  }
  
  private void createCradleTranslationAnimation(int paramInt, List<Animator> paramList) {
    if (!this.fabAttached)
      return; 
    ValueAnimator valueAnimator = ValueAnimator.ofFloat(new float[] { this.topEdgeTreatment.getHorizontalOffset(), getFabTranslationX(paramInt) });
    valueAnimator.addUpdateListener(new Object(this));
    valueAnimator.setDuration(300L);
    paramList.add(valueAnimator);
  }
  
  private void createFabTranslationXAnimation(int paramInt, List<Animator> paramList) {
    ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(findDependentFab(), "translationX", new float[] { getFabTranslationX(paramInt) });
    objectAnimator.setDuration(300L);
    paramList.add(objectAnimator);
  }
  
  private void createFabTranslationYAnimation(boolean paramBoolean, List<Animator> paramList) {
    FloatingActionButton floatingActionButton = findDependentFab();
    if (floatingActionButton == null)
      return; 
    ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(floatingActionButton, "translationY", new float[] { getFabTranslationY(paramBoolean) });
    objectAnimator.setDuration(300L);
    paramList.add(objectAnimator);
  }
  
  private void createMenuViewTranslationAnimation(int paramInt, boolean paramBoolean, List<Animator> paramList) {
    AnimatorSet animatorSet = getActionMenuView();
    if (animatorSet == null)
      return; 
    ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(animatorSet, "alpha", new float[] { 1.0F });
    if ((this.fabAttached || (paramBoolean && isVisibleFab())) && (this.fabAlignmentMode == 1 || paramInt == 1)) {
      ObjectAnimator objectAnimator1 = ObjectAnimator.ofFloat(animatorSet, "alpha", new float[] { 0.0F });
      objectAnimator1.addListener(new Object(this, animatorSet, paramInt, paramBoolean));
      animatorSet = new AnimatorSet();
      animatorSet.setDuration(150L);
      animatorSet.playSequentially(new Animator[] { objectAnimator1, objectAnimator });
      paramList.add(animatorSet);
      return;
    } 
    if (animatorSet.getAlpha() < 1.0F) {
      paramList.add(objectAnimator);
      return;
    } 
  }
  
  @Nullable
  private FloatingActionButton findDependentFab() {
    if (!(getParent() instanceof CoordinatorLayout))
      return null; 
    for (View view : ((CoordinatorLayout)getParent()).getDependents(this)) {
      if (view instanceof FloatingActionButton)
        return (FloatingActionButton)view; 
    } 
    return null;
  }
  
  @Nullable
  private ActionMenuView getActionMenuView() {
    for (byte b = 0; b < getChildCount(); b++) {
      View view = getChildAt(b);
      if (view instanceof ActionMenuView)
        return (ActionMenuView)view; 
    } 
    return null;
  }
  
  private float getFabTranslationX() { return getFabTranslationX(this.fabAlignmentMode); }
  
  private int getFabTranslationX(int paramInt) {
    int i = ViewCompat.getLayoutDirection(this);
    int j = 0;
    int k = 1;
    if (i == 1) {
      i = 1;
    } else {
      i = 0;
    } 
    if (paramInt == 1) {
      j = getMeasuredWidth() / 2;
      int m = this.fabOffsetEndMode;
      paramInt = k;
      if (i != 0)
        paramInt = -1; 
      j = (j - m) * paramInt;
    } 
    return j;
  }
  
  private float getFabTranslationY() { return getFabTranslationY(this.fabAttached); }
  
  private float getFabTranslationY(boolean paramBoolean) {
    FloatingActionButton floatingActionButton = findDependentFab();
    if (floatingActionButton == null)
      return 0.0F; 
    Rect rect = new Rect();
    floatingActionButton.getContentRect(rect);
    float f2 = rect.height();
    float f1 = f2;
    if (f2 == 0.0F)
      f1 = floatingActionButton.getMeasuredHeight(); 
    f2 = (floatingActionButton.getHeight() - rect.bottom);
    float f5 = (floatingActionButton.getHeight() - rect.height());
    float f3 = -getCradleVerticalOffset();
    float f4 = f1 / 2.0F;
    f1 = f5 - floatingActionButton.getPaddingBottom();
    f5 = -getMeasuredHeight();
    if (paramBoolean)
      f1 = f3 + f4 + f2; 
    return f5 + f1;
  }
  
  private boolean isAnimationRunning() {
    Animator animator = this.attachAnimator;
    if (animator == null || !animator.isRunning()) {
      animator = this.menuAnimator;
      if (animator == null || !animator.isRunning()) {
        animator = this.modeAnimator;
        if (animator == null || !animator.isRunning())
          return false; 
      } 
    } 
    return true;
  }
  
  private boolean isVisibleFab() {
    FloatingActionButton floatingActionButton = findDependentFab();
    return (floatingActionButton != null && floatingActionButton.isOrWillBeShown());
  }
  
  private void maybeAnimateAttachChange(boolean paramBoolean) {
    boolean bool;
    if (!ViewCompat.isLaidOut(this))
      return; 
    Animator animator = this.attachAnimator;
    if (animator != null)
      animator.cancel(); 
    ArrayList arrayList = new ArrayList();
    if (paramBoolean && isVisibleFab()) {
      bool = true;
    } else {
      bool = false;
    } 
    createCradleShapeAnimation(bool, arrayList);
    createFabTranslationYAnimation(paramBoolean, arrayList);
    AnimatorSet animatorSet = new AnimatorSet();
    animatorSet.playTogether(arrayList);
    this.attachAnimator = animatorSet;
    this.attachAnimator.addListener(new Object(this));
    this.attachAnimator.start();
  }
  
  private void maybeAnimateMenuView(int paramInt, boolean paramBoolean) {
    if (!ViewCompat.isLaidOut(this))
      return; 
    Animator animator = this.menuAnimator;
    if (animator != null)
      animator.cancel(); 
    ArrayList arrayList = new ArrayList();
    if (!isVisibleFab()) {
      paramInt = 0;
      paramBoolean = false;
    } 
    createMenuViewTranslationAnimation(paramInt, paramBoolean, arrayList);
    AnimatorSet animatorSet = new AnimatorSet();
    animatorSet.playTogether(arrayList);
    this.menuAnimator = animatorSet;
    this.menuAnimator.addListener(new Object(this));
    this.menuAnimator.start();
  }
  
  private void maybeAnimateModeChange(int paramInt) {
    if (this.fabAlignmentMode != paramInt) {
      if (!ViewCompat.isLaidOut(this))
        return; 
      Animator animator = this.modeAnimator;
      if (animator != null)
        animator.cancel(); 
      ArrayList arrayList = new ArrayList();
      createCradleTranslationAnimation(paramInt, arrayList);
      createFabTranslationXAnimation(paramInt, arrayList);
      AnimatorSet animatorSet = new AnimatorSet();
      animatorSet.playTogether(arrayList);
      this.modeAnimator = animatorSet;
      this.modeAnimator.addListener(new Object(this));
      this.modeAnimator.start();
    } 
  }
  
  private void removeFabAnimationListeners(@NonNull FloatingActionButton paramFloatingActionButton) {
    paramFloatingActionButton.removeOnHideAnimationListener(this.fabAnimationListener);
    paramFloatingActionButton.removeOnShowAnimationListener(this.fabAnimationListener);
  }
  
  private void setCutoutState() {
    float f;
    this.topEdgeTreatment.setHorizontalOffset(getFabTranslationX());
    FloatingActionButton floatingActionButton = findDependentFab();
    MaterialShapeDrawable materialShapeDrawable1 = this.materialShapeDrawable;
    if (this.fabAttached && isVisibleFab()) {
      f = 1.0F;
    } else {
      f = 0.0F;
    } 
    materialShapeDrawable1.setInterpolation(f);
    if (floatingActionButton != null) {
      floatingActionButton.setTranslationY(getFabTranslationY());
      floatingActionButton.setTranslationX(getFabTranslationX());
    } 
    ActionMenuView actionMenuView = getActionMenuView();
    if (actionMenuView != null) {
      actionMenuView.setAlpha(1.0F);
      if (!isVisibleFab()) {
        translateActionMenuView(actionMenuView, 0, false);
        return;
      } 
      translateActionMenuView(actionMenuView, this.fabAlignmentMode, this.fabAttached);
    } 
  }
  
  private void translateActionMenuView(ActionMenuView paramActionMenuView, int paramInt, boolean paramBoolean) {
    int i;
    float f;
    if (ViewCompat.getLayoutDirection(this) == 1) {
      i = 1;
    } else {
      i = 0;
    } 
    byte b = 0;
    int j;
    for (j = 0; b < getChildCount(); j = k) {
      boolean bool;
      View view = getChildAt(b);
      if (view.getLayoutParams() instanceof Toolbar.LayoutParams && (((Toolbar.LayoutParams)view.getLayoutParams()).gravity & 0x800007) == 8388611) {
        bool = true;
      } else {
        bool = false;
      } 
      int k = j;
      if (bool) {
        if (i) {
          k = view.getLeft();
        } else {
          k = view.getRight();
        } 
        k = Math.max(j, k);
      } 
      b++;
    } 
    if (i) {
      i = paramActionMenuView.getRight();
    } else {
      i = paramActionMenuView.getLeft();
    } 
    if (paramInt == 1 && paramBoolean) {
      f = (j - i);
    } else {
      f = 0.0F;
    } 
    paramActionMenuView.setTranslationX(f);
  }
  
  @Nullable
  public ColorStateList getBackgroundTint() { return this.materialShapeDrawable.getTintList(); }
  
  @NonNull
  public CoordinatorLayout.Behavior<BottomAppBar> getBehavior() { return new Behavior(); }
  
  @Dimension
  public float getCradleVerticalOffset() { return this.topEdgeTreatment.getCradleVerticalOffset(); }
  
  public int getFabAlignmentMode() { return this.fabAlignmentMode; }
  
  public float getFabCradleMargin() { return this.topEdgeTreatment.getFabCradleMargin(); }
  
  @Dimension
  public float getFabCradleRoundedCornerRadius() { return this.topEdgeTreatment.getFabCradleRoundedCornerRadius(); }
  
  public boolean getHideOnScroll() { return this.hideOnScroll; }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    cancelAnimations();
    setCutoutState();
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable) {
    if (!(paramParcelable instanceof SavedState)) {
      super.onRestoreInstanceState(paramParcelable);
      return;
    } 
    SavedState savedState = (SavedState)paramParcelable;
    super.onRestoreInstanceState(savedState.getSuperState());
    this.fabAlignmentMode = savedState.fabAlignmentMode;
    this.fabAttached = savedState.fabAttached;
  }
  
  protected Parcelable onSaveInstanceState() {
    SavedState savedState = new SavedState(super.onSaveInstanceState());
    savedState.fabAlignmentMode = this.fabAlignmentMode;
    savedState.fabAttached = this.fabAttached;
    return savedState;
  }
  
  public void replaceMenu(@MenuRes int paramInt) {
    getMenu().clear();
    inflateMenu(paramInt);
  }
  
  public void setBackgroundTint(@Nullable ColorStateList paramColorStateList) { DrawableCompat.setTintList(this.materialShapeDrawable, paramColorStateList); }
  
  public void setCradleVerticalOffset(@Dimension float paramFloat) {
    if (paramFloat != getCradleVerticalOffset()) {
      this.topEdgeTreatment.setCradleVerticalOffset(paramFloat);
      this.materialShapeDrawable.invalidateSelf();
    } 
  }
  
  public void setFabAlignmentMode(int paramInt) {
    maybeAnimateModeChange(paramInt);
    maybeAnimateMenuView(paramInt, this.fabAttached);
    this.fabAlignmentMode = paramInt;
  }
  
  public void setFabCradleMargin(@Dimension float paramFloat) {
    if (paramFloat != getFabCradleMargin()) {
      this.topEdgeTreatment.setFabCradleMargin(paramFloat);
      this.materialShapeDrawable.invalidateSelf();
    } 
  }
  
  public void setFabCradleRoundedCornerRadius(@Dimension float paramFloat) {
    if (paramFloat != getFabCradleRoundedCornerRadius()) {
      this.topEdgeTreatment.setFabCradleRoundedCornerRadius(paramFloat);
      this.materialShapeDrawable.invalidateSelf();
    } 
  }
  
  void setFabDiameter(@Px int paramInt) {
    float f = paramInt;
    if (f != this.topEdgeTreatment.getFabDiameter()) {
      this.topEdgeTreatment.setFabDiameter(f);
      this.materialShapeDrawable.invalidateSelf();
    } 
  }
  
  public void setHideOnScroll(boolean paramBoolean) { this.hideOnScroll = paramBoolean; }
  
  public void setSubtitle(CharSequence paramCharSequence) {}
  
  public void setTitle(CharSequence paramCharSequence) {}
}
