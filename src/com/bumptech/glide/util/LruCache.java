package com.bumptech.glide.util;

import java.util.LinkedHashMap;
import java.util.Map;

public class LruCache<T, Y> extends Object {
  private final LinkedHashMap<T, Y> cache = new LinkedHashMap(100, 0.75F, true);
  
  private int currentSize = 0;
  
  private final int initialMaxSize;
  
  private int maxSize;
  
  public LruCache(int paramInt) {
    this.initialMaxSize = paramInt;
    this.maxSize = paramInt;
  }
  
  private void evict() { trimToSize(this.maxSize); }
  
  public void clearMemory() { trimToSize(0); }
  
  public boolean contains(T paramT) { return this.cache.containsKey(paramT); }
  
  public Y get(T paramT) { return (Y)this.cache.get(paramT); }
  
  public int getCurrentSize() { return this.currentSize; }
  
  public int getMaxSize() { return this.maxSize; }
  
  protected int getSize(Y paramY) { return 1; }
  
  protected void onItemEvicted(T paramT, Y paramY) {}
  
  public Y put(T paramT, Y paramY) {
    if (getSize(paramY) >= this.maxSize) {
      onItemEvicted(paramT, paramY);
      return null;
    } 
    paramT = (T)this.cache.put(paramT, paramY);
    if (paramY != null)
      this.currentSize += getSize(paramY); 
    if (paramT != null)
      this.currentSize -= getSize(paramT); 
    evict();
    return (Y)paramT;
  }
  
  public Y remove(T paramT) {
    paramT = (T)this.cache.remove(paramT);
    if (paramT != null)
      this.currentSize -= getSize(paramT); 
    return (Y)paramT;
  }
  
  public void setSizeMultiplier(float paramFloat) {
    if (paramFloat >= 0.0F) {
      this.maxSize = Math.round(this.initialMaxSize * paramFloat);
      evict();
      return;
    } 
    throw new IllegalArgumentException("Multiplier must be >= 0");
  }
  
  protected void trimToSize(int paramInt) {
    while (this.currentSize > paramInt) {
      Map.Entry entry = (Map.Entry)this.cache.entrySet().iterator().next();
      Object object1 = entry.getValue();
      this.currentSize -= getSize(object1);
      Object object2 = entry.getKey();
      this.cache.remove(object2);
      onItemEvicted(object2, object1);
    } 
  }
}
