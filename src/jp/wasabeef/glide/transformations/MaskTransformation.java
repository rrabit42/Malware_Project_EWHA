package jp.wasabeef.glide.transformations;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
import android.graphics.drawable.Drawable;
import com.bumptech.glide.Glide;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.resource.bitmap.BitmapResource;
import jp.wasabeef.glide.transformations.internal.Utils;

public class MaskTransformation extends Object implements Transformation<Bitmap> {
  private static Paint sMaskingPaint = new Paint();
  
  private BitmapPool mBitmapPool;
  
  private Context mContext;
  
  private int mMaskId;
  
  static  {
    sMaskingPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
  }
  
  public MaskTransformation(Context paramContext, int paramInt) { this(paramContext, Glide.get(paramContext).getBitmapPool(), paramInt); }
  
  public MaskTransformation(Context paramContext, BitmapPool paramBitmapPool, int paramInt) {
    this.mBitmapPool = paramBitmapPool;
    this.mContext = paramContext.getApplicationContext();
    this.mMaskId = paramInt;
  }
  
  public String getId() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("MaskTransformation(maskId=");
    stringBuilder.append(this.mContext.getResources().getResourceEntryName(this.mMaskId));
    stringBuilder.append(")");
    return stringBuilder.toString();
  }
  
  public Resource<Bitmap> transform(Resource<Bitmap> paramResource, int paramInt1, int paramInt2) {
    Bitmap bitmap3 = (Bitmap)paramResource.get();
    paramInt1 = bitmap3.getWidth();
    paramInt2 = bitmap3.getHeight();
    Bitmap bitmap2 = this.mBitmapPool.get(paramInt1, paramInt2, Bitmap.Config.ARGB_8888);
    Bitmap bitmap1 = bitmap2;
    if (bitmap2 == null)
      bitmap1 = Bitmap.createBitmap(paramInt1, paramInt2, Bitmap.Config.ARGB_8888); 
    Drawable drawable = Utils.getMaskDrawable(this.mContext, this.mMaskId);
    Canvas canvas = new Canvas(bitmap1);
    drawable.setBounds(0, 0, paramInt1, paramInt2);
    drawable.draw(canvas);
    canvas.drawBitmap(bitmap3, 0.0F, 0.0F, sMaskingPaint);
    return BitmapResource.obtain(bitmap1, this.mBitmapPool);
  }
}
