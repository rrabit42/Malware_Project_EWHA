package com.android.volley.request;

import com.android.volley.NetworkResponse;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.error.AuthFailureError;
import com.android.volley.error.ParseError;
import com.android.volley.toolbox.HttpHeaderParser;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import java.io.UnsupportedEncodingException;
import java.util.Map;

public class GsonRequest<T> extends Request<T> {
  private final Class<T> clazz;
  
  private final Gson gson = new Gson();
  
  private final Map<String, String> headers;
  
  private final Response.Listener<T> listener;
  
  private final Map<String, String> params;
  
  public GsonRequest(int paramInt, String paramString, Class<T> paramClass, Map<String, String> paramMap1, Map<String, String> paramMap2, Response.Listener<T> paramListener, Response.ErrorListener paramErrorListener) {
    super(paramInt, paramString, paramErrorListener);
    this.clazz = paramClass;
    this.headers = paramMap1;
    this.params = paramMap2;
    this.listener = paramListener;
  }
  
  public GsonRequest(String paramString, Class<T> paramClass, Map<String, String> paramMap, Response.Listener<T> paramListener, Response.ErrorListener paramErrorListener) {
    super(0, paramString, paramErrorListener);
    this.clazz = paramClass;
    this.headers = paramMap;
    this.params = null;
    this.listener = paramListener;
  }
  
  protected void deliverResponse(T paramT) {
    Response.Listener listener1 = this.listener;
    if (listener1 != null)
      listener1.onResponse(paramT); 
  }
  
  public final Class<T> getClazz() { return this.clazz; }
  
  public Map<String, String> getHeaders() throws AuthFailureError {
    Map map = this.headers;
    return (map != null) ? map : super.getHeaders();
  }
  
  protected Map<String, String> getParams() throws AuthFailureError {
    Map map = this.params;
    return (map != null) ? map : super.getParams();
  }
  
  protected Response<T> parseNetworkResponse(NetworkResponse paramNetworkResponse) {
    try {
      String str = new String(paramNetworkResponse.data, HttpHeaderParser.parseCharset(paramNetworkResponse.headers));
      return Response.success(this.gson.fromJson(str, this.clazz), HttpHeaderParser.parseCacheHeaders(paramNetworkResponse));
    } catch (UnsupportedEncodingException paramNetworkResponse) {
      return Response.error(new ParseError(paramNetworkResponse));
    } catch (JsonSyntaxException paramNetworkResponse) {
      return Response.error(new ParseError(paramNetworkResponse));
    } 
  }
}
