package com.google.android.gms.internal.ads;

import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.security.GeneralSecurityException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Vector;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

final class zzbk {
  private static boolean zzhy = false;
  
  private static MessageDigest zzhz;
  
  private static final Object zzia = new Object();
  
  private static final Object zzib = new Object();
  
  static CountDownLatch zzic = new CountDownLatch(1);
  
  static String zza(zzba paramzzba, String paramString) throws GeneralSecurityException, UnsupportedEncodingException {
    zzbg zzbg;
    byte[] arrayOfByte2 = zzbfi.zzb(paramzzba);
    byte[] arrayOfByte1 = zznk.zzbay;
    if (!((Boolean)zzkb.zzik().zzd(arrayOfByte1)).booleanValue()) {
      if (zzde.zzso != null) {
        if (paramString != null) {
          arrayOfByte = paramString.getBytes();
        } else {
          arrayOfByte = new byte[0];
        } 
        byte[] arrayOfByte = zzde.zzso.zzc(arrayOfByte2, arrayOfByte);
        zzbg = new zzbg();
        zzbg.zzgv = new byte[][] { arrayOfByte };
        zzbg.zzfe = Integer.valueOf(2);
        arrayOfByte = zzbfi.zzb(zzbg);
      } else {
        throw new GeneralSecurityException();
      } 
    } else {
      Vector vector = zza(arrayOfByte2, 255);
      if (vector == null || vector.size() == 0) {
        byte[] arrayOfByte = zza(zzbfi.zzb(zzc(4096L)), zzbg, true);
        return zzbi.zza(arrayOfByte, true);
      } 
      zzbg zzbg1 = new zzbg();
      zzbg1.zzgv = new byte[vector.size()][];
      Iterator iterator = vector.iterator();
      for (byte b = 0; iterator.hasNext(); b++) {
        byte[] arrayOfByte = zza((byte[])iterator.next(), zzbg, false);
        zzbg1.zzgv[b] = arrayOfByte;
      } 
      zzbg1.zzgq = zzb(arrayOfByte2);
      arrayOfByte1 = zzbfi.zzb(zzbg1);
    } 
    return zzbi.zza(arrayOfByte1, true);
  }
  
  private static Vector<byte[]> zza(byte[] paramArrayOfByte, int paramInt) {
    if (paramArrayOfByte != null) {
      if (paramArrayOfByte.length <= 0)
        return null; 
      int i = (paramArrayOfByte.length + 255 - 1) / 255;
      Vector vector = new Vector();
      paramInt = 0;
      while (true) {
        if (paramInt < i) {
          int j = paramInt * 255;
          try {
            int k;
            if (paramArrayOfByte.length - j > 255) {
              k = j + 255;
            } else {
              k = paramArrayOfByte.length;
            } 
            vector.add(Arrays.copyOfRange(paramArrayOfByte, j, k));
            paramInt++;
            continue;
          } catch (IndexOutOfBoundsException paramArrayOfByte) {
            return null;
          } 
        } 
        return vector;
      } 
    } 
    return null;
  }
  
  private static byte[] zza(byte[] paramArrayOfByte, String paramString, boolean paramBoolean) throws NoSuchAlgorithmException, UnsupportedEncodingException {
    ByteBuffer byteBuffer;
    if (paramBoolean) {
      i = 239;
    } else {
      i = 255;
    } 
    byte[] arrayOfByte2 = paramArrayOfByte;
    if (paramArrayOfByte.length > i)
      arrayOfByte2 = zzbfi.zzb(zzc(4096L)); 
    if (arrayOfByte2.length < i) {
      paramArrayOfByte = new byte[i - arrayOfByte2.length];
      (new SecureRandom()).nextBytes(paramArrayOfByte);
      byteBuffer = ByteBuffer.allocate(i + 1).put((byte)arrayOfByte2.length).put(arrayOfByte2).put(paramArrayOfByte);
    } else {
      byteBuffer = ByteBuffer.allocate(i + 1).put((byte)arrayOfByte2.length).put(arrayOfByte2);
    } 
    arrayOfByte2 = byteBuffer.array();
    byte[] arrayOfByte1 = arrayOfByte2;
    if (paramBoolean) {
      arrayOfByte1 = zzb(arrayOfByte2);
      arrayOfByte1 = ByteBuffer.allocate(256).put(arrayOfByte1).put(arrayOfByte2).array();
    } 
    arrayOfByte2 = new byte[256];
    zzbp[] arrayOfzzbp = (new zzbn()).zzpq;
    int j = arrayOfzzbp.length;
    for (int i = 0; i < j; i++)
      arrayOfzzbp[i].zza(arrayOfByte1, arrayOfByte2); 
    if (paramString != null && paramString.length() > 0) {
      String str = paramString;
      if (paramString.length() > 32)
        str = paramString.substring(0, 32); 
      (new zzazx(str.getBytes("UTF-8"))).zzn(arrayOfByte2);
    } 
    return arrayOfByte2;
  }
  
  public static byte[] zzb(byte[] paramArrayOfByte) throws NoSuchAlgorithmException {
    synchronized (zzia) {
      MessageDigest messageDigest = zzw();
      if (messageDigest != null) {
        messageDigest.reset();
        messageDigest.update(paramArrayOfByte);
        return zzhz.digest();
      } 
      throw new NoSuchAlgorithmException("Cannot compute hash");
    } 
  }
  
  private static zzba zzc(long paramLong) {
    zzba zzba = new zzba();
    zzba.zzdu = Long.valueOf(4096L);
    return zzba;
  }
  
  static void zzv() {
    synchronized (zzib) {
      if (!zzhy) {
        zzhy = true;
        (new Thread(new zzbm(null))).start();
      } 
      return;
    } 
  }
  
  private static MessageDigest zzw() {
    boolean bool;
    zzv();
    try {
      bool = zzic.await(2L, TimeUnit.SECONDS);
    } catch (InterruptedException interruptedException) {
      bool = false;
    } 
    if (!bool)
      return null; 
    MessageDigest messageDigest = zzhz;
    return (messageDigest == null) ? null : messageDigest;
  }
}
