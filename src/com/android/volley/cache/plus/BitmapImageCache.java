package com.android.volley.cache.plus;

import android.annotation.TargetApi;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.os.StatFs;
import android.support.v4.app.FragmentManager;
import android.support.v4.util.LruCache;
import com.android.volley.VolleyLog;
import com.android.volley.cache.DiskLruBasedCache;
import com.android.volley.misc.Utils;
import com.android.volley.ui.RecyclingBitmapDrawable;
import java.io.File;

public class BitmapImageCache implements ImageCache {
  private static final float DEFAULT_MEM_CACHE_PERCENT = 0.25F;
  
  private static final String TAG = "BitmapImageCache";
  
  private LruCache<String, BitmapDrawable> mMemoryCache;
  
  private BitmapImageCache(int paramInt) { init(paramInt); }
  
  public static int calculateMemCacheSize(float paramFloat) {
    if (paramFloat >= 0.05F && paramFloat <= 0.8F)
      return Math.round(paramFloat * (float)Runtime.getRuntime().maxMemory() / 1024.0F); 
    throw new IllegalArgumentException("setMemCacheSizePercent - percent must be between 0.05 and 0.8 (inclusive)");
  }
  
  @TargetApi(19)
  public static int getBitmapSize(Bitmap paramBitmap) { return Utils.hasKitKat() ? paramBitmap.getAllocationByteCount() : (Utils.hasHoneycombMR1() ? paramBitmap.getByteCount() : (paramBitmap.getRowBytes() * paramBitmap.getHeight())); }
  
  public static int getBitmapSize(BitmapDrawable paramBitmapDrawable) { return getBitmapSize(paramBitmapDrawable.getBitmap()); }
  
  public static BitmapImageCache getInstance(FragmentManager paramFragmentManager) { return getInstance(paramFragmentManager, 0.25F); }
  
  public static BitmapImageCache getInstance(FragmentManager paramFragmentManager, float paramFloat) { return getInstance(paramFragmentManager, calculateMemCacheSize(paramFloat)); }
  
  public static BitmapImageCache getInstance(FragmentManager paramFragmentManager, int paramInt) { return getInstance(paramFragmentManager, "BitmapImageCache", paramInt); }
  
  public static BitmapImageCache getInstance(FragmentManager paramFragmentManager, DiskLruBasedCache.ImageCacheParams paramImageCacheParams) {
    int i;
    if (paramImageCacheParams != null) {
      i = paramImageCacheParams.memCacheSize;
    } else {
      i = calculateMemCacheSize(0.25F);
    } 
    return getInstance(paramFragmentManager, i);
  }
  
  public static BitmapImageCache getInstance(FragmentManager paramFragmentManager, String paramString, int paramInt) {
    String str = null;
    if (paramFragmentManager != null) {
      RetainFragment retainFragment = getRetainFragment(paramFragmentManager, paramString);
      BitmapImageCache bitmapImageCache1 = (BitmapImageCache)retainFragment.getObject();
    } else {
      paramFragmentManager = null;
      paramString = str;
    } 
    BitmapImageCache bitmapImageCache = paramFragmentManager;
    if (paramFragmentManager == null) {
      BitmapImageCache bitmapImageCache1 = new BitmapImageCache(paramInt);
      bitmapImageCache = bitmapImageCache1;
      if (paramString != null) {
        paramString.setObject(bitmapImageCache1);
        bitmapImageCache = bitmapImageCache1;
      } 
    } 
    return bitmapImageCache;
  }
  
  private static RetainFragment getRetainFragment(FragmentManager paramFragmentManager, String paramString) {
    RetainFragment retainFragment2 = (RetainFragment)paramFragmentManager.findFragmentByTag(paramString);
    RetainFragment retainFragment1 = retainFragment2;
    if (retainFragment2 == null) {
      retainFragment1 = new RetainFragment();
      paramFragmentManager.beginTransaction().add(retainFragment1, paramString).commitAllowingStateLoss();
    } 
    return retainFragment1;
  }
  
  @TargetApi(9)
  public static long getUsableSpace(File paramFile) {
    if (Utils.hasGingerbread())
      return paramFile.getUsableSpace(); 
    StatFs statFs = new StatFs(paramFile.getPath());
    return statFs.getBlockSize() * statFs.getAvailableBlocks();
  }
  
  private void init(int paramInt) {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Memory cache created (size = ");
    stringBuilder.append(paramInt);
    stringBuilder.append("KB)");
    VolleyLog.d("BitmapImageCache", new Object[] { stringBuilder.toString() });
    this.mMemoryCache = new Object(this, paramInt);
  }
  
  public void addBitmapToCache(String paramString, BitmapDrawable paramBitmapDrawable) {
    if (paramString != null) {
      if (paramBitmapDrawable == null)
        return; 
      synchronized (this.mMemoryCache) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("Memory cache put - ");
        stringBuilder.append(paramString);
        VolleyLog.d("BitmapImageCache", new Object[] { stringBuilder.toString() });
        if (RecyclingBitmapDrawable.class.isInstance(paramBitmapDrawable))
          ((RecyclingBitmapDrawable)paramBitmapDrawable).setIsCached(true); 
        this.mMemoryCache.put(paramString, paramBitmapDrawable);
        return;
      } 
    } 
  }
  
  public void clear() { clearCache(); }
  
  public void clearCache() {
    LruCache lruCache = this.mMemoryCache;
    if (lruCache != null) {
      lruCache.evictAll();
      VolleyLog.d("BitmapImageCache", new Object[] { "Memory cache cleared" });
    } 
  }
  
  public BitmapDrawable getBitmap(String paramString) { return getBitmapFromMemCache(paramString); }
  
  public BitmapDrawable getBitmapFromMemCache(String paramString) {
    if (paramString != null)
      synchronized (this.mMemoryCache) {
        BitmapDrawable bitmapDrawable = (BitmapDrawable)this.mMemoryCache.get(paramString);
        if (bitmapDrawable != null) {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append("Memory cache hit - ");
          stringBuilder.append(paramString);
          VolleyLog.d("BitmapImageCache", new Object[] { stringBuilder.toString() });
          return bitmapDrawable;
        } 
        null = new StringBuilder();
        null.append("Memory cache miss - ");
        null.append(paramString);
        VolleyLog.d("BitmapImageCache", new Object[] { null.toString() });
      }  
    return null;
  }
  
  public void invalidateBitmap(String paramString) {
    if (paramString == null)
      return; 
    synchronized (this.mMemoryCache) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("Memory cache remove - ");
      stringBuilder.append(paramString);
      VolleyLog.d("BitmapImageCache", new Object[] { stringBuilder.toString() });
      this.mMemoryCache.remove(paramString);
      return;
    } 
  }
  
  public void putBitmap(String paramString, BitmapDrawable paramBitmapDrawable) { addBitmapToCache(paramString, paramBitmapDrawable); }
}
