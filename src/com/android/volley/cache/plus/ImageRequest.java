package com.android.volley.cache.plus;

import android.annotation.TargetApi;
import android.content.ContentResolver;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.media.ThumbnailUtils;
import android.os.Build;
import com.android.volley.DefaultRetryPolicy;
import com.android.volley.NetworkResponse;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.error.ParseError;
import com.android.volley.misc.ImageUtils;
import com.android.volley.misc.Utils;
import com.android.volley.toolbox.HttpHeaderParser;
import com.android.volley.ui.RecyclingBitmapDrawable;
import java.io.File;
import java.io.FileNotFoundException;

public class ImageRequest extends Request<BitmapDrawable> {
  private static final float IMAGE_BACKOFF_MULT = 2.0F;
  
  private static final int IMAGE_MAX_RETRIES = 2;
  
  private static final int IMAGE_TIMEOUT_MS = 1000;
  
  private static final boolean PREFER_QUALITY_OVER_SPEED = false;
  
  private static final Object sDecodeLock = new Object();
  
  private final BitmapFactory.Options defaultOptions;
  
  private ContentResolver mContentResolver;
  
  private final Bitmap.Config mDecodeConfig;
  
  private final Response.Listener<BitmapDrawable> mListener;
  
  private final int mMaxHeight;
  
  private final int mMaxWidth;
  
  private Resources mResources;
  
  public ImageRequest(String paramString, Resources paramResources, ContentResolver paramContentResolver, Response.Listener<BitmapDrawable> paramListener, int paramInt1, int paramInt2, Bitmap.Config paramConfig, Response.ErrorListener paramErrorListener) {
    super(0, paramString, paramErrorListener);
    setRetryPolicy(new DefaultRetryPolicy(1000, 2, 2.0F));
    this.mResources = paramResources;
    this.mContentResolver = paramContentResolver;
    this.mListener = paramListener;
    this.mDecodeConfig = paramConfig;
    this.mMaxWidth = paramInt1;
    this.mMaxHeight = paramInt2;
    this.defaultOptions = getDefaultOptions();
  }
  
  private static void copyOptions(BitmapFactory.Options paramOptions1, BitmapFactory.Options paramOptions2) {
    if (Build.VERSION.SDK_INT >= 11) {
      copyOptionsHoneycomb(paramOptions1, paramOptions2);
      return;
    } 
    if (Build.VERSION.SDK_INT >= 10) {
      copyOptionsGingerbreadMr1(paramOptions1, paramOptions2);
      return;
    } 
    copyOptionsFroyo(paramOptions1, paramOptions2);
  }
  
  private static void copyOptionsFroyo(BitmapFactory.Options paramOptions1, BitmapFactory.Options paramOptions2) {
    paramOptions2.inDensity = paramOptions1.inDensity;
    paramOptions2.inDither = paramOptions1.inDither;
    paramOptions2.inInputShareable = paramOptions1.inInputShareable;
    paramOptions2.inPreferredConfig = paramOptions1.inPreferredConfig;
    paramOptions2.inPurgeable = paramOptions1.inPurgeable;
    paramOptions2.inSampleSize = paramOptions1.inSampleSize;
    paramOptions2.inScaled = paramOptions1.inScaled;
    paramOptions2.inScreenDensity = paramOptions1.inScreenDensity;
    paramOptions2.inTargetDensity = paramOptions1.inTargetDensity;
  }
  
  @TargetApi(10)
  private static void copyOptionsGingerbreadMr1(BitmapFactory.Options paramOptions1, BitmapFactory.Options paramOptions2) {
    copyOptionsFroyo(paramOptions1, paramOptions2);
    paramOptions2.inPreferQualityOverSpeed = paramOptions1.inPreferQualityOverSpeed;
  }
  
  @TargetApi(11)
  private static void copyOptionsHoneycomb(BitmapFactory.Options paramOptions1, BitmapFactory.Options paramOptions2) {
    copyOptionsGingerbreadMr1(paramOptions1, paramOptions2);
    paramOptions2.inMutable = paramOptions1.inMutable;
  }
  
  private Response<BitmapDrawable> doContentParse() { // Byte code:
    //   0: aload_0
    //   1: getfield mContentResolver : Landroid/content/ContentResolver;
    //   4: ifnonnull -> 20
    //   7: new com/android/volley/error/ParseError
    //   10: dup
    //   11: ldc 'Content Resolver instance is null'
    //   13: invokespecial <init> : (Ljava/lang/String;)V
    //   16: invokestatic error : (Lcom/android/volley/error/VolleyError;)Lcom/android/volley/Response;
    //   19: areturn
    //   20: aload_0
    //   21: invokevirtual getUrl : ()Ljava/lang/String;
    //   24: invokestatic parse : (Ljava/lang/String;)Landroid/net/Uri;
    //   27: astore #6
    //   29: new android/graphics/BitmapFactory$Options
    //   32: dup
    //   33: invokespecial <init> : ()V
    //   36: astore #5
    //   38: aload #5
    //   40: iconst_1
    //   41: putfield inInputShareable : Z
    //   44: aload #5
    //   46: iconst_1
    //   47: putfield inPurgeable : Z
    //   50: aload #5
    //   52: aload_0
    //   53: getfield mDecodeConfig : Landroid/graphics/Bitmap$Config;
    //   56: putfield inPreferredConfig : Landroid/graphics/Bitmap$Config;
    //   59: aload_0
    //   60: getfield mMaxWidth : I
    //   63: ifne -> 95
    //   66: aload_0
    //   67: getfield mMaxHeight : I
    //   70: ifne -> 95
    //   73: aload_0
    //   74: getfield mContentResolver : Landroid/content/ContentResolver;
    //   77: aload #6
    //   79: aload #5
    //   81: invokestatic decodeStream : (Landroid/content/ContentResolver;Landroid/net/Uri;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   84: astore #5
    //   86: aload_0
    //   87: ldc 'read-full-size-image-from-resource'
    //   89: invokevirtual addMarker : (Ljava/lang/String;)V
    //   92: goto -> 264
    //   95: aload #5
    //   97: iconst_1
    //   98: putfield inJustDecodeBounds : Z
    //   101: aload_0
    //   102: getfield mContentResolver : Landroid/content/ContentResolver;
    //   105: aload #6
    //   107: aload #5
    //   109: invokestatic decodeStream : (Landroid/content/ContentResolver;Landroid/net/Uri;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   112: pop
    //   113: aload #5
    //   115: getfield outWidth : I
    //   118: istore_1
    //   119: aload #5
    //   121: getfield outHeight : I
    //   124: istore_2
    //   125: aload_0
    //   126: getfield mMaxWidth : I
    //   129: aload_0
    //   130: getfield mMaxHeight : I
    //   133: iload_1
    //   134: iload_2
    //   135: invokestatic getResizedDimension : (IIII)I
    //   138: istore_3
    //   139: aload_0
    //   140: getfield mMaxHeight : I
    //   143: aload_0
    //   144: getfield mMaxWidth : I
    //   147: iload_2
    //   148: iload_1
    //   149: invokestatic getResizedDimension : (IIII)I
    //   152: istore #4
    //   154: aload #5
    //   156: iconst_0
    //   157: putfield inJustDecodeBounds : Z
    //   160: aload #5
    //   162: iload_1
    //   163: iload_2
    //   164: iload_3
    //   165: iload #4
    //   167: invokestatic findBestSampleSize : (IIII)I
    //   170: putfield inSampleSize : I
    //   173: aload_0
    //   174: getfield mContentResolver : Landroid/content/ContentResolver;
    //   177: aload #6
    //   179: aload #5
    //   181: invokestatic decodeStream : (Landroid/content/ContentResolver;Landroid/net/Uri;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   184: astore #6
    //   186: aload_0
    //   187: ldc 'read-from-resource-scaled-times-%d'
    //   189: iconst_1
    //   190: anewarray java/lang/Object
    //   193: dup
    //   194: iconst_0
    //   195: aload #5
    //   197: getfield inSampleSize : I
    //   200: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   203: aastore
    //   204: invokestatic format : (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   207: invokevirtual addMarker : (Ljava/lang/String;)V
    //   210: aload #6
    //   212: astore #5
    //   214: aload #6
    //   216: ifnull -> 264
    //   219: aload #6
    //   221: invokevirtual getWidth : ()I
    //   224: iload_3
    //   225: if_icmpgt -> 242
    //   228: aload #6
    //   230: astore #5
    //   232: aload #6
    //   234: invokevirtual getHeight : ()I
    //   237: iload #4
    //   239: if_icmple -> 264
    //   242: aload #6
    //   244: iload_3
    //   245: iload #4
    //   247: iconst_1
    //   248: invokestatic createScaledBitmap : (Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;
    //   251: astore #5
    //   253: aload #6
    //   255: invokevirtual recycle : ()V
    //   258: aload_0
    //   259: ldc 'scaling-read-from-resource-bitmap'
    //   261: invokevirtual addMarker : (Ljava/lang/String;)V
    //   264: aload #5
    //   266: ifnonnull -> 280
    //   269: new com/android/volley/error/ParseError
    //   272: dup
    //   273: invokespecial <init> : ()V
    //   276: invokestatic error : (Lcom/android/volley/error/VolleyError;)Lcom/android/volley/Response;
    //   279: areturn
    //   280: invokestatic hasHoneycomb : ()Z
    //   283: ifeq -> 304
    //   286: new android/graphics/drawable/BitmapDrawable
    //   289: dup
    //   290: aload_0
    //   291: getfield mResources : Landroid/content/res/Resources;
    //   294: aload #5
    //   296: invokespecial <init> : (Landroid/content/res/Resources;Landroid/graphics/Bitmap;)V
    //   299: astore #6
    //   301: goto -> 319
    //   304: new com/android/volley/ui/RecyclingBitmapDrawable
    //   307: dup
    //   308: aload_0
    //   309: getfield mResources : Landroid/content/res/Resources;
    //   312: aload #5
    //   314: invokespecial <init> : (Landroid/content/res/Resources;Landroid/graphics/Bitmap;)V
    //   317: astore #6
    //   319: aload #6
    //   321: aload #5
    //   323: invokestatic parseBitmapCacheHeaders : (Landroid/graphics/Bitmap;)Lcom/android/volley/Cache$Entry;
    //   326: invokestatic success : (Ljava/lang/Object;Lcom/android/volley/Cache$Entry;)Lcom/android/volley/Response;
    //   329: areturn }
  
  private Response<BitmapDrawable> doFileParse() {
    String str = getUrl();
    Bitmap bitmap = new File(str.substring(7, str.length()));
    if (!bitmap.exists() || !bitmap.isFile())
      return Response.error(new ParseError(new FileNotFoundException(String.format("File not found: %s", new Object[] { bitmap.getAbsolutePath() })))); 
    RecyclingBitmapDrawable recyclingBitmapDrawable = new BitmapFactory.Options();
    recyclingBitmapDrawable.inInputShareable = true;
    recyclingBitmapDrawable.inPurgeable = true;
    recyclingBitmapDrawable.inPreferredConfig = this.mDecodeConfig;
    if (this.mMaxWidth == 0 && this.mMaxHeight == 0) {
      bitmap = BitmapFactory.decodeFile(bitmap.getAbsolutePath(), recyclingBitmapDrawable);
      addMarker("read-full-size-image-from-file");
    } else {
      recyclingBitmapDrawable.inJustDecodeBounds = true;
      BitmapFactory.decodeFile(bitmap.getAbsolutePath(), recyclingBitmapDrawable);
      int i = recyclingBitmapDrawable.outWidth;
      int j = recyclingBitmapDrawable.outHeight;
      int k = getResizedDimension(this.mMaxWidth, this.mMaxHeight, i, j);
      int m = getResizedDimension(this.mMaxHeight, this.mMaxWidth, j, i);
      recyclingBitmapDrawable.inJustDecodeBounds = false;
      recyclingBitmapDrawable.inSampleSize = ImageUtils.findBestSampleSize(i, j, k, m);
      bitmap = BitmapFactory.decodeFile(bitmap.getAbsolutePath(), recyclingBitmapDrawable);
      addMarker(String.format("read-from-file-scaled-times-%d", new Object[] { Integer.valueOf(recyclingBitmapDrawable.inSampleSize) }));
      if (bitmap != null && (bitmap.getWidth() > k || bitmap.getHeight() > m)) {
        Bitmap bitmap1 = Bitmap.createScaledBitmap(bitmap, k, m, true);
        bitmap.recycle();
        addMarker("scaling-read-from-file-bitmap");
        bitmap = bitmap1;
      } 
    } 
    if (bitmap == null)
      return Response.error(new ParseError()); 
    if (Utils.hasHoneycomb()) {
      BitmapDrawable bitmapDrawable = new BitmapDrawable(this.mResources, bitmap);
    } else {
      recyclingBitmapDrawable = new RecyclingBitmapDrawable(this.mResources, bitmap);
    } 
    return Response.success(recyclingBitmapDrawable, HttpHeaderParser.parseBitmapCacheHeaders(bitmap));
  }
  
  @TargetApi(10)
  private Response<BitmapDrawable> doParse(NetworkResponse paramNetworkResponse) { // Byte code:
    //   0: aload_1
    //   1: getfield data : [B
    //   4: astore #6
    //   6: new android/graphics/BitmapFactory$Options
    //   9: dup
    //   10: invokespecial <init> : ()V
    //   13: astore #7
    //   15: aload #7
    //   17: iconst_1
    //   18: putfield inInputShareable : Z
    //   21: aload #7
    //   23: iconst_1
    //   24: putfield inPurgeable : Z
    //   27: aload #7
    //   29: aload_0
    //   30: getfield mDecodeConfig : Landroid/graphics/Bitmap$Config;
    //   33: putfield inPreferredConfig : Landroid/graphics/Bitmap$Config;
    //   36: aload_0
    //   37: getfield mMaxWidth : I
    //   40: ifne -> 66
    //   43: aload_0
    //   44: getfield mMaxHeight : I
    //   47: ifne -> 66
    //   50: aload #6
    //   52: iconst_0
    //   53: aload #6
    //   55: arraylength
    //   56: aload #7
    //   58: invokestatic decodeByteArray : ([BIILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   61: astore #6
    //   63: goto -> 221
    //   66: aload #7
    //   68: iconst_1
    //   69: putfield inJustDecodeBounds : Z
    //   72: aload #6
    //   74: iconst_0
    //   75: aload #6
    //   77: arraylength
    //   78: aload #7
    //   80: invokestatic decodeByteArray : ([BIILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   83: pop
    //   84: aload #7
    //   86: getfield outWidth : I
    //   89: istore_2
    //   90: aload #7
    //   92: getfield outHeight : I
    //   95: istore_3
    //   96: aload_0
    //   97: getfield mMaxWidth : I
    //   100: aload_0
    //   101: getfield mMaxHeight : I
    //   104: iload_2
    //   105: iload_3
    //   106: invokestatic getResizedDimension : (IIII)I
    //   109: istore #4
    //   111: aload_0
    //   112: getfield mMaxHeight : I
    //   115: aload_0
    //   116: getfield mMaxWidth : I
    //   119: iload_3
    //   120: iload_2
    //   121: invokestatic getResizedDimension : (IIII)I
    //   124: istore #5
    //   126: aload #7
    //   128: iconst_0
    //   129: putfield inJustDecodeBounds : Z
    //   132: invokestatic hasGingerbreadMR1 : ()Z
    //   135: ifeq -> 144
    //   138: aload #7
    //   140: iconst_0
    //   141: putfield inPreferQualityOverSpeed : Z
    //   144: aload #7
    //   146: iload_2
    //   147: iload_3
    //   148: iload #4
    //   150: iload #5
    //   152: invokestatic findBestSampleSize : (IIII)I
    //   155: putfield inSampleSize : I
    //   158: aload #6
    //   160: iconst_0
    //   161: aload #6
    //   163: arraylength
    //   164: aload #7
    //   166: invokestatic decodeByteArray : ([BIILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   169: astore #7
    //   171: aload #7
    //   173: astore #6
    //   175: aload #7
    //   177: ifnull -> 221
    //   180: aload #7
    //   182: invokevirtual getWidth : ()I
    //   185: iload #4
    //   187: if_icmpgt -> 204
    //   190: aload #7
    //   192: astore #6
    //   194: aload #7
    //   196: invokevirtual getHeight : ()I
    //   199: iload #5
    //   201: if_icmple -> 221
    //   204: aload #7
    //   206: iload #4
    //   208: iload #5
    //   210: iconst_1
    //   211: invokestatic createScaledBitmap : (Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;
    //   214: astore #6
    //   216: aload #7
    //   218: invokevirtual recycle : ()V
    //   221: aload #6
    //   223: ifnonnull -> 238
    //   226: new com/android/volley/error/ParseError
    //   229: dup
    //   230: aload_1
    //   231: invokespecial <init> : (Lcom/android/volley/NetworkResponse;)V
    //   234: invokestatic error : (Lcom/android/volley/error/VolleyError;)Lcom/android/volley/Response;
    //   237: areturn
    //   238: invokestatic hasHoneycomb : ()Z
    //   241: ifeq -> 262
    //   244: new android/graphics/drawable/BitmapDrawable
    //   247: dup
    //   248: aload_0
    //   249: getfield mResources : Landroid/content/res/Resources;
    //   252: aload #6
    //   254: invokespecial <init> : (Landroid/content/res/Resources;Landroid/graphics/Bitmap;)V
    //   257: astore #6
    //   259: goto -> 277
    //   262: new com/android/volley/ui/RecyclingBitmapDrawable
    //   265: dup
    //   266: aload_0
    //   267: getfield mResources : Landroid/content/res/Resources;
    //   270: aload #6
    //   272: invokespecial <init> : (Landroid/content/res/Resources;Landroid/graphics/Bitmap;)V
    //   275: astore #6
    //   277: aload #6
    //   279: aload_1
    //   280: invokestatic parseCacheHeaders : (Lcom/android/volley/NetworkResponse;)Lcom/android/volley/Cache$Entry;
    //   283: invokestatic success : (Ljava/lang/Object;Lcom/android/volley/Cache$Entry;)Lcom/android/volley/Response;
    //   286: areturn }
  
  private Response<BitmapDrawable> doResourceParse() { // Byte code:
    //   0: aload_0
    //   1: getfield mResources : Landroid/content/res/Resources;
    //   4: ifnonnull -> 18
    //   7: new com/android/volley/error/ParseError
    //   10: dup
    //   11: invokespecial <init> : ()V
    //   14: invokestatic error : (Lcom/android/volley/error/VolleyError;)Lcom/android/volley/Response;
    //   17: areturn
    //   18: aload_0
    //   19: invokevirtual getUrl : ()Ljava/lang/String;
    //   22: invokestatic parse : (Ljava/lang/String;)Landroid/net/Uri;
    //   25: invokevirtual getLastPathSegment : ()Ljava/lang/String;
    //   28: invokestatic valueOf : (Ljava/lang/String;)Ljava/lang/Integer;
    //   31: invokevirtual intValue : ()I
    //   34: istore_1
    //   35: new android/graphics/BitmapFactory$Options
    //   38: dup
    //   39: invokespecial <init> : ()V
    //   42: astore #6
    //   44: aload #6
    //   46: iconst_1
    //   47: putfield inInputShareable : Z
    //   50: aload #6
    //   52: iconst_1
    //   53: putfield inPurgeable : Z
    //   56: aload #6
    //   58: aload_0
    //   59: getfield mDecodeConfig : Landroid/graphics/Bitmap$Config;
    //   62: putfield inPreferredConfig : Landroid/graphics/Bitmap$Config;
    //   65: aload_0
    //   66: getfield mMaxWidth : I
    //   69: ifne -> 100
    //   72: aload_0
    //   73: getfield mMaxHeight : I
    //   76: ifne -> 100
    //   79: aload_0
    //   80: getfield mResources : Landroid/content/res/Resources;
    //   83: iload_1
    //   84: aload #6
    //   86: invokestatic decodeResource : (Landroid/content/res/Resources;ILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   89: astore #6
    //   91: aload_0
    //   92: ldc 'read-full-size-image-from-resource'
    //   94: invokevirtual addMarker : (Ljava/lang/String;)V
    //   97: goto -> 271
    //   100: aload #6
    //   102: iconst_1
    //   103: putfield inJustDecodeBounds : Z
    //   106: aload_0
    //   107: getfield mResources : Landroid/content/res/Resources;
    //   110: iload_1
    //   111: aload #6
    //   113: invokestatic decodeResource : (Landroid/content/res/Resources;ILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   116: pop
    //   117: aload #6
    //   119: getfield outWidth : I
    //   122: istore_2
    //   123: aload #6
    //   125: getfield outHeight : I
    //   128: istore_3
    //   129: aload_0
    //   130: getfield mMaxWidth : I
    //   133: aload_0
    //   134: getfield mMaxHeight : I
    //   137: iload_2
    //   138: iload_3
    //   139: invokestatic getResizedDimension : (IIII)I
    //   142: istore #4
    //   144: aload_0
    //   145: getfield mMaxHeight : I
    //   148: aload_0
    //   149: getfield mMaxWidth : I
    //   152: iload_3
    //   153: iload_2
    //   154: invokestatic getResizedDimension : (IIII)I
    //   157: istore #5
    //   159: aload #6
    //   161: iconst_0
    //   162: putfield inJustDecodeBounds : Z
    //   165: aload #6
    //   167: iload_2
    //   168: iload_3
    //   169: iload #4
    //   171: iload #5
    //   173: invokestatic findBestSampleSize : (IIII)I
    //   176: putfield inSampleSize : I
    //   179: aload_0
    //   180: getfield mResources : Landroid/content/res/Resources;
    //   183: iload_1
    //   184: aload #6
    //   186: invokestatic decodeResource : (Landroid/content/res/Resources;ILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;
    //   189: astore #7
    //   191: aload_0
    //   192: ldc 'read-from-resource-scaled-times-%d'
    //   194: iconst_1
    //   195: anewarray java/lang/Object
    //   198: dup
    //   199: iconst_0
    //   200: aload #6
    //   202: getfield inSampleSize : I
    //   205: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   208: aastore
    //   209: invokestatic format : (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   212: invokevirtual addMarker : (Ljava/lang/String;)V
    //   215: aload #7
    //   217: astore #6
    //   219: aload #7
    //   221: ifnull -> 271
    //   224: aload #7
    //   226: invokevirtual getWidth : ()I
    //   229: iload #4
    //   231: if_icmpgt -> 248
    //   234: aload #7
    //   236: astore #6
    //   238: aload #7
    //   240: invokevirtual getHeight : ()I
    //   243: iload #5
    //   245: if_icmple -> 271
    //   248: aload #7
    //   250: iload #4
    //   252: iload #5
    //   254: iconst_1
    //   255: invokestatic createScaledBitmap : (Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;
    //   258: astore #6
    //   260: aload #7
    //   262: invokevirtual recycle : ()V
    //   265: aload_0
    //   266: ldc 'scaling-read-from-resource-bitmap'
    //   268: invokevirtual addMarker : (Ljava/lang/String;)V
    //   271: aload #6
    //   273: ifnonnull -> 287
    //   276: new com/android/volley/error/ParseError
    //   279: dup
    //   280: invokespecial <init> : ()V
    //   283: invokestatic error : (Lcom/android/volley/error/VolleyError;)Lcom/android/volley/Response;
    //   286: areturn
    //   287: invokestatic hasHoneycomb : ()Z
    //   290: ifeq -> 311
    //   293: new android/graphics/drawable/BitmapDrawable
    //   296: dup
    //   297: aload_0
    //   298: getfield mResources : Landroid/content/res/Resources;
    //   301: aload #6
    //   303: invokespecial <init> : (Landroid/content/res/Resources;Landroid/graphics/Bitmap;)V
    //   306: astore #7
    //   308: goto -> 326
    //   311: new com/android/volley/ui/RecyclingBitmapDrawable
    //   314: dup
    //   315: aload_0
    //   316: getfield mResources : Landroid/content/res/Resources;
    //   319: aload #6
    //   321: invokespecial <init> : (Landroid/content/res/Resources;Landroid/graphics/Bitmap;)V
    //   324: astore #7
    //   326: aload #7
    //   328: aload #6
    //   330: invokestatic parseBitmapCacheHeaders : (Landroid/graphics/Bitmap;)Lcom/android/volley/Cache$Entry;
    //   333: invokestatic success : (Ljava/lang/Object;Lcom/android/volley/Cache$Entry;)Lcom/android/volley/Response;
    //   336: areturn }
  
  private Response<BitmapDrawable> doVideoFileParse() {
    String str = getUrl();
    Bitmap bitmap = new File(str.substring(8, str.length()));
    if (!bitmap.exists() || !bitmap.isFile())
      return Response.error(new ParseError(new FileNotFoundException(String.format("File not found: %s", new Object[] { bitmap.getAbsolutePath() })))); 
    RecyclingBitmapDrawable recyclingBitmapDrawable = new BitmapFactory.Options();
    recyclingBitmapDrawable.inInputShareable = true;
    recyclingBitmapDrawable.inPurgeable = true;
    recyclingBitmapDrawable.inPreferredConfig = this.mDecodeConfig;
    if (this.mMaxWidth == 0 && this.mMaxHeight == 0) {
      bitmap = getVideoFrame(bitmap.getAbsolutePath());
      addMarker("read-full-size-image-from-file");
    } else {
      recyclingBitmapDrawable.inJustDecodeBounds = true;
      int i = recyclingBitmapDrawable.outWidth;
      int j = recyclingBitmapDrawable.outHeight;
      int k = getResizedDimension(this.mMaxWidth, this.mMaxHeight, i, j);
      int m = getResizedDimension(this.mMaxHeight, this.mMaxWidth, j, i);
      recyclingBitmapDrawable.inJustDecodeBounds = false;
      recyclingBitmapDrawable.inSampleSize = ImageUtils.findBestSampleSize(i, j, k, m);
      bitmap = getVideoFrame(bitmap.getAbsolutePath());
      addMarker(String.format("read-from-file-scaled-times-%d", new Object[] { Integer.valueOf(recyclingBitmapDrawable.inSampleSize) }));
      if (bitmap != null && (bitmap.getWidth() > k || bitmap.getHeight() > m)) {
        Bitmap bitmap1 = Bitmap.createScaledBitmap(bitmap, k, m, true);
        bitmap.recycle();
        addMarker("scaling-read-from-file-bitmap");
        bitmap = bitmap1;
      } 
    } 
    if (bitmap == null)
      return Response.error(new ParseError()); 
    if (Utils.hasHoneycomb()) {
      BitmapDrawable bitmapDrawable = new BitmapDrawable(this.mResources, bitmap);
    } else {
      recyclingBitmapDrawable = new RecyclingBitmapDrawable(this.mResources, bitmap);
    } 
    return Response.success(recyclingBitmapDrawable, HttpHeaderParser.parseBitmapCacheHeaders(bitmap));
  }
  
  @TargetApi(11)
  public static BitmapFactory.Options getDefaultOptions() {
    BitmapFactory.Options options = new BitmapFactory.Options();
    options.inDither = false;
    options.inScaled = false;
    options.inPreferredConfig = Bitmap.Config.RGB_565;
    options.inSampleSize = 1;
    if (Utils.hasHoneycomb())
      options.inMutable = true; 
    return options;
  }
  
  private BitmapFactory.Options getOptions() {
    BitmapFactory.Options options = new BitmapFactory.Options();
    copyOptions(this.defaultOptions, options);
    return options;
  }
  
  private static int getResizedDimension(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
    if (paramInt1 == 0 && paramInt2 == 0)
      return paramInt3; 
    if (paramInt1 == 0) {
      double d4 = paramInt2;
      double d5 = paramInt4;
      Double.isNaN(d4);
      Double.isNaN(d5);
      d4 /= d5;
      d5 = paramInt3;
      Double.isNaN(d5);
      return (int)(d5 * d4);
    } 
    if (paramInt2 == 0)
      return paramInt1; 
    double d1 = paramInt4;
    double d2 = paramInt3;
    Double.isNaN(d1);
    Double.isNaN(d2);
    d1 /= d2;
    d2 = paramInt1;
    Double.isNaN(d2);
    double d3 = paramInt2;
    if (d2 * d1 > d3) {
      Double.isNaN(d3);
      paramInt1 = (int)(d3 / d1);
    } 
    return paramInt1;
  }
  
  private Bitmap getVideoFrame(String paramString) { return ThumbnailUtils.createVideoThumbnail(paramString, 1); }
  
  protected void deliverResponse(BitmapDrawable paramBitmapDrawable) { this.mListener.onResponse(paramBitmapDrawable); }
  
  public Request.Priority getPriority() { return Request.Priority.LOW; }
  
  protected Response<BitmapDrawable> parseNetworkResponse(NetworkResponse paramNetworkResponse) {
    synchronized (sDecodeLock) {
      if (getUrl().startsWith("video"))
        return doVideoFileParse(); 
      if (getUrl().startsWith("file"))
        return doFileParse(); 
      if (getUrl().startsWith("android.resource"))
        return doResourceParse(); 
      if (getUrl().startsWith("content"))
        return doContentParse(); 
      return doParse(paramNetworkResponse);
    } 
  }
}
