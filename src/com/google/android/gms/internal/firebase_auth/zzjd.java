package com.google.android.gms.internal.firebase_auth;

final class zzjd extends zzja {
  private static int zza(byte[] paramArrayOfByte, int paramInt1, long paramLong, int paramInt2) {
    if (paramInt2 != 0) {
      if (paramInt2 != 1) {
        if (paramInt2 == 2)
          return zziy.zzf(paramInt1, zziw.zza(paramArrayOfByte, paramLong), zziw.zza(paramArrayOfByte, paramLong + 1L)); 
        throw new AssertionError();
      } 
      return zziy.zzu(paramInt1, zziw.zza(paramArrayOfByte, paramLong));
    } 
    return zziy.zzbf(paramInt1);
  }
  
  final int zzb(int paramInt1, byte[] paramArrayOfByte, int paramInt2, int paramInt3) { // Byte code:
    //   0: iload_3
    //   1: iload #4
    //   3: ior
    //   4: aload_2
    //   5: arraylength
    //   6: iload #4
    //   8: isub
    //   9: ior
    //   10: iflt -> 698
    //   13: iload_3
    //   14: i2l
    //   15: lstore #8
    //   17: iload #4
    //   19: i2l
    //   20: lstore #12
    //   22: iload_1
    //   23: ifeq -> 327
    //   26: lload #8
    //   28: lload #12
    //   30: lcmp
    //   31: iflt -> 36
    //   34: iload_1
    //   35: ireturn
    //   36: iload_1
    //   37: i2b
    //   38: istore #5
    //   40: iload #5
    //   42: bipush #-32
    //   44: if_icmpge -> 73
    //   47: iload #5
    //   49: bipush #-62
    //   51: if_icmplt -> 71
    //   54: lload #8
    //   56: lconst_1
    //   57: ladd
    //   58: lstore #6
    //   60: aload_2
    //   61: lload #8
    //   63: invokestatic zza : ([BJ)B
    //   66: bipush #-65
    //   68: if_icmple -> 331
    //   71: iconst_m1
    //   72: ireturn
    //   73: iload #5
    //   75: bipush #-16
    //   77: if_icmpge -> 177
    //   80: iload_1
    //   81: bipush #8
    //   83: ishr
    //   84: iconst_m1
    //   85: ixor
    //   86: i2b
    //   87: istore_3
    //   88: iload_3
    //   89: istore_1
    //   90: lload #8
    //   92: lstore #10
    //   94: iload_3
    //   95: ifne -> 126
    //   98: lload #8
    //   100: lconst_1
    //   101: ladd
    //   102: lstore #10
    //   104: aload_2
    //   105: lload #8
    //   107: invokestatic zza : ([BJ)B
    //   110: istore_1
    //   111: lload #10
    //   113: lload #12
    //   115: lcmp
    //   116: iflt -> 126
    //   119: iload #5
    //   121: iload_1
    //   122: invokestatic zzu : (II)I
    //   125: ireturn
    //   126: iload_1
    //   127: bipush #-65
    //   129: if_icmpgt -> 175
    //   132: iload #5
    //   134: bipush #-32
    //   136: if_icmpne -> 145
    //   139: iload_1
    //   140: bipush #-96
    //   142: if_icmplt -> 175
    //   145: iload #5
    //   147: bipush #-19
    //   149: if_icmpne -> 158
    //   152: iload_1
    //   153: bipush #-96
    //   155: if_icmpge -> 175
    //   158: lload #10
    //   160: lconst_1
    //   161: ladd
    //   162: lstore #6
    //   164: aload_2
    //   165: lload #10
    //   167: invokestatic zza : ([BJ)B
    //   170: bipush #-65
    //   172: if_icmple -> 331
    //   175: iconst_m1
    //   176: ireturn
    //   177: iload_1
    //   178: bipush #8
    //   180: ishr
    //   181: iconst_m1
    //   182: ixor
    //   183: i2b
    //   184: istore_3
    //   185: iload_3
    //   186: ifne -> 226
    //   189: lload #8
    //   191: lconst_1
    //   192: ladd
    //   193: lstore #6
    //   195: aload_2
    //   196: lload #8
    //   198: invokestatic zza : ([BJ)B
    //   201: istore_3
    //   202: lload #6
    //   204: lload #12
    //   206: lcmp
    //   207: iflt -> 217
    //   210: iload #5
    //   212: iload_3
    //   213: invokestatic zzu : (II)I
    //   216: ireturn
    //   217: lload #6
    //   219: lstore #8
    //   221: iconst_0
    //   222: istore_1
    //   223: goto -> 232
    //   226: iload_1
    //   227: bipush #16
    //   229: ishr
    //   230: i2b
    //   231: istore_1
    //   232: iload_1
    //   233: istore #4
    //   235: lload #8
    //   237: lstore #6
    //   239: iload_1
    //   240: ifne -> 274
    //   243: lload #8
    //   245: lconst_1
    //   246: ladd
    //   247: lstore #6
    //   249: aload_2
    //   250: lload #8
    //   252: invokestatic zza : ([BJ)B
    //   255: istore #4
    //   257: lload #6
    //   259: lload #12
    //   261: lcmp
    //   262: iflt -> 274
    //   265: iload #5
    //   267: iload_3
    //   268: iload #4
    //   270: invokestatic zzf : (III)I
    //   273: ireturn
    //   274: iload_3
    //   275: bipush #-65
    //   277: if_icmpgt -> 325
    //   280: iload #5
    //   282: bipush #28
    //   284: ishl
    //   285: iload_3
    //   286: bipush #112
    //   288: iadd
    //   289: iadd
    //   290: bipush #30
    //   292: ishr
    //   293: ifne -> 325
    //   296: iload #4
    //   298: bipush #-65
    //   300: if_icmpgt -> 325
    //   303: aload_2
    //   304: lload #6
    //   306: invokestatic zza : ([BJ)B
    //   309: bipush #-65
    //   311: if_icmple -> 316
    //   314: iconst_m1
    //   315: ireturn
    //   316: lload #6
    //   318: lconst_1
    //   319: ladd
    //   320: lstore #6
    //   322: goto -> 331
    //   325: iconst_m1
    //   326: ireturn
    //   327: lload #8
    //   329: lstore #6
    //   331: lload #12
    //   333: lload #6
    //   335: lsub
    //   336: l2i
    //   337: istore_3
    //   338: iload_3
    //   339: bipush #16
    //   341: if_icmpge -> 349
    //   344: iconst_0
    //   345: istore_1
    //   346: goto -> 387
    //   349: lload #6
    //   351: lstore #8
    //   353: iconst_0
    //   354: istore_1
    //   355: iload_1
    //   356: iload_3
    //   357: if_icmpge -> 385
    //   360: aload_2
    //   361: lload #8
    //   363: invokestatic zza : ([BJ)B
    //   366: ifge -> 372
    //   369: goto -> 387
    //   372: iload_1
    //   373: iconst_1
    //   374: iadd
    //   375: istore_1
    //   376: lload #8
    //   378: lconst_1
    //   379: ladd
    //   380: lstore #8
    //   382: goto -> 355
    //   385: iload_3
    //   386: istore_1
    //   387: iload_3
    //   388: iload_1
    //   389: isub
    //   390: istore_3
    //   391: lload #6
    //   393: iload_1
    //   394: i2l
    //   395: ladd
    //   396: lstore #6
    //   398: iload_3
    //   399: istore_1
    //   400: iconst_0
    //   401: istore_3
    //   402: iload_1
    //   403: istore #4
    //   405: iload #4
    //   407: ifle -> 446
    //   410: lload #6
    //   412: lconst_1
    //   413: ladd
    //   414: lstore #8
    //   416: aload_2
    //   417: lload #6
    //   419: invokestatic zza : ([BJ)B
    //   422: istore_3
    //   423: iload_3
    //   424: istore_1
    //   425: lload #8
    //   427: lstore #6
    //   429: iload_3
    //   430: iflt -> 448
    //   433: iload #4
    //   435: iconst_1
    //   436: isub
    //   437: istore #4
    //   439: lload #8
    //   441: lstore #6
    //   443: goto -> 405
    //   446: iload_3
    //   447: istore_1
    //   448: iload #4
    //   450: ifne -> 455
    //   453: iconst_0
    //   454: ireturn
    //   455: iload #4
    //   457: iconst_1
    //   458: isub
    //   459: istore_3
    //   460: iload_1
    //   461: bipush #-32
    //   463: if_icmpge -> 508
    //   466: iload_3
    //   467: ifne -> 472
    //   470: iload_1
    //   471: ireturn
    //   472: iload_3
    //   473: iconst_1
    //   474: isub
    //   475: istore_3
    //   476: iload_1
    //   477: bipush #-62
    //   479: if_icmplt -> 506
    //   482: aload_2
    //   483: lload #6
    //   485: invokestatic zza : ([BJ)B
    //   488: bipush #-65
    //   490: if_icmple -> 495
    //   493: iconst_m1
    //   494: ireturn
    //   495: lload #6
    //   497: lconst_1
    //   498: ladd
    //   499: lstore #6
    //   501: iload_3
    //   502: istore_1
    //   503: goto -> 400
    //   506: iconst_m1
    //   507: ireturn
    //   508: iload_1
    //   509: bipush #-16
    //   511: if_icmpge -> 600
    //   514: iload_3
    //   515: iconst_2
    //   516: if_icmpge -> 528
    //   519: aload_2
    //   520: iload_1
    //   521: lload #6
    //   523: iload_3
    //   524: invokestatic zza : ([BIJI)I
    //   527: ireturn
    //   528: iload_3
    //   529: iconst_2
    //   530: isub
    //   531: istore_3
    //   532: lload #6
    //   534: lconst_1
    //   535: ladd
    //   536: lstore #8
    //   538: aload_2
    //   539: lload #6
    //   541: invokestatic zza : ([BJ)B
    //   544: istore #4
    //   546: iload #4
    //   548: bipush #-65
    //   550: if_icmpgt -> 598
    //   553: iload_1
    //   554: bipush #-32
    //   556: if_icmpne -> 566
    //   559: iload #4
    //   561: bipush #-96
    //   563: if_icmplt -> 598
    //   566: iload_1
    //   567: bipush #-19
    //   569: if_icmpne -> 579
    //   572: iload #4
    //   574: bipush #-96
    //   576: if_icmpge -> 598
    //   579: lload #8
    //   581: lconst_1
    //   582: ladd
    //   583: lstore #6
    //   585: iload_3
    //   586: istore_1
    //   587: aload_2
    //   588: lload #8
    //   590: invokestatic zza : ([BJ)B
    //   593: bipush #-65
    //   595: if_icmple -> 400
    //   598: iconst_m1
    //   599: ireturn
    //   600: iload_3
    //   601: iconst_3
    //   602: if_icmpge -> 614
    //   605: aload_2
    //   606: iload_1
    //   607: lload #6
    //   609: iload_3
    //   610: invokestatic zza : ([BIJI)I
    //   613: ireturn
    //   614: iload_3
    //   615: iconst_3
    //   616: isub
    //   617: istore_3
    //   618: lload #6
    //   620: lconst_1
    //   621: ladd
    //   622: lstore #8
    //   624: aload_2
    //   625: lload #6
    //   627: invokestatic zza : ([BJ)B
    //   630: istore #4
    //   632: iload #4
    //   634: bipush #-65
    //   636: if_icmpgt -> 696
    //   639: iload_1
    //   640: bipush #28
    //   642: ishl
    //   643: iload #4
    //   645: bipush #112
    //   647: iadd
    //   648: iadd
    //   649: bipush #30
    //   651: ishr
    //   652: ifne -> 696
    //   655: lload #8
    //   657: lconst_1
    //   658: ladd
    //   659: lstore #6
    //   661: aload_2
    //   662: lload #8
    //   664: invokestatic zza : ([BJ)B
    //   667: bipush #-65
    //   669: if_icmpgt -> 696
    //   672: aload_2
    //   673: lload #6
    //   675: invokestatic zza : ([BJ)B
    //   678: bipush #-65
    //   680: if_icmple -> 685
    //   683: iconst_m1
    //   684: ireturn
    //   685: lload #6
    //   687: lconst_1
    //   688: ladd
    //   689: lstore #6
    //   691: iload_3
    //   692: istore_1
    //   693: goto -> 400
    //   696: iconst_m1
    //   697: ireturn
    //   698: new java/lang/ArrayIndexOutOfBoundsException
    //   701: dup
    //   702: ldc 'Array length=%d, index=%d, limit=%d'
    //   704: iconst_3
    //   705: anewarray java/lang/Object
    //   708: dup
    //   709: iconst_0
    //   710: aload_2
    //   711: arraylength
    //   712: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   715: aastore
    //   716: dup
    //   717: iconst_1
    //   718: iload_3
    //   719: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   722: aastore
    //   723: dup
    //   724: iconst_2
    //   725: iload #4
    //   727: invokestatic valueOf : (I)Ljava/lang/Integer;
    //   730: aastore
    //   731: invokestatic format : (Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
    //   734: invokespecial <init> : (Ljava/lang/String;)V
    //   737: astore_2
    //   738: goto -> 743
    //   741: aload_2
    //   742: athrow
    //   743: goto -> 741 }
  
  final int zzb(CharSequence paramCharSequence, byte[] paramArrayOfByte, int paramInt1, int paramInt2) {
    long l1 = paramInt1;
    long l2 = paramInt2 + l1;
    int i = paramCharSequence.length();
    if (i <= paramInt2 && paramArrayOfByte.length - paramInt2 >= paramInt1) {
      long l3;
      paramInt2 = 0;
      while (true) {
        l3 = 1L;
        if (paramInt2 < i) {
          paramInt1 = paramCharSequence.charAt(paramInt2);
          if (paramInt1 < 128) {
            zziw.zza(paramArrayOfByte, l1, (byte)paramInt1);
            paramInt2++;
            l1 = 1L + l1;
            continue;
          } 
        } 
        break;
      } 
      paramInt1 = paramInt2;
      long l4 = l1;
      if (paramInt2 == i)
        return (int)l1; 
      while (paramInt1 < i) {
        char c1 = paramCharSequence.charAt(paramInt1);
        if (c1 < '' && l4 < l2) {
          zziw.zza(paramArrayOfByte, l4, (byte)c1);
          long l = l3;
          l1 = l4 + l3;
          l3 = l;
        } else if (c1 < 'ࠀ' && l4 <= l2 - 2L) {
          l1 = l4 + l3;
          zziw.zza(paramArrayOfByte, l4, (byte)(c1 >>> '\006' | 0x3C0));
          zziw.zza(paramArrayOfByte, l1, (byte)(c1 & 0x3F | 0x80));
          l1 += l3;
        } else if ((c1 < '?' || '?' < c1) && l4 <= l2 - 3L) {
          l1 = l4 + l3;
          zziw.zza(paramArrayOfByte, l4, (byte)(c1 >>> '\f' | 0x1E0));
          l3 = l1 + l3;
          zziw.zza(paramArrayOfByte, l1, (byte)(c1 >>> '\006' & 0x3F | 0x80));
          zziw.zza(paramArrayOfByte, l3, (byte)(c1 & 0x3F | 0x80));
          l1 = l3 + 1L;
          l3 = 1L;
        } else if (l4 <= l2 - 4L) {
          paramInt2 = paramInt1 + 1;
          if (paramInt2 != i) {
            char c2 = paramCharSequence.charAt(paramInt2);
            if (Character.isSurrogatePair(c1, c2)) {
              paramInt1 = Character.toCodePoint(c1, c2);
              l3 = l4 + 1L;
              zziw.zza(paramArrayOfByte, l4, (byte)(paramInt1 >>> 18 | 0xF0));
              l1 = l3 + 1L;
              zziw.zza(paramArrayOfByte, l3, (byte)(paramInt1 >>> 12 & 0x3F | 0x80));
              l4 = l1 + 1L;
              zziw.zza(paramArrayOfByte, l1, (byte)(paramInt1 >>> 6 & 0x3F | 0x80));
              l3 = 1L;
              l1 = l4 + 1L;
              zziw.zza(paramArrayOfByte, l4, (byte)(paramInt1 & 0x3F | 0x80));
              paramInt1 = paramInt2;
            } else {
              paramInt1 = paramInt2;
              throw new zzjc(paramInt1 - 1, i);
            } 
          } else {
            throw new zzjc(paramInt1 - 1, i);
          } 
        } else {
          if ('?' <= c1 && c1 <= '?') {
            paramInt2 = paramInt1 + 1;
            if (paramInt2 == i || !Character.isSurrogatePair(c1, paramCharSequence.charAt(paramInt2)))
              throw new zzjc(paramInt1, i); 
          } 
          paramCharSequence = new StringBuilder(46);
          paramCharSequence.append("Failed writing ");
          paramCharSequence.append(c1);
          paramCharSequence.append(" at index ");
          paramCharSequence.append(l4);
          throw new ArrayIndexOutOfBoundsException(paramCharSequence.toString());
        } 
        paramInt1++;
        l4 = l1;
      } 
      return (int)l4;
    } 
    char c = paramCharSequence.charAt(i - 1);
    paramCharSequence = new StringBuilder(37);
    paramCharSequence.append("Failed writing ");
    paramCharSequence.append(c);
    paramCharSequence.append(" at index ");
    paramCharSequence.append(paramInt1 + paramInt2);
    ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException = new ArrayIndexOutOfBoundsException(paramCharSequence.toString());
    throw arrayIndexOutOfBoundsException;
  }
  
  final String zzg(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws zzgc {
    if ((paramInt1 | paramInt2 | paramArrayOfByte.length - paramInt1 - paramInt2) >= 0) {
      int j = paramInt1 + paramInt2;
      char[] arrayOfChar = new char[paramInt2];
      paramInt2 = 0;
      while (paramInt1 < j) {
        byte b = zziw.zza(paramArrayOfByte, paramInt1);
        if (zziz.zzh(b)) {
          paramInt1++;
          zziz.zzb(b, arrayOfChar, paramInt2);
          paramInt2++;
        } 
      } 
      int i = paramInt2;
      paramInt2 = paramInt1;
      paramInt1 = i;
      while (paramInt2 < j) {
        i = paramInt2 + 1;
        byte b = zziw.zza(paramArrayOfByte, paramInt2);
        if (zziz.zzh(b)) {
          paramInt2 = paramInt1 + 1;
          zziz.zzb(b, arrayOfChar, paramInt1);
          paramInt1 = paramInt2;
          paramInt2 = i;
          while (paramInt2 < j) {
            b = zziw.zza(paramArrayOfByte, paramInt2);
            if (zziz.zzh(b)) {
              paramInt2++;
              zziz.zzb(b, arrayOfChar, paramInt1);
              paramInt1++;
            } 
          } 
          continue;
        } 
        if (zziz.zzi(b)) {
          if (i < j) {
            zziz.zzb(b, zziw.zza(paramArrayOfByte, i), arrayOfChar, paramInt1);
            paramInt2 = i + 1;
            paramInt1++;
            continue;
          } 
          throw zzgc.zzhy();
        } 
        if (zziz.zzj(b)) {
          if (i < j - 1) {
            paramInt2 = i + 1;
            zziz.zzb(b, zziw.zza(paramArrayOfByte, i), zziw.zza(paramArrayOfByte, paramInt2), arrayOfChar, paramInt1);
            paramInt2++;
            paramInt1++;
            continue;
          } 
          throw zzgc.zzhy();
        } 
        if (i < j - 2) {
          paramInt2 = i + 1;
          byte b1 = zziw.zza(paramArrayOfByte, i);
          i = paramInt2 + 1;
          zziz.zzb(b, b1, zziw.zza(paramArrayOfByte, paramInt2), zziw.zza(paramArrayOfByte, i), arrayOfChar, paramInt1);
          paramInt2 = i + 1;
          paramInt1 = paramInt1 + 1 + 1;
          continue;
        } 
        throw zzgc.zzhy();
      } 
      return new String(arrayOfChar, 0, paramInt1);
    } 
    ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException = new ArrayIndexOutOfBoundsException(String.format("buffer length=%d, index=%d, size=%d", new Object[] { Integer.valueOf(paramArrayOfByte.length), Integer.valueOf(paramInt1), Integer.valueOf(paramInt2) }));
    throw arrayIndexOutOfBoundsException;
  }
}
