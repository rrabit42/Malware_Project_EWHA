package com.bumptech.glide.util;

import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;

public class MarkEnforcingInputStream extends FilterInputStream {
  private static final int END_OF_STREAM = -1;
  
  private static final int UNSET = -2147483648;
  
  private int availableBytes = Integer.MIN_VALUE;
  
  public MarkEnforcingInputStream(InputStream paramInputStream) { super(paramInputStream); }
  
  private long getBytesToRead(long paramLong) {
    int i = this.availableBytes;
    if (i == 0)
      return -1L; 
    long l = paramLong;
    if (i != Integer.MIN_VALUE) {
      l = paramLong;
      if (paramLong > i)
        l = i; 
    } 
    return l;
  }
  
  private void updateAvailableBytesAfterRead(long paramLong) {
    int i = this.availableBytes;
    if (i != Integer.MIN_VALUE && paramLong != -1L)
      this.availableBytes = (int)(i - paramLong); 
  }
  
  public int available() throws IOException {
    int i = this.availableBytes;
    return (i == Integer.MIN_VALUE) ? super.available() : Math.min(i, super.available());
  }
  
  public void mark(int paramInt) {
    super.mark(paramInt);
    this.availableBytes = paramInt;
  }
  
  public int read() throws IOException {
    if (getBytesToRead(1L) == -1L)
      return -1; 
    int i = super.read();
    updateAvailableBytesAfterRead(1L);
    return i;
  }
  
  public int read(byte[] paramArrayOfByte, int paramInt1, int paramInt2) throws IOException {
    paramInt2 = (int)getBytesToRead(paramInt2);
    if (paramInt2 == -1)
      return -1; 
    paramInt1 = super.read(paramArrayOfByte, paramInt1, paramInt2);
    updateAvailableBytesAfterRead(paramInt1);
    return paramInt1;
  }
  
  public void reset() throws IOException {
    super.reset();
    this.availableBytes = Integer.MIN_VALUE;
  }
  
  public long skip(long paramLong) {
    paramLong = getBytesToRead(paramLong);
    if (paramLong == -1L)
      return -1L; 
    paramLong = super.skip(paramLong);
    updateAvailableBytesAfterRead(paramLong);
    return paramLong;
  }
}
