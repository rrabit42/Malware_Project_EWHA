package com.google.firebase.auth.internal;

import android.content.Context;
import android.content.SharedPreferences;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.logging.Logger;
import com.google.android.gms.internal.firebase_auth.zzaf;
import com.google.android.gms.internal.firebase_auth.zzcz;
import com.google.firebase.FirebaseApp;
import com.google.firebase.auth.FirebaseUser;
import java.util.ArrayList;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public final class zzad {
  private Logger zzgg;
  
  private Context zzjx;
  
  private String zzrw;
  
  private SharedPreferences zzrx;
  
  public zzad(@NonNull Context paramContext, @NonNull String paramString) {
    Preconditions.checkNotNull(paramContext);
    this.zzrw = Preconditions.checkNotEmpty(paramString);
    this.zzjx = paramContext.getApplicationContext();
    String str = String.format("com.google.firebase.auth.api.Store.%s", new Object[] { this.zzrw });
    this.zzrx = this.zzjx.getSharedPreferences(str, 0);
    this.zzgg = new Logger("StorageHelpers", new String[0]);
  }
  
  private final zzl zzc(@NonNull JSONObject paramJSONObject) {
    try {
      String str3 = paramJSONObject.getString("cachedTokenState");
      String str4 = paramJSONObject.getString("applicationName");
      boolean bool = paramJSONObject.getBoolean("anonymous");
      String str1 = "2";
      String str2 = paramJSONObject.getString("version");
      if (str2 != null)
        str1 = str2; 
      JSONArray jSONArray = paramJSONObject.getJSONArray("userInfos");
      int i = jSONArray.length();
      ArrayList arrayList = new ArrayList(i);
      for (byte b = 0; b < i; b++)
        arrayList.add(zzh.zzcs(jSONArray.getString(b))); 
      zzl zzl = new zzl(FirebaseApp.getInstance(str4), arrayList);
      if (!TextUtils.isEmpty(str3))
        zzl.zza(zzcz.zzcf(str3)); 
      if (!bool)
        zzl.zzce(); 
      zzl.zzct(str1);
      if (paramJSONObject.has("userMetadata")) {
        zzn zzn = zzn.zza(paramJSONObject.getJSONObject("userMetadata"));
        if (zzn != null)
          zzl.zza(zzn); 
      } 
      return zzl;
    } catch (JSONException paramJSONObject) {
    
    } catch (ArrayIndexOutOfBoundsException paramJSONObject) {
    
    } catch (IllegalArgumentException paramJSONObject) {
    
    } catch (zzaf paramJSONObject) {}
    this.zzgg.wtf(paramJSONObject);
    return null;
  }
  
  @Nullable
  private final String zzi(@NonNull FirebaseUser paramFirebaseUser) {
    JSONObject jSONObject = new JSONObject();
    if (zzl.class.isAssignableFrom(paramFirebaseUser.getClass())) {
      zzl = (zzl)paramFirebaseUser;
      try {
        jSONObject.put("cachedTokenState", zzl.zzch());
        jSONObject.put("applicationName", zzl.zzcc().getName());
        jSONObject.put("type", "com.google.firebase.auth.internal.DefaultFirebaseUser");
        if (zzl.zzef() != null) {
          JSONArray jSONArray = new JSONArray();
          List list = zzl.zzef();
          for (byte b = 0; b < list.size(); b++)
            jSONArray.put(((zzh)list.get(b)).zzdz()); 
          jSONObject.put("userInfos", jSONArray);
        } 
        jSONObject.put("anonymous", zzl.isAnonymous());
        jSONObject.put("version", "2");
        if (zzl.getMetadata() != null)
          jSONObject.put("userMetadata", ((zzn)zzl.getMetadata()).zzeg()); 
        return jSONObject.toString();
      } catch (Exception zzl) {
        this.zzgg.wtf("Failed to turn object into JSON", zzl, new Object[0]);
        throw new zzaf(zzl);
      } 
    } 
    return null;
  }
  
  public final void clear(String paramString) { this.zzrx.edit().remove(paramString).apply(); }
  
  public final void zza(@NonNull FirebaseUser paramFirebaseUser, @NonNull zzcz paramzzcz) {
    Preconditions.checkNotNull(paramFirebaseUser);
    Preconditions.checkNotNull(paramzzcz);
    this.zzrx.edit().putString(String.format("com.google.firebase.auth.GET_TOKEN_RESPONSE.%s", new Object[] { paramFirebaseUser.getUid() }), paramzzcz.zzdz()).apply();
  }
  
  @Nullable
  public final FirebaseUser zzeo() {
    str = this.zzrx.getString("com.google.firebase.auth.FIREBASE_USER", null);
    if (TextUtils.isEmpty(str))
      return null; 
    try {
      JSONObject jSONObject = new JSONObject(str);
      return (jSONObject.has("type") && "com.google.firebase.auth.internal.DefaultFirebaseUser".equalsIgnoreCase(jSONObject.optString("type"))) ? zzc(jSONObject) : null;
    } catch (Exception str) {
      return null;
    } 
  }
  
  public final void zzg(@NonNull FirebaseUser paramFirebaseUser) {
    Preconditions.checkNotNull(paramFirebaseUser);
    String str = zzi(paramFirebaseUser);
    if (!TextUtils.isEmpty(str))
      this.zzrx.edit().putString("com.google.firebase.auth.FIREBASE_USER", str).apply(); 
  }
  
  public final zzcz zzh(@NonNull FirebaseUser paramFirebaseUser) {
    Preconditions.checkNotNull(paramFirebaseUser);
    String str = this.zzrx.getString(String.format("com.google.firebase.auth.GET_TOKEN_RESPONSE.%s", new Object[] { paramFirebaseUser.getUid() }), null);
    return (str != null) ? zzcz.zzcf(str) : null;
  }
}
