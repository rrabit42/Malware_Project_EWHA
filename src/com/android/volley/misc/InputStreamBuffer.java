package com.android.volley.misc;

import android.annotation.TargetApi;
import android.util.Log;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;

public class InputStreamBuffer {
  private static final boolean DEBUG = false;
  
  private static final int DEBUG_MAX_BUFFER_SIZE = 80;
  
  private static final String TAG = "InputStreamBuffer";
  
  private boolean mAutoAdvance;
  
  private byte[] mBuffer;
  
  private int mFilled = 0;
  
  private InputStream mInputStream;
  
  private int mOffset = 0;
  
  public InputStreamBuffer(InputStream paramInputStream, int paramInt, boolean paramBoolean) {
    this.mInputStream = paramInputStream;
    if (paramInt > 0) {
      this.mBuffer = new byte[leastPowerOf2(paramInt)];
      this.mAutoAdvance = paramBoolean;
      return;
    } 
    throw new IllegalArgumentException(String.format("Buffer size %d must be positive.", new Object[] { Integer.valueOf(paramInt) }));
  }
  
  @TargetApi(9)
  public static byte[] copyOf(byte[] paramArrayOfByte, int paramInt) {
    if (Utils.hasGingerbread())
      return Arrays.copyOf(paramArrayOfByte, paramInt); 
    byte[] arrayOfByte = new byte[paramInt];
    System.arraycopy(paramArrayOfByte, 0, arrayOfByte, 0, Math.min(paramArrayOfByte.length, paramInt));
    return arrayOfByte;
  }
  
  private boolean fill(int paramInt) {
    Trace.beginSection("fill");
    int i = this.mOffset;
    if (paramInt >= i) {
      int j = paramInt - i;
      if (this.mInputStream == null) {
        Trace.endSection();
        return false;
      } 
      int k = j + 1;
      i = j;
      if (k > this.mBuffer.length)
        if (this.mAutoAdvance) {
          advanceTo(paramInt);
          i = paramInt - this.mOffset;
        } else {
          paramInt = leastPowerOf2(k);
          Log.w("InputStreamBuffer", String.format("Increasing buffer length from %d to %d. Bad buffer size chosen, or advanceTo() not called.", new Object[] { Integer.valueOf(this.mBuffer.length), Integer.valueOf(paramInt) }));
          this.mBuffer = copyOf(this.mBuffer, paramInt);
          i = j;
        }  
      try {
        paramInt = this.mInputStream.read(this.mBuffer, this.mFilled, this.mBuffer.length - this.mFilled);
      } catch (IOException iOException) {
        paramInt = -1;
      } 
      if (paramInt != -1) {
        this.mFilled += paramInt;
      } else {
        this.mInputStream = null;
      } 
      if (Log.isLoggable("InputStreamBuffer", 3))
        Log.d("InputStreamBuffer", String.format("fill %d      buffer: %s", new Object[] { Integer.valueOf(i), this })); 
      Trace.endSection();
      return (i < this.mFilled);
    } 
    Trace.endSection();
    throw new IllegalStateException(String.format("Index %d is before buffer %d", new Object[] { Integer.valueOf(paramInt), Integer.valueOf(this.mOffset) }));
  }
  
  private static int leastPowerOf2(int paramInt) {
    paramInt = --paramInt | paramInt >> 1;
    paramInt |= paramInt >> 2;
    paramInt |= paramInt >> 4;
    paramInt |= paramInt >> 8;
    return (paramInt | paramInt >> 16) + 1;
  }
  
  private void shiftToBeginning(int paramInt) {
    int j = this.mBuffer.length;
    int i = 0;
    if (paramInt < j) {
      while (true) {
        j = i + paramInt;
        if (j < this.mFilled) {
          byte[] arrayOfByte = this.mBuffer;
          arrayOfByte[i] = arrayOfByte[j];
          i++;
          continue;
        } 
        break;
      } 
      return;
    } 
    IndexOutOfBoundsException indexOutOfBoundsException = new IndexOutOfBoundsException(String.format("Index %d out of bounds. Length %d", new Object[] { Integer.valueOf(paramInt), Integer.valueOf(this.mBuffer.length) }));
    throw indexOutOfBoundsException;
  }
  
  public void advanceTo(int paramInt) {
    Trace.beginSection("advance to");
    int j = paramInt - this.mOffset;
    if (j <= 0) {
      Trace.endSection();
      return;
    } 
    int i = this.mFilled;
    if (j < i) {
      shiftToBeginning(j);
      this.mOffset = paramInt;
      this.mFilled -= j;
    } else {
      if (this.mInputStream != null) {
        i = j - i;
        byte b = 0;
        while (true) {
          boolean bool;
          if (i > 0) {
            try {
              byte b1;
              int k;
              InputStream inputStream = this.mInputStream;
              long l1 = i;
              long l2 = inputStream.skip(l1);
              if (l2 <= 0L) {
                b1 = b + true;
                k = i;
              } else {
                k = (int)(l1 - l2);
                b1 = b;
              } 
              i = k;
              b = b1;
              if (b1 >= 5) {
                i = k;
              } else {
                continue;
              } 
            } catch (IOException iOException) {}
            bool = true;
          } else {
            bool = false;
          } 
          if (bool)
            this.mInputStream = null; 
          this.mOffset = paramInt - i;
          this.mFilled = 0;
          if (Log.isLoggable("InputStreamBuffer", 3))
            Log.d("InputStreamBuffer", String.format("advanceTo %d buffer: %s", new Object[] { Integer.valueOf(j), this })); 
          Trace.endSection();
          return;
        } 
      } 
      this.mOffset = paramInt;
      this.mFilled = 0;
    } 
    if (Log.isLoggable("InputStreamBuffer", 3))
      Log.d("InputStreamBuffer", String.format("advanceTo %d buffer: %s", new Object[] { Integer.valueOf(j), this })); 
    Trace.endSection();
  }
  
  public byte get(int paramInt) throws IllegalStateException, IndexOutOfBoundsException {
    Trace.beginSection("get");
    if (has(paramInt)) {
      int i = this.mOffset;
      Trace.endSection();
      return this.mBuffer[paramInt - i];
    } 
    Trace.endSection();
    throw new IndexOutOfBoundsException(String.format("Index %d beyond length.", new Object[] { Integer.valueOf(paramInt) }));
  }
  
  public boolean has(int paramInt) {
    Trace.beginSection("has");
    int i = this.mOffset;
    if (paramInt >= i) {
      i = paramInt - i;
      if (i >= this.mFilled || i >= this.mBuffer.length) {
        Trace.endSection();
        return fill(paramInt);
      } 
      Trace.endSection();
      return true;
    } 
    Trace.endSection();
    throw new IllegalStateException(String.format("Index %d is before buffer %d", new Object[] { Integer.valueOf(paramInt), Integer.valueOf(this.mOffset) }));
  }
  
  public String toDebugString() {
    Trace.beginSection("to debug string");
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("+");
    stringBuilder.append(this.mOffset);
    stringBuilder.append("+");
    stringBuilder.append(this.mBuffer.length);
    stringBuilder.append(" [");
    for (byte b = 0; b < this.mBuffer.length && b < 80; b++) {
      if (b)
        stringBuilder.append(","); 
      if (b < this.mFilled) {
        stringBuilder.append(String.format("%02X", new Object[] { Byte.valueOf(this.mBuffer[b]) }));
      } else {
        stringBuilder.append("__");
      } 
    } 
    if (this.mInputStream != null)
      stringBuilder.append("..."); 
    stringBuilder.append("]");
    Trace.endSection();
    return stringBuilder.toString();
  }
  
  public String toString() { return String.format("+%d+%d [%d]", new Object[] { Integer.valueOf(this.mOffset), Integer.valueOf(this.mBuffer.length), Integer.valueOf(this.mFilled) }); }
}
