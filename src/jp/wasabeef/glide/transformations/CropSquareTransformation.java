package jp.wasabeef.glide.transformations;

import android.content.Context;
import android.graphics.Bitmap;
import com.bumptech.glide.Glide;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.resource.bitmap.BitmapResource;

public class CropSquareTransformation extends Object implements Transformation<Bitmap> {
  private BitmapPool mBitmapPool;
  
  private int mHeight;
  
  private int mWidth;
  
  public CropSquareTransformation(Context paramContext) { this(Glide.get(paramContext).getBitmapPool()); }
  
  public CropSquareTransformation(BitmapPool paramBitmapPool) { this.mBitmapPool = paramBitmapPool; }
  
  public String getId() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("CropSquareTransformation(width=");
    stringBuilder.append(this.mWidth);
    stringBuilder.append(", height=");
    stringBuilder.append(this.mHeight);
    stringBuilder.append(")");
    return stringBuilder.toString();
  }
  
  public Resource<Bitmap> transform(Resource<Bitmap> paramResource, int paramInt1, int paramInt2) {
    Bitmap.Config config;
    Bitmap bitmap3 = (Bitmap)paramResource.get();
    paramInt1 = Math.min(bitmap3.getWidth(), bitmap3.getHeight());
    this.mWidth = (bitmap3.getWidth() - paramInt1) / 2;
    this.mHeight = (bitmap3.getHeight() - paramInt1) / 2;
    if (bitmap3.getConfig() != null) {
      config = bitmap3.getConfig();
    } else {
      config = Bitmap.Config.ARGB_8888;
    } 
    Bitmap bitmap2 = this.mBitmapPool.get(this.mWidth, this.mHeight, config);
    Bitmap bitmap1 = bitmap2;
    if (bitmap2 == null)
      bitmap1 = Bitmap.createBitmap(bitmap3, this.mWidth, this.mHeight, paramInt1, paramInt1); 
    return BitmapResource.obtain(bitmap1, this.mBitmapPool);
  }
}
