package com.android.volley.error;

import android.content.Context;
import com.android.volley.NetworkResponse;
import com.android.volley.R;
import com.google.gson.Gson;
import java.util.HashMap;

public class VolleyErrorHelper {
  public static String getErrorType(Object paramObject, Context paramContext) { return (paramObject instanceof TimeoutError) ? paramContext.getResources().getString(R.string.generic_server_timeout) : ((paramObject instanceof ServerError) ? paramContext.getResources().getString(R.string.generic_server_down) : ((paramObject instanceof AuthFailureError) ? paramContext.getResources().getString(R.string.auth_failed) : ((paramObject instanceof NetworkError) ? paramContext.getResources().getString(R.string.no_internet) : ((paramObject instanceof NoConnectionError) ? paramContext.getResources().getString(R.string.no_network_connection) : ((paramObject instanceof ParseError) ? paramContext.getResources().getString(R.string.parsing_failed) : paramContext.getResources().getString(R.string.generic_error)))))); }
  
  public static String getMessage(Object paramObject, Context paramContext) { return (paramObject instanceof TimeoutError) ? paramContext.getResources().getString(R.string.generic_server_down) : (isServerProblem(paramObject) ? handleServerError(paramObject, paramContext) : (isNetworkProblem(paramObject) ? paramContext.getResources().getString(R.string.no_internet) : paramContext.getResources().getString(R.string.generic_error))); }
  
  private static String handleServerError(Object paramObject, Context paramContext) {
    paramObject = (VolleyError)paramObject;
    NetworkResponse networkResponse = paramObject.networkResponse;
    if (networkResponse != null) {
      int i = networkResponse.statusCode;
      if (i != 401 && i != 404 && i != 422)
        return paramContext.getResources().getString(R.string.generic_server_down); 
      try {
        HashMap hashMap = (HashMap)(new Gson()).fromJson(new String(networkResponse.data), (new Object()).getType());
        if (hashMap != null && hashMap.containsKey("error"))
          return (String)hashMap.get("error"); 
      } catch (Exception paramContext) {
        paramContext.printStackTrace();
      } 
      return paramObject.getMessage();
    } 
    return paramContext.getResources().getString(R.string.generic_error);
  }
  
  private static boolean isNetworkProblem(Object paramObject) { return (paramObject instanceof NetworkError || paramObject instanceof NoConnectionError); }
  
  private static boolean isServerProblem(Object paramObject) { return (paramObject instanceof ServerError || paramObject instanceof AuthFailureError); }
}
