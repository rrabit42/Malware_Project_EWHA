package com.google.android.gms.ads.internal;

import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.RemoteException;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import android.view.ViewGroup;
import android.webkit.WebView;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.util.VisibleForTesting;
import com.google.android.gms.dynamic.IObjectWrapper;
import com.google.android.gms.dynamic.ObjectWrapper;
import com.google.android.gms.internal.ads.zzaaw;
import com.google.android.gms.internal.ads.zzabc;
import com.google.android.gms.internal.ads.zzadh;
import com.google.android.gms.internal.ads.zzahe;
import com.google.android.gms.internal.ads.zzakb;
import com.google.android.gms.internal.ads.zzaki;
import com.google.android.gms.internal.ads.zzang;
import com.google.android.gms.internal.ads.zzci;
import com.google.android.gms.internal.ads.zzcj;
import com.google.android.gms.internal.ads.zzjj;
import com.google.android.gms.internal.ads.zzjn;
import com.google.android.gms.internal.ads.zzkb;
import com.google.android.gms.internal.ads.zzke;
import com.google.android.gms.internal.ads.zzkh;
import com.google.android.gms.internal.ads.zzkt;
import com.google.android.gms.internal.ads.zzkx;
import com.google.android.gms.internal.ads.zzla;
import com.google.android.gms.internal.ads.zzlg;
import com.google.android.gms.internal.ads.zzlo;
import com.google.android.gms.internal.ads.zzlu;
import com.google.android.gms.internal.ads.zzmu;
import com.google.android.gms.internal.ads.zzna;
import com.google.android.gms.internal.ads.zznk;
import com.google.android.gms.internal.ads.zzod;
import java.util.Map;
import java.util.concurrent.Future;
import javax.annotation.ParametersAreNonnullByDefault;

@zzadh
@ParametersAreNonnullByDefault
public final class zzbp extends zzkt {
  private final Context mContext;
  
  private final zzjn zzaau;
  
  private final Future<zzci> zzaav;
  
  private final zzbu zzaaw;
  
  @Nullable
  private WebView zzaax;
  
  @Nullable
  private zzci zzaay;
  
  private AsyncTask<Void, Void, String> zzaaz;
  
  @Nullable
  private zzkh zzxs;
  
  private final zzang zzyf;
  
  public zzbp(Context paramContext, zzjn paramzzjn, String paramString, zzang paramzzang) {
    this.mContext = paramContext;
    this.zzyf = paramzzang;
    this.zzaau = paramzzjn;
    this.zzaax = new WebView(this.mContext);
    this.zzaav = zzaki.zza(new zzbs(this));
    this.zzaaw = new zzbu(paramString);
    zzk(0);
    this.zzaax.setVerticalScrollBarEnabled(false);
    this.zzaax.getSettings().setJavaScriptEnabled(true);
    this.zzaax.setWebViewClient(new zzbq(this));
    this.zzaax.setOnTouchListener(new zzbr(this));
  }
  
  private final String zzv(String paramString) {
    if (this.zzaay == null)
      return paramString; 
    Uri uri = Uri.parse(paramString);
    try {
      Uri uri1 = this.zzaay.zza(uri, this.mContext, null, null);
      uri = uri1;
    } catch (zzcj zzcj) {
      zzakb.zzc("Unable to process ad data", zzcj);
    } 
    return uri.toString();
  }
  
  private final void zzw(String paramString) {
    Intent intent = new Intent("android.intent.action.VIEW");
    intent.setData(Uri.parse(paramString));
    this.mContext.startActivity(intent);
  }
  
  public final void destroy() throws RemoteException {
    Preconditions.checkMainThread("destroy must be called on the main UI thread.");
    this.zzaaz.cancel(true);
    this.zzaav.cancel(true);
    this.zzaax.destroy();
    this.zzaax = null;
  }
  
  public final String getAdUnitId() { throw new IllegalStateException("getAdUnitId not implemented"); }
  
  @Nullable
  public final String getMediationAdapterClassName() { return null; }
  
  @Nullable
  public final zzlo getVideoController() { return null; }
  
  public final boolean isLoading() throws RemoteException { return false; }
  
  public final boolean isReady() throws RemoteException { return false; }
  
  public final void pause() throws RemoteException { Preconditions.checkMainThread("pause must be called on the main UI thread."); }
  
  public final void resume() throws RemoteException { Preconditions.checkMainThread("resume must be called on the main UI thread."); }
  
  public final void setImmersiveMode(boolean paramBoolean) { throw new IllegalStateException("Unused method"); }
  
  public final void setManualImpressionsEnabled(boolean paramBoolean) {}
  
  public final void setUserId(String paramString) { throw new IllegalStateException("Unused method"); }
  
  public final void showInterstitial() throws RemoteException { throw new IllegalStateException("Unused method"); }
  
  public final void stopLoading() throws RemoteException {}
  
  public final void zza(zzaaw paramzzaaw) throws RemoteException { throw new IllegalStateException("Unused method"); }
  
  public final void zza(zzabc paramzzabc, String paramString) throws RemoteException { throw new IllegalStateException("Unused method"); }
  
  public final void zza(zzahe paramzzahe) throws RemoteException { throw new IllegalStateException("Unused method"); }
  
  public final void zza(zzjn paramzzjn) throws RemoteException { throw new IllegalStateException("AdSize must be set before initialization"); }
  
  public final void zza(zzke paramzzke) throws RemoteException { throw new IllegalStateException("Unused method"); }
  
  public final void zza(zzkh paramzzkh) throws RemoteException { this.zzxs = paramzzkh; }
  
  public final void zza(zzkx paramzzkx) { throw new IllegalStateException("Unused method"); }
  
  public final void zza(zzla paramzzla) throws RemoteException { throw new IllegalStateException("Unused method"); }
  
  public final void zza(zzlg paramzzlg) throws RemoteException { throw new IllegalStateException("Unused method"); }
  
  public final void zza(zzlu paramzzlu) { throw new IllegalStateException("Unused method"); }
  
  public final void zza(zzmu paramzzmu) { throw new IllegalStateException("Unused method"); }
  
  public final void zza(zzod paramzzod) throws RemoteException { throw new IllegalStateException("Unused method"); }
  
  public final boolean zzb(zzjj paramzzjj) throws RemoteException {
    Preconditions.checkNotNull(this.zzaax, "This Search Ad has already been torn down");
    this.zzaaw.zza(paramzzjj, this.zzyf);
    this.zzaaz = (new zzbt(this, null)).execute(new Void[0]);
    return true;
  }
  
  public final Bundle zzba() { throw new IllegalStateException("Unused method"); }
  
  public final IObjectWrapper zzbj() throws RemoteException {
    Preconditions.checkMainThread("getAdFrame must be called on the main UI thread.");
    return ObjectWrapper.wrap(this.zzaax);
  }
  
  public final zzjn zzbk() throws RemoteException { return this.zzaau; }
  
  public final void zzbm() throws RemoteException { throw new IllegalStateException("Unused method"); }
  
  public final zzla zzbw() { throw new IllegalStateException("getIAppEventListener not implemented"); }
  
  public final zzkh zzbx() { throw new IllegalStateException("getIAdListener not implemented"); }
  
  @Nullable
  public final String zzck() { return null; }
  
  @VisibleForTesting
  final String zzea() {
    Uri.Builder builder1 = new Uri.Builder();
    Uri.Builder builder2 = builder1.scheme("https://");
    zzna zzna = zznk.zzbcz;
    builder2.appendEncodedPath((String)zzkb.zzik().zzd(zzna));
    builder1.appendQueryParameter("query", this.zzaaw.getQuery());
    builder1.appendQueryParameter("pubId", this.zzaaw.zzed());
    Map map = this.zzaaw.zzee();
    for (String str : map.keySet())
      builder1.appendQueryParameter(str, (String)map.get(str)); 
    Uri uri2 = builder1.build();
    zzci zzci1 = this.zzaay;
    uri1 = uri2;
    if (zzci1 != null)
      try {
        uri1 = zzci1.zza(uri2, this.mContext);
      } catch (zzcj uri1) {
        zzakb.zzc("Unable to process ad data", uri1);
        uri1 = uri2;
      }  
    String str1;
    String str2;
    StringBuilder stringBuilder = new StringBuilder((str1 = uri1.getEncodedQuery()).valueOf(str2).length() + 1 + (str2 = zzeb()).valueOf(str1).length());
    stringBuilder.append(str2);
    stringBuilder.append("#");
    stringBuilder.append(str1);
    return stringBuilder.toString();
  }
  
  @VisibleForTesting
  final String zzeb() {
    String str3 = this.zzaaw.zzec();
    String str1 = str3;
    if (TextUtils.isEmpty(str3))
      str1 = "www.google.com"; 
    zzna zzna = zznk.zzbcz;
    String str2;
    StringBuilder stringBuilder = new StringBuilder((str2 = (String)zzkb.zzik().zzd(zzna)).valueOf(str1).length() + 8 + String.valueOf(str2).length());
    stringBuilder.append("https://");
    stringBuilder.append(str1);
    stringBuilder.append(str2);
    return stringBuilder.toString();
  }
  
  @VisibleForTesting
  final void zzk(int paramInt) {
    if (this.zzaax == null)
      return; 
    ViewGroup.LayoutParams layoutParams = new ViewGroup.LayoutParams(-1, paramInt);
    this.zzaax.setLayoutParams(layoutParams);
  }
  
  @VisibleForTesting
  final int zzu(String paramString) {
    paramString = Uri.parse(paramString).getQueryParameter("height");
    if (TextUtils.isEmpty(paramString))
      return 0; 
    try {
      return zzkb.zzif().zza(this.mContext, Integer.parseInt(paramString));
    } catch (NumberFormatException paramString) {
      return 0;
    } 
  }
}
