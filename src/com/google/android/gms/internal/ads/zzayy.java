package com.google.android.gms.internal.ads;

import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.Provider;
import java.security.Security;
import java.security.Signature;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.KeyAgreement;
import javax.crypto.Mac;

public final class zzayy<T_WRAPPER extends zzayz<T_ENGINE>, T_ENGINE> extends Object {
  private static final Logger logger = Logger.getLogger(zzayy.class.getName());
  
  private static final List<Provider> zzdny;
  
  public static final zzayy<zzaza, Cipher> zzdnz;
  
  public static final zzayy<zzaze, Mac> zzdoa;
  
  private static final zzayy<zzazg, Signature> zzdob;
  
  private static final zzayy<zzazf, MessageDigest> zzdoc;
  
  public static final zzayy<zzazb, KeyAgreement> zzdod;
  
  public static final zzayy<zzazd, KeyPairGenerator> zzdoe;
  
  public static final zzayy<zzazc, KeyFactory> zzdof;
  
  private T_WRAPPER zzdog;
  
  private List<Provider> zzdoh;
  
  private boolean zzdoi;
  
  static  {
    if (zzazp.zzaat()) {
      ArrayList arrayList = new ArrayList();
      for (byte b = 0; b < 2; b++) {
        new String[2][0] = "GmsCore_OpenSSL";
        new String[2][1] = "AndroidOpenSSL";
        String str = new String[2][b];
        Provider provider = Security.getProvider(str);
        if (provider != null) {
          arrayList.add(provider);
        } else {
          logger.logp(Level.INFO, "com.google.crypto.tink.subtle.EngineFactory", "toProviderList", String.format("Provider %s not available", new Object[] { str }));
        } 
      } 
      zzdny = arrayList;
    } else {
      zzdny = new ArrayList();
    } 
    zzdnz = new zzayy(new zzaza());
    zzdoa = new zzayy(new zzaze());
    zzdob = new zzayy(new zzazg());
    zzdoc = new zzayy(new zzazf());
    zzdod = new zzayy(new zzazb());
    zzdoe = new zzayy(new zzazd());
    zzdof = new zzayy(new zzazc());
  }
  
  private zzayy(T_WRAPPER paramT_WRAPPER) {
    this.zzdog = paramT_WRAPPER;
    this.zzdoh = zzdny;
    this.zzdoi = true;
  }
  
  private final boolean zza(String paramString, Provider paramProvider) {
    try {
      this.zzdog.zzb(paramString, paramProvider);
      return true;
    } catch (Exception paramString) {
      return false;
    } 
  }
  
  public final T_ENGINE zzek(String paramString) throws GeneralSecurityException {
    Iterator iterator = this.zzdoh.iterator();
    while (iterator.hasNext()) {
      Provider provider = (Provider)iterator.next();
      if (zza(paramString, provider)) {
        zzayz zzayz1 = this.zzdog;
        return (T_ENGINE)zzayz1.zzb(paramString, provider);
      } 
    } 
    if (this.zzdoi) {
      zzayz zzayz1 = this.zzdog;
      Provider provider = null;
      return (T_ENGINE)zzayz1.zzb(paramString, provider);
    } 
    GeneralSecurityException generalSecurityException = new GeneralSecurityException("No good Provider found.");
    throw generalSecurityException;
  }
}
