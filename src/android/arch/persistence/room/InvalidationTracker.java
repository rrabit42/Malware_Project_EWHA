package android.arch.persistence.room;

import android.arch.core.executor.ArchTaskExecutor;
import android.arch.core.internal.SafeIterableMap;
import android.arch.persistence.db.SupportSQLiteDatabase;
import android.arch.persistence.db.SupportSQLiteStatement;
import android.database.sqlite.SQLiteException;
import android.support.annotation.NonNull;
import android.support.annotation.RestrictTo;
import android.support.annotation.VisibleForTesting;
import android.support.annotation.WorkerThread;
import android.support.v4.util.ArrayMap;
import android.util.Log;
import java.util.Arrays;
import java.util.Locale;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.locks.Lock;

public class InvalidationTracker {
  @VisibleForTesting
  static final String CLEANUP_SQL = "DELETE FROM room_table_modification_log WHERE version NOT IN( SELECT MAX(version) FROM room_table_modification_log GROUP BY table_id)";
  
  private static final String CREATE_VERSION_TABLE_SQL = "CREATE TEMP TABLE room_table_modification_log(version INTEGER PRIMARY KEY AUTOINCREMENT, table_id INTEGER)";
  
  @VisibleForTesting
  static final String SELECT_UPDATED_TABLES_SQL = "SELECT * FROM room_table_modification_log WHERE version  > ? ORDER BY version ASC;";
  
  private static final String TABLE_ID_COLUMN_NAME = "table_id";
  
  private static final String[] TRIGGERS = { "UPDATE", "DELETE", "INSERT" };
  
  private static final String UPDATE_TABLE_NAME = "room_table_modification_log";
  
  private static final String VERSION_COLUMN_NAME = "version";
  
  private final RoomDatabase mDatabase;
  
  private long mMaxVersion = 0L;
  
  private ObservedTableTracker mObservedTableTracker;
  
  @VisibleForTesting
  final SafeIterableMap<Observer, ObserverWrapper> mObserverMap;
  
  AtomicBoolean mPendingRefresh;
  
  private Object[] mQueryArgs = new Object[1];
  
  @VisibleForTesting
  Runnable mRefreshRunnable;
  
  @NonNull
  @VisibleForTesting
  ArrayMap<String, Integer> mTableIdLookup;
  
  private String[] mTableNames;
  
  @NonNull
  @VisibleForTesting
  long[] mTableVersions;
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public InvalidationTracker(RoomDatabase paramRoomDatabase, String... paramVarArgs) {
    byte b = 0;
    this.mPendingRefresh = new AtomicBoolean(false);
    this.mInitialized = false;
    this.mObserverMap = new SafeIterableMap();
    this.mRefreshRunnable = new Object(this);
    this.mDatabase = paramRoomDatabase;
    this.mObservedTableTracker = new ObservedTableTracker(paramVarArgs.length);
    this.mTableIdLookup = new ArrayMap();
    int i = paramVarArgs.length;
    this.mTableNames = new String[i];
    while (b < i) {
      String str = paramVarArgs[b].toLowerCase(Locale.US);
      this.mTableIdLookup.put(str, Integer.valueOf(b));
      this.mTableNames[b] = str;
      b++;
    } 
    this.mTableVersions = new long[paramVarArgs.length];
    Arrays.fill(this.mTableVersions, 0L);
  }
  
  private static void appendTriggerName(StringBuilder paramStringBuilder, String paramString1, String paramString2) {
    paramStringBuilder.append("`");
    paramStringBuilder.append("room_table_modification_trigger_");
    paramStringBuilder.append(paramString1);
    paramStringBuilder.append("_");
    paramStringBuilder.append(paramString2);
    paramStringBuilder.append("`");
  }
  
  private boolean ensureInitialization() {
    if (!this.mDatabase.isOpen())
      return false; 
    if (!this.mInitialized)
      this.mDatabase.getOpenHelper().getWritableDatabase(); 
    if (!this.mInitialized) {
      Log.e("ROOM", "database is not initialized even though it is open");
      return false;
    } 
    return true;
  }
  
  private void startTrackingTable(SupportSQLiteDatabase paramSupportSQLiteDatabase, int paramInt) {
    String str = this.mTableNames[paramInt];
    StringBuilder stringBuilder = new StringBuilder();
    for (String str1 : TRIGGERS) {
      stringBuilder.setLength(0);
      stringBuilder.append("CREATE TEMP TRIGGER IF NOT EXISTS ");
      appendTriggerName(stringBuilder, str, str1);
      stringBuilder.append(" AFTER ");
      stringBuilder.append(str1);
      stringBuilder.append(" ON `");
      stringBuilder.append(str);
      stringBuilder.append("` BEGIN INSERT OR REPLACE INTO ");
      stringBuilder.append("room_table_modification_log");
      stringBuilder.append(" VALUES(null, ");
      stringBuilder.append(paramInt);
      stringBuilder.append("); END");
      paramSupportSQLiteDatabase.execSQL(stringBuilder.toString());
    } 
  }
  
  private void stopTrackingTable(SupportSQLiteDatabase paramSupportSQLiteDatabase, int paramInt) {
    String str = this.mTableNames[paramInt];
    StringBuilder stringBuilder = new StringBuilder();
    String[] arrayOfString = TRIGGERS;
    int i = arrayOfString.length;
    for (paramInt = 0; paramInt < i; paramInt++) {
      String str1 = arrayOfString[paramInt];
      stringBuilder.setLength(0);
      stringBuilder.append("DROP TRIGGER IF EXISTS ");
      appendTriggerName(stringBuilder, str, str1);
      paramSupportSQLiteDatabase.execSQL(stringBuilder.toString());
    } 
  }
  
  @WorkerThread
  public void addObserver(@NonNull Observer paramObserver) {
    String[] arrayOfString = paramObserver.mTables;
    int[] arrayOfInt = new int[arrayOfString.length];
    int i = arrayOfString.length;
    long[] arrayOfLong = new long[arrayOfString.length];
    byte b = 0;
    while (b < i) {
      Integer integer = (Integer)this.mTableIdLookup.get(arrayOfString[b].toLowerCase(Locale.US));
      if (integer != null) {
        arrayOfInt[b] = integer.intValue();
        arrayOfLong[b] = this.mMaxVersion;
        b++;
        continue;
      } 
      null = new StringBuilder();
      null.append("There is no table with name ");
      null.append(arrayOfString[b]);
      throw new IllegalArgumentException(null.toString());
    } 
    ObserverWrapper observerWrapper = new ObserverWrapper(null, arrayOfInt, arrayOfString, arrayOfLong);
    synchronized (this.mObserverMap) {
      ObserverWrapper observerWrapper1 = (ObserverWrapper)this.mObserverMap.putIfAbsent(null, observerWrapper);
      if (observerWrapper1 == null && this.mObservedTableTracker.onAdded(arrayOfInt))
        syncTriggers(); 
      return;
    } 
  }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  public void addWeakObserver(Observer paramObserver) { addObserver(new WeakObserver(this, paramObserver)); }
  
  void internalInit(SupportSQLiteDatabase paramSupportSQLiteDatabase) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield mInitialized : Z
    //   6: ifeq -> 21
    //   9: ldc 'ROOM'
    //   11: ldc_w 'Invalidation tracker is initialized twice :/.'
    //   14: invokestatic e : (Ljava/lang/String;Ljava/lang/String;)I
    //   17: pop
    //   18: aload_0
    //   19: monitorexit
    //   20: return
    //   21: aload_1
    //   22: invokeinterface beginTransaction : ()V
    //   27: aload_1
    //   28: ldc_w 'PRAGMA temp_store = MEMORY;'
    //   31: invokeinterface execSQL : (Ljava/lang/String;)V
    //   36: aload_1
    //   37: ldc_w 'PRAGMA recursive_triggers='ON';'
    //   40: invokeinterface execSQL : (Ljava/lang/String;)V
    //   45: aload_1
    //   46: ldc 'CREATE TEMP TABLE room_table_modification_log(version INTEGER PRIMARY KEY AUTOINCREMENT, table_id INTEGER)'
    //   48: invokeinterface execSQL : (Ljava/lang/String;)V
    //   53: aload_1
    //   54: invokeinterface setTransactionSuccessful : ()V
    //   59: aload_1
    //   60: invokeinterface endTransaction : ()V
    //   65: aload_0
    //   66: aload_1
    //   67: invokevirtual syncTriggers : (Landroid/arch/persistence/db/SupportSQLiteDatabase;)V
    //   70: aload_0
    //   71: aload_1
    //   72: ldc 'DELETE FROM room_table_modification_log WHERE version NOT IN( SELECT MAX(version) FROM room_table_modification_log GROUP BY table_id)'
    //   74: invokeinterface compileStatement : (Ljava/lang/String;)Landroid/arch/persistence/db/SupportSQLiteStatement;
    //   79: putfield mCleanupStatement : Landroid/arch/persistence/db/SupportSQLiteStatement;
    //   82: aload_0
    //   83: iconst_1
    //   84: putfield mInitialized : Z
    //   87: aload_0
    //   88: monitorexit
    //   89: return
    //   90: astore_2
    //   91: aload_1
    //   92: invokeinterface endTransaction : ()V
    //   97: aload_2
    //   98: athrow
    //   99: astore_1
    //   100: aload_0
    //   101: monitorexit
    //   102: aload_1
    //   103: athrow
    // Exception table:
    //   from	to	target	type
    //   2	20	99	finally
    //   21	27	99	finally
    //   27	59	90	finally
    //   59	89	99	finally
    //   91	99	99	finally
    //   100	102	99	finally }
  
  public void refreshVersionsAsync() {
    if (this.mPendingRefresh.compareAndSet(false, true))
      ArchTaskExecutor.getInstance().executeOnDiskIO(this.mRefreshRunnable); 
  }
  
  @RestrictTo({RestrictTo.Scope.LIBRARY_GROUP})
  @WorkerThread
  public void refreshVersionsSync() {
    syncTriggers();
    this.mRefreshRunnable.run();
  }
  
  @WorkerThread
  public void removeObserver(@NonNull Observer paramObserver) {
    synchronized (this.mObserverMap) {
      ObserverWrapper observerWrapper = (ObserverWrapper)this.mObserverMap.remove(paramObserver);
      if (observerWrapper != null && this.mObservedTableTracker.onRemoved(observerWrapper.mTableIds))
        syncTriggers(); 
      return;
    } 
  }
  
  void syncTriggers() {
    if (!this.mDatabase.isOpen())
      return; 
    syncTriggers(this.mDatabase.getOpenHelper().getWritableDatabase());
  }
  
  void syncTriggers(SupportSQLiteDatabase paramSupportSQLiteDatabase) {
    if (paramSupportSQLiteDatabase.inTransaction())
      return; 
    label39: while (true) {
      int i;
      try {
        lock = this.mDatabase.getCloseLock();
        lock.lock();
        try {
          null = this.mObservedTableTracker.getTablesToSync();
          if (null == null)
            return; 
          i = null.length;
        } finally {
          lock.unlock();
        } 
      } catch (IllegalStateException paramSupportSQLiteDatabase) {
        Log.e("ROOM", "Cannot run invalidation tracker. Is the db closed?", paramSupportSQLiteDatabase);
        return;
      } catch (SQLiteException paramSupportSQLiteDatabase) {}
      while (true) {
        if (b < i) {
          Object object = SYNTHETIC_LOCAL_VARIABLE_6[b];
          if (object != true) {
            if (object == 2)
              stopTrackingTable(paramSupportSQLiteDatabase, b); 
          } else {
            startTrackingTable(paramSupportSQLiteDatabase, b);
          } 
          b++;
          continue;
        } 
        paramSupportSQLiteDatabase.setTransactionSuccessful();
        paramSupportSQLiteDatabase.endTransaction();
        this.mObservedTableTracker.onSyncCompleted();
        lock.unlock();
        continue label39;
      } 
      break;
    } 
  }
}
