package android.arch.lifecycle;

import android.support.annotation.MainThread;
import android.support.annotation.NonNull;

public class ViewModelProvider {
  private static final String DEFAULT_KEY = "android.arch.lifecycle.ViewModelProvider.DefaultKey";
  
  private final Factory mFactory;
  
  private final ViewModelStore mViewModelStore;
  
  public ViewModelProvider(@NonNull ViewModelStore paramViewModelStore, @NonNull Factory paramFactory) {
    this.mFactory = paramFactory;
    this.mViewModelStore = paramViewModelStore;
  }
  
  public ViewModelProvider(@NonNull ViewModelStoreOwner paramViewModelStoreOwner, @NonNull Factory paramFactory) { this(paramViewModelStoreOwner.getViewModelStore(), paramFactory); }
  
  @MainThread
  @NonNull
  public <T extends ViewModel> T get(@NonNull Class<T> paramClass) {
    String str = paramClass.getCanonicalName();
    if (str != null) {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.append("android.arch.lifecycle.ViewModelProvider.DefaultKey:");
      stringBuilder.append(str);
      return (T)get(stringBuilder.toString(), paramClass);
    } 
    throw new IllegalArgumentException("Local and anonymous classes can not be ViewModels");
  }
  
  @MainThread
  @NonNull
  public <T extends ViewModel> T get(@NonNull String paramString, @NonNull Class<T> paramClass) {
    ViewModel viewModel2 = this.mViewModelStore.get(paramString);
    if (paramClass.isInstance(viewModel2))
      return (T)viewModel2; 
    ViewModel viewModel1 = this.mFactory.create(paramClass);
    this.mViewModelStore.put(paramString, viewModel1);
    return (T)viewModel1;
  }
}
