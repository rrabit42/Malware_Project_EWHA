package com.google.android.gms.auth.api.credentials;

import android.os.Parcel;
import android.os.Parcelable;
import android.support.annotation.NonNull;
import android.text.TextUtils;
import com.google.android.gms.common.internal.Objects;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.ReflectedParcelable;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Class;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Constructor;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Field;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Param;
import com.google.android.gms.common.internal.safeparcel.SafeParcelable.Reserved;

@Class(creator = "IdTokenCreator")
@Reserved({1000})
public final class IdToken extends AbstractSafeParcelable implements ReflectedParcelable {
  public static final Parcelable.Creator<IdToken> CREATOR = new zzk();
  
  @NonNull
  @Field(getter = "getIdToken", id = 2)
  private final String zzak;
  
  @NonNull
  @Field(getter = "getAccountType", id = 1)
  private final String zzr;
  
  @Constructor
  public IdToken(@NonNull @Param(id = 1) String paramString1, @NonNull @Param(id = 2) String paramString2) {
    Preconditions.checkArgument(TextUtils.isEmpty(paramString1) ^ true, "account type string cannot be null or empty");
    Preconditions.checkArgument(TextUtils.isEmpty(paramString2) ^ true, "id token string cannot be null or empty");
    this.zzr = paramString1;
    this.zzak = paramString2;
  }
  
  public final boolean equals(Object paramObject) {
    if (this == paramObject)
      return true; 
    if (!(paramObject instanceof IdToken))
      return false; 
    paramObject = (IdToken)paramObject;
    return (Objects.equal(this.zzr, paramObject.zzr) && Objects.equal(this.zzak, paramObject.zzak));
  }
  
  @NonNull
  public final String getAccountType() { return this.zzr; }
  
  @NonNull
  public final String getIdToken() { return this.zzak; }
  
  public final void writeToParcel(Parcel paramParcel, int paramInt) {
    paramInt = SafeParcelWriter.beginObjectHeader(paramParcel);
    SafeParcelWriter.writeString(paramParcel, 1, getAccountType(), false);
    SafeParcelWriter.writeString(paramParcel, 2, getIdToken(), false);
    SafeParcelWriter.finishObjectHeader(paramParcel, paramInt);
  }
}
