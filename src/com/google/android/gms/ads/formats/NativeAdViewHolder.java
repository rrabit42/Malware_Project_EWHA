package com.google.android.gms.ads.formats;

import android.os.RemoteException;
import android.view.View;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.dynamic.IObjectWrapper;
import com.google.android.gms.dynamic.ObjectWrapper;
import com.google.android.gms.internal.ads.zzane;
import com.google.android.gms.internal.ads.zzkb;
import com.google.android.gms.internal.ads.zzqf;
import java.lang.ref.WeakReference;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;

public final class NativeAdViewHolder {
  public static WeakHashMap<View, NativeAdViewHolder> zzvk = new WeakHashMap();
  
  private zzqf zzvj;
  
  private WeakReference<View> zzvl;
  
  public NativeAdViewHolder(View paramView, Map<String, View> paramMap1, Map<String, View> paramMap2) {
    Preconditions.checkNotNull(paramView, "ContainerView must not be null");
    if (paramView instanceof NativeAdView || paramView instanceof UnifiedNativeAdView) {
      zzane.e("The provided containerView is of type of NativeAdView, which cannot be usedwith NativeAdViewHolder.");
      return;
    } 
    if (zzvk.get(paramView) != null) {
      zzane.e("The provided containerView is already in use with another NativeAdViewHolder.");
      return;
    } 
    zzvk.put(paramView, this);
    this.zzvl = new WeakReference(paramView);
    paramMap1 = zzb(paramMap1);
    paramMap2 = zzb(paramMap2);
    this.zzvj = zzkb.zzig().zza(paramView, paramMap1, paramMap2);
  }
  
  private final void zza(IObjectWrapper paramIObjectWrapper) {
    WeakReference weakReference = this.zzvl;
    if (weakReference != null) {
      View view = (View)weakReference.get();
    } else {
      weakReference = null;
    } 
    if (weakReference == null) {
      zzane.zzdk("NativeAdViewHolder.setNativeAd containerView doesn't exist, returning");
      return;
    } 
    if (!zzvk.containsKey(weakReference))
      zzvk.put(weakReference, this); 
    zzqf zzqf1 = this.zzvj;
    if (zzqf1 != null)
      try {
        zzqf1.zza(paramIObjectWrapper);
        return;
      } catch (RemoteException paramIObjectWrapper) {
        zzane.zzb("Unable to call setNativeAd on delegate", paramIObjectWrapper);
      }  
  }
  
  private static HashMap<String, View> zzb(Map<String, View> paramMap) { return (paramMap == null) ? new HashMap() : new HashMap(paramMap); }
  
  public final void setClickConfirmingView(View paramView) {
    try {
      this.zzvj.zzc(ObjectWrapper.wrap(paramView));
      return;
    } catch (RemoteException paramView) {
      zzane.zzb("Unable to call setClickConfirmingView on delegate", paramView);
      return;
    } 
  }
  
  public final void setNativeAd(NativeAd paramNativeAd) { zza((IObjectWrapper)paramNativeAd.zzbe()); }
  
  public final void setNativeAd(UnifiedNativeAd paramUnifiedNativeAd) { zza((IObjectWrapper)paramUnifiedNativeAd.zzbe()); }
  
  public final void unregisterNativeAd() {
    zzqf1 = this.zzvj;
    if (zzqf1 != null)
      try {
        zzqf1.unregisterNativeAd();
      } catch (RemoteException zzqf1) {
        zzane.zzb("Unable to call unregisterNativeAd on delegate", zzqf1);
      }  
    WeakReference weakReference = this.zzvl;
    if (weakReference != null) {
      View view = (View)weakReference.get();
    } else {
      weakReference = null;
    } 
    if (weakReference != null)
      zzvk.remove(weakReference); 
  }
}
