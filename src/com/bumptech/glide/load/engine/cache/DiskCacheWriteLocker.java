package com.bumptech.glide.load.engine.cache;

import com.bumptech.glide.load.Key;
import java.util.HashMap;
import java.util.Map;

final class DiskCacheWriteLocker {
  private final Map<Key, WriteLock> locks = new HashMap();
  
  private final WriteLockPool writeLockPool = new WriteLockPool(null);
  
  void acquire(Key paramKey) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield locks : Ljava/util/Map;
    //   6: aload_1
    //   7: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   12: checkcast com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker$WriteLock
    //   15: astore_3
    //   16: aload_3
    //   17: astore_2
    //   18: aload_3
    //   19: ifnonnull -> 42
    //   22: aload_0
    //   23: getfield writeLockPool : Lcom/bumptech/glide/load/engine/cache/DiskCacheWriteLocker$WriteLockPool;
    //   26: invokevirtual obtain : ()Lcom/bumptech/glide/load/engine/cache/DiskCacheWriteLocker$WriteLock;
    //   29: astore_2
    //   30: aload_0
    //   31: getfield locks : Ljava/util/Map;
    //   34: aload_1
    //   35: aload_2
    //   36: invokeinterface put : (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   41: pop
    //   42: aload_2
    //   43: aload_2
    //   44: getfield interestedThreads : I
    //   47: iconst_1
    //   48: iadd
    //   49: putfield interestedThreads : I
    //   52: aload_0
    //   53: monitorexit
    //   54: aload_2
    //   55: getfield lock : Ljava/util/concurrent/locks/Lock;
    //   58: invokeinterface lock : ()V
    //   63: return
    //   64: astore_1
    //   65: aload_0
    //   66: monitorexit
    //   67: aload_1
    //   68: athrow
    // Exception table:
    //   from	to	target	type
    //   2	16	64	finally
    //   22	42	64	finally
    //   42	54	64	finally
    //   65	67	64	finally }
  
  void release(Key paramKey) { // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield locks : Ljava/util/Map;
    //   6: aload_1
    //   7: invokeinterface get : (Ljava/lang/Object;)Ljava/lang/Object;
    //   12: checkcast com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker$WriteLock
    //   15: astore_3
    //   16: aload_3
    //   17: ifnull -> 162
    //   20: aload_3
    //   21: getfield interestedThreads : I
    //   24: ifgt -> 30
    //   27: goto -> 162
    //   30: aload_3
    //   31: getfield interestedThreads : I
    //   34: iconst_1
    //   35: isub
    //   36: istore_2
    //   37: aload_3
    //   38: iload_2
    //   39: putfield interestedThreads : I
    //   42: iload_2
    //   43: ifne -> 150
    //   46: aload_0
    //   47: getfield locks : Ljava/util/Map;
    //   50: aload_1
    //   51: invokeinterface remove : (Ljava/lang/Object;)Ljava/lang/Object;
    //   56: checkcast com/bumptech/glide/load/engine/cache/DiskCacheWriteLocker$WriteLock
    //   59: astore #4
    //   61: aload #4
    //   63: aload_3
    //   64: invokevirtual equals : (Ljava/lang/Object;)Z
    //   67: ifeq -> 82
    //   70: aload_0
    //   71: getfield writeLockPool : Lcom/bumptech/glide/load/engine/cache/DiskCacheWriteLocker$WriteLockPool;
    //   74: aload #4
    //   76: invokevirtual offer : (Lcom/bumptech/glide/load/engine/cache/DiskCacheWriteLocker$WriteLock;)V
    //   79: goto -> 150
    //   82: new java/lang/StringBuilder
    //   85: dup
    //   86: invokespecial <init> : ()V
    //   89: astore #5
    //   91: aload #5
    //   93: ldc 'Removed the wrong lock, expected to remove: '
    //   95: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   98: pop
    //   99: aload #5
    //   101: aload_3
    //   102: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   105: pop
    //   106: aload #5
    //   108: ldc ', but actually removed: '
    //   110: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   113: pop
    //   114: aload #5
    //   116: aload #4
    //   118: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   121: pop
    //   122: aload #5
    //   124: ldc ', key: '
    //   126: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   129: pop
    //   130: aload #5
    //   132: aload_1
    //   133: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   136: pop
    //   137: new java/lang/IllegalStateException
    //   140: dup
    //   141: aload #5
    //   143: invokevirtual toString : ()Ljava/lang/String;
    //   146: invokespecial <init> : (Ljava/lang/String;)V
    //   149: athrow
    //   150: aload_0
    //   151: monitorexit
    //   152: aload_3
    //   153: getfield lock : Ljava/util/concurrent/locks/Lock;
    //   156: invokeinterface unlock : ()V
    //   161: return
    //   162: new java/lang/StringBuilder
    //   165: dup
    //   166: invokespecial <init> : ()V
    //   169: astore #4
    //   171: aload #4
    //   173: ldc 'Cannot release a lock that is not held, key: '
    //   175: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   178: pop
    //   179: aload #4
    //   181: aload_1
    //   182: invokevirtual append : (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    //   185: pop
    //   186: aload #4
    //   188: ldc ', interestedThreads: '
    //   190: invokevirtual append : (Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   193: pop
    //   194: aload_3
    //   195: ifnonnull -> 203
    //   198: iconst_0
    //   199: istore_2
    //   200: goto -> 208
    //   203: aload_3
    //   204: getfield interestedThreads : I
    //   207: istore_2
    //   208: aload #4
    //   210: iload_2
    //   211: invokevirtual append : (I)Ljava/lang/StringBuilder;
    //   214: pop
    //   215: new java/lang/IllegalArgumentException
    //   218: dup
    //   219: aload #4
    //   221: invokevirtual toString : ()Ljava/lang/String;
    //   224: invokespecial <init> : (Ljava/lang/String;)V
    //   227: athrow
    //   228: astore_1
    //   229: aload_0
    //   230: monitorexit
    //   231: aload_1
    //   232: athrow
    // Exception table:
    //   from	to	target	type
    //   2	16	228	finally
    //   20	27	228	finally
    //   30	42	228	finally
    //   46	79	228	finally
    //   82	150	228	finally
    //   150	152	228	finally
    //   162	194	228	finally
    //   203	208	228	finally
    //   208	228	228	finally
    //   229	231	228	finally }
}
