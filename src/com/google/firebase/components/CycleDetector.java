package com.google.firebase.components;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

class CycleDetector {
  static void detect(List<Component<?>> paramList) {
    Set set1 = toGraph(paramList);
    Set set2 = getRoots(set1);
    byte b = 0;
    label26: while (!set2.isEmpty()) {
      ComponentNode componentNode = (ComponentNode)set2.iterator().next();
      set2.remove(componentNode);
      byte b1 = b + true;
      Iterator iterator = componentNode.getDependencies().iterator();
      while (true) {
        b = b1;
        if (iterator.hasNext()) {
          ComponentNode componentNode1 = (ComponentNode)iterator.next();
          componentNode1.removeDependent(componentNode);
          if (componentNode1.isRoot())
            set2.add(componentNode1); 
          continue;
        } 
        continue label26;
      } 
    } 
    if (b == paramList.size())
      return; 
    paramList = new ArrayList<Component<?>>();
    for (ComponentNode componentNode : set1) {
      if (!componentNode.isRoot() && !componentNode.isLeaf())
        paramList.add(componentNode.getComponent()); 
    } 
    DependencyCycleException dependencyCycleException = new DependencyCycleException(paramList);
    throw dependencyCycleException;
  }
  
  private static Set<ComponentNode> getRoots(Set<ComponentNode> paramSet) {
    HashSet hashSet = new HashSet();
    for (ComponentNode componentNode : paramSet) {
      if (componentNode.isRoot())
        hashSet.add(componentNode); 
    } 
    return hashSet;
  }
  
  private static Set<ComponentNode> toGraph(List<Component<?>> paramList) {
    HashMap hashMap = new HashMap(paramList.size());
    for (Component component : paramList) {
      ComponentNode componentNode = new ComponentNode(component);
      for (Class clazz : component.getProvidedInterfaces()) {
        Dep dep = new Dep(clazz, component.isValue() ^ true, null);
        if (!hashMap.containsKey(dep))
          hashMap.put(dep, new HashSet()); 
        Set set = (Set)hashMap.get(dep);
        if (set.isEmpty() || Dep.access$100(dep)) {
          set.add(componentNode);
          continue;
        } 
        throw new IllegalArgumentException(String.format("Multiple components provide %s.", new Object[] { clazz }));
      } 
    } 
    Iterator iterator1 = hashMap.values().iterator();
    while (iterator1.hasNext()) {
      for (ComponentNode componentNode : (Set)iterator1.next()) {
        for (Dependency dependency : componentNode.getComponent().getDependencies()) {
          if (!dependency.isDirectInjection())
            continue; 
          Set set = (Set)hashMap.get(new Dep(dependency.getInterface(), dependency.isSet(), null));
          if (set == null)
            continue; 
          for (ComponentNode componentNode1 : set) {
            componentNode.addDependency(componentNode1);
            componentNode1.addDependent(componentNode);
          } 
        } 
      } 
    } 
    HashSet hashSet = new HashSet();
    Iterator iterator2 = hashMap.values().iterator();
    while (iterator2.hasNext())
      hashSet.addAll((Set)iterator2.next()); 
    return hashSet;
  }
}
