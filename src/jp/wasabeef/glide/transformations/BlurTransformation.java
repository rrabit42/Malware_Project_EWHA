package jp.wasabeef.glide.transformations;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.os.Build;
import android.renderscript.RSRuntimeException;
import com.bumptech.glide.Glide;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.resource.bitmap.BitmapResource;
import jp.wasabeef.glide.transformations.internal.FastBlur;
import jp.wasabeef.glide.transformations.internal.RSBlur;

public class BlurTransformation extends Object implements Transformation<Bitmap> {
  private static int DEFAULT_DOWN_SAMPLING = 1;
  
  private static int MAX_RADIUS = 25;
  
  private BitmapPool mBitmapPool;
  
  private Context mContext;
  
  private int mRadius;
  
  private int mSampling;
  
  static  {
  
  }
  
  public BlurTransformation(Context paramContext) { this(paramContext, Glide.get(paramContext).getBitmapPool(), MAX_RADIUS, DEFAULT_DOWN_SAMPLING); }
  
  public BlurTransformation(Context paramContext, int paramInt) { this(paramContext, Glide.get(paramContext).getBitmapPool(), paramInt, DEFAULT_DOWN_SAMPLING); }
  
  public BlurTransformation(Context paramContext, int paramInt1, int paramInt2) { this(paramContext, Glide.get(paramContext).getBitmapPool(), paramInt1, paramInt2); }
  
  public BlurTransformation(Context paramContext, BitmapPool paramBitmapPool) { this(paramContext, paramBitmapPool, MAX_RADIUS, DEFAULT_DOWN_SAMPLING); }
  
  public BlurTransformation(Context paramContext, BitmapPool paramBitmapPool, int paramInt) { this(paramContext, paramBitmapPool, paramInt, DEFAULT_DOWN_SAMPLING); }
  
  public BlurTransformation(Context paramContext, BitmapPool paramBitmapPool, int paramInt1, int paramInt2) {
    this.mContext = paramContext.getApplicationContext();
    this.mBitmapPool = paramBitmapPool;
    this.mRadius = paramInt1;
    this.mSampling = paramInt2;
  }
  
  public String getId() {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("BlurTransformation(radius=");
    stringBuilder.append(this.mRadius);
    stringBuilder.append(", sampling=");
    stringBuilder.append(this.mSampling);
    stringBuilder.append(")");
    return stringBuilder.toString();
  }
  
  public Resource<Bitmap> transform(Resource<Bitmap> paramResource, int paramInt1, int paramInt2) {
    Bitmap bitmap3 = (Bitmap)paramResource.get();
    int i = bitmap3.getWidth();
    paramInt1 = bitmap3.getHeight();
    paramInt2 = this.mSampling;
    i /= paramInt2;
    paramInt1 /= paramInt2;
    Bitmap bitmap2 = this.mBitmapPool.get(i, paramInt1, Bitmap.Config.ARGB_8888);
    Bitmap bitmap1 = bitmap2;
    if (bitmap2 == null)
      bitmap1 = Bitmap.createBitmap(i, paramInt1, Bitmap.Config.ARGB_8888); 
    canvas = new Canvas(bitmap1);
    paramInt1 = this.mSampling;
    canvas.scale(1.0F / paramInt1, 1.0F / paramInt1);
    Paint paint = new Paint();
    paint.setFlags(2);
    canvas.drawBitmap(bitmap3, 0.0F, 0.0F, paint);
    if (Build.VERSION.SDK_INT >= 18) {
      try {
        Bitmap bitmap = RSBlur.blur(this.mContext, bitmap1, this.mRadius);
        bitmap1 = bitmap;
      } catch (RSRuntimeException canvas) {
        bitmap1 = FastBlur.blur(bitmap1, this.mRadius, true);
      } 
    } else {
      bitmap1 = FastBlur.blur(bitmap1, this.mRadius, true);
    } 
    return BitmapResource.obtain(bitmap1, this.mBitmapPool);
  }
}
