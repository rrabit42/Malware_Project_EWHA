package jp.wasabeef.glide.transformations;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Shader;
import com.bumptech.glide.Glide;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.resource.bitmap.BitmapResource;

public class CropCircleTransformation extends Object implements Transformation<Bitmap> {
  private BitmapPool mBitmapPool;
  
  public CropCircleTransformation(Context paramContext) { this(Glide.get(paramContext).getBitmapPool()); }
  
  public CropCircleTransformation(BitmapPool paramBitmapPool) { this.mBitmapPool = paramBitmapPool; }
  
  public String getId() { return "CropCircleTransformation()"; }
  
  public Resource<Bitmap> transform(Resource<Bitmap> paramResource, int paramInt1, int paramInt2) {
    Bitmap bitmap3 = (Bitmap)paramResource.get();
    paramInt1 = Math.min(bitmap3.getWidth(), bitmap3.getHeight());
    paramInt2 = (bitmap3.getWidth() - paramInt1) / 2;
    int i = (bitmap3.getHeight() - paramInt1) / 2;
    Bitmap bitmap2 = this.mBitmapPool.get(paramInt1, paramInt1, Bitmap.Config.ARGB_8888);
    Bitmap bitmap1 = bitmap2;
    if (bitmap2 == null)
      bitmap1 = Bitmap.createBitmap(paramInt1, paramInt1, Bitmap.Config.ARGB_8888); 
    Canvas canvas = new Canvas(bitmap1);
    Paint paint = new Paint();
    BitmapShader bitmapShader = new BitmapShader(bitmap3, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
    if (paramInt2 != 0 || i != 0) {
      Matrix matrix = new Matrix();
      matrix.setTranslate(-paramInt2, -i);
      bitmapShader.setLocalMatrix(matrix);
    } 
    paint.setShader(bitmapShader);
    paint.setAntiAlias(true);
    float f = paramInt1 / 2.0F;
    canvas.drawCircle(f, f, f, paint);
    return BitmapResource.obtain(bitmap1, this.mBitmapPool);
  }
}
